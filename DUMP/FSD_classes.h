// Class FSD.AcceptInviteBlueprintCallProxy
// Size: 0x88 (Inherited: 0x30)
struct UAcceptInviteBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char pad_58[0x30]; // 0x58(0x30)

	struct UAcceptInviteBlueprintCallProxy* AcceptInvite(struct UObject* WorldContextObject, struct FString ListName, struct FString UserId); // Function FSD.AcceptInviteBlueprintCallProxy.AcceptInvite // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107af20
};

// Class FSD.Objective
// Size: 0x178 (Inherited: 0xb0)
struct UObjective : UActorComponent {
	struct FMulticastInlineDelegate OnObjectiveUpdated; // 0xb0(0x10)
	char pad_C0[0x8]; // 0xc0(0x08)
	struct UObjectiveWidget* ObjectiveWidgetClass; // 0xc8(0x08)
	struct FMissionShouts MissionShouts; // 0xd0(0x38)
	struct FText MissionDescription; // 0x108(0x18)
	int32_t CompletionRewardInCredits; // 0x120(0x04)
	int32_t CompletionRewardInXP; // 0x124(0x04)
	bool ScaleObjectiveToMission; // 0x128(0x01)
	bool RequiredReturnObjectiveCompleted; // 0x129(0x01)
	char pad_12A[0x6]; // 0x12a(0x06)
	struct UMissionStat* ObjectiveCompletedStat; // 0x130(0x08)
	SoftClassProperty OptionalObjectiveWidgetClass; // 0x138(0x28)
	int32_t IsPrimaryObjective; // 0x160(0x04)
	float MissionScale; // 0x164(0x04)
	struct TArray<struct UBiome*> BannedInBiomes; // 0x168(0x10)

	void SignalObjectiveUpdated(); // Function FSD.Objective.SignalObjectiveUpdated // (Final|Native|Protected|BlueprintCallable) // @ game+0x10c9930
	void Receive_StartTracking(); // Function FSD.Objective.Receive_StartTracking // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_IsPrimaryObjective(); // Function FSD.Objective.OnRep_IsPrimaryObjective // (Final|Native|Protected) // @ game+0x11a2220
	bool IsTutorialObjective(); // Function FSD.Objective.IsTutorialObjective // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x109f010
	bool IsPrimary(); // Function FSD.Objective.IsPrimary // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a1e30
	bool IsObjectiveResource(struct UResourceData* InResource); // Function FSD.Objective.IsObjectiveResource // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x11a1d90
	bool IsFinalBattle(); // Function FSD.Objective.IsFinalBattle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a1d60
	bool IsCompleted(); // Function FSD.Objective.IsCompleted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a1d30
	bool HasReplicated(); // Function FSD.Objective.HasReplicated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a1d00
	struct UObjectiveWidget* GetWidgetClassOrDefault(struct UObjectiveWidget* DefaultWidgetClass); // Function FSD.Objective.GetWidgetClassOrDefault // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11a1c70
	int32_t GetRewardXP(); // Function FSD.Objective.GetRewardXP // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a1c00
	struct FCreditsReward GetRewardCredits(); // Function FSD.Objective.GetRewardCredits // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a1b70
	struct UOptionalObjectiveWidget* GetOptionalMissionWidget(); // Function FSD.Objective.GetOptionalMissionWidget // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x11a1b30
	struct FText GetObjectiveText(); // Function FSD.Objective.GetObjectiveText // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a1a90
	struct UTexture2D* GetObjectiveIconFromClass(struct UObjective* objectiveClass); // Function FSD.Objective.GetObjectiveIconFromClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11a1a10
	struct UTexture2D* GetObjectiveIcon(); // Function FSD.Objective.GetObjectiveIcon // (Event|Public|BlueprintEvent|Const) // @ game+0x158ca90
	struct FText GetObjectiveDescriptionFromClass(struct UObjective* objectiveClass, float missionLength); // Function FSD.Objective.GetObjectiveDescriptionFromClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11a18f0
	struct FText GetObjectiveDescription(float missionLength); // Function FSD.Objective.GetObjectiveDescription // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	int32_t GetObjectiveAmountFromClass(struct UObjective* objectiveClass, float missionLength); // Function FSD.Objective.GetObjectiveAmountFromClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11a1820
	int32_t GetObjectiveAmount(float missionLength); // Function FSD.Objective.GetObjectiveAmount // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x158ca90
	struct FObjectiveMissionIcon GetMissionIcon(); // Function FSD.Objective.GetMissionIcon // (Event|Public|BlueprintEvent|Const) // @ game+0x158ca90
	struct FText GetInMissionText(); // Function FSD.Objective.GetInMissionText // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x11a1640
	struct FText GetInMissionCounterText(); // Function FSD.Objective.GetInMissionCounterText // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x11a15a0
	struct UTexture2D* GetInMissionCounterIcon(); // Function FSD.Objective.GetInMissionCounterIcon // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x11a1570
};

// Class FSD.ActivationOjective
// Size: 0x180 (Inherited: 0x178)
struct UActivationOjective : UObjective {
	int32_t ObjectivesFound; // 0x178(0x04)
	int32_t ObjectivesToFind; // 0x17c(0x04)

	void OnRep_ObjectivesToFind(int32_t prevAmount); // Function FSD.ActivationOjective.OnRep_ObjectivesToFind // (Final|Native|Protected) // @ game+0x107ea10
	void OnRep_ObjectivesFound(int32_t prevAmount); // Function FSD.ActivationOjective.OnRep_ObjectivesFound // (Final|Native|Protected) // @ game+0x107ea10
};

// Class FSD.ActivationObject
// Size: 0x230 (Inherited: 0x220)
struct AActivationObject : AActor {
	struct USingleUsableComponent* Usable; // 0x220(0x08)
	bool HasBeenUsed; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)

	void OnUsedBy(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.ActivationObject.OnUsedBy // (Final|Native|Protected) // @ game+0x107ea90
};

// Class FSD.ActivitySubSystem
// Size: 0x58 (Inherited: 0x30)
struct UActivitySubSystem : UGameInstanceSubsystem {
	char pad_30[0x28]; // 0x30(0x28)

	void StartActivity(struct APlayerState* PlayerState, struct UGameActivityType* activity); // Function FSD.ActivitySubSystem.StartActivity // (Final|Native|Public|BlueprintCallable) // @ game+0x107f0c0
	void ShowPlayerReviewUI(bool ReviewActiveMatch); // Function FSD.ActivitySubSystem.ShowPlayerReviewUI // (Final|Native|Public|BlueprintCallable) // @ game+0x107f030
	bool PlayerReviewUIAvailable(bool ReviewActiveMatch); // Function FSD.ActivitySubSystem.PlayerReviewUIAvailable // (Final|Native|Public|BlueprintCallable) // @ game+0x107ee80
	void EndActivity(struct APlayerState* PlayerState, struct UGameActivityType* activity); // Function FSD.ActivitySubSystem.EndActivity // (Final|Native|Public|BlueprintCallable) // @ game+0x107be80
};

// Class FSD.GameActivitySettings
// Size: 0x40 (Inherited: 0x30)
struct UGameActivitySettings : UDataAsset {
	struct TArray<struct TSoftObjectPtr<struct UGameActivityType>> GameActivites; // 0x30(0x10)
};

// Class FSD.GameActivityType
// Size: 0x58 (Inherited: 0x30)
struct UGameActivityType : UDataAsset {
	struct FString ActivityId; // 0x30(0x10)
	enum class EActivityType ActivityType; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct TArray<struct FGameActivitySubTask> SubTasks; // 0x48(0x10)
};

// Class FSD.GameActivityAssignmentType
// Size: 0x60 (Inherited: 0x58)
struct UGameActivityAssignmentType : UGameActivityType {
	char pad_58[0x8]; // 0x58(0x08)
};

// Class FSD.GameActivityMissionType
// Size: 0x80 (Inherited: 0x58)
struct UGameActivityMissionType : UGameActivityType {
	struct TSoftObjectPtr<struct UMissionTemplate> ActivityMission; // 0x58(0x28)
};

// Class FSD.Reward
// Size: 0x30 (Inherited: 0x30)
struct UReward : UDataAsset {
};

// Class FSD.ActivityCardReward
// Size: 0x38 (Inherited: 0x30)
struct UActivityCardReward : UReward {
	struct UGameActivityType* activity; // 0x30(0x08)
};

// Class FSD.ActorFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UActorFunctionLibrary : UBlueprintFunctionLibrary {

	void UnlockSpecificCharacters(struct UObject* WorldContextObject, struct TArray<struct APlayerCharacter*> Characters, enum class ECharacterState UnlockIf, enum class ECharacterState UnlockTo); // Function FSD.ActorFunctionLibrary.UnlockSpecificCharacters // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x107f2c0
	void UnlockCharacters(struct UObject* WorldContextObject); // Function FSD.ActorFunctionLibrary.UnlockCharacters // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107f250
	float TimeSince(struct UObject* WorldContextObject, float Time); // Function FSD.ActorFunctionLibrary.TimeSince // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107f180
	void SetScalarParameters(struct FName ParameterName, float Value, struct TArray<struct UMaterialInstanceDynamic*> Materials); // Function FSD.ActorFunctionLibrary.SetScalarParameters // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x107ef10
	void PlayCueOnClient(struct APlayerController* Target, struct USoundCue* cue); // Function FSD.ActorFunctionLibrary.PlayCueOnClient // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x107edd0
	void PlayCueOnAll(struct UObject* WorldContextObject, struct USoundCue* cue); // Function FSD.ActorFunctionLibrary.PlayCueOnAll // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x107ed20
	float PingPong(float Time, float Length, bool normalize); // Function FSD.ActorFunctionLibrary.PingPong // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107ec20
	float MoveTowards(float current, float End, float step); // Function FSD.ActorFunctionLibrary.MoveTowards // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107e900
	void LockSpecificCharactersIfState(struct UObject* WorldContextObject, struct TArray<struct APlayerCharacter*> Characters, enum class ECharacterState stateToLock); // Function FSD.ActorFunctionLibrary.LockSpecificCharactersIfState // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x107e7b0
	void LockSpecificCharacters(struct UObject* WorldContextObject, struct TArray<struct APlayerCharacter*> Characters); // Function FSD.ActorFunctionLibrary.LockSpecificCharacters // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x107e6a0
	bool LockSpecificCharacterIfState(struct UObject* WorldContextObject, struct APlayerCharacter* Character, enum class ECharacterState LockIf, enum class ECharacterState LockTo); // Function FSD.ActorFunctionLibrary.LockSpecificCharacterIfState // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x107e570
	void LockCharacters(struct UObject* WorldContextObject); // Function FSD.ActorFunctionLibrary.LockCharacters // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x107e500
	struct UWindowWidget* LoadWindowWidgetClass(SoftClassProperty WidgetClass); // Function FSD.ActorFunctionLibrary.LoadWindowWidgetClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107e3f0
	struct UUserWidget* LoadWidgetClass(SoftClassProperty WidgetClass); // Function FSD.ActorFunctionLibrary.LoadWidgetClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107e2e0
	struct UObject* LoadClass(SoftClassProperty softReference); // Function FSD.ActorFunctionLibrary.LoadClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107e1e0
	void KillActorWithEffects(struct AActor* Actor, struct USceneComponent* visualsToHide, struct USoundCue* deathSound, struct UFXSystemAsset* deathParticles, float particleScale, struct UPathfinderCollisionComponent* pathColliderToDisable); // Function FSD.ActorFunctionLibrary.KillActorWithEffects // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107e030
	bool IsWeakPoint(struct UFSDPhysicalMaterial* Material); // Function FSD.ActorFunctionLibrary.IsWeakPoint // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107dfb0
	bool IsSingleplayer(struct UObject* WorldContextObject); // Function FSD.ActorFunctionLibrary.IsSingleplayer // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107df30
	bool IsInRangeOfLocalPlayer(struct AActor* toActor, float MinDistance, float MaxDistance); // Function FSD.ActorFunctionLibrary.IsInRangeOfLocalPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107de10
	bool IsCloseToLocalPlayer(struct AActor* toActor, float Distance); // Function FSD.ActorFunctionLibrary.IsCloseToLocalPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107dd40
	int32_t GetTotalHeroLevels(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.ActorFunctionLibrary.GetTotalHeroLevels // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107dc80
	struct FGuid GetSaveGameIDFromCharacterID(struct UPlayerCharacterID* characterID); // Function FSD.ActorFunctionLibrary.GetSaveGameIDFromCharacterID // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x107db60
	struct FGuid GetSavegameID(struct UObject* objectClass); // Function FSD.ActorFunctionLibrary.GetSavegameID // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x107dbf0
	struct TArray<struct APlayerCharacter*> GetPlayersInRange(struct UObject* WorldContextObject, struct FVector Origin, float Radius, bool MustBeAlive); // Function FSD.ActorFunctionLibrary.GetPlayersInRange // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x107d9b0
	struct UItemID* GetItemID(struct AActor* itemClass); // Function FSD.ActorFunctionLibrary.GetItemID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d8a0
	float GetHeroXP(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.ActorFunctionLibrary.GetHeroXP // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d7e0
	struct FText GetHeroSwitchToMessage(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroSwitchToMessage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d6c0
	struct FString GetHeroSourceName(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroSourceName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d5f0
	float GetHeroProgress(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.ActorFunctionLibrary.GetHeroProgress // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d530
	struct FText GetHeroName(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d450
	int32_t GetHeroLevel(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.ActorFunctionLibrary.GetHeroLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d390
	struct UInventoryList* GetHeroInventoryList(struct UPlayerCharacterID* characterID); // Function FSD.ActorFunctionLibrary.GetHeroInventoryList // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d310
	struct FHeroInfo GetHeroInfo(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroInfo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d1b0
	struct UTexture2D* GetHeroImageSmall(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroImageSmall // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d130
	struct UTexture2D* GetHeroImageFullSize(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroImageFullSize // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d0b0
	struct UTexture2D* GetHeroImage(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroImage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d030
	struct FLinearColor GetHeroColor(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetHeroColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x107cfa0
	struct UActorComponent* GetComponentFromClass(struct AActor* Actor, struct UActorComponent* ComponentClass); // Function FSD.ActorFunctionLibrary.GetComponentFromClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107ce60
	struct UActorComponent* GetComponentByClass(struct AActor* Actor, struct UActorComponent* ComponentClass); // Function FSD.ActorFunctionLibrary.GetComponentByClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107cda0
	struct UPlayerCharacterID* GetCharacterIDFromCharacter(struct APlayerCharacter* Character); // Function FSD.ActorFunctionLibrary.GetCharacterIDFromCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107cd20
	struct UPlayerCharacterID* GetCharacterID(struct APlayerCharacter* playerClass); // Function FSD.ActorFunctionLibrary.GetCharacterID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107cca0
	struct TArray<struct APlayerCharacter*> GetAllPlayerCharacters(struct UObject* WorldContext); // Function FSD.ActorFunctionLibrary.GetAllPlayerCharacters // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107cbd0
	struct FVector GetActorTargetCenter(struct AActor* TargetActor); // Function FSD.ActorFunctionLibrary.GetActorTargetCenter // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x107cb40
	void FSDRemoveBlendable(struct UPostProcessComponent* PostProcessComponent, struct TScriptInterface<None> InBlendableObject); // Function FSD.ActorFunctionLibrary.FSDRemoveBlendable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107c1a0
	void FSDRemoveAllWidgets(struct UObject* WorldContextObject); // Function FSD.ActorFunctionLibrary.FSDRemoveAllWidgets // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107c130
	void FSDDumpCallStack(struct FString Msg); // Function FSD.ActorFunctionLibrary.FSDDumpCallStack // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107c0a0
	struct APlayerCharacter* FindNearestPlayerCharacter(struct UObject* WorldContextObject, struct FVector fromLocation, float MaxRadius, bool MustBeAlive, bool MustBeUnparalyzed, bool MustHaveLineOfSight); // Function FSD.ActorFunctionLibrary.FindNearestPlayerCharacter // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x107c970
	struct FVector FindLatejoinDroppodLocation(struct AFSDGameMode* GameMode); // Function FSD.ActorFunctionLibrary.FindLatejoinDroppodLocation // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x107c8e0
	struct AActor* FindClosestEnemyFromLocation(struct FVector fromLocation, float range, bool LineOfSightCheck, struct UObject* WorldContextObject, struct TArray<struct AActor*> IgnoredActors, struct FVector Offset); // Function FSD.ActorFunctionLibrary.FindClosestEnemyFromLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x107c6e0
	struct AActor* FindClosestEnemyFromActor(struct AActor* FromActor, float range, bool LineOfSightCheck, struct FGameplayTagQuery tagQuery, struct FVector Offset); // Function FSD.ActorFunctionLibrary.FindClosestEnemyFromActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x107c4d0
	struct FVector FindCharacterTeleportLocation(struct UObject* WorldContextObject, struct FVector closeToLocation, float desiredDistance); // Function FSD.ActorFunctionLibrary.FindCharacterTeleportLocation // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x107c3b0
	void FadeMaterials(struct UObject* WorldContextObject, struct UMeshComponent* Mesh, float Duration); // Function FSD.ActorFunctionLibrary.FadeMaterials // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x107c2a0
	float EvaluateRuntimeCurve(struct UObject* WorldContextObject, struct FRuntimeFloatCurve Curve, float Time); // Function FSD.ActorFunctionLibrary.EvaluateRuntimeCurve // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x107bf40
	void DissolveMaterials(struct UObject* WorldContextObject, struct UMeshComponent* Mesh, float Duration); // Function FSD.ActorFunctionLibrary.DissolveMaterials // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x107bd70
	void DamagePlayersInArea(struct FVector Origin, struct AActor* Instigator, float Damage, float Radius, struct UDamageClass* DamageClass); // Function FSD.ActorFunctionLibrary.DamagePlayersInArea // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x107bbe0
	struct UHealthComponentBase* DamageIfInRange(float MaxDistance, float Damage, struct AActor* Target, struct AActor* Attacker, struct UDamageClass* DamageClass); // Function FSD.ActorFunctionLibrary.DamageIfInRange // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x107ba60
	void DamageAllInAreaExcept(struct FVector Origin, struct AActor* Instigator, float Damage, float BlastRadius, float MaxDamageRadius, float minDamagePercent, struct TArray<struct AActor*> IgnoreActors, float friendlyFireModifier, struct UDamageClass* DamageClass); // Function FSD.ActorFunctionLibrary.DamageAllInAreaExcept // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x107b7c0
	void DamageAllInArea(struct FVector Origin, struct AActor* Instigator, float Damage, float BlastRadius, float MaxDamageRadius, float minDamagePercent, float friendlyFireModifier, struct UDamageClass* DamageClass); // Function FSD.ActorFunctionLibrary.DamageAllInArea // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x107b570
	struct TArray<struct UMaterialInstanceDynamic*> CreateDynamicMaterialInstances(struct UMeshComponent* Mesh); // Function FSD.ActorFunctionLibrary.CreateDynamicMaterialInstances // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107b4a0
	float AddHeroXP(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, float Amount); // Function FSD.ActorFunctionLibrary.AddHeroXP // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107b2e0
	void AddEnemyKill(struct APlayerCharacter* Instigator, struct UEnemyComponent* EnemyComponent, struct AFSDGameState* GameState); // Function FSD.ActorFunctionLibrary.AddEnemyKill // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107b1f0
	bool ActorMatchesTagQuery(struct FGameplayTagQuery Query, struct AActor* InActor); // Function FSD.ActorFunctionLibrary.ActorMatchesTagQuery // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x107b0c0
};

// Class FSD.StatusEffectsFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UStatusEffectsFunctionLibrary : UBlueprintFunctionLibrary {

	float GetMaxResistance(struct UStatusEffect* StatusEffect); // Function FSD.StatusEffectsFunctionLibrary.GetMaxResistance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107d920
	struct UDamageClass* GetDamageClass(struct UStatusEffect* StatusEffect); // Function FSD.StatusEffectsFunctionLibrary.GetDamageClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107cf20
	bool CanTrigger(struct UStatusEffect* StatusEffect, struct AActor* OtherActor); // Function FSD.StatusEffectsFunctionLibrary.CanTrigger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107b3e0
};

// Class FSD.FrontendBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UFrontendBlueprintLibrary : UBlueprintFunctionLibrary {

	void OpenURLInExternalBrowser(struct FString URL); // Function FSD.FrontendBlueprintLibrary.OpenURLInExternalBrowser // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x107eb50
	bool IsShippingBuild(); // Function FSD.FrontendBlueprintLibrary.IsShippingBuild // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107df00
	enum class EFSDTargetPlatform FSDTargetPlatform(); // Function FSD.FrontendBlueprintLibrary.FSDTargetPlatform // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107c270
};

// Class FSD.ActorStateComponent
// Size: 0x100 (Inherited: 0xb0)
struct UActorStateComponent : UActorComponent {
	struct FMulticastInlineDelegate OnBeginState; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnTickState; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnEndState; // 0xd0(0x10)
	struct UActorStateComponent* CurrentState; // 0xe0(0x08)
	struct UActorStateComponent* NextState; // 0xe8(0x08)
	struct UActorStateComponent* MasterState; // 0xf0(0x08)
	float StateActiveTime; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)

	void OnRep_CurrentState(struct UActorStateComponent* PreviousState); // Function FSD.ActorStateComponent.OnRep_CurrentState // (Final|Native|Protected) // @ game+0x1083e70
	bool IsStateActive(); // Function FSD.ActorStateComponent.IsStateActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10836c0
	void GotoState(); // Function FSD.ActorStateComponent.GotoState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10835b0
};

// Class FSD.FSDUserWidget
// Size: 0x250 (Inherited: 0x230)
struct UFSDUserWidget : UUserWidget {
	struct FMulticastInlineDelegate OnVisibilityChanged; // 0x230(0x10)
	char pad_240[0x8]; // 0x240(0x08)
	struct APlayerCharacter* Character; // 0x248(0x08)

	void SetOpacity(float alpha); // Function FSD.FSDUserWidget.SetOpacity // (Final|Native|Protected|BlueprintCallable) // @ game+0x11399e0
	void ScaleByBaseResolution(); // Function FSD.FSDUserWidget.ScaleByBaseResolution // (Final|Native|Public|BlueprintCallable) // @ game+0x1139350
	void Refresh(); // Function FSD.FSDUserWidget.Refresh // (Native|Protected|BlueprintCallable) // @ game+0x1139330
	void ReceiveNewVisibility(enum class ESlateVisibility NewVisibility); // Function FSD.FSDUserWidget.ReceiveNewVisibility // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnCloseMenuReleased(bool Handled); // Function FSD.FSDUserWidget.OnCloseMenuReleased // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	void OnCloseMenuPressed(bool Handled); // Function FSD.FSDUserWidget.OnCloseMenuPressed // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	bool HasCharacter(); // Function FSD.FSDUserWidget.HasCharacter // (Final|Native|Protected|BlueprintCallable) // @ game+0x11384c0
	float GetOpacity(); // Function FSD.FSDUserWidget.GetOpacity // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1137e70
	struct AFSDPlayerState* GetFSDPlayerState(); // Function FSD.FSDUserWidget.GetFSDPlayerState // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1137a10
	struct AItem* GetEquippedItem(); // Function FSD.FSDUserWidget.GetEquippedItem // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11379e0
	float GetBaseResolutionScale(); // Function FSD.FSDUserWidget.GetBaseResolutionScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1137890
	void BP_OnRefresh(); // Function FSD.FSDUserWidget.BP_OnRefresh // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ActorTrackingWidget
// Size: 0x278 (Inherited: 0x250)
struct UActorTrackingWidget : UFSDUserWidget {
	struct TWeakObjectPtr<struct USceneComponent> TargetComponent; // 0x250(0x08)
	float WorldHeightOffset; // 0x258(0x04)
	float ScaleBy; // 0x25c(0x04)
	struct FMargin ScreenMargin; // 0x260(0x10)
	int32_t WidgetZOrder; // 0x270(0x04)
	bool bTrackCenterOfMass; // 0x274(0x01)
	bool bHideWhenPlayerNearby; // 0x275(0x01)
	char pad_276[0x2]; // 0x276(0x02)

	void SetTargetComponent(struct USceneComponent* Component); // Function FSD.ActorTrackingWidget.SetTargetComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x10842d0
	void SetTarget(struct AActor* Actor); // Function FSD.ActorTrackingWidget.SetTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1084250
	void OnTargetSet(struct AActor* NewTarget); // Function FSD.ActorTrackingWidget.OnTargetSet // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnTargetDistanceChanged(float Distance); // Function FSD.ActorTrackingWidget.OnTargetDistanceChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnShow(); // Function FSD.ActorTrackingWidget.OnShow // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnInViewChanged(bool inView, float Angle); // Function FSD.ActorTrackingWidget.OnInViewChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct AActor* GetTarget(); // Function FSD.ActorTrackingWidget.GetTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1083540
	struct FVector2D GetRenderTranslation(); // Function FSD.ActorTrackingWidget.GetRenderTranslation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1083510
	bool FindScreenPosition(struct APlayerController* PlayerController, struct FVector WorldLocation, struct FMargin Margin, struct FVector ScreenCord, float Angle); // Function FSD.ActorTrackingWidget.FindScreenPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1082ba0
	struct UActorTrackingWidget* CreateTrackingWidget(struct APlayerController* PlayerController, struct UActorTrackingWidget* WidgetType, struct USceneComponent* TargetComponent); // Function FSD.ActorTrackingWidget.CreateTrackingWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1082ab0
};

// Class FSD.ActorTrackingComponent
// Size: 0x210 (Inherited: 0x1f0)
struct UActorTrackingComponent : USceneComponent {
	struct UActorTrackingWidget* WidgetType; // 0x1f0(0x08)
	bool VisibleOnHoldTAB; // 0x1f8(0x01)
	bool VisibleFromStart; // 0x1f9(0x01)
	bool bIconHidden; // 0x1fa(0x01)
	char pad_1FB[0x1]; // 0x1fb(0x01)
	struct TWeakObjectPtr<struct UActorTrackingWidget> Widget; // 0x1fc(0x08)
	char pad_204[0xc]; // 0x204(0x0c)

	void ToggleIcon(bool Visible); // Function FSD.ActorTrackingComponent.ToggleIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x1083a80
	void OnHoldTAB(bool IsDown); // Function FSD.ActorTrackingComponent.OnHoldTAB // (Final|Native|Protected) // @ game+0x1083a80
	bool IsIconVisible(); // Function FSD.ActorTrackingComponent.IsIconVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1083650
};

// Class FSD.AdicPuddle
// Size: 0x248 (Inherited: 0x220)
struct AAdicPuddle : AActor {
	struct USphereComponent* SphereTrigger; // 0x220(0x08)
	struct USoundBase* SpawnSound; // 0x228(0x08)
	struct UStatusEffect* InflictedStatusEffect; // 0x230(0x08)
	char pad_238[0x8]; // 0x238(0x08)
	float LifeTime; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)

	void OnPuddleEndOverLap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.AdicPuddle.OnPuddleEndOverLap // (Native|Protected) // @ game+0x1083d10
	void OnPuddleBeginOverLap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.AdicPuddle.OnPuddleBeginOverLap // (Native|Protected|HasOutParms) // @ game+0x1083b10
};

// Class FSD.AdventureObjective
// Size: 0x178 (Inherited: 0x178)
struct UAdventureObjective : UObjective {
};

// Class FSD.AfflictionEffect
// Size: 0x28 (Inherited: 0x28)
struct UAfflictionEffect : UObject {

	bool ShouldInstantiate(); // Function FSD.AfflictionEffect.ShouldInstantiate // (Native|Event|Public|BlueprintEvent|Const) // @ game+0xbaf250
	void ReceiveEndEffect(struct UPawnAfflictionComponent* Target); // Function FSD.AfflictionEffect.ReceiveEndEffect // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveBeginEffect(struct UPawnAfflictionComponent* Target); // Function FSD.AfflictionEffect.ReceiveBeginEffect // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.PawnFrozenUniqueAfflictionEffect
// Size: 0x28 (Inherited: 0x28)
struct UPawnFrozenUniqueAfflictionEffect : UAfflictionEffect {
};

// Class FSD.PawnBurningUniqueAfflictionEffect
// Size: 0x28 (Inherited: 0x28)
struct UPawnBurningUniqueAfflictionEffect : UAfflictionEffect {
};

// Class FSD.SpawnAtLocationParticleAfflictionEffect
// Size: 0x38 (Inherited: 0x28)
struct USpawnAtLocationParticleAfflictionEffect : UAfflictionEffect {
	struct FScaledEffect ScaledParticleEffect; // 0x28(0x10)
};

// Class FSD.AttachedParticlesAfflictionEffect
// Size: 0x48 (Inherited: 0x28)
struct UAttachedParticlesAfflictionEffect : UAfflictionEffect {
	struct UFXSystemAsset* ParticleEffect; // 0x28(0x08)
	struct TArray<struct UFXSystemAsset*> ParticleEffects; // 0x30(0x10)
	enum class EAfflictionSocket Socket; // 0x40(0x01)
	bool ScaleToActor; // 0x41(0x01)
	bool UseVisibilityHack; // 0x42(0x01)
	char pad_43[0x5]; // 0x43(0x05)
};

// Class FSD.CharacterShoutAfflictionEffect
// Size: 0x30 (Inherited: 0x28)
struct UCharacterShoutAfflictionEffect : UAfflictionEffect {
	struct UDialogDataAsset* Shout; // 0x28(0x08)
};

// Class FSD.CameraParticleAfflictionEffect
// Size: 0x30 (Inherited: 0x28)
struct UCameraParticleAfflictionEffect : UAfflictionEffect {
	struct UParticleSystem* ParticleEffect; // 0x28(0x08)
};

// Class FSD.ShieldLinkedAfflictionEffect
// Size: 0x28 (Inherited: 0x28)
struct UShieldLinkedAfflictionEffect : UAfflictionEffect {
};

// Class FSD.SoundAfflictionEffect
// Size: 0x48 (Inherited: 0x28)
struct USoundAfflictionEffect : UAfflictionEffect {
	struct USoundCue* BeginSound; // 0x28(0x08)
	struct USoundCue* EndSound; // 0x30(0x08)
	bool Attach; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FName AttachBone; // 0x3c(0x08)
	float FadeOnLoopEndDuration; // 0x44(0x04)
};

// Class FSD.AttachMeshesAfflictionEffect
// Size: 0x40 (Inherited: 0x28)
struct UAttachMeshesAfflictionEffect : UAfflictionEffect {
	struct TArray<struct FAttachMeshesAfflictionItem> AttachItems; // 0x28(0x10)
	struct UParticleSystem* OnRemoveEffect; // 0x38(0x08)
};

// Class FSD.FrozenAfflictionEffect
// Size: 0x58 (Inherited: 0x28)
struct UFrozenAfflictionEffect : UAfflictionEffect {
	struct TArray<struct FFrozenAfflictionItem> IceParts; // 0x28(0x10)
	struct UMaterialInterface* MaterialOverride; // 0x38(0x08)
	struct FName ParticleBone; // 0x40(0x08)
	struct TArray<struct UMaterialInterface*> IceMaterials; // 0x48(0x10)
};

// Class FSD.BurningAfflictionEffect
// Size: 0x30 (Inherited: 0x28)
struct UBurningAfflictionEffect : UAfflictionEffect {
	enum class EFrozenBitsSize FireParticleSize; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class FSD.StaggeredAfflictionEffect
// Size: 0x30 (Inherited: 0x28)
struct UStaggeredAfflictionEffect : UAfflictionEffect {
	float StaggerStrength; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class FSD.BoneParticlesAfflictionEffect
// Size: 0x40 (Inherited: 0x28)
struct UBoneParticlesAfflictionEffect : UAfflictionEffect {
	struct TArray<struct UParticleSystem*> Particles; // 0x28(0x10)
	struct USoundCue* Sound; // 0x38(0x08)
};

// Class FSD.AnimatedItemParticleAfflictionEffect
// Size: 0x40 (Inherited: 0x28)
struct UAnimatedItemParticleAfflictionEffect : UAfflictionEffect {
	enum class EItemCategory ItemCategory; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct UParticleSystem* ParticleEffect; // 0x30(0x08)
	struct FName Socket; // 0x38(0x08)
};

// Class FSD.PlayerCharacterMontageAfflictionEffect
// Size: 0x50 (Inherited: 0x28)
struct UPlayerCharacterMontageAfflictionEffect : UAfflictionEffect {
	struct UAnimMontage* FP_Montage; // 0x28(0x08)
	struct UAnimMontage* TP_Montage; // 0x30(0x08)
	float BlendOut; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct FName> RandomStarts; // 0x40(0x10)
};

// Class FSD.EnemySkinAfflictionEffect
// Size: 0x38 (Inherited: 0x28)
struct UEnemySkinAfflictionEffect : UAfflictionEffect {
	struct TArray<struct UMaterialInterface*> NewMaterials; // 0x28(0x10)
};

// Class FSD.EnemyScaleAfflictionEffect
// Size: 0x30 (Inherited: 0x28)
struct UEnemyScaleAfflictionEffect : UAfflictionEffect {
	float Scale; // 0x28(0x04)
	bool RevertOnEndEffect; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
};

// Class FSD.HeroEnemyAfflictionEffect
// Size: 0x30 (Inherited: 0x28)
struct UHeroEnemyAfflictionEffect : UAfflictionEffect {
	struct FGameplayTag TagToAdd; // 0x28(0x08)
};

// Class FSD.FSDPawn
// Size: 0x2f0 (Inherited: 0x280)
struct AFSDPawn : APawn {
	char pad_280[0x18]; // 0x280(0x18)
	struct FMulticastInlineDelegate OnFrozenEvent; // 0x298(0x10)
	struct UStatusEffectsComponent* StatusEffects; // 0x2a8(0x08)
	struct UEnemyTemperatureComponent* Temperature; // 0x2b0(0x08)
	struct FGameplayTagContainer GameplayTags; // 0x2b8(0x20)
	struct UEnemyDescriptor* SpawnedFromDescriptor; // 0x2d8(0x08)
	bool IsFrozen; // 0x2e0(0x01)
	bool CanFlee; // 0x2e1(0x01)
	bool FleeInsteadOfBackingOff; // 0x2e2(0x01)
	bool IsFleeing; // 0x2e3(0x01)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct UPawnStatsComponent* PawnStatsInstance; // 0x2e8(0x08)

	void UnFreeze(); // Function FSD.FSDPawn.UnFreeze // (Native|Public|BlueprintCallable) // @ game+0x1123df0
	void StopFleeing(); // Function FSD.FSDPawn.StopFleeing // (Native|Public|BlueprintCallable) // @ game+0x1123bc0
	void StartFleeing(struct FVector fromLocation); // Function FSD.FSDPawn.StartFleeing // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1123b10
	void SetAlerted(bool isAlerted); // Function FSD.FSDPawn.SetAlerted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1123290
	void Receive_Alerted(); // Function FSD.FSDPawn.Receive_Alerted // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnUnFrozen(); // Function FSD.FSDPawn.OnUnFrozen // (Native|Event|Protected|BlueprintEvent) // @ game+0x1122630
	void OnStoppedFleeing(); // Function FSD.FSDPawn.OnStoppedFleeing // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnStartedFleeing(); // Function FSD.FSDPawn.OnStartedFleeing // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_IsFrozen(); // Function FSD.FSDPawn.OnRep_IsFrozen // (Final|Native|Protected) // @ game+0x11223e0
	void OnFrozen(struct AActor* Source); // Function FSD.FSDPawn.OnFrozen // (Native|Event|Protected|BlueprintEvent) // @ game+0x11222d0
	void OnFirstHostileDamageTaken(); // Function FSD.FSDPawn.OnFirstHostileDamageTaken // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnEnemyScaled(float newScale); // Function FSD.FSDPawn.OnEnemyScaled // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnArmorShattered(struct FVector Location); // Function FSD.FSDPawn.OnArmorShattered // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1122220
	void OnAlerted(); // Function FSD.FSDPawn.OnAlerted // (Final|Native|Protected) // @ game+0x1122200
	void MakeRagdollMesh(struct USkeletalMeshComponent* Mesh); // Function FSD.FSDPawn.MakeRagdollMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1122180
	void MakeElite(); // Function FSD.FSDPawn.MakeElite // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	bool GetIsAlerted(); // Function FSD.FSDPawn.GetIsAlerted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11219b0
	struct UHealthComponentBase* GetHealthComponent(); // Function FSD.FSDPawn.GetHealthComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1121860
	struct AFSDAIController* GetFSDAIController(); // Function FSD.FSDPawn.GetFSDAIController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1121800
	enum class EPawnAttitude GetAttitude(); // Function FSD.FSDPawn.GetAttitude // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11217d0
	void Freeze(struct AActor* Source); // Function FSD.FSDPawn.Freeze // (Native|Public|BlueprintCallable) // @ game+0x1121740
	void ExplodePawn(); // Function FSD.FSDPawn.ExplodePawn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1121670
	void BackOffFromLocation(struct FVector fromLocation); // Function FSD.FSDPawn.BackOffFromLocation // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1120960
};

// Class FSD.DeepPathfinderCharacter
// Size: 0x380 (Inherited: 0x2f0)
struct ADeepPathfinderCharacter : AFSDPawn {
	char pad_2F0[0x10]; // 0x2f0(0x10)
	struct UDeepPathfinderMovement* PathfinderMovement; // 0x300(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x308(0x08)
	struct FName CenterMassSocketName; // 0x310(0x08)
	struct UDeepPatherFinderCharacterAfflictionComponent* Affliction; // 0x318(0x08)
	float AnimationOffset; // 0x320(0x04)
	bool CanPlayerStandOn; // 0x324(0x01)
	bool UseDormancy; // 0x325(0x01)
	char pad_326[0x2]; // 0x326(0x02)
	float StaggerDurationMultiplier; // 0x328(0x04)
	float StaggerImunityWindow; // 0x32c(0x04)
	bool StaggerPauseLogic; // 0x330(0x01)
	bool IsHidden; // 0x331(0x01)
	bool IsStaggered; // 0x332(0x01)
	bool FrozenPauseLogic; // 0x333(0x01)
	char pad_334[0x1c]; // 0x334(0x1c)
	float AttackerRadius; // 0x350(0x04)
	char pad_354[0x4]; // 0x354(0x04)
	struct TArray<struct UMaterialInterface*> CachedMaterials; // 0x358(0x10)
	float AllowedInFormationChance; // 0x368(0x04)
	char pad_36C[0x14]; // 0x36c(0x14)

	bool TryJoinFormation(); // Function FSD.DeepPathfinderCharacter.TryJoinFormation // (Final|Native|Public|BlueprintCallable) // @ game+0x10c5fc0
	void SetHidden(bool shouldHide); // Function FSD.DeepPathfinderCharacter.SetHidden // (Final|Native|Public|BlueprintCallable) // @ game+0x10c5800
	void OnPausedMovementElapsed(); // Function FSD.DeepPathfinderCharacter.OnPausedMovementElapsed // (Final|Native|Protected) // @ game+0x10c5270
	void OnControlledByPlayer(bool IsControlled, bool IsLocallyControlled); // Function FSD.DeepPathfinderCharacter.OnControlledByPlayer // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void LeaveFormation(); // Function FSD.DeepPathfinderCharacter.LeaveFormation // (Final|Native|Public|BlueprintCallable) // @ game+0x10c4e00
};

// Class FSD.EnemyDeepPathfinderCharacter
// Size: 0x3a0 (Inherited: 0x380)
struct AEnemyDeepPathfinderCharacter : ADeepPathfinderCharacter {
	char pad_380[0x8]; // 0x380(0x08)
	struct UEnemyHealthComponent* HealthComponent; // 0x388(0x08)
	struct FQueuedMontage QueuedMontage; // 0x390(0x10)

	void OnRep_QueuedMontage(); // Function FSD.EnemyDeepPathfinderCharacter.OnRep_QueuedMontage // (Final|Native|Protected) // @ game+0x10c5400
};

// Class FSD.AFlyingBug
// Size: 0x448 (Inherited: 0x3a0)
struct AAFlyingBug : AEnemyDeepPathfinderCharacter {
	struct UEnemyComponent* EnemyComponent; // 0x3a0(0x08)
	struct UPawnStatsComponent* PawnStats; // 0x3a8(0x08)
	struct UOutlineComponent* outline; // 0x3b0(0x08)
	struct UPawnSensingComponent* Senses; // 0x3b8(0x08)
	struct UPawnAlertComponent* Alert; // 0x3c0(0x08)
	struct USphereComponent* ExplosionSphere; // 0x3c8(0x08)
	struct UAudioComponent* WingSoundComponent; // 0x3d0(0x08)
	struct UFrozenPawnImpactComponent* FrozenImpact; // 0x3d8(0x08)
	struct TArray<struct UAnimSequenceBase*> HitReactions; // 0x3e0(0x10)
	struct FVector_NetQuantize RagdollImpact; // 0x3f0(0x0c)
	char pad_3FC[0x14]; // 0x3fc(0x14)
	struct AActor* RotateTarget; // 0x410(0x08)
	struct UPhysicsAsset* PhysicalAssetAfterDeath; // 0x418(0x08)
	struct USoundBase* ChatterSound; // 0x420(0x08)
	float FirstHitReactBlendIn; // 0x428(0x04)
	float OverrideHitReactBlendIn; // 0x42c(0x04)
	float DistanceForAttackMode; // 0x430(0x04)
	float MinChatterDelay; // 0x434(0x04)
	float MaxChatterDelay; // 0x438(0x04)
	float AttackModeRotationSpeed; // 0x43c(0x04)
	bool UsesAttackStance; // 0x440(0x01)
	bool SetLifeTime; // 0x441(0x01)
	bool AttackStance; // 0x442(0x01)
	bool LookStraight; // 0x443(0x01)
	bool UseDefaultRagdoll; // 0x444(0x01)
	char pad_445[0x3]; // 0x445(0x03)

	void StartFizzle(); // Function FSD.AFlyingBug.StartFizzle // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void SetRotateTarget(struct AActor* aTarget); // Function FSD.AFlyingBug.SetRotateTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x10841d0
	void SetExternallyControlled(bool isExternallyControlled); // Function FSD.AFlyingBug.SetExternallyControlled // (Final|Native|Public|BlueprintCallable) // @ game+0x1084140
	void SetAttackStance(bool isAttackStance); // Function FSD.AFlyingBug.SetAttackStance // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10840b0
	void Ragdoll(bool applyForce, struct FVector force); // Function FSD.AFlyingBug.Ragdoll // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1083f50
	void PlayVoice(); // Function FSD.AFlyingBug.PlayVoice // (Final|Native|Protected) // @ game+0x1083f30
	void OnStartFalling(); // Function FSD.AFlyingBug.OnStartFalling // (Final|Native|Public) // @ game+0x1083f10
	void OnRep_RagdollImpact(); // Function FSD.AFlyingBug.OnRep_RagdollImpact // (Native|Public) // @ game+0x1083ef0
	void OnRep_AttackStance(); // Function FSD.AFlyingBug.OnRep_AttackStance // (Final|Native|Protected|BlueprintCallable) // @ game+0x1083e50
	void OnRagdoll(); // Function FSD.AFlyingBug.OnRagdoll // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnFreezeImpact(); // Function FSD.AFlyingBug.OnFreezeImpact // (Final|Native|Public) // @ game+0x1083a60
	void OnDamaged(float Amount); // Function FSD.AFlyingBug.OnDamaged // (Native|Public) // @ game+0x10839e0
	void OnBugDeath(struct UHealthComponentBase* Health); // Function FSD.AFlyingBug.OnBugDeath // (Native|Public) // @ game+0x1083950
	float GetMidZpointFromCielingAndFloor(float distanceFromCieling, float distanceFromFloor); // Function FSD.AFlyingBug.GetMidZpointFromCielingAndFloor // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1083210
	bool GetIsInAttackStance(); // Function FSD.AFlyingBug.GetIsInAttackStance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10831f0
	void AlertNearbyEnemies(); // Function FSD.AFlyingBug.AlertNearbyEnemies // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.EnemyAnimInstance
// Size: 0x2c0 (Inherited: 0x270)
struct UEnemyAnimInstance : UAnimInstance {
	struct FMulticastInlineDelegate OnRangedAttackNotify; // 0x268(0x10)
	struct FMulticastInlineDelegate OnMeleeAttackNotify; // 0x278(0x10)
	struct FMulticastInlineDelegate OnStopLeadingNotify; // 0x288(0x10)
	struct FMulticastInlineDelegate OnIsAttackingChanged; // 0x298(0x10)
	bool IsAttacking; // 0x2a8(0x01)
	bool IsAlive; // 0x2a9(0x01)
	float RandomStartPosition; // 0x2ac(0x04)
	struct UHealthComponentBase* HealthComponent; // 0x2b0(0x08)
	char pad_2BE[0x2]; // 0x2be(0x02)

	bool IsSlotPlayingAnyAnimation(struct FName SlotNodeName); // Function FSD.EnemyAnimInstance.IsSlotPlayingAnyAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d9070
	struct USkeletalMeshComponent* GetSkeletalMesh(); // Function FSD.EnemyAnimInstance.GetSkeletalMesh // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d9050
};

// Class FSD.SimpleMovingEnemyAnimInstance
// Size: 0x2f0 (Inherited: 0x2c0)
struct USimpleMovingEnemyAnimInstance : UEnemyAnimInstance {
	float Speed; // 0x2b8(0x04)
	struct FVector Velocity; // 0x2bc(0x0c)
	float WalkCycleSpeed; // 0x2c8(0x04)
	float StartMovingSpeed; // 0x2cc(0x04)
	float StopMovingSpeed; // 0x2d0(0x04)
	float WalkCycleMinRate; // 0x2d4(0x04)
	float WalkCyclePlayRate; // 0x2d8(0x04)
	float MeshScale; // 0x2dc(0x04)
	bool IsMoving; // 0x2e0(0x01)
	char pad_2E9[0x7]; // 0x2e9(0x07)

	void SetMeshScale(float newScale); // Function FSD.SimpleMovingEnemyAnimInstance.SetMeshScale // (Final|Native|Public|BlueprintCallable) // @ game+0x1205740
};

// Class FSD.FlyingBugAnimInstance
// Size: 0x2f0 (Inherited: 0x2f0)
struct UFlyingBugAnimInstance : USimpleMovingEnemyAnimInstance {
	bool IsInAttackMode; // 0x2e8(0x01)
	bool IsStaggered; // 0x2e9(0x01)
};

// Class FSD.AIFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UAIFunctionLibrary : UBlueprintFunctionLibrary {

	void SetAICanSense(bool canSense); // Function FSD.AIFunctionLibrary.SetAICanSense // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1084030
	int32_t MakeEnemiesFleeFromArea(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t maxEnemiesAffected); // Function FSD.AIFunctionLibrary.MakeEnemiesFleeFromArea // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1083800
	void MakeEnemiesBackOutOfArea(struct UObject* WorldContextObject, struct FVector Center, float Radius); // Function FSD.AIFunctionLibrary.MakeEnemiesBackOutOfArea // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10836f0
	bool IsEnemyAlertet(struct APawn* enemy); // Function FSD.AIFunctionLibrary.IsEnemyAlertet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10835d0
	struct APlayerCharacter* GetPlayerTarget(struct AActor* From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, struct AActor* ignoreTarget, bool IsFlying); // Function FSD.AIFunctionLibrary.GetPlayerTarget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1083300
	bool GetAttackableTargetsInRange(struct AActor* From, struct TArray<struct UAttackerPositioningComponent*> outArray, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, struct AActor* ignoreTarget, bool IsFlying); // Function FSD.AIFunctionLibrary.GetAttackableTargetsInRange // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1082f70
	struct UAttackerPositioningComponent* GetAttackableTarget(struct AActor* From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, struct AActor* ignoreTarget, bool IsFlying); // Function FSD.AIFunctionLibrary.GetAttackableTarget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1082d60
	struct APlayerCharacter* ConsiderChangingTarget(struct APlayerCharacter* CurrentTarget, struct AActor* From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool CurrentTargetMustBeAlive, bool IsFlying); // Function FSD.AIFunctionLibrary.ConsiderChangingTarget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10828b0
	void AlertEnemy(struct APawn* enemy); // Function FSD.AIFunctionLibrary.AlertEnemy // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1082840
	void AlertEnemiesInRange(struct UObject* WorldContextObject, struct FVector Origin, float range, struct APawn* alerter); // Function FSD.AIFunctionLibrary.AlertEnemiesInRange // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x10826f0
};

// Class FSD.AIPlayerControlComponent
// Size: 0x160 (Inherited: 0xb0)
struct UAIPlayerControlComponent : UActorComponent {
	struct FRotator AngularAcceleration; // 0xb0(0x0c)
	struct FRotator AngularDampening; // 0xbc(0x0c)
	struct FRotator MaxAngularVelocity; // 0xc8(0x0c)
	struct FRotator MaxRotation; // 0xd4(0x0c)
	float SpeedTarget; // 0xe0(0x04)
	float SpeedMin; // 0xe4(0x04)
	float SpeedMax; // 0xe8(0x04)
	float AccelerationBase; // 0xec(0x04)
	float AccelerationMultiplier; // 0xf0(0x04)
	float DecelerationMultiplier; // 0xf4(0x04)
	float AccelerationOnSlopeMultiplier; // 0xf8(0x04)
	float DecelerationOnSlopeMultiplier; // 0xfc(0x04)
	float InitialConnectionBlendTime; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
	struct UAnimMontage* GetOnMontageAI; // 0x108(0x08)
	struct UAnimMontage* GetOnMontagePlayer; // 0x110(0x08)
	struct UAnimMontage* LetGoMontageAI; // 0x118(0x08)
	struct UAnimMontage* LetGoMontagePlayer; // 0x120(0x08)
	struct UDialogDataAsset* GetOnShout; // 0x128(0x08)
	struct UDialogDataAsset* LetGoShout; // 0x130(0x08)
	struct UControlEnemyUsable* Usable; // 0x138(0x08)
	char pad_140[0x20]; // 0x140(0x20)
};

// Class FSD.EnemyGroupDescriptor
// Size: 0x50 (Inherited: 0x30)
struct UEnemyGroupDescriptor : UDataAsset {
	struct TArray<struct FEnemyGroupDescriptorItem> Enemies; // 0x30(0x10)
	struct FRandInterval Diversity; // 0x40(0x10)
};

// Class FSD.AmberEventEnemyPool
// Size: 0x68 (Inherited: 0x50)
struct UAmberEventEnemyPool : UEnemyGroupDescriptor {
	float MaxTimeBetweenSpawn; // 0x50(0x04)
	float MinTimeBetweenSpawn; // 0x54(0x04)
	int32_t MaxEnemyCap; // 0x58(0x04)
	int32_t AmbersNeededdToComplete; // 0x5c(0x04)
	int32_t AmbersNeededOnePlayer; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class FSD.GameEvent
// Size: 0x358 (Inherited: 0x220)
struct AGameEvent : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct FMulticastInlineDelegate EventTriggeredDelegate; // 0x228(0x10)
	struct FMulticastInlineDelegate EventFinishedDelegate; // 0x238(0x10)
	struct FMulticastInlineDelegate StageCompleteDelegate; // 0x248(0x10)
	struct FMulticastInlineDelegate ProgressChangedDelegate; // 0x258(0x10)
	struct FMulticastInlineDelegate TimeProgressChanged; // 0x268(0x10)
	struct FMulticastInlineDelegate ObjectivesPerStageChanged; // 0x278(0x10)
	struct TArray<struct AEventStarterButton*> StarterObjects; // 0x288(0x10)
	bool bGameEventSetup; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct FText EventName; // 0x2a0(0x18)
	struct FText ObjectiveText; // 0x2b8(0x18)
	struct FName AnalyticsName; // 0x2d0(0x08)
	struct FGameplayTagContainer GameplayTags; // 0x2d8(0x20)
	struct UChildActorComponent* StartEventObject; // 0x2f8(0x08)
	struct UDialogDataAsset* EventTriggeredShout; // 0x300(0x08)
	struct UDialogDataAsset* EventFinishedShout; // 0x308(0x08)
	struct UDialogDataAsset* EventFailedShout; // 0x310(0x08)
	float EventTriggeredShoutDelay; // 0x318(0x04)
	float EventFinishedShoutDelay; // 0x31c(0x04)
	float StageProgress; // 0x320(0x04)
	float TimeLimit; // 0x324(0x04)
	float DelayUITime; // 0x328(0x04)
	char pad_32C[0x4]; // 0x32c(0x04)
	int32_t objectivesPerStage; // 0x330(0x04)
	char pad_334[0x4]; // 0x334(0x04)
	bool EventStartersActive; // 0x338(0x01)
	bool StopScriptedWavesWhileActive; // 0x339(0x01)
	bool StopNormalWavesWhileActive; // 0x33a(0x01)
	bool EventStarted; // 0x33b(0x01)
	bool FailedEvent; // 0x33c(0x01)
	bool ShowRemainingTimeOnHUD; // 0x33d(0x01)
	bool ShowScoreStatusOnHUD; // 0x33e(0x01)
	char pad_33F[0x1]; // 0x33f(0x01)
	bool SkipEventStarters; // 0x340(0x01)
	char pad_341[0x7]; // 0x341(0x07)
	struct TArray<struct AActor*> EventParticipants; // 0x348(0x10)

	void TrySetupGameEvent(); // Function FSD.GameEvent.TrySetupGameEvent // (Final|Native|Protected) // @ game+0x1147260
	void TriggerEvent(); // Function FSD.GameEvent.TriggerEvent // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10aad30
	void StartShout(); // Function FSD.GameEvent.StartShout // (Final|Native|Protected) // @ game+0x1147240
	void StageObjectiveCompleted(); // Function FSD.GameEvent.StageObjectiveCompleted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1147220
	struct ARessuplyPod* SpawnEventPod(struct ARessuplyPod* podClass, struct FVector aSpawnLocation, int32_t Delay); // Function FSD.GameEvent.SpawnEventPod // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1147100
	struct AActor* SpawnEventActor(struct AActor* eventActorClass, struct FTransform aSpawnLocation); // Function FSD.GameEvent.SpawnEventActor // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1146fe0
	void SetStageProgress(float Progress); // Function FSD.GameEvent.SetStageProgress // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1146e30
	void SetObjectivesPerStage(int32_t objectivesPerStage); // Function FSD.GameEvent.SetObjectivesPerStage // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1146d30
	void RemoveParticipant(struct AActor* participant); // Function FSD.GameEvent.RemoveParticipant // (Final|Native|Protected) // @ game+0x1146b10
	void OnStarterObjectUsed(struct AEventStarterButton* eventStarter); // Function FSD.GameEvent.OnStarterObjectUsed // (Final|Native|Protected) // @ game+0x1146850
	void OnStageProgress(float Progress); // Function FSD.GameEvent.OnStageProgress // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnStageComplete(int32_t Stage); // Function FSD.GameEvent.OnStageComplete // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRep_StageProgress(); // Function FSD.GameEvent.OnRep_StageProgress // (Final|Native|Protected) // @ game+0x1146830
	void OnRep_ObjectivesPerStage(); // Function FSD.GameEvent.OnRep_ObjectivesPerStage // (Final|Native|Public) // @ game+0x1146790
	void OnRep_IsEventStartersActive(); // Function FSD.GameEvent.OnRep_IsEventStartersActive // (Final|Native|Protected) // @ game+0x1146770
	void OnRep_FailedEvent(); // Function FSD.GameEvent.OnRep_FailedEvent // (Final|Native|Protected) // @ game+0x1146730
	void OnRep_EventStarted(); // Function FSD.GameEvent.OnRep_EventStarted // (Final|Native|Protected) // @ game+0x1146710
	void OnRep_EventParticipants(); // Function FSD.GameEvent.OnRep_EventParticipants // (Final|Native|Protected) // @ game+0x11466f0
	void OnEventTriggered(); // Function FSD.GameEvent.OnEventTriggered // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnEventFinished(bool eventSuccess); // Function FSD.GameEvent.OnEventFinished // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnEventBooted(); // Function FSD.GameEvent.OnEventBooted // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	bool IsEventActive(); // Function FSD.GameEvent.IsEventActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1146440
	float GetStageProgress(); // Function FSD.GameEvent.GetStageProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11462b0
	bool GetShowTimeOnHUD(); // Function FSD.GameEvent.GetShowTimeOnHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11461f0
	bool GetShowScoreOnHUD(); // Function FSD.GameEvent.GetShowScoreOnHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11461d0
	struct FText GetObjectiveText(); // Function FSD.GameEvent.GetObjectiveText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1146120
	int32_t GetObjectivesPerStage(); // Function FSD.GameEvent.GetObjectivesPerStage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1146150
	struct FText GetEventName(); // Function FSD.GameEvent.GetEventName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11460f0
	bool GetEventFailed(); // Function FSD.GameEvent.GetEventFailed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11460d0
	float GetDelayUITime(); // Function FSD.GameEvent.GetDelayUITime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1146080
	void EndShout(); // Function FSD.GameEvent.EndShout // (Final|Native|Protected) // @ game+0x1145f20
	struct FTransform DebreePositionPoint(struct AProceduralSetup* setup, struct FVector fromLocation, float MinDistance, float desiredDistance, struct UDebrisPositioning* DebrisPositioning, struct AActor* terrainPlacement, float maxPathLength); // Function FSD.GameEvent.DebreePositionPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1145cc0
	void BootUpEvent(); // Function FSD.GameEvent.BootUpEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1145be0
	void AddStageProgress(float progressToAdd); // Function FSD.GameEvent.AddStageProgress // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1145b10
};

// Class FSD.AmberEvent
// Size: 0x3a8 (Inherited: 0x358)
struct AAmberEvent : AGameEvent {
	struct UDamageComponent* EndExplosionDamage; // 0x358(0x08)
	struct TArray<struct UAmberEventEnemyPool*> EnemyPools; // 0x360(0x10)
	struct TArray<struct AFSDPawn*> spawnedEnemies; // 0x370(0x10)
	char pad_380[0x8]; // 0x380(0x08)
	struct TWeakObjectPtr<struct UAmberEventEnemyPool> CurrentPool; // 0x388(0x08)
	float InitialDelayBeforeSpawn; // 0x390(0x04)
	float MaxSpawnRange; // 0x394(0x04)
	char pad_398[0x10]; // 0x398(0x10)

	void OnSpawnedDeath(struct UHealthComponentBase* spawnedHealthComponent); // Function FSD.AmberEvent.OnSpawnedDeath // (Final|Native|Protected) // @ game+0x1088200
	void OnEnemySpawned(struct APawn* Pawn); // Function FSD.AmberEvent.OnEnemySpawned // (Final|Native|Protected) // @ game+0x10879b0
};

// Class FSD.AmmoCountWidget
// Size: 0x250 (Inherited: 0x230)
struct UAmmoCountWidget : UUserWidget {
	struct APlayerCharacter* Character; // 0x230(0x08)
	struct AItem* Item; // 0x238(0x08)
	struct UItemAggregator* Aggregator; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)

	void OnVisibleChanged(bool Visible, bool showClipCount); // Function FSD.AmmoCountWidget.OnVisibleChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnTotalVisibleChanged(bool Visible); // Function FSD.AmmoCountWidget.OnTotalVisibleChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnTotalChanged(int32_t Total); // Function FSD.AmmoCountWidget.OnTotalChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnItemTotalChanged(int32_t Value); // Function FSD.AmmoCountWidget.OnItemTotalChanged // (Final|Native|Protected) // @ game+0x1087d40
	void OnItemEquipped(struct AItem* NewItem); // Function FSD.AmmoCountWidget.OnItemEquipped // (Final|Native|Protected) // @ game+0x1087cc0
	void OnItemAmountChanged(int32_t Value); // Function FSD.AmmoCountWidget.OnItemAmountChanged // (Final|Native|Protected) // @ game+0x1087c40
	void OnAmountChanged(int32_t count); // Function FSD.AmmoCountWidget.OnAmountChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void DoItemEquipped(); // Function FSD.AmmoCountWidget.DoItemEquipped // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.Item
// Size: 0x338 (Inherited: 0x220)
struct AItem : AActor {
	char pad_220[0x40]; // 0x220(0x40)
	struct FVector FPCameraOffset; // 0x260(0x0c)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct FAudioWithCooldown AudioFriendlyFire; // 0x270(0x10)
	bool EnableDangerousSaveGameIDEditing; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	struct FGuid SaveGameID; // 0x284(0x10)
	char pad_294[0x4]; // 0x294(0x04)
	struct UItemID* ItemID; // 0x298(0x08)
	struct APlayerCharacter* Character; // 0x2a0(0x08)
	struct UUpgradableItemComponent* UpgradableItem; // 0x2a8(0x08)
	struct UCameraShake* CameraShake; // 0x2b0(0x08)
	bool CameraShakeOnStartUsing; // 0x2b8(0x01)
	bool CameraShakeOnEquip; // 0x2b9(0x01)
	char pad_2BA[0xe]; // 0x2ba(0x0e)
	struct UCurveFloat* HeatCurve; // 0x2c8(0x08)
	float ManualHeatPerUse; // 0x2d0(0x04)
	float CooldownRate; // 0x2d4(0x04)
	float ManualCooldownDelay; // 0x2d8(0x04)
	float UnjamDuration; // 0x2dc(0x04)
	char pad_2E0[0x4]; // 0x2e0(0x04)
	float CurrentTemperature; // 0x2e4(0x04)
	struct USoundBase* AudioTemperature; // 0x2e8(0x08)
	float AudioTemperatureFadeout; // 0x2f0(0x04)
	struct FName TemperatureFloatParam; // 0x2f4(0x08)
	char pad_2FC[0x4]; // 0x2fc(0x04)
	struct UAudioComponent* TemperatureAudioComponent; // 0x300(0x08)
	bool Overheated; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
	struct UDialogDataAsset* ShoutOverheated; // 0x310(0x08)
	bool bAimAssistEnabled; // 0x318(0x01)
	char pad_319[0x3]; // 0x319(0x03)
	float MovementRateWhileUsing; // 0x31c(0x04)
	bool CanPlayLedgeClimbWhileUsing; // 0x320(0x01)
	bool CanInspectItem; // 0x321(0x01)
	bool CanSprintWithItem; // 0x322(0x01)
	char pad_323[0x5]; // 0x323(0x05)
	struct UItemsBarIcon* CustomIconWidget; // 0x328(0x08)
	float AdvancedVibrationSendLevel; // 0x330(0x04)
	bool IsEquipped; // 0x334(0x01)
	bool IsUsing; // 0x335(0x01)
	char pad_336[0x2]; // 0x336(0x02)

	void UpdateSkin(); // Function FSD.Item.UpdateSkin // (Native|Public|BlueprintCallable) // @ game+0x116d140
	struct UAudioComponent* SpawnSoundAttached(struct USoundBase* Sound, struct USceneComponent* AttachToComponent, float PriorityOverride, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool SendVibration); // Function FSD.Item.SpawnSoundAttached // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x116cb40
	struct UAudioComponent* SpawnSoundAtLocation(struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool SendVibration); // Function FSD.Item.SpawnSoundAtLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x116c850
	struct UAudioComponent* SpawnSound2D(struct USoundBase* Sound, float PriorityOverride, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, bool SendVibration); // Function FSD.Item.SpawnSound2D // (Final|Native|Public|BlueprintCallable) // @ game+0x116c5c0
	void Server_StartUsing(bool IsUsing); // Function FSD.Item.Server_StartUsing // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x116c3f0
	void Resupply(float percentage); // Function FSD.Item.Resupply // (Native|Public|BlueprintCallable) // @ game+0x116c370
	void RemovedFromInventory(struct ACharacter* oldCharacter); // Function FSD.Item.RemovedFromInventory // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void RecieveUnequipped(); // Function FSD.Item.RecieveUnequipped // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void RecieveStopUsing(); // Function FSD.Item.RecieveStopUsing // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void RecieveStartUsing(); // Function FSD.Item.RecieveStartUsing // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void RecieveEquipped(); // Function FSD.Item.RecieveEquipped // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void RecieveCycledItem(); // Function FSD.Item.RecieveCycledItem // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Recieve_UpdateMeshses(bool IsFirstPerson); // Function FSD.Item.Recieve_UpdateMeshses // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveResupply(float percentage); // Function FSD.Item.ReceiveResupply // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Receive_Overheated(); // Function FSD.Item.Receive_Overheated // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct UStaticMeshComponent* Receive_GetTPAnimationEventMesh(); // Function FSD.Item.Receive_GetTPAnimationEventMesh // (Event|Protected|BlueprintEvent|Const) // @ game+0x158ca90
	struct UFirstPersonStaticMeshComponent* Receive_GetFPAnimationEventMesh(); // Function FSD.Item.Receive_GetFPAnimationEventMesh // (Event|Protected|BlueprintEvent|Const) // @ game+0x158ca90
	void OnTemperatureChanged(float Temperature, bool Overheated); // Function FSD.Item.OnTemperatureChanged // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnSkinChanged(struct USkinEffect* Skin); // Function FSD.Item.OnSkinChanged // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRep_IsUsing(bool OldValue); // Function FSD.Item.OnRep_IsUsing // (Native|Protected) // @ game+0x116c0b0
	void OnOwnerDestroyed(struct AActor* owningActor); // Function FSD.Item.OnOwnerDestroyed // (Final|Native|Protected) // @ game+0x116c010
	bool IsLocallyControlled(); // Function FSD.Item.IsLocallyControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116bfe0
	bool IsFirstPerson(); // Function FSD.Item.IsFirstPerson // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116bfb0
	struct AActor* GetWeaponViewClass(); // Function FSD.Item.GetWeaponViewClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116bf40
	struct FItemLoadoutAnimations GetLoadoutAnimations(); // Function FSD.Item.GetLoadoutAnimations // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116bb90
	struct FText GetItemName(); // Function FSD.Item.GetItemName // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116baf0
	struct UTexture2D* GetItemIconLine(); // Function FSD.Item.GetItemIconLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116bac0
	struct UTexture2D* GetItemIconBG(); // Function FSD.Item.GetItemIconBG // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116ba90
	struct AItem* GetItemDefaultObject(struct AItem* itemClass); // Function FSD.Item.GetItemDefaultObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x116ba10
	struct FText GetItemCategory(); // Function FSD.Item.GetItemCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116b970
	struct USceneComponent* GetHeatingAudioSceneComponent(); // Function FSD.Item.GetHeatingAudioSceneComponent // (Native|Event|Protected|BlueprintEvent) // @ game+0x116b940
	struct UItemCharacterAnimationSet* GetCharacterAnimationSet(); // Function FSD.Item.GetCharacterAnimationSet // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116b890
	struct FString GetAnalyticsItemName(); // Function FSD.Item.GetAnalyticsItemName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116b810
	struct FString GetAnalyticsItemCategory(); // Function FSD.Item.GetAnalyticsItemCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116b790
	void AddedToInventory(struct APlayerCharacter* ItemOwner); // Function FSD.Item.AddedToInventory // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.AnimatedItem
// Size: 0x390 (Inherited: 0x338)
struct AAnimatedItem : AItem {
	struct USkinnableComponent* Skinnable; // 0x338(0x08)
	struct UPlayerAnimInstance* FPAnimInstance; // 0x340(0x08)
	struct UPlayerAnimInstance* TPAnimInstance; // 0x348(0x08)
	struct USkeletalMeshComponent* FPMesh; // 0x350(0x08)
	struct USkeletalMeshComponent* TPMesh; // 0x358(0x08)
	struct UAnimMontage* FP_EquipAnimation; // 0x360(0x08)
	struct UAnimMontage* TP_EquipAnimation; // 0x368(0x08)
	float EquipDuration; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct UItemCharacterAnimationSet* CharacterAnimationSet; // 0x378(0x08)
	char pad_380[0x10]; // 0x380(0x10)

	void OnReceiveEquippedFinished(); // Function FSD.AnimatedItem.OnReceiveEquippedFinished // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct FTransform GetMuzzle(); // Function FSD.AnimatedItem.GetMuzzle // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10878a0
	struct USkeletalMeshComponent* GetItemMesh(); // Function FSD.AnimatedItem.GetItemMesh // (Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1087870
};

// Class FSD.AmmoDrivenWeapon
// Size: 0x6e0 (Inherited: 0x390)
struct AAmmoDrivenWeapon : AAnimatedItem {
	char pad_390[0x20]; // 0x390(0x20)
	struct FMulticastInlineDelegate OnClipCountChanged; // 0x3b0(0x10)
	struct FMulticastInlineDelegate OnTryReloadEvent; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnReloadingEvent; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnShotFiredEvent; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnStoppedUsingEvent; // 0x3f0(0x10)
	char pad_400[0x10]; // 0x400(0x10)
	struct UWeaponFireComponent* WeaponFire; // 0x410(0x08)
	struct UAmmoDriveWeaponAggregator* Aggregator; // 0x418(0x08)
	bool LoopFireAnimation; // 0x420(0x01)
	char pad_421[0x3]; // 0x421(0x03)
	float LoopFireAnimationBlendoutTime; // 0x424(0x04)
	struct UAnimMontage* FP_FireAnimation; // 0x428(0x08)
	struct UAnimMontage* TP_FireAnimation; // 0x430(0x08)
	struct UAnimMontage* FP_ReloadAnimation; // 0x438(0x08)
	struct FItemAnimationItem OverheatAnimation; // 0x440(0x18)
	struct TArray<struct FItemAnimationItem> GunslingAnimations; // 0x458(0x10)
	struct UAnimMontage* TP_ReloadAnimation; // 0x468(0x08)
	struct UAnimMontage* WPN_Fire; // 0x470(0x08)
	struct UAnimMontage* WPN_FireLastBullet; // 0x478(0x08)
	struct UAnimMontage* WPN_Reload; // 0x480(0x08)
	struct UAnimMontage* WPN_Reload_TP; // 0x488(0x08)
	struct UFXSystemAsset* MuzzleParticles; // 0x490(0x08)
	struct UFXSystemAsset* TPMuzzleParticles; // 0x498(0x08)
	bool UseTriggeredMuzzleParticles; // 0x4a0(0x01)
	char pad_4A1[0xf]; // 0x4a1(0x0f)
	struct FTracerData Tracer; // 0x4b0(0x30)
	struct UParticleSystem* TracerParticles; // 0x4e0(0x08)
	struct UParticleSystem* TrailParticles; // 0x4e8(0x08)
	float MinTracerDistance; // 0x4f0(0x04)
	float TracerSpeed; // 0x4f4(0x04)
	float TracerOffset; // 0x4f8(0x04)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct UFXSystemAsset* CasingParticles; // 0x500(0x08)
	bool UseTriggeredCasingParticleSystem; // 0x508(0x01)
	char pad_509[0xf]; // 0x509(0x0f)
	struct ULightComponent* MuzzleFlashLight; // 0x518(0x08)
	struct FRuntimeFloatCurve MuzzleFlashLightCurve; // 0x520(0x88)
	char pad_5A8[0x8]; // 0x5a8(0x08)
	struct USoundCue* FireSound; // 0x5b0(0x08)
	struct USoundCue* RicochetSound; // 0x5b8(0x08)
	struct UFXSystemAsset* RicochetParticle; // 0x5c0(0x08)
	float FireSoundDelayToTail; // 0x5c8(0x04)
	char pad_5CC[0xc]; // 0x5cc(0x0c)
	struct USoundCue* FireSoundTail; // 0x5d8(0x08)
	bool IsFireSoundTail2D; // 0x5e0(0x01)
	char pad_5E1[0x7]; // 0x5e1(0x07)
	struct UForceFeedbackEffect* FireForceFeedbackEffect; // 0x5e8(0x08)
	struct TWeakObjectPtr<struct UAudioComponent> FireSoundInstance; // 0x5f0(0x08)
	float FireSoundFadeDuration; // 0x5f8(0x04)
	char pad_5FC[0x4]; // 0x5fc(0x04)
	struct USoundCue* ReloadSound; // 0x600(0x08)
	int32_t BulletsRemainingForNearEmptySound; // 0x608(0x04)
	char pad_60C[0x4]; // 0x60c(0x04)
	struct USoundCue* NearEmptySound; // 0x610(0x08)
	struct USoundCue* WeaponEmptySound; // 0x618(0x08)
	struct UDialogDataAsset* ShoutShotFired; // 0x620(0x08)
	struct UDialogDataAsset* ShoutOutOfAmmo; // 0x628(0x08)
	struct UDialogDataAsset* ShoutReloading; // 0x630(0x08)
	int32_t MaxAmmo; // 0x638(0x04)
	int32_t ClipSize; // 0x63c(0x04)
	int32_t ShotCost; // 0x640(0x04)
	float RateOfFire; // 0x644(0x04)
	int32_t BurstCount; // 0x648(0x04)
	float BurstCycleTime; // 0x64c(0x04)
	float ReloadDuration; // 0x650(0x04)
	int32_t AmmoCount; // 0x654(0x04)
	int32_t ClipCount; // 0x658(0x04)
	float AutoReloadDuration; // 0x65c(0x04)
	struct USoundCue* AutoReloadCompleteCue; // 0x660(0x08)
	struct FMulticastInlineDelegate OnItemAutoReloaded; // 0x668(0x10)
	char pad_678[0x4]; // 0x678(0x04)
	float SupplyStatusWeight; // 0x67c(0x04)
	float CycleTimeLeft; // 0x680(0x04)
	char pad_684[0x4]; // 0x684(0x04)
	float ReloadTimeLeft; // 0x688(0x04)
	bool AutomaticReload; // 0x68c(0x01)
	bool CanReload; // 0x68d(0x01)
	char pad_68E[0x2]; // 0x68e(0x02)
	struct FRecoilSettings RecoilSettings; // 0x690(0x28)
	bool HasAutomaticFire; // 0x6b8(0x01)
	bool IsFiring; // 0x6b9(0x01)
	char pad_6BA[0x18]; // 0x6ba(0x18)
	enum class EAmmoWeaponState WeaponState; // 0x6d2(0x01)
	char pad_6D3[0xd]; // 0x6d3(0x0d)

	void Upgraded_Blueprint_Implementation(struct TArray<struct UItemUpgrade*> upgrades); // Function FSD.AmmoDrivenWeapon.Upgraded_Blueprint_Implementation // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	void Server_StopReload(); // Function FSD.AmmoDrivenWeapon.Server_StopReload // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1088620
	void Server_ReloadWeapon(); // Function FSD.AmmoDrivenWeapon.Server_ReloadWeapon // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1088530
	void Server_PlayBurstFire(char shotCount); // Function FSD.AmmoDrivenWeapon.Server_PlayBurstFire // (Net|Native|Event|Protected|NetServer) // @ game+0x10884b0
	void Server_Gunsling(char Index); // Function FSD.AmmoDrivenWeapon.Server_Gunsling // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1088430
	void ResupplyAmmo(int32_t Amount); // Function FSD.AmmoDrivenWeapon.ResupplyAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x10883b0
	void RecieveFiredWeapon(); // Function FSD.AmmoDrivenWeapon.RecieveFiredWeapon // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Receive_ReloadEnd(); // Function FSD.AmmoDrivenWeapon.Receive_ReloadEnd // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void Receive_ReloadBegin(); // Function FSD.AmmoDrivenWeapon.Receive_ReloadBegin // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void Receive_IsFiringChanged(bool NewValue); // Function FSD.AmmoDrivenWeapon.Receive_IsFiringChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnWeaponFireEnded(); // Function FSD.AmmoDrivenWeapon.OnWeaponFireEnded // (Final|Native|Protected) // @ game+0x1088280
	void OnWeaponFired(struct FVector Location); // Function FSD.AmmoDrivenWeapon.OnWeaponFired // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x10882a0
	void OnRicochet(struct FVector Origin, struct FVector Location, struct FVector Normal); // Function FSD.AmmoDrivenWeapon.OnRicochet // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x10880c0
	void OnRep_IsFiring(); // Function FSD.AmmoDrivenWeapon.OnRep_IsFiring // (Final|Native|Protected) // @ game+0x10880a0
	bool IsClipFull(); // Function FSD.AmmoDrivenWeapon.IsClipFull // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1087920
	void InstantlyReload(); // Function FSD.AmmoDrivenWeapon.InstantlyReload // (Final|Native|Public|BlueprintCallable) // @ game+0x1087900
	void CustomEvent1(struct UItemUpgrade* Event); // Function FSD.AmmoDrivenWeapon.CustomEvent1 // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void Client_RefillAmmo(float percentage); // Function FSD.AmmoDrivenWeapon.Client_RefillAmmo // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x10877f0
	void All_StopReload(); // Function FSD.AmmoDrivenWeapon.All_StopReload // (Net|Native|Event|NetMulticast|Protected) // @ game+0x10877d0
	void All_StartReload(); // Function FSD.AmmoDrivenWeapon.All_StartReload // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1083ef0
	void All_PlayBurstFire(char shotCount); // Function FSD.AmmoDrivenWeapon.All_PlayBurstFire // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1087750
	void All_Gunsling(char Index); // Function FSD.AmmoDrivenWeapon.All_Gunsling // (Net|Native|Event|NetMulticast|Protected) // @ game+0x10876d0
};

// Class FSD.ItemAggregator
// Size: 0xc8 (Inherited: 0xb0)
struct UItemAggregator : UActorComponent {
	struct FText CounterText; // 0xb0(0x18)

	void UnbindAllEvents(); // Function FSD.ItemAggregator.UnbindAllEvents // (Native|Public|BlueprintCallable) // @ game+0x116d120
};

// Class FSD.ClipBasedItemAggregator
// Size: 0x140 (Inherited: 0xc8)
struct UClipBasedItemAggregator : UItemAggregator {
	struct FMulticastInlineDelegate OnClipAmountChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnTotalAmountChanged; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnClipAndTotalChanged; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnReloadTimeChanged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnReloadComplete; // 0x108(0x10)
	struct FMulticastInlineDelegate OnReloadStarted; // 0x118(0x10)
	struct FMulticastInlineDelegate OnMaxAmmoCapacityChanged; // 0x128(0x10)
	bool ShowTotalAmount; // 0x138(0x01)
	char pad_139[0x7]; // 0x139(0x07)

	void ReloadStarted(); // Function FSD.ClipBasedItemAggregator.ReloadStarted // (Final|Native|Public) // @ game+0x109f9d0
	void ReloadComplete(); // Function FSD.ClipBasedItemAggregator.ReloadComplete // (Final|Native|Public) // @ game+0x109f9a0
	int32_t GetTotalAmount(); // Function FSD.ClipBasedItemAggregator.GetTotalAmount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f1f0
	int32_t GetClipAmount(); // Function FSD.ClipBasedItemAggregator.GetClipAmount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f1c0
};

// Class FSD.AmmoDriveWeaponAggregator
// Size: 0x148 (Inherited: 0x140)
struct UAmmoDriveWeaponAggregator : UClipBasedItemAggregator {
	struct AAmmoDrivenWeapon* Weapon; // 0x140(0x08)
};

// Class FSD.AmmoDrivenWeaponAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UAmmoDrivenWeaponAnimInstance : UAnimInstance {
	struct AAmmoDrivenWeapon* Weapon; // 0x268(0x08)
	bool IsFiring; // 0x270(0x01)
	float ClipFullPercentage; // 0x274(0x04)
	bool Overheated; // 0x278(0x01)
	char pad_27E[0x2]; // 0x27e(0x02)

	bool IsFull(); // Function FSD.AmmoDrivenWeaponAnimInstance.IsFull // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1087980
	bool isEmpty(); // Function FSD.AmmoDrivenWeaponAnimInstance.isEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1087950
};

// Class FSD.PlatformGunAnimInstance
// Size: 0x290 (Inherited: 0x280)
struct UPlatformGunAnimInstance : UAmmoDrivenWeaponAnimInstance {
	float SpinRate; // 0x280(0x04)
	float NormalSpinRate; // 0x284(0x04)
	float LerpSpeed; // 0x288(0x04)
	float FiredSpinRate; // 0x28c(0x04)

	void WeaponFired(); // Function FSD.PlatformGunAnimInstance.WeaponFired // (Final|Native|Public|BlueprintCallable) // @ game+0x1088790
};

// Class FSD.AnchorTurner
// Size: 0x2c0 (Inherited: 0x220)
struct AAnchorTurner : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x228(0x08)
	struct USphereComponent* PushCollider1; // 0x230(0x08)
	struct USphereComponent* PushCollider2; // 0x238(0x08)
	struct USphereComponent* PushCollider3; // 0x240(0x08)
	struct USphereComponent* PushCollider4; // 0x248(0x08)
	struct FMulticastInlineDelegate OnSpunUp; // 0x250(0x10)
	char pad_260[0x20]; // 0x260(0x20)
	struct FVector AttatchmentOffset; // 0x280(0x0c)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct TArray<struct FName> AttachmentPoints; // 0x290(0x10)
	float PerPlayerMultiplier; // 0x2a0(0x04)
	float TurnSpeed; // 0x2a4(0x04)
	float Progress; // 0x2a8(0x04)
	float MaxProgress; // 0x2ac(0x04)
	char pad_2B0[0x4]; // 0x2b0(0x04)
	bool Finished; // 0x2b4(0x01)
	char pad_2B5[0x3]; // 0x2b5(0x03)
	float DecaySpeed; // 0x2b8(0x04)
	char pad_2BC[0x4]; // 0x2bc(0x04)

	void OnRep_Finished(); // Function FSD.AnchorTurner.OnRep_Finished // (Final|Native|Protected) // @ game+0x1088080
	void OnLeftPushpoint(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.AnchorTurner.OnLeftPushpoint // (Final|Native|Public) // @ game+0x1087dc0
	void OnEnteredPushpoint(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.AnchorTurner.OnEnteredPushpoint // (Final|Native|Public|HasOutParms) // @ game+0x1087a30
	void GeneratorSpunUp(); // Function FSD.AnchorTurner.GeneratorSpunUp // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.AnchorTurnerAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UAnchorTurnerAnimInstance : UAnimInstance {
	float ModuleRotation; // 0x268(0x04)
	float Percent; // 0x26c(0x04)
	float TurnSpeed; // 0x270(0x04)
	bool IsFinished; // 0x274(0x01)
	char pad_27D[0x3]; // 0x27d(0x03)
};

// Class FSD.BaseArmorDamageComponent
// Size: 0x100 (Inherited: 0xb0)
struct UBaseArmorDamageComponent : UActorComponent {
	bool ArmorDamageEnabled; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct FMulticastInlineDelegate OnArmorShatteredEvent; // 0xb8(0x10)
	struct TArray<struct UParticleSystem*> ArmorBreakParticles; // 0xc8(0x10)
	struct TArray<struct UParticleSystem*> ArmorDisolveParticles; // 0xd8(0x10)
	struct TArray<struct UFSDPhysicalMaterial*> ArmorPhysMats; // 0xe8(0x10)
	struct USkeletalMeshComponent* Mesh; // 0xf8(0x08)
};

// Class FSD.SimpleArmorDamageComponent
// Size: 0x170 (Inherited: 0x100)
struct USimpleArmorDamageComponent : UBaseArmorDamageComponent {
	struct FMulticastInlineDelegate OnRadialArmorPartsDestroyedEvent; // 0x100(0x10)
	float ArmorStrength; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct TMap<struct FName, struct FDestructableBodypartItem> PhysBoneToArmor; // 0x118(0x50)
	uint32_t ArmorDamageIndexMask; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)

	void Server_SetArmorIndexDestroyed(int32_t Index, bool Disolved); // Function FSD.SimpleArmorDamageComponent.Server_SetArmorIndexDestroyed // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1088550
	void OnRep_ArmorDamageIndexMask(uint32_t OldIndexMask); // Function FSD.SimpleArmorDamageComponent.OnRep_ArmorDamageIndexMask // (Final|Native|Protected) // @ game+0x1088000
};

// Class FSD.ArmorHealthDamageComponent
// Size: 0x178 (Inherited: 0x100)
struct UArmorHealthDamageComponent : UBaseArmorDamageComponent {
	struct FMulticastInlineDelegate OnArmorPartDestroyedEvent; // 0x100(0x10)
	struct FMulticastInlineDelegate OnArmorPartDamagedEvent; // 0x110(0x10)
	struct TMap<struct FName, struct FArmorHealthItem> PhysBoneToArmor; // 0x120(0x50)
	uint32_t ArmorDamageIndex; // 0x170(0x04)
	bool AffectedByAmorBreak; // 0x174(0x01)
	char pad_175[0x3]; // 0x175(0x03)

	bool SetHealthOnBodypartItem(struct FName BoneName, float newHealth); // Function FSD.ArmorHealthDamageComponent.SetHealthOnBodypartItem // (Final|Native|Public|BlueprintCallable) // @ game+0x10886c0
	void SetHealthOnAllItems(float newHealth); // Function FSD.ArmorHealthDamageComponent.SetHealthOnAllItems // (Final|Native|Public|BlueprintCallable) // @ game+0x1088640
	void RegrowAllArmor(float baseHealth); // Function FSD.ArmorHealthDamageComponent.RegrowAllArmor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1088330
	void OnRep_ArmorDamageIndex(uint32_t OldValue); // Function FSD.ArmorHealthDamageComponent.OnRep_ArmorDamageIndex // (Final|Native|Protected) // @ game+0x1087f00
};

// Class FSD.CompositeArmorComponent
// Size: 0x148 (Inherited: 0x100)
struct UCompositeArmorComponent : UBaseArmorDamageComponent {
	struct FMulticastInlineDelegate OnArmorPartDestroyedEvent; // 0x100(0x10)
	struct FMulticastInlineDelegate OnArmorPartDamagedEvent; // 0x110(0x10)
	struct UFXSystemAsset* BreakParticle; // 0x120(0x08)
	bool AffectedByAmorBreak; // 0x128(0x01)
	char pad_129[0x7]; // 0x129(0x07)
	struct TArray<struct FCompositeArmorItem> ArmorItems; // 0x130(0x10)
	uint32_t ArmorDamageIndex; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)

	void OnRep_ArmorDamageIndex(uint32_t OldValue); // Function FSD.CompositeArmorComponent.OnRep_ArmorDamageIndex // (Final|Native|Protected) // @ game+0x1087f80
	void AddArmorPart(struct UPrimitiveComponent* Primitive, float Health); // Function FSD.CompositeArmorComponent.AddArmorPart // (Final|Native|Public|BlueprintCallable) // @ game+0x1087600
};

// Class FSD.ArmorPiece
// Size: 0x2a8 (Inherited: 0x220)
struct AArmorPiece : AActor {
	char pad_220[0x18]; // 0x220(0x18)
	struct UUpgradableGearComponent* Upgradable; // 0x238(0x08)
	struct TMap<struct UPawnStat*, float> StatModifiers; // 0x240(0x50)
	struct ALoadoutItemProxy* LoadoutProxy; // 0x290(0x08)
	struct UItemID* ItemID; // 0x298(0x08)
	struct AActor* WeaponPreviewClass; // 0x2a0(0x08)

	struct AActor* GetWeaponViewClass(); // Function FSD.ArmorPiece.GetWeaponViewClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x108c600
	struct AArmorPiece* GetArmorPieceDefaultObject(struct AArmorPiece* armorPieceClass); // Function FSD.ArmorPiece.GetArmorPieceDefaultObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x108c330
};

// Class FSD.AsyncLevelPersistanceActor
// Size: 0x240 (Inherited: 0x220)
struct AAsyncLevelPersistanceActor : AActor {
	struct TArray<struct UObject*> References; // 0x220(0x10)
	char pad_230[0x10]; // 0x230(0x10)
};

// Class FSD.AsyncManager
// Size: 0x58 (Inherited: 0x30)
struct UAsyncManager : UGameInstanceSubsystem {
	struct TArray<struct UObject*> PermanentReferences; // 0x30(0x10)
	char pad_40[0x18]; // 0x40(0x18)

	void ReleaseAllHandles(); // Function FSD.AsyncManager.ReleaseAllHandles // (Final|Native|Public|BlueprintCallable) // @ game+0x108c9e0
	void AsyncLoadSoftObjects(struct TArray<struct TSoftObjectPtr<struct UObject>> Items, enum class EAsyncPersistence persistence, struct FDelegate OnLoadComplete, enum class EAsyncLoadPriority Priority); // Function FSD.AsyncManager.AsyncLoadSoftObjects // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x108bfa0
	void AsyncLoadSoftObject(struct TSoftObjectPtr<struct UObject> Item, enum class EAsyncPersistence persistence, struct FDelegate OnLoadComplete, enum class EAsyncLoadPriority Priority); // Function FSD.AsyncManager.AsyncLoadSoftObject // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x108bdb0
	void AsyncLoadSoftClass(SoftClassProperty Item, enum class EAsyncPersistence persistence, struct FDelegate OnLoadComplete, enum class EAsyncLoadPriority Priority); // Function FSD.AsyncManager.AsyncLoadSoftClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x108bdb0
	void AsyncLoadAssets(struct TArray<struct FSoftObjectPath> Items, enum class EAsyncPersistence persistence, struct FDelegate OnLoadComplete, enum class EAsyncLoadPriority Priority); // Function FSD.AsyncManager.AsyncLoadAssets // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x108bc00
	void AsyncLoadAsset(struct FSoftObjectPath Item, enum class EAsyncPersistence persistence, struct FDelegate OnLoadComplete, enum class EAsyncLoadPriority Priority); // Function FSD.AsyncManager.AsyncLoadAsset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x108ba70
};

// Class FSD.AttackBaseComponent
// Size: 0xf0 (Inherited: 0xb0)
struct UAttackBaseComponent : UActorComponent {
	char pad_B0[0x10]; // 0xb0(0x10)
	struct FName AttackName; // 0xc0(0x08)
	float MaxSurfaceAngle; // 0xc8(0x04)
	struct FFloatInterval range; // 0xcc(0x08)
	float MinRange; // 0xd4(0x04)
	float MaxRange; // 0xd8(0x04)
	char pad_DC[0x14]; // 0xdc(0x14)

	struct UAttackBaseComponent* ReplaceAttackComponent(struct UAttackBaseComponent* componentToReplace, struct UAttackBaseComponent* newComponentClass); // Function FSD.AttackBaseComponent.ReplaceAttackComponent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x108ca00
	void ReceiveCompleteAttack(); // Function FSD.AttackBaseComponent.ReceiveCompleteAttack // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveAttackTarget(struct AActor* Target); // Function FSD.AttackBaseComponent.ReceiveAttackTarget // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveAbortAttack(); // Function FSD.AttackBaseComponent.ReceiveAbortAttack // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void CompleteAttack(bool success); // Function FSD.AttackBaseComponent.CompleteAttack // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x108c280
	void AttackTarget(struct AActor* Target); // Function FSD.AttackBaseComponent.AttackTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x108c150
	void AbortAttack(); // Function FSD.AttackBaseComponent.AbortAttack // (Final|Native|Public|BlueprintCallable) // @ game+0x108ba30
};

// Class FSD.AttackEffect
// Size: 0x28 (Inherited: 0x28)
struct UAttackEffect : UObject {
};

// Class FSD.AttackCooldownComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UAttackCooldownComponent : UActorComponent {
	struct TArray<struct FAttackCooldown> AttackCooldowns; // 0xb0(0x10)

	void SetCooldown(struct FName AttackName, float cooldownSeconds); // Function FSD.AttackCooldownComponent.SetCooldown // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x108cbc0
	bool IsAttackOffCooldown(struct FName AttackName); // Function FSD.AttackCooldownComponent.IsAttackOffCooldown // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x108c670
	bool IsAnyAttackOffCooldown(); // Function FSD.AttackCooldownComponent.IsAnyAttackOffCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x108c640
	void AttackUsed(struct FName Name); // Function FSD.AttackCooldownComponent.AttackUsed // (Final|Native|Public|HasOutParms) // @ game+0x108c1d0
};

// Class FSD.AttackerManagerComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UAttackerManagerComponent : UActorComponent {
	struct TArray<struct UAttackerPositioningComponent*> Components; // 0xb0(0x10)
};

// Class FSD.AttackerPositioningComponent
// Size: 0x108 (Inherited: 0xb0)
struct UAttackerPositioningComponent : UActorComponent {
	bool DebugPositions; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	int32_t MaxAttackers; // 0xb4(0x04)
	struct TArray<struct FAttackerInfo> Attackers; // 0xb8(0x10)
	struct TArray<int32_t> FreePositions; // 0xc8(0x10)
	struct TArray<struct FAttackerInfo> FlyingAttackers; // 0xd8(0x10)
	struct TArray<int32_t> FlyingFreePositions; // 0xe8(0x10)
	float CharacterPersonalSphere; // 0xf8(0x04)
	float CharacterHalfHeight; // 0xfc(0x04)
	float CostModifier; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)

	void UnregisterAttacker(struct AActor* Attacker, bool IsFlying); // Function FSD.AttackerPositioningComponent.UnregisterAttacker // (Final|Native|Public|BlueprintCallable) // @ game+0x108ce60
	void RegisterAttacker(struct AActor* Attacker, bool IsFlying); // Function FSD.AttackerPositioningComponent.RegisterAttacker // (Final|Native|Public|BlueprintCallable) // @ game+0x108c910
	void OnFlyingAttackerDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.AttackerPositioningComponent.OnFlyingAttackerDeath // (Final|Native|Protected) // @ game+0x108c790
	void OnAttackerDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.AttackerPositioningComponent.OnAttackerDeath // (Final|Native|Protected) // @ game+0x108c710
	struct FVector GetFlyingAttackerPosition(struct AActor* Attacker, float AttackerRadius); // Function FSD.AttackerPositioningComponent.GetFlyingAttackerPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x108c490
	struct FVector GetAttackerPosition(struct AActor* Attacker, float AttackerRadius); // Function FSD.AttackerPositioningComponent.GetAttackerPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x108c3b0
};

// Class FSD.PlayerAttackPositionComponent
// Size: 0x110 (Inherited: 0x108)
struct UPlayerAttackPositionComponent : UAttackerPositioningComponent {
	float OnZiplineFlyingModifier; // 0x108(0x04)
	float OnZiplineWalkingModifier; // 0x10c(0x04)
};

// Class FSD.ObjectAttackerPositioning
// Size: 0x110 (Inherited: 0x108)
struct UObjectAttackerPositioning : UAttackerPositioningComponent {
	struct UHealthComponentBase* Health; // 0x108(0x08)
};

// Class FSD.CustomObjectAttackerPositioning
// Size: 0x120 (Inherited: 0x108)
struct UCustomObjectAttackerPositioning : UAttackerPositioningComponent {
	struct UHealthComponentBase* Health; // 0x108(0x08)
	struct TArray<struct FVector> AttackerPositions; // 0x110(0x10)
};

// Class FSD.EnemyAttackerPositioningComponent
// Size: 0x108 (Inherited: 0x108)
struct UEnemyAttackerPositioningComponent : UAttackerPositioningComponent {
};

// Class FSD.EscortMuleAttackerPositioning
// Size: 0x120 (Inherited: 0x108)
struct UEscortMuleAttackerPositioning : UAttackerPositioningComponent {
	struct UHealthComponentBase* Health; // 0x108(0x08)
	struct TArray<struct FVector> AttackerPositions; // 0x110(0x10)

	void SetNewMaxAttackers(int32_t newMaxAttackers); // Function FSD.EscortMuleAttackerPositioning.SetNewMaxAttackers // (Final|Native|Public|BlueprintCallable) // @ game+0x108cd10
	void SetCostModifier(float newModifier); // Function FSD.EscortMuleAttackerPositioning.SetCostModifier // (Native|Public|BlueprintCallable) // @ game+0x108cc90
};

// Class FSD.AttackingPointInterface
// Size: 0x28 (Inherited: 0x28)
struct UAttackingPointInterface : UInterface {
};

// Class FSD.AudioFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UAudioFunctionLibrary : UBlueprintFunctionLibrary {

	float SetSoundClassVolume(struct USoundClass* SoundClass, float Volume); // Function FSD.AudioFunctionLibrary.SetSoundClassVolume // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x108cd90
	void PushTimedSoundMix(struct UObject* contextObject, struct USoundMix* mix, float Duration); // Function FSD.AudioFunctionLibrary.PushTimedSoundMix // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x108c810
	float GetSoundClassVolume(struct USoundClass* SoundClass); // Function FSD.AudioFunctionLibrary.GetSoundClassVolume // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x108c570
};

// Class FSD.SoundClassWidget
// Size: 0x230 (Inherited: 0x230)
struct USoundClassWidget : UUserWidget {
};

// Class FSD.AutoCannon
// Size: 0x7a8 (Inherited: 0x6e0)
struct AAutoCannon : AAmmoDrivenWeapon {
	float StartingFireRate; // 0x6e0(0x04)
	float MaxFireRate; // 0x6e4(0x04)
	struct FRuntimeFloatCurve FireRateCurve; // 0x6e8(0x88)
	float FireTimeReductionScale; // 0x770(0x04)
	float FireTimeIncreaseScale; // 0x774(0x04)
	float MaxFireTimeCap; // 0x778(0x04)
	float DamageBonusAtFullROF; // 0x77c(0x04)
	bool StatusEffectAtFullROF; // 0x780(0x01)
	char pad_781[0x3]; // 0x781(0x03)
	float FireTimeOffsetForMaxRateOfFireBonus; // 0x784(0x04)
	float StartLoopingSoundAt; // 0x788(0x04)
	char pad_78C[0x4]; // 0x78c(0x04)
	struct UStatusEffect* StatusAtFullROF; // 0x790(0x08)
	struct UAnimMontage* WPN_Fire_3; // 0x798(0x08)
	float CurrentFireTime; // 0x7a0(0x04)
	char pad_7A4[0x4]; // 0x7a4(0x04)

	void Server_SetStatusActive(bool IsActive); // Function FSD.AutoCannon.Server_SetStatusActive // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x108cb00
};

// Class FSD.AutoCannonAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UAutoCannonAnimInstance : UAnimInstance {
};

// Class FSD.AutoCarverComponent
// Size: 0x4c0 (Inherited: 0x480)
struct UAutoCarverComponent : UStaticMeshComponent {
	struct UTerrainMaterialBase* TerrainMaterial; // 0x480(0x08)
	float Frequency; // 0x488(0x04)
	float ExpensiveNoise; // 0x48c(0x04)
	float MinDistanceMoved; // 0x490(0x04)
	enum class ECarveFilterType Filter; // 0x494(0x01)
	char pad_495[0x3]; // 0x495(0x03)
	struct FMulticastInlineDelegate OnCarveDoneEvent; // 0x498(0x10)
	char pad_4A8[0x18]; // 0x4a8(0x18)

	void ForceCarve(); // Function FSD.AutoCarverComponent.ForceCarve // (Final|Native|Public|BlueprintCallable) // @ game+0x108c310
};

// Class FSD.STLMeshCarverComponent
// Size: 0x410 (Inherited: 0x3f0)
struct USTLMeshCarverComponent : UPrimitiveComponent {
	struct UTerrainMaterialBase* TerrainMaterial; // 0x3f0(0x08)
	struct USTLMeshCarver* MeshCarver; // 0x3f8(0x08)
	enum class ECarveFilterType Filter; // 0x400(0x01)
	bool PreviewEnabled; // 0x401(0x01)
	char pad_402[0xe]; // 0x402(0x0e)
};

// Class FSD.MeshCarverComponent
// Size: 0x4a0 (Inherited: 0x480)
struct UMeshCarverComponent : UStaticMeshComponent {
	struct UTerrainMaterialBase* TerrainMaterial; // 0x480(0x08)
	enum class ECarveFilterType Filter; // 0x488(0x01)
	char pad_489[0x3]; // 0x489(0x03)
	float ExpensiveNoise; // 0x48c(0x04)
	enum class CarveOptionsCellSize CarverSize; // 0x490(0x01)
	char pad_491[0xf]; // 0x491(0x0f)

	void Carve(); // Function FSD.MeshCarverComponent.Carve // (Final|Native|Public|BlueprintCallable) // @ game+0x108c260
};

// Class FSD.LevelGenerationCarverComponent
// Size: 0x420 (Inherited: 0x3f0)
struct ULevelGenerationCarverComponent : UPrimitiveComponent {
	struct USTLMeshCarver* MeshCarver; // 0x3f0(0x08)
	struct UStaticMesh* ConvexCarver; // 0x3f8(0x08)
	struct UStaticMeshCarver* StaticMeshCarver; // 0x400(0x08)
	struct UTerrainMaterialBase* TerrainMaterial; // 0x408(0x08)
	enum class ECarveFilterType Filter; // 0x410(0x01)
	char pad_411[0x3]; // 0x411(0x03)
	float ConvexExpensiveNoise; // 0x414(0x04)
	enum class CarveOptionsCellSize CarveCellSize; // 0x418(0x01)
	bool PreviewEnabled; // 0x419(0x01)
	bool CarvingDisabled; // 0x41a(0x01)
	bool SelfActivate; // 0x41b(0x01)
	char pad_41C[0x4]; // 0x41c(0x04)
};

// Class FSD.RandomizedInstantMeshCarver
// Size: 0x268 (Inherited: 0x220)
struct ARandomizedInstantMeshCarver : AActor {
	struct TArray<struct UStaticMesh*> CarvingMeshes; // 0x220(0x10)
	struct TArray<struct USTLMeshCarver*> STLCarvingMeshes; // 0x230(0x10)
	struct TArray<struct UStaticMeshCarver*> StaticMeshCarvers; // 0x240(0x10)
	struct FRandRange RandomScale; // 0x250(0x08)
	struct UTerrainMaterialBase* TerrainMaterial; // 0x258(0x08)
	enum class ECarveFilterType Filter; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
};

// Class FSD.LevelGenerationCarverComponent2
// Size: 0x550 (Inherited: 0x3f0)
struct ULevelGenerationCarverComponent2 : UPrimitiveComponent {
	struct ACSGBuilder* Carver; // 0x3f0(0x08)
	bool CarvingDisabled; // 0x3f8(0x01)
	char pad_3F9[0x3]; // 0x3f9(0x03)
	int32_t PreviewSeed; // 0x3fc(0x04)
	struct FBakeSettings CarverSettings; // 0x400(0x140)
	bool SelfActivate; // 0x540(0x01)
	char pad_541[0x7]; // 0x541(0x07)
	struct UCSGPreviewComponent* PreviewComponent; // 0x548(0x08)
};

// Class FSD.AvoidCeilingComponent
// Size: 0xf8 (Inherited: 0xb0)
struct UAvoidCeilingComponent : UActorComponent {
	float MaxDuckDistance; // 0xb0(0x04)
	float TraceVerticalStart; // 0xb4(0x04)
	float MinVerticalSpace; // 0xb8(0x04)
	float DuckSpeed; // 0xbc(0x04)
	struct USceneComponent* ComponentToMove; // 0xc0(0x08)
	bool IsDuckingEnabled; // 0xc8(0x01)
	char pad_C9[0x2f]; // 0xc9(0x2f)
};

// Class FSD.Ball
// Size: 0xb0 (Inherited: 0xb0)
struct UBall : UActorComponent {
};

// Class FSD.WindowWidget
// Size: 0x270 (Inherited: 0x230)
struct UWindowWidget : UUserWidget {
	struct FMulticastInlineDelegate OnWindowClosed; // 0x230(0x10)
	char pad_240[0x28]; // 0x240(0x28)
	bool bHandleCloseCommand; // 0x268(0x01)
	bool bResolutionDownscaleWhenOpen; // 0x269(0x01)
	char pad_26A[0x6]; // 0x26a(0x06)

	void WindowDelegate__DelegateSignature(struct UWindowWidget* Window); // DelegateFunction FSD.WindowWidget.WindowDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ReceiveSelectPreviousCommand(); // Function FSD.WindowWidget.ReceiveSelectPreviousCommand // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveSelectNextCommand(); // Function FSD.WindowWidget.ReceiveSelectNextCommand // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveSelectCharacterCommand(); // Function FSD.WindowWidget.ReceiveSelectCharacterCommand // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveOkCommand(); // Function FSD.WindowWidget.ReceiveOkCommand // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveCloseCommand(); // Function FSD.WindowWidget.ReceiveCloseCommand // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnShown(); // Function FSD.WindowWidget.OnShown // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnNewTopWindow(); // Function FSD.WindowWidget.OnNewTopWindow // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnClosed(); // Function FSD.WindowWidget.OnClosed // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ConsumeCommand(); // Function FSD.WindowWidget.ConsumeCommand // (Final|Native|Protected|BlueprintCallable) // @ game+0x123eb30
	void CloseThisWindow(); // Function FSD.WindowWidget.CloseThisWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x123eb10
};

// Class FSD.BarMenuWidget
// Size: 0x278 (Inherited: 0x270)
struct UBarMenuWidget : UWindowWidget {
	struct TWeakObjectPtr<struct ASpaceRigBar> SpaceRigBar; // 0x270(0x08)
};

// Class FSD.BarrierProjectile
// Size: 0x220 (Inherited: 0x220)
struct ABarrierProjectile : AActor {
};

// Class FSD.WeaponFireComponent
// Size: 0x110 (Inherited: 0xb0)
struct UWeaponFireComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FMulticastInlineDelegate OnWeaponFired; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnWeaponFireEnded; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnRicochetEvent; // 0xd8(0x10)
	char pad_E8[0x10]; // 0xe8(0x10)
	struct TScriptInterface<None> Weapon; // 0xf8(0x10)
	char pad_108[0x8]; // 0x108(0x08)

	void StopFire(); // Function FSD.WeaponFireComponent.StopFire // (Native|Public|BlueprintCallable) // @ game+0x109fdb0
	void Server_SetShotPower(float shotPower); // Function FSD.WeaponFireComponent.Server_SetShotPower // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x123b4c0
	void Fire(struct FVector Origin, struct FVector_NetQuantizeNormal Direction, bool playFireFX); // Function FSD.WeaponFireComponent.Fire // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1239ec0
};

// Class FSD.BasicWeaponFireComponent
// Size: 0x110 (Inherited: 0x110)
struct UBasicWeaponFireComponent : UWeaponFireComponent {

	void Server_FireWeapon(); // Function FSD.BasicWeaponFireComponent.Server_FireWeapon // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x108cae0
	void Server_EndFire(); // Function FSD.BasicWeaponFireComponent.Server_EndFire // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x108cac0
	void All_WeaponFired(); // Function FSD.BasicWeaponFireComponent.All_WeaponFired // (Net|Native|Event|NetMulticast|Protected) // @ game+0x108ba50
};

// Class FSD.BeltDrivenWeapon
// Size: 0x710 (Inherited: 0x6e0)
struct ABeltDrivenWeapon : AAmmoDrivenWeapon {
	struct UAudioComponent* BarrelAudio; // 0x6e0(0x08)
	struct USoundCue* BarrelSound; // 0x6e8(0x08)
	float BarrelFadeIn; // 0x6f0(0x04)
	float BarrelFadeOut; // 0x6f4(0x04)
	struct UCurveFloat* BarrelPitchCurve; // 0x6f8(0x08)
	float BarrelSpinUpTime; // 0x700(0x04)
	float BarrelSpinDownTime; // 0x704(0x04)
	float CurrentSpinRate; // 0x708(0x04)
	bool Simulate_SpinBarrel; // 0x70c(0x01)
	char pad_70D[0x3]; // 0x70d(0x03)

	void Server_StopBarrel(); // Function FSD.BeltDrivenWeapon.Server_StopBarrel // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1092350
	void Server_StartBarrel(); // Function FSD.BeltDrivenWeapon.Server_StartBarrel // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1092330
};

// Class FSD.GatlingGun
// Size: 0x770 (Inherited: 0x710)
struct AGatlingGun : ABeltDrivenWeapon {
	bool BarrelProximityDamageEnabled; // 0x710(0x01)
	char pad_711[0x3]; // 0x711(0x03)
	float BarrelProximityDamageDistance; // 0x714(0x04)
	float BarrelProximityDamageRadius; // 0x718(0x04)
	float BarrelProximityDamageLength; // 0x71c(0x04)
	float TimeBetweenProximityDamageTicks; // 0x720(0x04)
	char pad_724[0x14]; // 0x724(0x14)
	float DamageMultiplierAtMaxStabilization; // 0x738(0x04)
	char pad_73C[0x4]; // 0x73c(0x04)
	struct UFXSystemAsset* HotShellsTracerParticles; // 0x740(0x08)
	char pad_748[0x8]; // 0x748(0x08)
	float HeatRemovedOnKill; // 0x750(0x04)
	bool CriticalOverheatEnabled; // 0x754(0x01)
	bool HotShellsOn; // 0x755(0x01)
	char pad_756[0x2]; // 0x756(0x02)
	float HotShellsTemperatureRequired; // 0x758(0x04)
	char pad_75C[0x4]; // 0x75c(0x04)
	struct UDamageComponent* DamageComponent; // 0x760(0x08)
	struct UDamageComponent* BarrelProximityDamageComponent; // 0x768(0x08)

	void Server_SetHotShellsOn(bool hotShellsIsOn); // Function FSD.GatlingGun.Server_SetHotShellsOn // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1092030
	void OnRep_HotShellsTracerOn(); // Function FSD.GatlingGun.OnRep_HotShellsTracerOn // (Final|Native|Protected) // @ game+0x1091b70
	void OnGatlingTemperatureChanged(float Temperature, bool isOverheated); // Function FSD.GatlingGun.OnGatlingTemperatureChanged // (Final|Native|Protected) // @ game+0x10916b0
	void OnEnemyKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.GatlingGun.OnEnemyKilled // (Final|Native|Protected) // @ game+0x10915f0
	void Client_RemoveHeat(); // Function FSD.GatlingGun.Client_RemoveHeat // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x1090c60
};

// Class FSD.BeltDrivenAnimInstance
// Size: 0x2b0 (Inherited: 0x280)
struct UBeltDrivenAnimInstance : UAmmoDrivenWeaponAnimInstance {
	float BarrelSpinRate; // 0x280(0x04)
	float CurrentBarrelSpinRate; // 0x284(0x04)
	struct FVector ExternalForce; // 0x288(0x0c)
	float ExternalForceScale; // 0x294(0x04)
	struct FName ExternalForceBoneName; // 0x298(0x08)
	char pad_2A0[0x10]; // 0x2a0(0x10)
};

// Class FSD.Biome
// Size: 0x430 (Inherited: 0x30)
struct UBiome : UDataAsset {
	struct FText BiomeName; // 0x30(0x18)
	struct FText BiomeShortName; // 0x48(0x18)
	struct FText BiomeDescription; // 0x60(0x18)
	struct FColor BiomeColor; // 0x78(0x04)
	int32_t BiomeIndex; // 0x7c(0x04)
	struct FString BiomeAnalyticsIndex; // 0x80(0x10)
	struct TSoftObjectPtr<struct UFileMediaSource> BiomeMovie; // 0x90(0x28)
	struct TSoftObjectPtr<struct UTexture2D> BiomePicture; // 0xb8(0x28)
	struct TSoftObjectPtr<struct UTexture2D> BiomeIcon; // 0xe0(0x28)
	struct TSoftObjectPtr<struct UTexture2D> BiomeLargeImage; // 0x108(0x28)
	struct TSoftObjectPtr<struct UTexture2D> BiomeWorldMap; // 0x130(0x28)
	struct TSoftObjectPtr<struct UTexture2D> BiomeMissionBar; // 0x158(0x28)
	SoftClassProperty BiomeMapWidget; // 0x180(0x28)
	struct FHeatSource BiomeHeatSource; // 0x1a8(0x08)
	struct FRandRange DepthRange; // 0x1b0(0x08)
	struct TSoftObjectPtr<struct UParticleSystem> AtmosphericParticles; // 0x1b8(0x28)
	struct TArray<SoftClassProperty> CaveScriptComponents; // 0x1e0(0x10)
	float ExtraCaveSize; // 0x1f0(0x04)
	char pad_1F4[0x4]; // 0x1f4(0x04)
	struct TArray<struct UDebrisSet*> Debris; // 0x1f8(0x10)
	SoftClassProperty DebrisActor; // 0x208(0x28)
	SoftClassProperty PostProcessActorClass; // 0x230(0x28)
	struct UTerrainMaterial* RockMaterial; // 0x258(0x08)
	struct UTerrainMaterial* DirtMaterial; // 0x260(0x08)
	struct UTerrainMaterial* BurnedMaterialOverride; // 0x268(0x08)
	struct TArray<struct UMaterialInstance*> FlavorMaterials; // 0x270(0x10)
	struct TArray<struct FBiomeNoiseItem> RoomNoises; // 0x280(0x10)
	struct UMissionStat* MissionCompleted; // 0x290(0x08)
	struct UFloodFillSettings* CeilingNoise; // 0x298(0x08)
	struct UDetailNoise* CeilingDetailNoise; // 0x2a0(0x08)
	struct UFloodFillSettings* WallNoise; // 0x2a8(0x08)
	struct UDetailNoise* WallDetailNoise; // 0x2b0(0x08)
	struct UFloodFillSettings* FloorNoise; // 0x2b8(0x08)
	struct UDetailNoise* FloorDetailNoise; // 0x2c0(0x08)
	struct UFloodFillSettings* PillarNoise; // 0x2c8(0x08)
	struct UDetailNoise* PillarDetailNoise; // 0x2d0(0x08)
	struct UPillarSettings* PillarSettings; // 0x2d8(0x08)
	struct TArray<struct UTunnelSetting*> TunnelSettings; // 0x2e0(0x10)
	struct UFloodFillSettings* TunnelCeilingNoise; // 0x2f0(0x08)
	struct UFloodFillSettings* TunnelWallNoise; // 0x2f8(0x08)
	struct UFloodFillSettings* TunnelFloorNoise; // 0x300(0x08)
	struct TArray<struct FResourceSpawner> Resources; // 0x308(0x10)
	struct TArray<struct FBiomeEnemyEntry> Enemies; // 0x318(0x10)
	struct TArray<struct UEnemyDescriptor*> BannedEnemies; // 0x328(0x10)
	struct TArray<struct UEnemyDescriptor*> StationaryEnemies; // 0x338(0x10)
	struct TArray<struct UCritterDescriptor*> Critters; // 0x348(0x10)
	struct TSoftObjectPtr<struct USoundCue> AmbientSounds; // 0x358(0x28)
	bool Use3DAmbient; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)
	struct FReverbSettings ReverbSettings; // 0x388(0x20)
	float SmallCaveReverbVolume; // 0x3a8(0x04)
	char pad_3AC[0x4]; // 0x3ac(0x04)
	struct UReverbEffect* SmallCaveReverb; // 0x3b0(0x08)
	float MediumCaveReverbVolume; // 0x3b8(0x04)
	char pad_3BC[0x4]; // 0x3bc(0x04)
	struct UReverbEffect* MediumCaveReverb; // 0x3c0(0x08)
	float LargeCaveReverbVolume; // 0x3c8(0x04)
	char pad_3CC[0x4]; // 0x3cc(0x04)
	struct UReverbEffect* LargeCaveReverb; // 0x3d0(0x08)
	struct USoundCue* TunnelAmbience; // 0x3d8(0x08)
	struct TSoftObjectPtr<struct ULevelSequence> BiomeLoaderLevelSequence; // 0x3e0(0x28)
	struct FString BiomeLoaderLevelName; // 0x408(0x10)
	struct TArray<struct FText> Quotes; // 0x418(0x10)
	float PlanetZoneSelectionWeight; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)

	struct UTerrainMaterial* GetRockMaterial(); // Function FSD.Biome.GetRockMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1091330
	SoftClassProperty GetPostProcessActorClass_Soft(); // Function FSD.Biome.GetPostProcessActorClass_Soft // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10912a0
	struct UTerrainMaterial* GetDirtMaterial(); // Function FSD.Biome.GetDirtMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1091240
	SoftClassProperty GetDebrisActorSoftClass(); // Function FSD.Biome.GetDebrisActorSoftClass // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1091150
	struct UTexture2D* GetBiomeWorldMap(); // Function FSD.Biome.GetBiomeWorldMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10910e0
	struct UTexture2D* GetBiomePicture(); // Function FSD.Biome.GetBiomePicture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10910b0
	struct FText GetBiomeName(); // Function FSD.Biome.GetBiomeName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1090fb0
	struct UTexture2D* GetBiomeMissionBar(); // Function FSD.Biome.GetBiomeMissionBar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1090f80
	struct UUserWidget* GetBiomeMapWidget(); // Function FSD.Biome.GetBiomeMapWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1090f40
	struct TArray<struct FSoftObjectPath> GetBiomeMapAssetList(); // Function FSD.Biome.GetBiomeMapAssetList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1090e50
	struct UTexture2D* GetBiomeLargeImage(); // Function FSD.Biome.GetBiomeLargeImage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1090e20
	int32_t GetBiomeIndex(); // Function FSD.Biome.GetBiomeIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1090e00
	struct UTexture2D* GetBiomeIcon(); // Function FSD.Biome.GetBiomeIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1090dd0
	struct FString GetBiomeAnalyticsIndex(); // Function FSD.Biome.GetBiomeAnalyticsIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1090d10
	struct UParticleSystem* GetAtmosphericParticles(); // Function FSD.Biome.GetAtmosphericParticles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1090ce0
	struct USoundCue* GetAmbientSounds(); // Function FSD.Biome.GetAmbientSounds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1090cb0
};

// Class FSD.BobbingComponent
// Size: 0x220 (Inherited: 0x1f0)
struct UBobbingComponent : USceneComponent {
	struct FMulticastInlineDelegate OnMovedIntoSomethingEvent; // 0x1f0(0x10)
	struct AActor* OwnerActor; // 0x200(0x08)
	bool DoOrientationChecks; // 0x208(0x01)
	char pad_209[0x3]; // 0x209(0x03)
	float BobSpeed; // 0x20c(0x04)
	float BobSize; // 0x210(0x04)
	float OrentationChecksPerSecond; // 0x214(0x04)
	char pad_218[0x8]; // 0x218(0x08)

	void SetOwner(struct AActor* AActor); // Function FSD.BobbingComponent.SetOwner // (Final|Native|Public|BlueprintCallable) // @ game+0x1092590
};

// Class FSD.BoltActionWeapon
// Size: 0x810 (Inherited: 0x6e0)
struct ABoltActionWeapon : AAmmoDrivenWeapon {
	struct FMulticastInlineDelegate FullyFocusedEvent; // 0x6e0(0x10)
	struct FMulticastInlineDelegate FocusLostEvent; // 0x6f0(0x10)
	struct UDamageComponent* DamageComponent; // 0x700(0x08)
	struct UHitscanBaseComponent* HitscanComponent; // 0x708(0x08)
	struct UStatusEffect* FocusedHitSTE; // 0x710(0x08)
	bool RequireWeakspotForFocusedHitSTE; // 0x718(0x01)
	bool IsNoGravityOnFocusEnabled; // 0x719(0x01)
	char pad_71A[0x2]; // 0x71a(0x02)
	float NoGravityOnFocusDuration; // 0x71c(0x04)
	float NoGravityFocusFallFriction; // 0x720(0x04)
	float NoGravityFocusGravityScale; // 0x724(0x04)
	char pad_728[0x4]; // 0x728(0x04)
	float ZoomSpreadAmount; // 0x72c(0x04)
	float ZoomMinSpreadWhileMoving; // 0x730(0x04)
	char pad_734[0x4]; // 0x734(0x04)
	float ChargeSpeed; // 0x738(0x04)
	float ChargeAmmoCost; // 0x73c(0x04)
	float ChargeRecoilMult; // 0x740(0x04)
	char pad_744[0x14]; // 0x744(0x14)
	struct USoundCue* ZoomedInAudio; // 0x758(0x08)
	struct UParticleSystem* ChargedShotTrailParticles; // 0x760(0x08)
	struct FTracerData ChargedShotTracer; // 0x768(0x30)
	struct USoundCue* ButtonDownFireSound; // 0x798(0x08)
	struct USoundCue* ChargedShotFireSound; // 0x7a0(0x08)
	float ChargedFoVChange; // 0x7a8(0x04)
	float ChargedFoVFadeSpeed; // 0x7ac(0x04)
	float MinCharge; // 0x7b0(0x04)
	float SlowMovementAtCharge; // 0x7b4(0x04)
	float FullChargeDamageBonus; // 0x7b8(0x04)
	float AimedShotStaggerChance; // 0x7bc(0x04)
	float AimedWeakspotKilLRange; // 0x7c0(0x04)
	char pad_7C4[0x4]; // 0x7c4(0x04)
	float TargetKilledReloadTimeBoost; // 0x7c8(0x04)
	float TargetKilledReloadTimeBoostDuration; // 0x7cc(0x04)
	char pad_7D0[0x12]; // 0x7d0(0x12)
	bool LastShotWasAimed; // 0x7e2(0x01)
	char pad_7E3[0xd]; // 0x7e3(0x0d)
	bool IsMovementSlowed; // 0x7f0(0x01)
	char pad_7F1[0x17]; // 0x7f1(0x17)
	bool ChargeAffectsDamage; // 0x808(0x01)
	bool Charging; // 0x809(0x01)
	char pad_80A[0x2]; // 0x80a(0x02)
	float ChargeProgress; // 0x80c(0x04)

	void SetOverheated(bool isOverheated); // Function FSD.BoltActionWeapon.SetOverheated // (Final|Native|Protected|BlueprintCallable) // @ game+0x1092500
	void Server_SetIsMovementSlowed(bool bisMovementSlowed); // Function FSD.BoltActionWeapon.Server_SetIsMovementSlowed // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1092270
	void Server_SetIsLatestShotFocused(bool bisShotFocused); // Function FSD.BoltActionWeapon.Server_SetIsLatestShotFocused // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10921b0
	void Server_SetIsChargingShot(bool bisCharging); // Function FSD.BoltActionWeapon.Server_SetIsChargingShot // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10920f0
	void OnTimerElapsed(); // Function FSD.BoltActionWeapon.OnTimerElapsed // (Final|Native|Protected) // @ game+0x1091ed0
	void OnTargetKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.BoltActionWeapon.OnTargetKilled // (Final|Native|Protected) // @ game+0x1091e10
	void OnTargetDamaged(struct UHealthComponentBase* Health, float Amount, struct UPrimitiveComponent* HitComponent, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.BoltActionWeapon.OnTargetDamaged // (Final|Native|Protected) // @ game+0x1091cc0
	void OnShotPowerSet(); // Function FSD.BoltActionWeapon.OnShotPowerSet // (Final|Native|Protected) // @ game+0x1091c10
	void OnMovementSlowed(bool isSlowed); // Function FSD.BoltActionWeapon.OnMovementSlowed // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Client_OnTargetKilled(bool BoostReloadTime); // Function FSD.BoltActionWeapon.Client_OnTargetKilled // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x1090bd0
};

// Class FSD.BoltActionWeaponAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UBoltActionWeaponAnimInstance : UAnimInstance {
};

// Class FSD.Bomber
// Size: 0x520 (Inherited: 0x448)
struct ABomber : AAFlyingBug {
	struct UAudioComponent* GooSoundComponent; // 0x448(0x08)
	struct UParticleSystemComponent* AcidEmitterLeft; // 0x450(0x08)
	struct UParticleSystemComponent* AcidEmitterRight; // 0x458(0x08)
	char pad_460[0x28]; // 0x460(0x28)
	struct AProjectile* AcidProjectile; // 0x488(0x08)
	struct UParticleSystem* deathParticles; // 0x490(0x08)
	struct USoundBase* deathSound; // 0x498(0x08)
	struct USoundBase* DeathPanicSound; // 0x4a0(0x08)
	struct UParticleSystem* BleedParticles; // 0x4a8(0x08)
	struct USoundBase* BladderDestroyedNoise; // 0x4b0(0x08)
	struct TWeakObjectPtr<struct UParticleSystemComponent> BleedParticlesComponent; // 0x4b8(0x08)
	struct TWeakObjectPtr<struct UAudioComponent> PanicAudioComponent; // 0x4c0(0x08)
	float RagdollForceModifier; // 0x4c8(0x04)
	float DeathYRotationSpeed; // 0x4cc(0x04)
	float DeathXRotationSpeed; // 0x4d0(0x04)
	float SearchRange; // 0x4d4(0x04)
	float NewPointMax; // 0x4d8(0x04)
	float NewPointMin; // 0x4dc(0x04)
	float DeathSpeed; // 0x4e0(0x04)
	float DeathAcceleration; // 0x4e4(0x04)
	float AcidRate; // 0x4e8(0x04)
	float PostDeathAcidTime; // 0x4ec(0x04)
	char pad_4F0[0x18]; // 0x4f0(0x18)
	bool HasDied; // 0x508(0x01)
	bool IsRightDestroyed; // 0x509(0x01)
	bool IsLeftDestroyed; // 0x50a(0x01)
	bool dropAcid; // 0x50b(0x01)
	char pad_50C[0x14]; // 0x50c(0x14)

	void StopSpinAndDie(); // Function FSD.Bomber.StopSpinAndDie // (Final|Native|Protected) // @ game+0x10926e0
	void SetDropAcid(bool dropAcid); // Function FSD.Bomber.SetDropAcid // (Final|Native|Public|BlueprintCallable) // @ game+0x1092370
	void OnStartDeathPanic(); // Function FSD.Bomber.OnStartDeathPanic // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_DropAcid(); // Function FSD.Bomber.OnRep_DropAcid // (Final|Native|Protected) // @ game+0x1091b50
	void OnRep_Death(); // Function FSD.Bomber.OnRep_Death // (Native|Protected) // @ game+0x1088530
	void OnRagdollHitGround(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.Bomber.OnRagdollHitGround // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1091960
	void OnBladderDamage(float Amount); // Function FSD.Bomber.OnBladderDamage // (Final|Native|Protected) // @ game+0x1091570
	void OnArmorDestroyed(struct FName Name); // Function FSD.Bomber.OnArmorDestroyed // (Final|Native|Protected|BlueprintCallable) // @ game+0x10914f0
	void HideMesh(); // Function FSD.Bomber.HideMesh // (Final|Native|Protected) // @ game+0x10913a0
	bool GetDropAcid(); // Function FSD.Bomber.GetDropAcid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1091260
	bool AreBladdersDestroyed(); // Function FSD.Bomber.AreBladdersDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1090ba0
};

// Class FSD.BomberAnimInstance
// Size: 0x300 (Inherited: 0x2f0)
struct UBomberAnimInstance : UFlyingBugAnimInstance {
	bool IsBombing; // 0x2f0(0x01)
	bool IsSpiraling; // 0x2f1(0x01)
	char pad_2F2[0xe]; // 0x2f2(0x0e)
};

// Class FSD.BoolUserSettingAsset
// Size: 0x58 (Inherited: 0x30)
struct UBoolUserSettingAsset : UDataAsset {
	struct FText SettingDisplayTitle; // 0x30(0x18)
	struct FName SettingID; // 0x48(0x08)
	bool SettingDefaultValue; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)

	void SetValue(bool InValue); // Function FSD.BoolUserSettingAsset.SetValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1092610
	bool GetValue(); // Function FSD.BoolUserSettingAsset.GetValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1091370
};

// Class FSD.BoscoAbillity
// Size: 0x68 (Inherited: 0x30)
struct UBoscoAbillity : UDataAsset {
	struct FName AbillityName; // 0x30(0x08)
	struct UAnimSequenceBase* AbillityAnimation; // 0x38(0x08)
	struct USoundBase* VoiceOnUse; // 0x40(0x08)
	enum class EBoscoAbillityTargetPreference TargetType; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float CoolDown; // 0x4c(0x04)
	float WindUp; // 0x50(0x04)
	float Duration; // 0x54(0x04)
	float range; // 0x58(0x04)
	float RechargeTime; // 0x5c(0x04)
	int32_t MaxCharges; // 0x60(0x04)
	bool TargetActorIfValid; // 0x64(0x01)
	bool RotateTowardsTarget; // 0x65(0x01)
	char pad_66[0x2]; // 0x66(0x02)
};

// Class FSD.BoscoSpawnActorAbillity
// Size: 0x70 (Inherited: 0x68)
struct UBoscoSpawnActorAbillity : UBoscoAbillity {
	struct AActor* SpawnedActorClass; // 0x68(0x08)
};

// Class FSD.BoscoProjectileAbillity
// Size: 0x70 (Inherited: 0x68)
struct UBoscoProjectileAbillity : UBoscoAbillity {
	struct AProjectile* projectileClass; // 0x68(0x08)
};

// Class FSD.Bosco
// Size: 0x6c0 (Inherited: 0x380)
struct ABosco : ADeepPathfinderCharacter {
	char pad_380[0x38]; // 0x380(0x38)
	struct UHealthComponent* HealthComponent; // 0x3b8(0x08)
	struct UBoscoAbillityComponent* AbillityComponent; // 0x3c0(0x08)
	struct UDamageComponent* Damage; // 0x3c8(0x08)
	struct UPawnSensingComponent* Senses; // 0x3d0(0x08)
	struct UDroneMiningToolBase* MiningTool; // 0x3d8(0x08)
	struct UBobbingComponent* BobbingComponent; // 0x3e0(0x08)
	struct USkeletalMeshComponent* BoscoMesh; // 0x3e8(0x08)
	struct UHitscanComponent* DroneHitScan; // 0x3f0(0x08)
	struct USpotLightComponent* SpotLightComponent; // 0x3f8(0x08)
	struct UPointLightComponent* PointLightComponent; // 0x400(0x08)
	struct UParticleSystemComponent* LTrail; // 0x408(0x08)
	struct UParticleSystemComponent* RTrail; // 0x410(0x08)
	struct UAudioComponent* MomentumSound; // 0x418(0x08)
	struct UDialogDataAsset* DefendDrilldozerShout; // 0x420(0x08)
	struct UDialogDataAsset* DefendGenericShout; // 0x428(0x08)
	struct UDialogDataAsset* MineOrderShout; // 0x430(0x08)
	struct UDialogDataAsset* KillOrderShout; // 0x438(0x08)
	struct UDialogDataAsset* GoToOrderShout; // 0x440(0x08)
	struct UDialogDataAsset* ReviveOrderShout; // 0x448(0x08)
	struct UDialogDataAsset* PickupGemShout; // 0x450(0x08)
	struct UDialogDataAsset* ReviveThankShout; // 0x458(0x08)
	struct UDialogDataAsset* GeneralCallShout; // 0x460(0x08)
	struct UDialogDataAsset* RocketAbillityShout; // 0x468(0x08)
	struct UDialogDataAsset* CryoGrenadeAbillityShout; // 0x470(0x08)
	struct USoundBase* MineResponse; // 0x478(0x08)
	struct USoundBase* CombatResponse; // 0x480(0x08)
	struct USoundBase* LightResponse; // 0x488(0x08)
	struct USoundBase* ReviveResponse; // 0x490(0x08)
	struct USoundBase* AbillityResponse; // 0x498(0x08)
	struct USoundBase* CurrentResponse; // 0x4a0(0x08)
	float ResponseTime; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)
	struct FMulticastInlineDelegate OnReviveused; // 0x4b0(0x10)
	struct FMulticastInlineDelegate OnStateChanged; // 0x4c0(0x10)
	char pad_4D0[0x20]; // 0x4d0(0x20)
	struct FGameplayTagContainer LosMatchTags; // 0x4f0(0x20)
	float SeeTargetTime; // 0x510(0x04)
	char pad_514[0x4]; // 0x514(0x04)
	struct USoundBase* AbillityErrorSound; // 0x518(0x08)
	float INcreasedMiningArea; // 0x520(0x04)
	float TimeToResetMiningBoost; // 0x524(0x04)
	float MiningBoosMultiplier; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)
	struct TArray<struct UItemUpgrade*> upgrades; // 0x530(0x10)
	struct UBoscoProjectileAbillity* RocketAbillity; // 0x540(0x08)
	struct UBoscoProjectileAbillity* CryoGrenadeAbillity; // 0x548(0x08)
	struct FGuid SaveGameID; // 0x550(0x10)
	struct UItemID* ItemID; // 0x560(0x08)
	struct UUpgradableBoscoComponent* Upgradable; // 0x568(0x08)
	struct UAnimSequenceBase* SaluteAnimation; // 0x570(0x08)
	struct UAnimSequenceBase* PickupGemAnimation; // 0x578(0x08)
	struct UAnimSequenceBase* DropGemAnimation; // 0x580(0x08)
	struct TArray<struct UAnimSequenceBase*> HitReaction; // 0x588(0x10)
	float SaluteDuration; // 0x598(0x04)
	char pad_59C[0x4]; // 0x59c(0x04)
	struct UDroneSkinnableComponent* Skinnable; // 0x5a0(0x08)
	struct TArray<struct FBoscoLightSetting> LightSettings; // 0x5a8(0x10)
	int32_t TargetLightSetting; // 0x5b8(0x04)
	char pad_5BC[0x4]; // 0x5bc(0x04)
	struct TArray<struct UBoscoAbillity*> CombatAbillities; // 0x5c0(0x10)
	struct AActor* RotateTarget; // 0x5d0(0x08)
	struct FVector LookAtLocation; // 0x5d8(0x0c)
	char pad_5E4[0x4]; // 0x5e4(0x04)
	struct USoundCue* ShootSound; // 0x5e8(0x08)
	float ShootSoundFadeout; // 0x5f0(0x04)
	char pad_5F4[0x4]; // 0x5f4(0x04)
	struct USoundCue* ShootSoundTail; // 0x5f8(0x08)
	struct UAudioComponent* ShootSoundInstance; // 0x600(0x08)
	struct UParticleSystem* MuzzleEffect; // 0x608(0x08)
	struct UParticleSystem* TracerEffect; // 0x610(0x08)
	float FireRate; // 0x618(0x04)
	int32_t MinShotsInBurst; // 0x61c(0x04)
	int32_t MaxShotsInBurst; // 0x620(0x04)
	float MaxRandomBurstCooldown; // 0x624(0x04)
	float MinRandomBurstCooldown; // 0x628(0x04)
	float MaxFiringAngle; // 0x62c(0x04)
	float MaxEngagementRange; // 0x630(0x04)
	float MinTracerDistance; // 0x634(0x04)
	float TracerSpeed; // 0x638(0x04)
	char pad_63C[0x4]; // 0x63c(0x04)
	struct USoundBase* ReviveSirens; // 0x640(0x08)
	struct TWeakObjectPtr<struct UAudioComponent> ReviveSirensComponent; // 0x648(0x08)
	float DistanceToFacePlayer; // 0x650(0x04)
	float RotationSpeed; // 0x654(0x04)
	float PrepareToMineRange; // 0x658(0x04)
	float MiningRange; // 0x65c(0x04)
	char pad_660[0x28]; // 0x660(0x28)
	int32_t MaxRevives; // 0x688(0x04)
	char pad_68C[0x10]; // 0x68c(0x10)
	bool IsFiring; // 0x69c(0x01)
	bool IsInRangeToMine; // 0x69d(0x01)
	bool IsPreparedToMine; // 0x69e(0x01)
	bool IsMining; // 0x69f(0x01)
	bool IsReviving; // 0x6a0(0x01)
	bool IsRotateMode; // 0x6a1(0x01)
	char pad_6A2[0xe]; // 0x6a2(0x0e)
	struct ABoscoController* DroneController; // 0x6b0(0x08)
	enum class EDroneAIState CurrentState; // 0x6b8(0x01)
	char pad_6B9[0x7]; // 0x6b9(0x07)

	void UseABillity(); // Function FSD.Bosco.UseABillity // (Final|Native|Public|BlueprintCallable) // @ game+0x1092700
	void StopShootingSound(); // Function FSD.Bosco.StopShootingSound // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x10926c0
	void StateChanged(enum class EDroneAIState aCurrentState); // Function FSD.Bosco.StateChanged // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void StartSelfDestruct(); // Function FSD.Bosco.StartSelfDestruct // (Final|Native|Public|BlueprintCallable) // @ game+0x10926a0
	void SetIsReviving(bool aIsReviving); // Function FSD.Bosco.SetIsReviving // (Final|Native|Public|BlueprintCallable) // @ game+0x1092480
	void SetIsRepairing(bool isRepairing); // Function FSD.Bosco.SetIsRepairing // (Final|Native|Public|BlueprintCallable) // @ game+0x1092400
	void SelfDestruct(); // Function FSD.Bosco.SelfDestruct // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void ReviveCounterChanged(int32_t remainingCharges); // Function FSD.Bosco.ReviveCounterChanged // (Native|Public) // @ game+0x1091fa0
	void Respond(); // Function FSD.Bosco.Respond // (Final|Native|Protected) // @ game+0x1091f80
	void PlaySalute(); // Function FSD.Bosco.PlaySalute // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10877d0
	void OnWeaponFired(struct FVector Location); // Function FSD.Bosco.OnWeaponFired // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x1091ef0
	void OnTargetBurrowChange(bool burrowed); // Function FSD.Bosco.OnTargetBurrowChange // (Final|Native|Protected) // @ game+0x1091c30
	void OnRep_State(enum class EDroneAIState prevState); // Function FSD.Bosco.OnRep_State // (Native|Public) // @ game+0x1091b90
	void OnReadyToShoot(); // Function FSD.Bosco.OnReadyToShoot // (Final|Native|Protected) // @ game+0x1091b30
	void OnNotReadyToShoot(); // Function FSD.Bosco.OnNotReadyToShoot // (Final|Native|Protected) // @ game+0x1091940
	void OnHit(float Amount, float BaseAmount, struct UPrimitiveComponent* Component, struct UFSDPhysicalMaterial* PhysMat, struct FName BoneName); // Function FSD.Bosco.OnHit // (Final|Native|Protected|HasOutParms) // @ game+0x10917a0
	void OnGrabbedGem(); // Function FSD.Bosco.OnGrabbedGem // (Final|Native|Public|BlueprintCallable) // @ game+0x1091780
	void MineEffects(struct UTerrainMaterial* aTerrainMaterial, struct FVector_NetQuantize aLocation, struct FRotator aRotation); // Function FSD.Bosco.MineEffects // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x10913c0
	struct UUpgradableBoscoComponent* GetUpgradeComponent(); // Function FSD.Bosco.GetUpgradeComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x1091350
	int32_t GetReviveCharges(); // Function FSD.Bosco.GetReviveCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1091300
	struct UBoscoAbillityComponent* GetPlayerAbillity(); // Function FSD.Bosco.GetPlayerAbillity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1091280
	enum class EDroneAIState GetCurrentState(); // Function FSD.Bosco.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1091130
	bool GetCarryInterrupted(); // Function FSD.Bosco.GetCarryInterrupted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1091110
	bool DoPickupGemAnimation(); // Function FSD.Bosco.DoPickupGemAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x1090c80
	void All_OnSelfDestruct(); // Function FSD.Bosco.All_OnSelfDestruct // (Net|Native|Event|NetMulticast|Public) // @ game+0x1090b80
};

// Class FSD.BoscoAnimInstance
// Size: 0x2a0 (Inherited: 0x270)
struct UBoscoAnimInstance : UAnimInstance {
	struct FMulticastInlineDelegate OnWeaponsReady; // 0x268(0x10)
	struct FMulticastInlineDelegate OnWeaponsNotReady; // 0x278(0x10)
	float DigAnimPlayRate; // 0x288(0x04)
	enum class EDroneAIState CurrentState; // 0x28c(0x01)
	bool IsReadyToMine; // 0x28d(0x01)
	bool IsMining; // 0x28e(0x01)
	bool IsFiring; // 0x28f(0x01)
	bool IsReviving; // 0x290(0x01)
	bool IsCarryingGem; // 0x291(0x01)
	char pad_29A[0x6]; // 0x29a(0x06)
};

// Class FSD.BoscoWeaponsFoldedOutNotify
// Size: 0x38 (Inherited: 0x38)
struct UBoscoWeaponsFoldedOutNotify : UAnimNotify {
};

// Class FSD.BoscoWeaponsFoldedInNotify
// Size: 0x38 (Inherited: 0x38)
struct UBoscoWeaponsFoldedInNotify : UAnimNotify {
};

// Class FSD.BoscoAbillityComponent
// Size: 0x150 (Inherited: 0xb0)
struct UBoscoAbillityComponent : UActorComponent {
	struct FMulticastInlineDelegate OnAbillityChargeProgress; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnAbillityChargeUsed; // 0xc0(0x10)
	struct TArray<struct UItemUpgrade*> upgrades; // 0xd0(0x10)
	char pad_E0[0x10]; // 0xe0(0x10)
	struct AProjectileBase* projectileClass; // 0xf0(0x08)
	struct UAnimSequenceBase* Animation; // 0xf8(0x08)
	struct USoundBase* VoiceOnUse; // 0x100(0x08)
	struct TWeakObjectPtr<struct AActor> Target; // 0x108(0x08)
	struct TWeakObjectPtr<struct ABosco> AbillityOwner; // 0x110(0x08)
	char pad_118[0x38]; // 0x118(0x38)

	int32_t GetMaxCharges(); // Function FSD.BoscoAbillityComponent.GetMaxCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10965b0
	int32_t GetCharges(); // Function FSD.BoscoAbillityComponent.GetCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1096550
};

// Class FSD.FSDAIController
// Size: 0x358 (Inherited: 0x328)
struct AFSDAIController : AAIController {
	struct FMulticastInlineDelegate OnMessageBehaviorTreeEvent; // 0x328(0x10)
	struct FMulticastInlineDelegate OnAlertedEvent; // 0x338(0x10)
	enum class ECollisionChannel LOSTraceChannel; // 0x348(0x01)
	char pad_349[0x3]; // 0x349(0x03)
	struct TWeakObjectPtr<struct APlayerCharacter> TargetedPlayer; // 0x34c(0x08)
	char pad_354[0x4]; // 0x354(0x04)

	void SetAlerted(bool isAlerted); // Function FSD.FSDAIController.SetAlerted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10fc990
	void ResumeLogic(); // Function FSD.FSDAIController.ResumeLogic // (Final|Native|Public|BlueprintCallable) // @ game+0x10fc790
	void RegisterBlackboardChanges(struct FName Key); // Function FSD.FSDAIController.RegisterBlackboardChanges // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x10fc620
	void Recieve_BlackboardValueChanged(struct FName KeyName); // Function FSD.FSDAIController.Recieve_BlackboardValueChanged // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	void PauseLogic(); // Function FSD.FSDAIController.PauseLogic // (Final|Native|Public|BlueprintCallable) // @ game+0x10fc5e0
	void OnAttackingChanged(bool attacking); // Function FSD.FSDAIController.OnAttackingChanged // (Final|Native|Protected) // @ game+0x10fc180
	bool GetIsAlerted(); // Function FSD.FSDAIController.GetIsAlerted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10fc0b0
};

// Class FSD.BoscoController
// Size: 0x5f0 (Inherited: 0x358)
struct ABoscoController : AFSDAIController {
	struct UBehaviorTree* BehaviourTree; // 0x358(0x08)
	float CheckOutOfTheWayInterval; // 0x360(0x04)
	char pad_364[0x8]; // 0x364(0x08)
	float DistCountAsSameHit; // 0x36c(0x04)
	struct FMulticastInlineDelegate OnFollowTargetChangedDelegate; // 0x370(0x10)
	char pad_380[0xa8]; // 0x380(0xa8)
	struct UTerrainMaterial* HearthstoneCrystalMaterial; // 0x428(0x08)
	float SearchForEnemiesInterval; // 0x430(0x04)
	char pad_434[0x4]; // 0x434(0x04)
	float SaluteDelay; // 0x438(0x04)
	char pad_43C[0x4]; // 0x43c(0x04)
	float SaluteCooldown; // 0x440(0x04)
	char pad_444[0x4]; // 0x444(0x04)
	float CheckGraberInterval; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
	float MaxThrowStrength; // 0x450(0x04)
	float MaxThrowRange; // 0x454(0x04)
	float RepairRange; // 0x458(0x04)
	float DistanceCountedAsClose; // 0x45c(0x04)
	struct FGameplayTagQuery TargetQuery; // 0x460(0x48)
	struct FGameplayTagQuery AttackOnOrderQuery; // 0x4a8(0x48)
	struct FGameplayTagQuery AttackOnSightQuery; // 0x4f0(0x48)
	struct FGameplayTagQuery DefendTageQuery; // 0x538(0x48)
	float ReviveHealthPercentage; // 0x580(0x04)
	char pad_584[0x4]; // 0x584(0x04)
	struct UDroneUseComponent* CurrentUse; // 0x588(0x08)
	struct ACarriableItem* TryingToPickGem; // 0x590(0x08)
	char pad_598[0x58]; // 0x598(0x58)

	void ReviveTarget(); // Function FSD.BoscoController.ReviveTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1096c70
	void ResetToFollowState(); // Function FSD.BoscoController.ResetToFollowState // (Final|Native|Public|BlueprintCallable) // @ game+0x1096c50
	void RegisterPlayer(struct APlayerCharacter* APlayerCharacter); // Function FSD.BoscoController.RegisterPlayer // (Final|Native|Private) // @ game+0x1096bd0
	void PickupGem(); // Function FSD.BoscoController.PickupGem // (Final|Native|Public|BlueprintCallable) // @ game+0x1096b10
	void OnUseDone(int32_t TimesUsed); // Function FSD.BoscoController.OnUseDone // (Final|Native|Private) // @ game+0x1096a90
	void OnSecondaryLaserPointer(struct AActor* aTarget, struct FVector aLocation); // Function FSD.BoscoController.OnSecondaryLaserPointer // (Native|Public|HasOutParms|HasDefaults) // @ game+0x10969c0
	void OnPlayerShout(struct APlayerCharacter* APlayerCharacter); // Function FSD.BoscoController.OnPlayerShout // (Native|Public) // @ game+0x1096930
	void OnPlayerSalute(struct APlayerCharacter* aCharacater); // Function FSD.BoscoController.OnPlayerSalute // (Final|Native|Public) // @ game+0x10968b0
	void OnPlayerLeave(struct AFSDPlayerState* APlayerState); // Function FSD.BoscoController.OnPlayerLeave // (Native|Public) // @ game+0x1096820
	void OnLaserPointer(struct FLaserPointerTarget HitInfo); // Function FSD.BoscoController.OnLaserPointer // (Native|Public|HasOutParms) // @ game+0x1096730
	void OnJobFinished(); // Function FSD.BoscoController.OnJobFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x1096710
	void OnEscortTargetDied(struct UHealthComponentBase* Health); // Function FSD.BoscoController.OnEscortTargetDied // (Final|Native|Protected) // @ game+0x1096690
	struct FVector GetPointNearPlayers(); // Function FSD.BoscoController.GetPointNearPlayers // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10965e0
	struct AActor* GetFollowTarget(); // Function FSD.BoscoController.GetFollowTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1096580
	void GenerateRelativeLocation(struct AActor* aTarget, float aRange, float aHeightRestriction, float aMinRange, bool aTryToStayOutOfTheWay, bool aStayBehind); // Function FSD.BoscoController.GenerateRelativeLocation // (Final|Native|Public|BlueprintCallable) // @ game+0x1096350
	void GemUsed(struct APlayerCharacter* usedBy, enum class EInputKeys Key); // Function FSD.BoscoController.GemUsed // (Final|Native|Public) // @ game+0x1096290
	void ConfirmPickup(); // Function FSD.BoscoController.ConfirmPickup // (Final|Native|Public) // @ game+0x10960f0
	void CarriableDrop(); // Function FSD.BoscoController.CarriableDrop // (Final|Native|Protected) // @ game+0x1095fa0
};

// Class FSD.SimpleBossFight
// Size: 0x48 (Inherited: 0x28)
struct USimpleBossFight : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FBossFight BossFight; // 0x30(0x18)
};

// Class FSD.BossFightSubSystem
// Size: 0x60 (Inherited: 0x30)
struct UBossFightSubSystem : UGameInstanceSubsystem {
	struct FMulticastInlineDelegate OnNewBossFight; // 0x30(0x10)
	struct FMulticastInlineDelegate OnBossFightRemoved; // 0x40(0x10)
	struct TArray<struct TScriptInterface<None>> ActiveBossFights; // 0x50(0x10)

	void RegisterBossFight(struct TScriptInterface<None> BossFight); // Function FSD.BossFightSubSystem.RegisterBossFight // (Final|Native|Public|BlueprintCallable) // @ game+0x1096b30
	void DeregisterBossFight(struct AActor* boss); // Function FSD.BossFightSubSystem.DeregisterBossFight // (Final|Native|Public|BlueprintCallable) // @ game+0x1096210
	void BossFightDelegate__DelegateSignature(struct TScriptInterface<None> BossFight); // DelegateFunction FSD.BossFightSubSystem.BossFightDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x158ca90
};

// Class FSD.BossFightInterface
// Size: 0x28 (Inherited: 0x28)
struct UBossFightInterface : UInterface {

	bool IsStillValid(); // Function FSD.BossFightInterface.IsStillValid // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1096660
	struct UBossFightWidget* GetWidgetClass(); // Function FSD.BossFightInterface.GetWidgetClass // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1096620
	struct AActor* GetBossActor(); // Function FSD.BossFightInterface.GetBossActor // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1096520
};

// Class FSD.BossFightWidget
// Size: 0x240 (Inherited: 0x230)
struct UBossFightWidget : UUserWidget {
	struct TScriptInterface<None> BossFight; // 0x230(0x10)
};

// Class FSD.BoxFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBoxFunctionLibrary : UBlueprintFunctionLibrary {

	struct FBox CreateBoxAt(struct FVector Location, struct FVector Size); // Function FSD.BoxFunctionLibrary.CreateBoxAt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1096110
	struct FVector ClosestPointToBox(struct FVector Pos, struct FBox Box); // Function FSD.BoxFunctionLibrary.ClosestPointToBox // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1095fc0
	float BoxSize(struct FBox Box); // Function FSD.BoxFunctionLibrary.BoxSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1095ef0
	struct FVector BoxExtends(struct FBox Box); // Function FSD.BoxFunctionLibrary.BoxExtends // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1095e40
	struct FVector BoxCenter(struct FBox Box); // Function FSD.BoxFunctionLibrary.BoxCenter // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1095d90
};

// Class FSD.GenerationComponent
// Size: 0x3f0 (Inherited: 0x3f0)
struct UGenerationComponent : UPrimitiveComponent {
};

// Class FSD.BoxGenerationComponent
// Size: 0x410 (Inherited: 0x3f0)
struct UBoxGenerationComponent : UGenerationComponent {
	struct FVector Extends; // 0x3f0(0x0c)
	bool IsCarver; // 0x3fc(0x01)
	char pad_3FD[0x3]; // 0x3fd(0x03)
	float NoiseRange; // 0x400(0x04)
	bool Visible; // 0x404(0x01)
	char pad_405[0x3]; // 0x405(0x03)
	struct UFloodFillSettings* Noise; // 0x408(0x08)
};

// Class FSD.GenerationItem
// Size: 0x228 (Inherited: 0x220)
struct AGenerationItem : AActor {
	bool Visible; // 0x220(0x01)
	bool AddToLevel; // 0x221(0x01)
	char pad_222[0x6]; // 0x222(0x06)
};

// Class FSD.BoxGenerationItem
// Size: 0x230 (Inherited: 0x228)
struct ABoxGenerationItem : AGenerationItem {
	struct UBoxGenerationComponent* BoxComponent; // 0x228(0x08)
};

// Class FSD.BTDecorator_AttackInRange
// Size: 0x98 (Inherited: 0x90)
struct UBTDecorator_AttackInRange : UBTDecorator_BlackboardBase {
	struct FName AttackName; // 0x90(0x08)
};

// Class FSD.BTDecorator_CanSeeTarget
// Size: 0xa8 (Inherited: 0x68)
struct UBTDecorator_CanSeeTarget : UBTDecorator {
	bool UseAsync; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	float MaxRange; // 0x6c(0x04)
	struct FVector EyeLocationOffset; // 0x70(0x0c)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FBlackboardKeySelector TargetKey; // 0x80(0x28)
};

// Class FSD.BTDecorator_CheckObstruction
// Size: 0xb0 (Inherited: 0x68)
struct UBTDecorator_CheckObstruction : UBTDecorator {
	float range; // 0x68(0x04)
	bool UseOwnerCenterMass; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
	struct FVector EyeLocationOffset; // 0x70(0x0c)
	struct FName RangedSocket; // 0x7c(0x08)
	char pad_84[0x4]; // 0x84(0x04)
	struct FBlackboardKeySelector TargetKey; // 0x88(0x28)
};

// Class FSD.BTDecorator_CheckPlayerCount
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_CheckPlayerCount : UBTDecorator {
	int32_t playerCount; // 0x68(0x04)
	bool AllowLessThanCount; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
};

// Class FSD.BTDecorator_ConditionalGuard
// Size: 0x98 (Inherited: 0x68)
struct UBTDecorator_ConditionalGuard : UBTDecorator {
	struct FBlackboardKeySelector GuardKey; // 0x68(0x28)
	bool InvertLogic; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class FSD.BTDecorator_FormationGuard
// Size: 0x68 (Inherited: 0x68)
struct UBTDecorator_FormationGuard : UBTDecorator {
};

// Class FSD.BTDecorator_InRange
// Size: 0xa0 (Inherited: 0x90)
struct UBTDecorator_InRange : UBTDecorator_BlackboardBase {
	float MinRange; // 0x90(0x04)
	float MaxRange; // 0x94(0x04)
	enum class FAIDistanceType GeometricDistanceType; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class FSD.BTDecorator_InRangeBB
// Size: 0xe8 (Inherited: 0x90)
struct UBTDecorator_InRangeBB : UBTDecorator_BlackboardBase {
	struct FBlackboardKeySelector MinRangeKey; // 0x90(0x28)
	struct FBlackboardKeySelector MaxRangeKey; // 0xb8(0x28)
	enum class FAIDistanceType GeometricDistanceType; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
};

// Class FSD.BTDecorator_InRangeEx
// Size: 0xa0 (Inherited: 0x90)
struct UBTDecorator_InRangeEx : UBTDecorator_BlackboardBase {
	float MinRange; // 0x90(0x04)
	float MaxRange; // 0x94(0x04)
	enum class FAIDistanceType GeometricDistanceType; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class FSD.BTDecorator_InRangeOfTarget
// Size: 0x98 (Inherited: 0x90)
struct UBTDecorator_InRangeOfTarget : UBTDecorator_BlackboardBase {
	float MinRange; // 0x90(0x04)
	float MaxRange; // 0x94(0x04)
};

// Class FSD.BTDecorator_IsFacing
// Size: 0x98 (Inherited: 0x90)
struct UBTDecorator_IsFacing : UBTDecorator_BlackboardBase {
	float MaxAngle; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class FSD.BTDecorator_LockRotation
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_LockRotation : UBTDecorator {
	char pad_68[0x8]; // 0x68(0x08)
};

// Class FSD.BTDecorator_MessageAI
// Size: 0x78 (Inherited: 0x68)
struct UBTDecorator_MessageAI : UBTDecorator {
	struct FName ActivationMessage; // 0x68(0x08)
	struct FName DeactivationMessage; // 0x70(0x08)
};

// Class FSD.BTDecorator_ModifySpeed
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_ModifySpeed : UBTDecorator {
	float SpeedModifier; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.BTDecorator_RandomChance
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_RandomChance : UBTDecorator {
	float Chance; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.BTDecorator_RandomCooldown
// Size: 0x98 (Inherited: 0x68)
struct UBTDecorator_RandomCooldown : UBTDecorator {
	struct FRandRange CoolDownTime; // 0x68(0x08)
	struct FBlackboardKeySelector CooldownTimeModifier; // 0x70(0x28)
};

// Class FSD.BTDecorator_SetTagRandomCooldown
// Size: 0x80 (Inherited: 0x68)
struct UBTDecorator_SetTagRandomCooldown : UBTDecorator {
	struct FGameplayTag CooldownTag; // 0x68(0x08)
	struct FRandRange CooldownDuration; // 0x70(0x08)
	bool bAddToExistingDuration; // 0x78(0x01)
	bool TriggerOnActivation; // 0x79(0x01)
	char pad_7A[0x6]; // 0x7a(0x06)
};

// Class FSD.BTDecorator_TagRandomCooldown
// Size: 0x80 (Inherited: 0x68)
struct UBTDecorator_TagRandomCooldown : UBTDecorator {
	struct FGameplayTag CooldownTag; // 0x68(0x08)
	struct FRandRange CooldownDuration; // 0x70(0x08)
	bool bAddToExistingDuration; // 0x78(0x01)
	bool bActivatesCooldown; // 0x79(0x01)
	char pad_7A[0x6]; // 0x7a(0x06)
};

// Class FSD.BTDecorator_RandomLoop
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_RandomLoop : UBTDecorator {
	float Chance; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.BTDecorator_VariableLoop
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_VariableLoop : UBTDecorator {
	struct FIRandRange NumLoops; // 0x68(0x08)
};

// Class FSD.BTDecorator_SharedCooldown
// Size: 0x98 (Inherited: 0x68)
struct UBTDecorator_SharedCooldown : UBTDecorator {
	struct FRandRange CoolDownTime; // 0x68(0x08)
	struct FBlackboardKeySelector CooldownKey; // 0x70(0x28)
};

// Class FSD.BTDecorator_SharedAttackCooldown
// Size: 0x98 (Inherited: 0x68)
struct UBTDecorator_SharedAttackCooldown : UBTDecorator {
	struct FRandRange CoolDownTime; // 0x68(0x08)
	struct FBlackboardKeySelector CooldownKey; // 0x70(0x28)
};

// Class FSD.BTServer_ChaseTarget
// Size: 0x100 (Inherited: 0x70)
struct UBTServer_ChaseTarget : UBTService {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	bool MustBeAlive; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	struct FGameplayTag SwitchTargetCooldownTag; // 0x9c(0x08)
	char pad_A4[0x4]; // 0xa4(0x04)
	struct FGameplayTagQuery TargetingQuery; // 0xa8(0x48)
	bool IsFlying; // 0xf0(0x01)
	bool CanShoot; // 0xf1(0x01)
	char pad_F2[0x2]; // 0xf2(0x02)
	float TargetingRange; // 0xf4(0x04)
	float SwitchTargetTime; // 0xf8(0x04)
	float SwitchTargetDeviation; // 0xfc(0x04)
};

// Class FSD.BTService_FindPlayer
// Size: 0xa8 (Inherited: 0x70)
struct UBTService_FindPlayer : UBTService {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	bool MustBeAlive; // 0x98(0x01)
	bool SwithToBetterTargets; // 0x99(0x01)
	bool RegisterForPositioning; // 0x9a(0x01)
	bool IsFlying; // 0x9b(0x01)
	bool CanShoot; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	float TargetingRange; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class FSD.BTService_FindAttackable
// Size: 0xf0 (Inherited: 0x70)
struct UBTService_FindAttackable : UBTService {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	bool MustBeAlive; // 0x98(0x01)
	bool SwithToBetterTargets; // 0x99(0x01)
	bool RegisterForPositioning; // 0x9a(0x01)
	bool IsFlying; // 0x9b(0x01)
	bool CanShoot; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	float TargetingRange; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
	struct FGameplayTagQuery TargetQuery; // 0xa8(0x48)
};

// Class FSD.BTService_SetStance
// Size: 0xa0 (Inherited: 0x70)
struct UBTService_SetStance : UBTService {
	struct FBlackboardKeySelector TargetLocationKey; // 0x70(0x28)
	float Distance; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class FSD.BTService_CheckPathToTarget
// Size: 0xc0 (Inherited: 0x70)
struct UBTService_CheckPathToTarget : UBTService {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	struct FBlackboardKeySelector ResultKey; // 0x98(0x28)
};

// Class FSD.BTService_UpdateMoveToTarget
// Size: 0xc8 (Inherited: 0x70)
struct UBTService_UpdateMoveToTarget : UBTService {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	struct FBlackboardKeySelector TargetLocationKey; // 0x98(0x28)
	float LookAheadTime; // 0xc0(0x04)
	float VerticalOffset; // 0xc4(0x04)
};

// Class FSD.BTService_UpdateFlyingMoveToTarget
// Size: 0xc8 (Inherited: 0x70)
struct UBTService_UpdateFlyingMoveToTarget : UBTService {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	struct FBlackboardKeySelector TargetLocationKey; // 0x98(0x28)
	float LookAheadTime; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
};

// Class FSD.BTService_UpdateMoveInFormation
// Size: 0xa8 (Inherited: 0x70)
struct UBTService_UpdateMoveInFormation : UBTService {
	float LookAheadTime; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	struct FBlackboardKeySelector TargetLocationKey; // 0x78(0x28)
	float AttackerRadius; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class FSD.BTTask_Attack
// Size: 0xa0 (Inherited: 0x70)
struct UBTTask_Attack : UBTTaskNode {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	struct FName AttackName; // 0x98(0x08)

	void OnAttackCompleted(struct UBehaviorTreeComponent* btComponent); // Function FSD.BTTask_Attack.OnAttackCompleted // (Final|Native|Protected) // @ game+0x109b740
};

// Class FSD.BTTask_FakePhysicsMove
// Size: 0xc8 (Inherited: 0x98)
struct UBTTask_FakePhysicsMove : UBTTask_BlackboardBase {
	float MinTime; // 0x98(0x04)
	float EndMaxSpeed; // 0x9c(0x04)
	struct FVector InitialLocalVelocity; // 0xa0(0x0c)
	struct FVector InitialGlobalVelocity; // 0xac(0x0c)
	bool EndRequireSolidGround; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct UFakeMoverSettings* MoveSettings; // 0xc0(0x08)
};

// Class FSD.BTTask_FindPointNearCeiling
// Size: 0xa8 (Inherited: 0x98)
struct UBTTask_FindPointNearCeiling : UBTTask_BlackboardBase {
	float CloseToCeilingBias; // 0x98(0x04)
	float LookForCeilingLength; // 0x9c(0x04)
	float SearchRadius; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class FSD.BTTask_MoveToTarget
// Size: 0xa0 (Inherited: 0x98)
struct UBTTask_MoveToTarget : UBTTask_BlackboardBase {
	float AcceptableRadius; // 0x98(0x04)
	bool EnterAttackStanceOnMoveFinished; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
};

// Class FSD.BTTask_MoveToSlot
// Size: 0xa8 (Inherited: 0x98)
struct UBTTask_MoveToSlot : UBTTask_BlackboardBase {
	float AcceptableRadius; // 0x98(0x04)
	float LookAheadTime; // 0x9c(0x04)
	float VerticalOffset; // 0xa0(0x04)
	float UpdateRate; // 0xa4(0x04)
};

// Class FSD.BTTask_SetAttacking
// Size: 0x98 (Inherited: 0x70)
struct UBTTask_SetAttacking : UBTTaskNode {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
};

// Class FSD.BTTask_TriggerAI
// Size: 0x78 (Inherited: 0x70)
struct UBTTask_TriggerAI : UBTTaskNode {
	struct FName TriggerName; // 0x70(0x08)
};

// Class FSD.BTTask_MessageAI
// Size: 0x78 (Inherited: 0x70)
struct UBTTask_MessageAI : UBTTaskNode {
	struct FName MessageName; // 0x70(0x08)
};

// Class FSD.BTTask_SetCondition
// Size: 0xa0 (Inherited: 0x70)
struct UBTTask_SetCondition : UBTTaskNode {
	struct FBlackboardKeySelector ConditionalKey; // 0x70(0x28)
	bool Value; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class FSD.BuildRestriction
// Size: 0x38 (Inherited: 0x30)
struct UBuildRestriction : UDataAsset {
	int32_t BuildType; // 0x30(0x04)
	int32_t Platform; // 0x34(0x04)
};

// Class FSD.BurrowComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UBurrowComponent : UActorComponent {
	char pad_B0[0x10]; // 0xb0(0x10)

	void Unburrow(struct UAnimMontage* customMontage); // Function FSD.BurrowComponent.Unburrow // (BlueprintAuthorityOnly|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void CallBurrow(bool isBurrowing, struct UAnimMontage* customMontage); // Function FSD.BurrowComponent.CallBurrow // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x109a930
	void Burrow(struct UAnimMontage* customMontage); // Function FSD.BurrowComponent.Burrow // (BlueprintAuthorityOnly|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.CalldownItem
// Size: 0x3f0 (Inherited: 0x390)
struct ACalldownItem : AAnimatedItem {
	struct UItemPlacerAggregator* ItemPlacerClass; // 0x390(0x08)
	struct ARessuplyPod* SupplyPodClass; // 0x398(0x08)
	struct UResourceData* ResouceRequired; // 0x3a0(0x08)
	struct FText OrderDescription; // 0x3a8(0x18)
	struct FText LogText; // 0x3c0(0x18)
	struct AActor* ResupplyBeacon; // 0x3d8(0x08)
	struct UItemPlacerAggregator* ItemPlacerInstance; // 0x3e0(0x08)
	float CoolDown; // 0x3e8(0x04)
	float CooldownRemaining; // 0x3ec(0x04)

	void Server_Call_Resupply(struct FVector Location); // Function FSD.CalldownItem.Server_Call_Resupply // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x109b7e0
};

// Class FSD.CampaignManager
// Size: 0x1b8 (Inherited: 0x28)
struct UCampaignManager : UObject {
	struct FMulticastInlineDelegate OnCampaignCompleted; // 0x28(0x10)
	struct FMulticastInlineDelegate OnCampaignChanged; // 0x38(0x10)
	struct UCampaign* MainCampaign; // 0x48(0x08)
	struct TArray<struct UCampaign*> WeeklyCampaigns; // 0x50(0x10)
	struct TArray<struct UCampaign*> MatrixCoreHuntCampaigns; // 0x60(0x10)
	struct TArray<struct UCampaign*> SideCampaigns; // 0x70(0x10)
	struct TArray<struct UCampaign*> EventCampaigns; // 0x80(0x10)
	struct UCampaign* ActiveCampaign; // 0x90(0x08)
	int32_t NumFailedRequests; // 0x98(0x04)
	bool WeeklyBackendDataValid; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	int32_t WeeklyBackendSeed; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
	struct FDateTime WeeklyBackendExpirationTime; // 0xa8(0x08)
	struct FDateTime LastRequestTime; // 0xb0(0x08)
	char pad_B8[0x100]; // 0xb8(0x100)

	void StartNewCampaign(struct UCampaign* campaignClass, struct UFSDSaveGame* SaveGame); // Function FSD.CampaignManager.StartNewCampaign // (Final|Native|Public|BlueprintCallable) // @ game+0x109b8e0
	void SkipMainCampaign(struct UObject* WorldContextObject); // Function FSD.CampaignManager.SkipMainCampaign // (Final|Native|Public|BlueprintCallable) // @ game+0x109b860
	void OnEventsRefreshed(); // Function FSD.CampaignManager.OnEventsRefreshed // (Final|Native|Protected) // @ game+0x109b7c0
	bool IsWeeklyCampaignCompleted(struct UObject* WorldContext, enum class ECampaignType campaigntype); // Function FSD.CampaignManager.IsWeeklyCampaignCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109b680
	bool IsInCampaignMission(struct AFSDPlayerController* Player); // Function FSD.CampaignManager.IsInCampaignMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109b520
	bool IsCampaignRestrictionsMet(struct UObject* WorldContextObject, struct UGeneratedMission* mission, struct UDifficultySetting* optionalDifficulty); // Function FSD.CampaignManager.IsCampaignRestrictionsMet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109b3f0
	bool IsCampaignMission(struct UObject* WorldContextObject, struct UGeneratedMission* mission); // Function FSD.CampaignManager.IsCampaignMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109b330
	bool IsActiveCampaign(struct UCampaign* Campaign); // Function FSD.CampaignManager.IsActiveCampaign // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109b1e0
	struct TArray<struct UCampaign*> GetUncompletedCampaigns(struct AFSDPlayerController* Player); // Function FSD.CampaignManager.GetUncompletedCampaigns // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109b070
	struct UGeneratedMission* GetCampaingMissionFromSeeds(struct UObject* WorldContextObject, int32_t GlobalSeed, int32_t MissionSeed); // Function FSD.CampaignManager.GetCampaingMissionFromSeeds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109ad10
	struct UGeneratedMission* GetCampaingMission(struct TArray<struct UGeneratedMission*> missions, int32_t MissionSeed); // Function FSD.CampaignManager.GetCampaingMission // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x109ac20
	void CampaignCompletedDelegate__DelegateSignature(); // DelegateFunction FSD.CampaignManager.CampaignCompletedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void AbortActiveCampaign(struct UFSDSaveGame* SaveGame); // Function FSD.CampaignManager.AbortActiveCampaign // (Final|Native|Public|BlueprintCallable) // @ game+0x109a7f0
};

// Class FSD.Campaign
// Size: 0x168 (Inherited: 0x28)
struct UCampaign : UObject {
	struct TArray<struct UCampaignMission*> missions; // 0x28(0x10)
	struct TArray<struct UCampaignRequirement*> Requirements; // 0x38(0x10)
	struct TArray<struct UCampaignRequirement*> VisibilityRequirements; // 0x48(0x10)
	struct UPlayerCharacterID* RequiredCharacterID; // 0x58(0x08)
	struct TArray<struct UDifficultySetting*> RestrictedToDifficulties; // 0x60(0x10)
	int32_t Progress; // 0x70(0x04)
	struct FGuid SaveGameID; // 0x74(0x10)
	bool CanAbort; // 0x84(0x01)
	bool CanSkip; // 0x85(0x01)
	char pad_86[0x2]; // 0x86(0x02)
	enum class ECampaignMutators Mutators; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
	struct FText TitlePrefix; // 0x90(0x18)
	struct FText Title; // 0xa8(0x18)
	struct FText DescriptionHeader; // 0xc0(0x18)
	struct FText Description; // 0xd8(0x18)
	struct FText RewardText; // 0xf0(0x18)
	struct FText RewardFlavorText; // 0x108(0x18)
	struct UTexture2D* Icon; // 0x120(0x08)
	struct TSoftObjectPtr<struct UTexture2D> Picture; // 0x128(0x28)
	enum class ECampaignType campaigntype; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
	struct UMissionStat* CampaignCompletedMissionStat; // 0x158(0x08)
	struct UGameActivityAssignmentType* CampaignActivity; // 0x160(0x08)

	bool IsComplete(); // Function FSD.Campaign.IsComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109b4f0
	bool IsCampaignComplete(struct UObject* WorldContext, struct UCampaign* Campaign); // Function FSD.Campaign.IsCampaignComplete // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x109b270
	struct UCampaign* GetReference(struct UCampaign* Campaign); // Function FSD.Campaign.GetReference // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x109af60
	struct UCampaignMission* GetPreviousMission(); // Function FSD.Campaign.GetPreviousMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109af30
	struct UTexture2D* GetPicture(); // Function FSD.Campaign.GetPicture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109af00
	struct FText GetCampaignTitle(struct UCampaign* Campaign); // Function FSD.Campaign.GetCampaignTitle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x109ab40
	struct UCampaignMission* GetActiveMission(); // Function FSD.Campaign.GetActiveMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109ab10
	bool CanStartCampaign(struct AFSDPlayerController* Player); // Function FSD.Campaign.CanStartCampaign // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109aa80
	bool CanSeeCampaign(struct APlayerController* PlayerController); // Function FSD.Campaign.CanSeeCampaign // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109a9f0
	bool AreRestrictionsMet(struct AFSDPlayerController* Player, struct UDifficultySetting* optionalDifficulty); // Function FSD.Campaign.AreRestrictionsMet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109a870
};

// Class FSD.CampaignMission
// Size: 0x68 (Inherited: 0x30)
struct UCampaignMission : UDataAsset {
	struct UPlanetZone* PlanetZone; // 0x30(0x08)
	struct FRequiredMissionItem mission; // 0x38(0x18)
	struct TArray<struct UReward*> Rewards; // 0x50(0x10)
	struct UDialogDataAsset* MissionCompleteShout; // 0x60(0x08)

	struct UMissionTemplate* GetMissionTemplate(); // Function FSD.CampaignMission.GetMissionTemplate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109aed0
};

// Class FSD.CampaignRequirement
// Size: 0x28 (Inherited: 0x28)
struct UCampaignRequirement : UObject {

	bool IsRequirementMet(struct AFSDPlayerController* Player, struct UCampaign* Campaign); // Function FSD.CampaignRequirement.IsRequirementMet // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109b5b0
};

// Class FSD.ValidWeeklySeedCampaignRequirement
// Size: 0x28 (Inherited: 0x28)
struct UValidWeeklySeedCampaignRequirement : UCampaignRequirement {
};

// Class FSD.CaracterLevelCampaignRequirement
// Size: 0x38 (Inherited: 0x28)
struct UCaracterLevelCampaignRequirement : UCampaignRequirement {
	struct UPlayerCharacterID* characterID; // 0x28(0x08)
	int32_t LevelRequirement; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class FSD.PlayerRankCampaignRequirement
// Size: 0x30 (Inherited: 0x28)
struct UPlayerRankCampaignRequirement : UCampaignRequirement {
	int32_t RankRequirement; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class FSD.RetirementCampaignRequirement
// Size: 0x38 (Inherited: 0x28)
struct URetirementCampaignRequirement : UCampaignRequirement {
	struct UPlayerCharacterID* characterID; // 0x28(0x08)
	int32_t LevelRequirement; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class FSD.WeeklyTimerCampaignRequirement
// Size: 0x28 (Inherited: 0x28)
struct UWeeklyTimerCampaignRequirement : UCampaignRequirement {

	struct FTimespan GetWeeklyTimeLeft(struct AFSDPlayerController* Player); // Function FSD.WeeklyTimerCampaignRequirement.GetWeeklyTimeLeft // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x109b150
	struct FTimespan GetTimeUntillNewCampaign(struct AFSDPlayerController* Player); // Function FSD.WeeklyTimerCampaignRequirement.GetTimeUntillNewCampaign // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x109afe0
	bool GetHasCompleted(struct UCampaign* Campaign, struct AFSDPlayerController* Player); // Function FSD.WeeklyTimerCampaignRequirement.GetHasCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109ae10
};

// Class FSD.AnyRetiredCampaignRequirement
// Size: 0x28 (Inherited: 0x28)
struct UAnyRetiredCampaignRequirement : UCampaignRequirement {
};

// Class FSD.CamapaignCompletedRequirement
// Size: 0x30 (Inherited: 0x28)
struct UCamapaignCompletedRequirement : UCampaignRequirement {
	struct UCampaign* Campaign; // 0x28(0x08)
};

// Class FSD.CapacityBasedItemAggregator
// Size: 0x140 (Inherited: 0xc8)
struct UCapacityBasedItemAggregator : UItemAggregator {
	struct FMulticastInlineDelegate OnCurrentAmountChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnMaxAmountChanged; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnClipAndTotalChanged; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnReloadTimeChanged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnReloadComplete; // 0x108(0x10)
	struct FMulticastInlineDelegate OnReloadStarted; // 0x118(0x10)
	struct FMulticastInlineDelegate OnMaxAmmoCapacityChanged; // 0x128(0x10)
	bool showClipCount; // 0x138(0x01)
	char pad_139[0x7]; // 0x139(0x07)

	void ReloadStarted(); // Function FSD.CapacityBasedItemAggregator.ReloadStarted // (Final|Native|Public) // @ game+0x109f9d0
	void ReloadComplete(); // Function FSD.CapacityBasedItemAggregator.ReloadComplete // (Final|Native|Public) // @ game+0x109f9a0
	int32_t GetMaxAmount(); // Function FSD.CapacityBasedItemAggregator.GetMaxAmount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f1f0
	int32_t GetCurrentAmount(); // Function FSD.CapacityBasedItemAggregator.GetCurrentAmount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f1c0
};

// Class FSD.CapacityHoldingItemAggregator
// Size: 0x160 (Inherited: 0x140)
struct UCapacityHoldingItemAggregator : UCapacityBasedItemAggregator {
	char pad_140[0x10]; // 0x140(0x10)
	int32_t MaxAmmo; // 0x150(0x04)
	int32_t AmmoCount; // 0x154(0x04)
	bool UseRejoin; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	void UseAmmo(int32_t count); // Function FSD.CapacityHoldingItemAggregator.UseAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x109fdf0
	void SetMaxAmmo(int32_t InMaxAmmo, bool InChangeCurrentAmount); // Function FSD.CapacityHoldingItemAggregator.SetMaxAmmo // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x109fa80
	void Resupply(float percentage); // Function FSD.CapacityHoldingItemAggregator.Resupply // (Final|Native|Public|BlueprintCallable) // @ game+0x109fa00
	void OnRep_MaxAmmo(); // Function FSD.CapacityHoldingItemAggregator.OnRep_MaxAmmo // (Final|Native|Protected) // @ game+0x109f840
	void OnRep_AmmoCount(); // Function FSD.CapacityHoldingItemAggregator.OnRep_AmmoCount // (Final|Native|Protected) // @ game+0x109f6a0
	void AddAmmo(int32_t Amount); // Function FSD.CapacityHoldingItemAggregator.AddAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x109eeb0
};

// Class FSD.CappedResource
// Size: 0x78 (Inherited: 0x28)
struct UCappedResource : UObject {
	struct FMulticastInlineDelegate OnChanged; // 0x28(0x10)
	struct FMulticastInlineDelegate OnIncreased; // 0x38(0x10)
	struct FMulticastInlineDelegate OnFull; // 0x48(0x10)
	struct UResourceData* Data; // 0x58(0x08)
	float currentAmount; // 0x60(0x04)
	float MaxAmount; // 0x64(0x04)
	float TotalCollected; // 0x68(0x04)
	int32_t FullFlag; // 0x6c(0x04)
	char pad_70[0x8]; // 0x70(0x08)

	float TransferAll(struct UCappedResource* Receiver); // Function FSD.CappedResource.TransferAll // (Final|Native|Public|BlueprintCallable) // @ game+0x109fd10
	float Transfer(float Amount, struct UCappedResource* Receiver); // Function FSD.CappedResource.Transfer // (Final|Native|Public|BlueprintCallable) // @ game+0x109fc40
	void OnRep_FullFlag(int32_t OldValue); // Function FSD.CappedResource.OnRep_FullFlag // (Final|Native|Protected) // @ game+0x109f7a0
	void OnRep_CurrentAmount(float OldAmount); // Function FSD.CappedResource.OnRep_CurrentAmount // (Final|Native|Protected) // @ game+0x109f6e0
	bool IsObjectiveResource(struct UObject* WorldContext, bool IsCompleted); // Function FSD.CappedResource.IsObjectiveResource // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f520
	bool IsFull(); // Function FSD.CappedResource.IsFull // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f4e0
	bool isEmpty(); // Function FSD.CappedResource.isEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f4b0
	bool IsCraftingResource(); // Function FSD.CappedResource.IsCraftingResource // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xbaf250
	struct FText GetTitle(); // Function FSD.CappedResource.GetTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f250
	struct FColor GetColor(); // Function FSD.CappedResource.GetColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f180
	float GetCapacityPct(); // Function FSD.CappedResource.GetCapacityPct // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f110
	float Deduct(float Amount); // Function FSD.CappedResource.Deduct // (Final|Native|Public|BlueprintCallable) // @ game+0x109f060
	float Add(float Amount); // Function FSD.CappedResource.Add // (Final|Native|Public|BlueprintCallable) // @ game+0x109ee20
};

// Class FSD.Caretaker
// Size: 0x3a0 (Inherited: 0x2f0)
struct ACaretaker : AFSDPawn {
	struct USceneComponent* Root; // 0x2f0(0x08)
	struct USkeletalMeshComponent* Body; // 0x2f8(0x08)
	struct TArray<struct USkeletalMeshComponent*> Eyes; // 0x300(0x10)
	struct TArray<struct UPassthroughSubHealthComponent*> subHealth; // 0x310(0x10)
	struct UHealthDamageTracker* DamageTracker; // 0x320(0x08)
	struct UEnemyHealthComponent* Health; // 0x328(0x08)
	struct UPawnStatsComponent* PawnStats; // 0x330(0x08)
	struct TArray<struct UCaretakerActionComponent*> Actions; // 0x338(0x10)
	struct UCaretakerActionComponent* CurrentAction; // 0x348(0x08)
	struct TArray<struct UAnimSequenceBase*> HitReactions; // 0x350(0x10)
	int32_t CurrentStage; // 0x360(0x04)
	char pad_364[0xc]; // 0x364(0x0c)
	struct TArray<float> RotationRates; // 0x370(0x10)
	float Server_Rotation; // 0x380(0x04)
	bool IsInStageCooldown; // 0x384(0x01)
	bool IsWeakpointAVisible; // 0x385(0x01)
	bool IsWeakpointBVisible; // 0x386(0x01)
	bool IsWeakpointCVisible; // 0x387(0x01)
	bool IsWeakpointDVisible; // 0x388(0x01)
	enum class ECaretakerSpawnType ActiveSpawnType; // 0x389(0x01)
	char pad_38A[0x2]; // 0x38a(0x02)
	int32_t AoEStage; // 0x38c(0x04)
	char pad_390[0xd]; // 0x390(0x0d)
	int8_t OpenEye; // 0x39d(0x01)
	char pad_39E[0x2]; // 0x39e(0x02)

	void WakeUp(); // Function FSD.Caretaker.WakeUp // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x109fe70
	void SetTargetRotationRate(int32_t rateIndex); // Function FSD.Caretaker.SetTargetRotationRate // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x109fb40
	void OpenRandomEye(bool forbidLastEye); // Function FSD.Caretaker.OpenRandomEye // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x109f880
	void OnStartHideFromDamage(); // Function FSD.Caretaker.OnStartHideFromDamage // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRep_OpenEye(); // Function FSD.Caretaker.OnRep_OpenEye // (Final|Native|Protected) // @ game+0x109f860
	void OnRep_CurrentStage(); // Function FSD.Caretaker.OnRep_CurrentStage // (Final|Native|Private) // @ game+0x109f780
	void OnRep_CurrentRotation(); // Function FSD.Caretaker.OnRep_CurrentRotation // (Final|Native|Private) // @ game+0x109f760
	void OnNewStage(int32_t stageIndex); // Function FSD.Caretaker.OnNewStage // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnEyeOpened(struct USkeletalMeshComponent* eye); // Function FSD.Caretaker.OnEyeOpened // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnEyeClosed(struct USkeletalMeshComponent* eye); // Function FSD.Caretaker.OnEyeClosed // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnDamageTaken(float Amount); // Function FSD.Caretaker.OnDamageTaken // (Final|Native|Protected) // @ game+0x109f620
	bool IsAwake(); // Function FSD.Caretaker.IsAwake // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f480
	bool IsAnyEyeOpen(); // Function FSD.Caretaker.IsAnyEyeOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f450
	void InitiateNextStage(); // Function FSD.Caretaker.InitiateNextStage // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x109f430
	void InitCaretakerActions(struct TArray<struct UCaretakerActionComponent*> carettakeractions); // Function FSD.Caretaker.InitCaretakerActions // (Final|Native|Public|BlueprintCallable) // @ game+0x109f2f0
	void CloseAllEyes(); // Function FSD.Caretaker.CloseAllEyes // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x109f040
};

// Class FSD.CaretagerBodyAnimInstance
// Size: 0x2d0 (Inherited: 0x2c0)
struct UCaretagerBodyAnimInstance : UEnemyAnimInstance {
	bool CoolingOff; // 0x2b8(0x01)
	bool IsWeakpointAVisible; // 0x2b9(0x01)
	bool IsWeakpointBVisible; // 0x2ba(0x01)
	bool IsWeakpointCVisible; // 0x2bb(0x01)
	bool IsWeakpointDVisible; // 0x2bc(0x01)
	float RotationAngle; // 0x2c0(0x04)
	int32_t AoEStage; // 0x2c4(0x04)
	bool IsSpawningDrones; // 0x2c8(0x01)
	bool IsSpawningBombs; // 0x2c9(0x01)
	bool IsSpawningShredders; // 0x2ca(0x01)
	bool IsSpawningTurrets; // 0x2cb(0x01)
};

// Class FSD.CaretakerEyeAnimInstance
// Size: 0x2c0 (Inherited: 0x2c0)
struct UCaretakerEyeAnimInstance : UEnemyAnimInstance {
	bool IsOpen; // 0x2b8(0x01)
};

// Class FSD.CaretakerActionComponent
// Size: 0xb8 (Inherited: 0xb0)
struct UCaretakerActionComponent : UActorComponent {
	bool StartTickOnUse; // 0xb0(0x01)
	bool IsUsing; // 0xb1(0x01)
	char pad_B2[0x6]; // 0xb2(0x06)

	void UseAction(); // Function FSD.CaretakerActionComponent.UseAction // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x109fdd0
	void TriggerAction(); // Function FSD.CaretakerActionComponent.TriggerAction // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x109fdb0
	void StopUsing(); // Function FSD.CaretakerActionComponent.StopUsing // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x108ba50
	void OnTriggered(); // Function FSD.CaretakerActionComponent.OnTriggered // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnStopped(); // Function FSD.CaretakerActionComponent.OnStopped // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnStarted(); // Function FSD.CaretakerActionComponent.OnStarted // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRep_IsUsing(); // Function FSD.CaretakerActionComponent.OnRep_IsUsing // (Final|Native|Protected) // @ game+0x109f820
	struct ACaretaker* GetCaretaker(); // Function FSD.CaretakerActionComponent.GetCaretaker // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f150
	bool CanUse(); // Function FSD.CaretakerActionComponent.CanUse // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x109f010
};

// Class FSD.UsableComponentBase
// Size: 0xf0 (Inherited: 0xb0)
struct UUsableComponentBase : UActorComponent {
	struct FMulticastInlineDelegate OnClientBeginUse; // 0xb0(0x10)
	int32_t CallbackKeys; // 0xc0(0x04)
	float UseCooldown; // 0xc4(0x04)
	bool MustBeGroundedToUse; // 0xc8(0x01)
	bool CanUseStrict; // 0xc9(0x01)
	bool StrictOnlyAfterPickup; // 0xca(0x01)
	char pad_CB[0x5]; // 0xcb(0x05)
	struct UUseAnimationSetting* AnimationSettings; // 0xd0(0x08)
	int32_t Priority; // 0xd8(0x04)
	bool UseableByOwnerOnly; // 0xdc(0x01)
	char pad_DD[0x3]; // 0xdd(0x03)
	struct USceneComponent* RestrictToCollider; // 0xe0(0x08)
	enum class EUseRestriction UseRestrictionAllowance; // 0xe8(0x01)
	bool IsRayTraceTriggered; // 0xe9(0x01)
	bool ResetUsingOnCompletion; // 0xea(0x01)
	bool EquipOnEndUse; // 0xeb(0x01)
	char pad_EC[0x4]; // 0xec(0x04)

	void SetRayTraceTriggered(bool rayTraceTriggered); // Function FSD.UsableComponentBase.SetRayTraceTriggered // (Final|Native|Public|BlueprintCallable) // @ game+0x122f9f0
	struct FText GetUseText(struct APlayerCharacter* User); // Function FSD.UsableComponentBase.GetUseText // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x122f5e0
	float GetUseProgressInPercent(struct APlayerCharacter* User); // Function FSD.UsableComponentBase.GetUseProgressInPercent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x122f540
	struct UTexture2D* GetUsableIcon(); // Function FSD.UsableComponentBase.GetUsableIcon // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x122f510
	bool GetShowUsingUI(); // Function FSD.UsableComponentBase.GetShowUsingUI // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a1d60
	bool GetIsRayTraceTriggerd(); // Function FSD.UsableComponentBase.GetIsRayTraceTriggerd // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1212150
	bool GetHideProgressBar(struct APlayerCharacter* User); // Function FSD.UsableComponentBase.GetHideProgressBar // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x122f430
	bool GetHideActionText(struct APlayerCharacter* User); // Function FSD.UsableComponentBase.GetHideActionText // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x122f390
	void EndUse(struct APlayerCharacter* User); // Function FSD.UsableComponentBase.EndUse // (Native|Public|BlueprintCallable) // @ game+0x122f300
	void BeginUse(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.UsableComponentBase.BeginUse // (Native|Public|BlueprintCallable) // @ game+0x122f130
};

// Class FSD.UsableComponent
// Size: 0x118 (Inherited: 0xf0)
struct UUsableComponent : UUsableComponentBase {
	struct UDialogDataAsset* ShoutBegin; // 0xf0(0x08)
	struct FText UseText; // 0xf8(0x18)
	bool ResetOnFail; // 0x110(0x01)
	bool SwitchToUsingState; // 0x111(0x01)
	char pad_112[0x6]; // 0x112(0x06)

	void SetUseText(struct FText NewText); // Function FSD.UsableComponent.SetUseText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x122fbd0
	bool HasDuration(); // Function FSD.UsableComponent.HasDuration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x122f6c0
};

// Class FSD.InstantUsable
// Size: 0x150 (Inherited: 0x118)
struct UInstantUsable : UUsableComponent {
	struct FMulticastInlineDelegate OnUsedBy; // 0x118(0x10)
	struct FMulticastInlineDelegate OnUsableChanged; // 0x128(0x10)
	bool bShowUsingUI; // 0x138(0x01)
	bool AllowUseWhileCarrying; // 0x139(0x01)
	char pad_13A[0x6]; // 0x13a(0x06)
	struct USoundCue* AudioCompletedUse; // 0x140(0x08)
	bool Usable; // 0x148(0x01)
	bool TurnOffAfterUse; // 0x149(0x01)
	char pad_14A[0x6]; // 0x14a(0x06)

	void SetCanUse(bool CanUse); // Function FSD.InstantUsable.SetCanUse // (Native|Public|BlueprintCallable) // @ game+0x122f8d0
	void OnRep_Usable(); // Function FSD.InstantUsable.OnRep_Usable // (Final|Native|Protected) // @ game+0x122f7d0
};

// Class FSD.CarriableInstantUsable
// Size: 0x150 (Inherited: 0x150)
struct UCarriableInstantUsable : UInstantUsable {
};

// Class FSD.CarriableComponent
// Size: 0x140 (Inherited: 0xb0)
struct UCarriableComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FMulticastInlineDelegate OnPickedUp; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnDropped; // 0xc8(0x10)
	struct TSoftObjectPtr<struct UDialogDataAsset> ShoutWhileCarrying; // 0xd8(0x28)
	struct APlayerCharacter* CarriedBy; // 0x100(0x08)
	enum class EUseRestriction UseRestriction; // 0x108(0x01)
	char pad_109[0x3]; // 0x109(0x03)
	struct FVector Offset; // 0x10c(0x0c)
	char pad_118[0x28]; // 0x118(0x28)

	bool PickupItem(struct APlayerCharacter* byCharacter); // Function FSD.CarriableComponent.PickupItem // (Final|Native|Public|BlueprintCallable) // @ game+0x109f910
	void OnRep_CarriedBy(); // Function FSD.CarriableComponent.OnRep_CarriedBy // (Final|Native|Protected) // @ game+0x109f6c0
	void DropItem(); // Function FSD.CarriableComponent.DropItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x109f0f0
	void AttachChanged(bool Attached, struct FVector PrevScale); // Function FSD.CarriableComponent.AttachChanged // (Final|Native|Public|HasDefaults) // @ game+0x109ef30
};

// Class FSD.ResourceData
// Size: 0xf0 (Inherited: 0x30)
struct UResourceData : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	struct FText Title; // 0x38(0x18)
	struct FText TitlePlural; // 0x50(0x18)
	struct FText Description; // 0x68(0x18)
	struct FColor Color; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct UTexture2D* Icon; // 0x88(0x08)
	int32_t BuyingPrice; // 0x90(0x04)
	int32_t SellingPrice; // 0x94(0x04)
	struct UMissionStat* MinedMissionStat; // 0x98(0x08)
	bool IsCraftingMaterial; // 0xa0(0x01)
	bool ForceShowOnEndScreen; // 0xa1(0x01)
	bool AffectedByMutators; // 0xa2(0x01)
	bool ScaleToMissionLength; // 0xa3(0x01)
	bool ScaleToHazardLevel; // 0xa4(0x01)
	bool ShowSeparatelyInEndScreen; // 0xa5(0x01)
	char pad_A6[0x2]; // 0xa6(0x02)
	SoftClassProperty Spawnable; // 0xa8(0x28)
	bool IsWholeNumberResource; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	int32_t CreditValue; // 0xd4(0x04)
	int32_t XPValue; // 0xd8(0x04)
	struct FGuid SaveGameID; // 0xdc(0x10)
	char pad_EC[0x4]; // 0xec(0x04)

	float GetOwnedAmount(struct UObject* WorldContextObject); // Function FSD.ResourceData.GetOwnedAmount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e36b0
};

// Class FSD.CarvedResourceData
// Size: 0x120 (Inherited: 0xf0)
struct UCarvedResourceData : UResourceData {
	struct TSoftObjectPtr<struct UCarvedResourceCreator> CarvedResourceCreator; // 0xf0(0x28)
	float UnitsPerCarver; // 0x118(0x04)
	char pad_11C[0x4]; // 0x11c(0x04)

	struct UCarvedResourceCreator* LoadResourceCreator(); // Function FSD.CarvedResourceData.LoadResourceCreator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f5f0
};

// Class FSD.CaveEntranceComponent
// Size: 0x400 (Inherited: 0x3f0)
struct UCaveEntranceComponent : UPrimitiveComponent {
	enum class ECaveEntranceType Direction; // 0x3f0(0x01)
	enum class ECaveEntrancePriority Priority; // 0x3f1(0x01)
	char pad_3F2[0xe]; // 0x3f2(0x0e)
};

// Class FSD.CaveEntrance
// Size: 0x238 (Inherited: 0x228)
struct ACaveEntrance : AGenerationItem {
	struct UCaveEntranceComponent* CaveEntranceComponent; // 0x228(0x08)
	enum class ECaveEntranceType EntranceType; // 0x230(0x01)
	bool HasBeenConverted; // 0x231(0x01)
	char pad_232[0x6]; // 0x232(0x06)
};

// Class FSD.SpawnResourceGenerationItem
// Size: 0x240 (Inherited: 0x228)
struct ASpawnResourceGenerationItem : AGenerationItem {
	struct UResourceData* Resource; // 0x228(0x08)
	float BaseAmount; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct USphereComponent* Sphere; // 0x238(0x08)
};

// Class FSD.SpawnActorGenerationItem
// Size: 0x238 (Inherited: 0x228)
struct ASpawnActorGenerationItem : AGenerationItem {
	struct AActor* ActorToSpawn; // 0x228(0x08)
	struct UBoxComponent* Box; // 0x230(0x08)
};

// Class FSD.SpawnTriggerItem
// Size: 0x238 (Inherited: 0x228)
struct ASpawnTriggerItem : AGenerationItem {
	struct AActor* Trigger; // 0x228(0x08)
	struct FName Message; // 0x230(0x08)
};

// Class FSD.SubRoomItem
// Size: 0x238 (Inherited: 0x228)
struct ASubRoomItem : AGenerationItem {
	struct URoomGenerator* RoomGenerator; // 0x228(0x08)
	int32_t Layer; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
};

// Class FSD.RandomSubRoomItem
// Size: 0x280 (Inherited: 0x228)
struct ARandomSubRoomItem : AGenerationItem {
	struct URoomGeneratorGroup* RoomGroup; // 0x228(0x08)
	struct FGameplayTagQuery tagQuery; // 0x230(0x48)
	int32_t Layer; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
};

// Class FSD.DropPodCalldownLocationItem
// Size: 0x230 (Inherited: 0x228)
struct ADropPodCalldownLocationItem : AGenerationItem {
	struct AActor* CalldownClass; // 0x228(0x08)
};

// Class FSD.ProceduralSetup
// Size: 0x4c0 (Inherited: 0x220)
struct AProceduralSetup : AActor {
	bool ShowItemNoisePattern; // 0x220(0x01)
	char pad_221[0x3]; // 0x221(0x03)
	int32_t Seed; // 0x224(0x04)
	bool UseRandomSeed; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct FRandomStream RandomStream; // 0x230(0x08)
	struct FRandomStream RandomStreamServer; // 0x238(0x08)
	struct FRandomStream RandomStreamAsync; // 0x240(0x08)
	struct FRandomStream RandomStreamAsyncServer; // 0x248(0x08)
	struct FMulticastInlineDelegate OnEncounterSpawnedEvent; // 0x250(0x10)
	struct TArray<struct FEncounterSpecialItem> SpecialEncountersToSpawn; // 0x260(0x10)
	char pad_270[0x18]; // 0x270(0x18)
	struct USpecialEvent* ForcedSpecialEvent; // 0x288(0x08)
	struct USpecialEvent* ForcedTreasure; // 0x290(0x08)
	char pad_298[0x18]; // 0x298(0x18)
	struct UNoisyPathfinderComponent* NoisyPathfinder; // 0x2b0(0x08)
	struct UProceduralTunnelComponent* ProceduralTunnel; // 0x2b8(0x08)
	struct UProceduralObjectColliders* ObjectColliders; // 0x2c0(0x08)
	struct ADeepCSGWorld* CSGWorld; // 0x2c8(0x08)
	struct UFloodFillSettings* PathfinderNoise; // 0x2d0(0x08)
	struct TArray<struct FVeinResource> VeinResources; // 0x2d8(0x10)
	struct TArray<struct FCarvedResource> CarvedResources; // 0x2e8(0x10)
	struct UMissionDNA* MissionDNA; // 0x2f8(0x08)
	struct TArray<struct FGemResourceAmount> GemResourcesToGenerate; // 0x300(0x10)
	char pad_310[0x8]; // 0x310(0x08)
	struct TArray<struct FCollectableSpawnableItem> CollectablesToGenerate; // 0x318(0x10)
	enum class ESpawnSettings SpawnSettings; // 0x328(0x01)
	bool CanSpawnSpecialEvents; // 0x329(0x01)
	bool ShouldCarveTunnels; // 0x32a(0x01)
	char pad_32B[0x5]; // 0x32b(0x05)
	struct TArray<struct FRoomNode> Rooms; // 0x330(0x10)
	struct TArray<struct FRoomNode> RoomsInitialState; // 0x340(0x10)
	struct TArray<struct FTunnelNode> Tunnels; // 0x350(0x10)
	struct FGeneratedInfluenceSets GeneratedInfluenceSets; // 0x360(0x18)
	char pad_378[0x8]; // 0x378(0x08)
	struct FGeneratedInstantCarvers GeneratedInstantCarvers; // 0x380(0x10)
	struct FGeneratedDebris GeneratedDebris; // 0x390(0x58)
	struct UBiome* Biome; // 0x3e8(0x08)
	float missionLength; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct TArray<struct FPathObstacle> PathObstacles; // 0x3f8(0x10)
	struct FInfluenceMap InfluenceMap; // 0x408(0x50)
	struct TArray<struct UResourceData*> SpawnedResources; // 0x458(0x10)
	float CaveDepth; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct AActor* PostProcessActor; // 0x470(0x08)
	struct USpecialEvent* SpecialEvent; // 0x478(0x08)
	bool IsInitialized; // 0x480(0x01)
	char pad_481[0x3]; // 0x481(0x03)
	int32_t CurrentRoomPass; // 0x484(0x04)
	bool Pass1Completed; // 0x488(0x01)
	bool UsePerLevelCritterSpawning; // 0x489(0x01)
	char pad_48A[0x6]; // 0x48a(0x06)
	struct FString LastCompletedPLSPass; // 0x490(0x10)
	char pad_4A0[0x20]; // 0x4a0(0x20)

	void StartGenerationOnClient(struct AFSDPlayerController* client); // Function FSD.ProceduralSetup.StartGenerationOnClient // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void SpawnSpecialEvents(); // Function FSD.ProceduralSetup.SpawnSpecialEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x11cf720
	void SpawnObjectiveEncounter(); // Function FSD.ProceduralSetup.SpawnObjectiveEncounter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11cf700
	void SpawnObjectiveCriticalItems(); // Function FSD.ProceduralSetup.SpawnObjectiveCriticalItems // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11cf6e0
	void SpawnItems_Async(struct AProceduralSetup* setup, struct FLatentActionInfo LatentInfo); // Function FSD.ProceduralSetup.SpawnItems_Async // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11cf600
	void SpawnItems(); // Function FSD.ProceduralSetup.SpawnItems // (Final|Native|Public|BlueprintCallable) // @ game+0x11cf5e0
	void SpawnEncounters(); // Function FSD.ProceduralSetup.SpawnEncounters // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11cf5c0
	void SpawnDebrisItems_Async(struct AProceduralSetup* setup, struct FLatentActionInfo LatentInfo, enum class EDebrisItemPass pass, int32_t Depth); // Function FSD.ProceduralSetup.SpawnDebrisItems_Async // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11cf470
	void SpawnDebrisItems(enum class EDebrisItemPass pass); // Function FSD.ProceduralSetup.SpawnDebrisItems // (Final|Native|Public|BlueprintCallable) // @ game+0x11cf3f0
	void SetSeed(int32_t Seed); // Function FSD.ProceduralSetup.SetSeed // (Final|Native|Public|BlueprintCallable) // @ game+0x11cf370
	void SetObjectivesCompleted(); // Function FSD.ProceduralSetup.SetObjectivesCompleted // (Final|Native|Private) // @ game+0x11cf350
	void ResetData(); // Function FSD.ProceduralSetup.ResetData // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void RemoveBLockedEntrances(); // Function FSD.ProceduralSetup.RemoveBLockedEntrances // (Final|Native|Public|BlueprintCallable) // @ game+0x11cedd0
	void OnPLSDataRecieved(); // Function FSD.ProceduralSetup.OnPLSDataRecieved // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnObjectivesCompleted(); // Function FSD.ProceduralSetup.OnObjectivesCompleted // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnCarverDataRecieved(enum class EDebrisItemPass pass); // Function FSD.ProceduralSetup.OnCarverDataRecieved // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	bool IsGeneratedDataReady(); // Function FSD.ProceduralSetup.IsGeneratedDataReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ce740
	bool IsCarverDataReady(enum class EDebrisItemPass pass); // Function FSD.ProceduralSetup.IsCarverDataReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ce690
	void InitializeObjectives(); // Function FSD.ProceduralSetup.InitializeObjectives // (Final|Native|Public|BlueprintCallable) // @ game+0x11ce5e0
	struct UMissionDNA* GetMissionDNA(); // Function FSD.ProceduralSetup.GetMissionDNA // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ce590
	struct TMap<struct FString, float> GetGemsResourceAmounts(); // Function FSD.ProceduralSetup.GetGemsResourceAmounts // (Final|Native|Protected|BlueprintCallable) // @ game+0x11ce4c0
	struct ADeepCSGWorld* GetCSGWorld(); // Function FSD.ProceduralSetup.GetCSGWorld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ce2c0
	struct TMap<struct FString, float> GetCollectablesResourceAmounts(); // Function FSD.ProceduralSetup.GetCollectablesResourceAmounts // (Final|Native|Protected|BlueprintCallable) // @ game+0x11ce2f0
	void GenerateRoomsFromGraph_Async(struct AProceduralSetup* setup, struct FLatentActionInfo LatentInfo, int32_t CarvePass); // Function FSD.ProceduralSetup.GenerateRoomsFromGraph_Async // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11ce1a0
	void GenerateRoomsFromGraph(int32_t CarvePass); // Function FSD.ProceduralSetup.GenerateRoomsFromGraph // (Final|Native|Public|BlueprintCallable) // @ game+0x11ce120
	void GenerateResourceVeins_Async(struct AProceduralSetup* setup, struct FLatentActionInfo LatentInfo); // Function FSD.ProceduralSetup.GenerateResourceVeins_Async // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11ce040
	void GenerateResourceVeins(); // Function FSD.ProceduralSetup.GenerateResourceVeins // (Final|Native|Public|BlueprintCallable) // @ game+0x11ce020
	void GeneratePostCarveRooms_Async(struct AProceduralSetup* setup, struct FLatentActionInfo LatentInfo); // Function FSD.ProceduralSetup.GeneratePostCarveRooms_Async // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11cdf40
	void GeneratePostCarveRooms(); // Function FSD.ProceduralSetup.GeneratePostCarveRooms // (Final|Native|Public|BlueprintCallable) // @ game+0x11cdf20
	void GenerateLandscapeFromData(int32_t Seed, struct TArray<struct FRoomNode> Rooms, struct TArray<struct FPathObstacle> obstacles); // Function FSD.ProceduralSetup.GenerateLandscapeFromData // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void GenerateLandscape(); // Function FSD.ProceduralSetup.GenerateLandscape // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void GenerateDebrisVeins_Async(struct AProceduralSetup* setup, enum class EDebrisCarvedType carverType, struct FLatentActionInfo LatentInfo); // Function FSD.ProceduralSetup.GenerateDebrisVeins_Async // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11cdde0
	void GenerateDebrisVeins(enum class EDebrisCarvedType carverType); // Function FSD.ProceduralSetup.GenerateDebrisVeins // (Final|Native|Public|BlueprintCallable) // @ game+0x11cdd60
	struct FVector FindLocationInDirection(struct FVector Origin, struct FVector Direction, float horizontalDeviation, float verticalDeviation, struct FRandRange Distance, float additionalDistance); // Function FSD.ProceduralSetup.FindLocationInDirection // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11cdb50
	void FindEntrancesForAllConnections(); // Function FSD.ProceduralSetup.FindEntrancesForAllConnections // (Final|Native|Public|BlueprintCallable) // @ game+0x11cdb30
	void FillTunnels_Async(struct AProceduralSetup* setup, struct FLatentActionInfo LatentInfo); // Function FSD.ProceduralSetup.FillTunnels_Async // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11cda50
	void FillTunnels(); // Function FSD.ProceduralSetup.FillTunnels // (Final|Native|Public|BlueprintCallable) // @ game+0x11cda30
	void DoneCarving(); // Function FSD.ProceduralSetup.DoneCarving // (Final|Native|Public|BlueprintCallable) // @ game+0x8dc380
	bool DoAsyncThreadGeneration(); // Function FSD.ProceduralSetup.DoAsyncThreadGeneration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11cda00
	void CreateTunnelPaths(); // Function FSD.ProceduralSetup.CreateTunnelPaths // (Final|Native|Public|BlueprintCallable) // @ game+0x11cd960
	int32_t CreateItemDepths(); // Function FSD.ProceduralSetup.CreateItemDepths // (Final|Native|Public|BlueprintCallable) // @ game+0x11cd930
	void CreateGeneratedInfluenceSet(); // Function FSD.ProceduralSetup.CreateGeneratedInfluenceSet // (Final|Native|Public|BlueprintCallable) // @ game+0x11cd910
	void CreateAdditionalRooms(); // Function FSD.ProceduralSetup.CreateAdditionalRooms // (Final|Native|Public|BlueprintCallable) // @ game+0x8dc380
	int32_t ConnectRooms(struct FRoomNode From, struct FRoomNode to, bool hasDirt, struct UTunnelParameters* tunnelParameterOverride); // Function FSD.ProceduralSetup.ConnectRooms // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11cd2a0
	int32_t ConnectRoomIds(int32_t fromID, int32_t toID, bool hasDirt, struct UTunnelParameters* tunnelParameterOverride); // Function FSD.ProceduralSetup.ConnectRoomIds // (Final|Native|Public|BlueprintCallable) // @ game+0x11cd140
	void CommitCarving(bool finalCommit, bool generateMesh); // Function FSD.ProceduralSetup.CommitCarving // (Final|Native|Public|BlueprintCallable) // @ game+0x11cd070
	void CarveWithGeneratedInstantCarvers(); // Function FSD.ProceduralSetup.CarveWithGeneratedInstantCarvers // (Final|Native|Public|BlueprintCallable) // @ game+0x11cc930
	void CarveTunnels(); // Function FSD.ProceduralSetup.CarveTunnels // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void BeginLiveGeneration(); // Function FSD.ProceduralSetup.BeginLiveGeneration // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void BeginGenerating(); // Function FSD.ProceduralSetup.BeginGenerating // (Final|Native|Public|BlueprintCallable) // @ game+0x11cc910
	void AddRoomToInitialState(struct FRoomNode RoomNode); // Function FSD.ProceduralSetup.AddRoomToInitialState // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	int32_t AddRoom(struct FVector Location, bool CanHaveEnemies, struct URoomGeneratorBase* RoomGenerator, bool canBeRotated, struct FVector outCenter, struct FRoomNode outRoom, float ResourceMultiplier); // Function FSD.ProceduralSetup.AddRoom // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11cc3e0
	void AddInfluenceToTunnelEntrances(struct UCaveInfluencer* Influencer, float range); // Function FSD.ProceduralSetup.AddInfluenceToTunnelEntrances // (Final|Native|Public|BlueprintCallable) // @ game+0x11cc310
	void AddImportantLocation(struct FVector Location, float Radius); // Function FSD.ProceduralSetup.AddImportantLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11cc230
	void AddEnemyDebris(); // Function FSD.ProceduralSetup.AddEnemyDebris // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11cc210
	int32_t AddDebrisCollider(struct FDebrisCapsule Capsule); // Function FSD.ProceduralSetup.AddDebrisCollider // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11cc150
	void AddCaveInfluence(struct UCaveInfluencer* Influencer, struct FVector Location, float range); // Function FSD.ProceduralSetup.AddCaveInfluence // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11cc040
	int32_t AddAirParticlesCollider(struct FDebrisCapsule Capsule); // Function FSD.ProceduralSetup.AddAirParticlesCollider // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11cbf80
};

// Class FSD.CaveBurner
// Size: 0x4f8 (Inherited: 0x4c0)
struct ACaveBurner : AProceduralSetup {
	float RoomRadius; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
	struct FGameplayTagContainer RoomTags; // 0x4c8(0x20)
	bool CanOnlyBeUsedOnce; // 0x4e8(0x01)
	char pad_4E9[0x7]; // 0x4e9(0x07)
	struct URoomGenerator* RoomGenerator; // 0x4f0(0x08)
};

// Class FSD.RoomBurner
// Size: 0x2e0 (Inherited: 0x220)
struct ARoomBurner : AActor {
	bool LiveUpdateEditor; // 0x220(0x01)
	enum class ERoomMirror MirrorTest; // 0x221(0x01)
	char pad_222[0x6]; // 0x222(0x06)
	struct URoomGenerator* RoomGenerator; // 0x228(0x08)
	float RoomRadius; // 0x230(0x04)
	enum class ERoomMirroringSupport MirrorSupport; // 0x234(0x01)
	bool ShowRoomCollider; // 0x235(0x01)
	char pad_236[0x2]; // 0x236(0x02)
	struct FGameplayTagContainer RoomTags; // 0x238(0x20)
	int32_t Seed; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct UBiome* Biome; // 0x260(0x08)
	struct UDifficultySetting* Difficulty; // 0x268(0x08)
	int32_t ForcePlayerCount; // 0x270(0x04)
	bool GenerateDebris; // 0x274(0x01)
	bool GenerateItems; // 0x275(0x01)
	bool GenerateResources; // 0x276(0x01)
	bool SpawnEncounters; // 0x277(0x01)
	struct UEnemyDescriptor* TestEnemy; // 0x278(0x08)
	int32_t TestEnemyCount; // 0x280(0x04)
	char pad_284[0x4]; // 0x284(0x04)
	struct UMissionMutator* TestMutator; // 0x288(0x08)
	struct TArray<struct UMissionWarning*> TestWarnings; // 0x290(0x10)
	struct USpecialEvent* TestSpecialEvent; // 0x2a0(0x08)
	struct USpecialEvent* TestTreasure; // 0x2a8(0x08)
	struct UMissionTemplate* MissionTemplate; // 0x2b0(0x08)
	struct UMissionTemplate* CustomMissionTemplate; // 0x2b8(0x08)
	struct ADeepCSGWorld* CSGWorld; // 0x2c0(0x08)
	struct AProceduralSetup* PLSLiveEditor; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct URoomGenerator* LiveEditRoomGenerator; // 0x2d8(0x08)

	void SpawnEncounter(struct AProceduralSetup* setup); // Function FSD.RoomBurner.SpawnEncounter // (Final|Native|Protected) // @ game+0x109fbc0
	struct URoomGenerator* GetRoomGenerator(); // Function FSD.RoomBurner.GetRoomGenerator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109f220
};

// Class FSD.InfluenceTester
// Size: 0x230 (Inherited: 0x220)
struct AInfluenceTester : AActor {
	struct UCaveInfluencer* Influencer; // 0x220(0x08)
	struct USphereComponent* Sphere; // 0x228(0x08)
};

// Class FSD.EnemyPawn
// Size: 0x340 (Inherited: 0x2f0)
struct AEnemyPawn : AFSDPawn {
	char pad_2F0[0x8]; // 0x2f0(0x08)
	struct UEnemyHealthComponent* Health; // 0x2f8(0x08)
	struct UPawnStatsComponent* Stats; // 0x300(0x08)
	struct UEnemyPawnAfflictionComponent* Affliction; // 0x308(0x08)
	struct UEnemyComponent* enemy; // 0x310(0x08)
	struct FName CenterMassSocketName; // 0x318(0x08)
	struct FQueuedMontage QueuedMontage; // 0x320(0x10)
	struct TArray<struct UMaterialInterface*> CachedMaterials; // 0x330(0x10)

	struct UMeshComponent* Receive_GetMeshComponent(); // Function FSD.EnemyPawn.Receive_GetMeshComponent // (Event|Protected|BlueprintEvent|Const) // @ game+0x158ca90
	void OnRep_QueuedMontage(); // Function FSD.EnemyPawn.OnRep_QueuedMontage // (Final|Native|Protected) // @ game+0x10d9270
	struct USkeletalMeshComponent* GetMesh(); // Function FSD.EnemyPawn.GetMesh // (Event|Protected|BlueprintEvent|Const) // @ game+0x158ca90
};

// Class FSD.CaveLeech
// Size: 0x3f8 (Inherited: 0x340)
struct ACaveLeech : AEnemyPawn {
	char pad_340[0x8]; // 0x340(0x08)
	struct USkeletalMeshComponent* SkeletalMesh; // 0x348(0x08)
	struct UGrabberComponent* GrabberComponent; // 0x350(0x08)
	float BiteDamage; // 0x358(0x04)
	float BitesPerSecond; // 0x35c(0x04)
	float MaxDistanceXY; // 0x360(0x04)
	float GrapDistance; // 0x364(0x04)
	float GrapDelay; // 0x368(0x04)
	float TentacleSpeed; // 0x36c(0x04)
	float TentacleRetractSpeed; // 0x370(0x04)
	float RetractDuration; // 0x374(0x04)
	float TentaclePullSpeed; // 0x378(0x04)
	float TentacleDropPlayerSpeed; // 0x37c(0x04)
	float TentacleDropGroundDistance; // 0x380(0x04)
	float MaxDropPlayerDuration; // 0x384(0x04)
	float HeadInterpSpeed; // 0x388(0x04)
	float TentacleAttachOffset; // 0x38c(0x04)
	float BiteDistance; // 0x390(0x04)
	float RevivedGracePeriod; // 0x394(0x04)
	struct UPawnAffliction* CaveLeechSenseAffliction; // 0x398(0x08)
	char pad_3A0[0x8]; // 0x3a0(0x08)
	float StateTime; // 0x3a8(0x04)
	enum class ECaveLeechState State; // 0x3ac(0x01)
	char pad_3AD[0x3]; // 0x3ad(0x03)
	struct FVector_NetQuantize TentacleLocation; // 0x3b0(0x0c)
	struct FVector_NetQuantize TentacleVelocity; // 0x3bc(0x0c)
	struct TWeakObjectPtr<struct AActor> Target; // 0x3c8(0x08)
	struct UHealthComponent* HealthTarget; // 0x3d0(0x08)
	struct USceneComponent* TentacleHead; // 0x3d8(0x08)
	char pad_3E0[0x18]; // 0x3e0(0x18)

	void OnRep_State(); // Function FSD.CaveLeech.OnRep_State // (Final|Native|Protected) // @ game+0x10a3330
	struct FVector GetTentacleTargetLocation(); // Function FSD.CaveLeech.GetTentacleTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a3120
	struct FVector GetMouthLocation(); // Function FSD.CaveLeech.GetMouthLocation // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x10a2e80
	struct AActor* GetCurrentTarget(); // Function FSD.CaveLeech.GetCurrentTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x10a2d70
	void Died(struct UHealthComponentBase* HealthComponent); // Function FSD.CaveLeech.Died // (Final|Native|Protected) // @ game+0x10a28b0
	void Damaged(float Amount); // Function FSD.CaveLeech.Damaged // (Final|Native|Protected) // @ game+0x10a2830
	void BP_OnStateChanged(enum class ECaveLeechState NewState); // Function FSD.CaveLeech.BP_OnStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void BP_OnBite(struct UHealthComponent* TargetHealth); // Function FSD.CaveLeech.BP_OnBite // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.CaveLeechAnimInstance
// Size: 0x2b0 (Inherited: 0x270)
struct UCaveLeechAnimInstance : UAnimInstance {
	float HeadOffset; // 0x268(0x04)
	struct ACaveLeech* CaveLeech; // 0x270(0x08)
	struct USceneComponent* CaveLeechHead; // 0x278(0x08)
	struct FRotator BaseRotation; // 0x280(0x0c)
	struct FVector HeadLocation; // 0x28c(0x0c)
	struct FRotator HeadRotation; // 0x298(0x0c)
	bool bIdle; // 0x2a4(0x01)
	bool bTracking; // 0x2a5(0x01)
	bool bPulling; // 0x2a6(0x01)
	bool bRetracting; // 0x2a7(0x01)
	bool bDying; // 0x2a8(0x01)
	bool bDead; // 0x2a9(0x01)
	bool bFrozen; // 0x2aa(0x01)
	bool bBiting; // 0x2ab(0x01)
};

// Class FSD.CaveObject
// Size: 0x228 (Inherited: 0x220)
struct ACaveObject : AActor {
	bool CanCharacterStandOn; // 0x220(0x01)
	char pad_221[0x7]; // 0x221(0x07)

	void TriggerNetworkUpdate(); // Function FSD.CaveObject.TriggerNetworkUpdate // (Final|Native|Protected|BlueprintCallable) // @ game+0x10a3880
	void ResumeNetworkUpdates(); // Function FSD.CaveObject.ResumeNetworkUpdates // (Final|Native|Protected|BlueprintCallable) // @ game+0x10a3500
	void Recieve_OnGameStarted(); // Function FSD.CaveObject.Recieve_OnGameStarted // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void PauseNetworkUpdates(); // Function FSD.CaveObject.PauseNetworkUpdates // (Final|Native|Protected|BlueprintCallable) // @ game+0x10a3350
};

// Class FSD.CaveScriptComponent
// Size: 0xb0 (Inherited: 0xb0)
struct UCaveScriptComponent : UActorComponent {
};

// Class FSD.CaveVine
// Size: 0x288 (Inherited: 0x220)
struct ACaveVine : AActor {
	enum class ECollisionChannel GroundCollisionChannel; // 0x220(0x01)
	char pad_221[0x3]; // 0x221(0x03)
	float IdleSwingSpeed; // 0x224(0x04)
	float ChaseSpeed; // 0x228(0x04)
	float MaxReach; // 0x22c(0x04)
	float GroundOffset; // 0x230(0x04)
	float NoiseRadius; // 0x234(0x04)
	float NoiseSpeed; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
	struct USplineMeshComponent* SplineMeshComponent; // 0x240(0x08)
	struct USceneComponent* VineHead; // 0x248(0x08)
	struct FVector VineVelocity; // 0x250(0x0c)
	struct FVector VineLocation; // 0x25c(0x0c)
	struct FVector VineStartLocation; // 0x268(0x0c)
	struct TWeakObjectPtr<struct UHealthComponent> Target; // 0x274(0x08)
	char pad_27C[0xc]; // 0x27c(0x0c)

	void BP_OnTargetChanged(struct UHealthComponent* NewTarget); // Function FSD.CaveVine.BP_OnTargetChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void BP_OnInitialized(); // Function FSD.CaveVine.BP_OnInitialized // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.CaveWorm
// Size: 0x3a0 (Inherited: 0x380)
struct ACaveWorm : ADeepPathfinderCharacter {
	char pad_380[0x10]; // 0x380(0x10)
	struct USimpleHealthComponent* Health; // 0x390(0x08)
	float SearchChunksRadius; // 0x398(0x04)
	float SearchChunksInterval; // 0x39c(0x04)

	struct AResourceChunk* SpawnResource(struct UObject* WorldContext, struct UResourceData* Data, float Size, struct FTransform Transform, struct FVector Impulse, struct FVector DropOffset); // Function FSD.CaveWorm.SpawnResource // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x10a3640
	void Search(); // Function FSD.CaveWorm.Search // (Final|Native|Protected) // @ game+0x10a3520
	void IncrementKillCount(struct UHealthComponentBase* HealthComponent); // Function FSD.CaveWorm.IncrementKillCount // (Final|Native|Protected) // @ game+0x10a31c0
	void DropResource(struct UResourceData* Data, float Size, struct FVector Impulse, struct FVector DropOffset); // Function FSD.CaveWorm.DropResource // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10a2930
};

// Class FSD.Maggot
// Size: 0x388 (Inherited: 0x380)
struct AMaggot : ADeepPathfinderCharacter {
	struct USimpleHealthComponent* HealthComponent; // 0x380(0x08)
};

// Class FSD.CellIdFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UCellIdFunctionLibrary : UBlueprintFunctionLibrary {
};

// Class FSD.Test
// Size: 0x270 (Inherited: 0x270)
struct UTest : UAnimInstance {
};

// Class FSD.CharacterCameraController
// Size: 0xd0 (Inherited: 0xb0)
struct UCharacterCameraController : UActorComponent {
	float StartFOV; // 0xb0(0x04)
	float targetFov; // 0xb4(0x04)
	float TargetFOVSpeed; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct APlayerCharacter* Character; // 0xc0(0x08)
	struct UCameraComponent* Camera; // 0xc8(0x08)

	void ResetFOV(float FadeSpeed); // Function FSD.CharacterCameraController.ResetFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x10a3470
	void FOVChanged(float NewFOV); // Function FSD.CharacterCameraController.FOVChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x10a2ab0
	void FadeToFOVRelative(float targetFov, float FadeSpeed); // Function FSD.CharacterCameraController.FadeToFOVRelative // (Final|Native|Public|BlueprintCallable) // @ game+0x10a2bf0
	void FadeToFOV(float targetFov, float FadeSpeed); // Function FSD.CharacterCameraController.FadeToFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x10a2b30
};

// Class FSD.CharacterIntoxicationComponent
// Size: 0x100 (Inherited: 0xb0)
struct UCharacterIntoxicationComponent : UActorComponent {
	struct FMulticastInlineDelegate OnIntoxicationChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnPassOutDrunk; // 0xc0(0x10)
	struct APlayerCharacter* Character; // 0xd0(0x08)
	enum class EIntoxicationState CurrentState; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	struct FLerpingPercent IntoxicationPercent; // 0xdc(0x08)
	float IntoxicationLerpSpeed; // 0xe4(0x04)
	float TimeDrunk; // 0xe8(0x04)
	struct FCountDownFloat SoberingUpCoolDown; // 0xec(0x0c)
	char SoberingPercent; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	void ReceiveStateChange(enum class EIntoxicationState NewState); // Function FSD.CharacterIntoxicationComponent.ReceiveStateChange // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceivePassOutDrunk(); // Function FSD.CharacterIntoxicationComponent.ReceivePassOutDrunk // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveDrunkTick(float DeltaTime, float DrunkTime); // Function FSD.CharacterIntoxicationComponent.ReceiveDrunkTick // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveDrunkEnd(); // Function FSD.CharacterIntoxicationComponent.ReceiveDrunkEnd // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveDrunkBegin(); // Function FSD.CharacterIntoxicationComponent.ReceiveDrunkBegin // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void PassOutDrunkSignature__DelegateSignature(struct APlayerCharacter* Player); // DelegateFunction FSD.CharacterIntoxicationComponent.PassOutDrunkSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool IsPassOutDrunk(); // Function FSD.CharacterIntoxicationComponent.IsPassOutDrunk // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a3300
	bool IsOnSpaceRig(); // Function FSD.CharacterIntoxicationComponent.IsOnSpaceRig // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a32d0
	bool IsLocallyControlled(); // Function FSD.CharacterIntoxicationComponent.IsLocallyControlled // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a3270
	bool IsDrunk(); // Function FSD.CharacterIntoxicationComponent.IsDrunk // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a3240
	void IntoxicationProgressSignature__DelegateSignature(struct APlayerCharacter* Player, float Progress); // DelegateFunction FSD.CharacterIntoxicationComponent.IntoxicationProgressSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool HasAuthority(); // Function FSD.CharacterIntoxicationComponent.HasAuthority // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a3160
	float GetSoberingUpCoolDown(); // Function FSD.CharacterIntoxicationComponent.GetSoberingUpCoolDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a30a0
	float GetIntoxicationProgressMapped(struct UCurveFloat* Curve); // Function FSD.CharacterIntoxicationComponent.GetIntoxicationProgressMapped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a2de0
	float GetIntoxicationProgress(); // Function FSD.CharacterIntoxicationComponent.GetIntoxicationProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a2db0
	int32_t GetAlcoholPct(enum class EDrinkableAlcoholStrength Strength); // Function FSD.CharacterIntoxicationComponent.GetAlcoholPct // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x10a2cc0
	void Consume(struct UDrinkableDataAsset* Drinkable); // Function FSD.CharacterIntoxicationComponent.Consume // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10a27b0
	void ClearIntoxication(); // Function FSD.CharacterIntoxicationComponent.ClearIntoxication // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10a2790
};

// Class FSD.CharacterRecoilComponent
// Size: 0xe0 (Inherited: 0xb0)
struct UCharacterRecoilComponent : UActorComponent {
	struct FVector Recoil; // 0xb0(0x0c)
	struct FVector RecoilVelocity; // 0xbc(0x0c)
	struct FVector PrevError; // 0xc8(0x0c)
	char pad_D4[0xc]; // 0xd4(0x0c)
};

// Class FSD.CharacterSettings
// Size: 0x190 (Inherited: 0x30)
struct UCharacterSettings : UDataAsset {
	struct TArray<SoftClassProperty> RankedHeroClasses; // 0x30(0x10)
	struct TArray<struct APlayerCharacter*> LoadedClasses; // 0x40(0x10)
	struct TArray<struct FText> PlayerRankNames; // 0x50(0x10)
	struct TArray<int32_t> CharacterXPLevels; // 0x60(0x10)
	struct TMap<struct FGuid, struct UPlayerCharacterID*> PlayerCharacterIDMap; // 0x70(0x50)
	struct TArray<struct UPlayerCharacterID*> PlayerCharacterIDs; // 0xc0(0x10)
	struct UPlayerCharacterID* BoscoID; // 0xd0(0x08)
	struct USkeletalMesh* NoHead; // 0xd8(0x08)
	struct USkeletalMesh* DefaultHead; // 0xe0(0x08)
	struct USkeletalMesh* ThickNeck; // 0xe8(0x08)
	struct USkeletalMesh* ThinNeck; // 0xf0(0x08)
	SoftClassProperty CarriableBagClass; // 0xf8(0x28)
	struct UUseAnimationSetting* ThrowItemAnimSettings; // 0x120(0x08)
	struct TMap<struct UPlayerCharacterID*, struct UCharacterVanityItems*> CharacterVanityItems; // 0x128(0x50)
	struct UDialogDataAsset* AutoReloadShout; // 0x178(0x08)
	struct UDebrisPositioning* TeleportPositioning; // 0x180(0x08)
	struct UTerrainPlacementComponent* TeleportPlacement; // 0x188(0x08)

	void PreloadAllInventories(struct UAsyncManager* AsyncManager); // Function FSD.CharacterSettings.PreloadAllInventories // (Final|Native|Public|BlueprintCallable) // @ game+0x10a3370
	struct UPlayerCharacterID* GetPlayerCharacterID(struct FGuid ID); // Function FSD.CharacterSettings.GetPlayerCharacterID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a2ec0
};

// Class FSD.CharacterSightComponent
// Size: 0x158 (Inherited: 0xb0)
struct UCharacterSightComponent : UActorComponent {
	struct FMulticastInlineDelegate OnTargetChanged; // 0xb0(0x10)
	float TargetMaxDistance; // 0xc0(0x04)
	enum class ECollisionChannel TraceChannel; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	struct TArray<struct TWeakObjectPtr<struct AActor>> IgnoredActors; // 0xc8(0x10)
	struct APlayerCharacter* Character; // 0xd8(0x08)
	struct TWeakObjectPtr<struct AActor> TargetActor; // 0xe0(0x08)
	struct TWeakObjectPtr<struct UPrimitiveComponent> TargetPrimitive; // 0xe8(0x08)
	struct TWeakObjectPtr<struct USimpleObjectInfoComponent> TargetInfo; // 0xf0(0x08)
	struct TWeakObjectPtr<struct UTemperatureComponent> TargetTemperature; // 0xf8(0x08)
	struct TWeakObjectPtr<struct UPawnAfflictionComponent> TargetAfflictions; // 0x100(0x08)
	struct TScriptInterface<None> TargetHealth; // 0x108(0x10)
	struct TScriptInterface<None> TargetTargetable; // 0x118(0x10)
	float TargetTime; // 0x128(0x04)
	struct FReplicatedCharacterData ReplicatedData; // 0x12c(0x18)
	char pad_144[0x14]; // 0x144(0x14)

	void TargetChangedSignature__DelegateSignature(struct AActor* NewTarget, struct UPrimitiveComponent* NewPrimitive); // DelegateFunction FSD.CharacterSightComponent.TargetChangedSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void Server_UpdateTarget(struct AActor* NewActor, struct UPrimitiveComponent* NewPrimitive); // Function FSD.CharacterSightComponent.Server_UpdateTarget // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10a3540
	void RemoveIgnoreActor(struct AActor* InActor); // Function FSD.CharacterSightComponent.RemoveIgnoreActor // (Final|Native|Public|BlueprintCallable) // @ game+0x10a33f0
	void ReceiveTargetInSightTick(float DeltaTime); // Function FSD.CharacterSightComponent.ReceiveTargetInSightTick // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveTargetChanged(); // Function FSD.CharacterSightComponent.ReceiveTargetChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void GetSightStartAndEnd(float InMaxDistance, struct FVector OutStartLocation, struct FVector OutEndLocation); // Function FSD.CharacterSightComponent.GetSightStartAndEnd // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x10a2f70
	void AddIgnoreActor(struct AActor* InActor); // Function FSD.CharacterSightComponent.AddIgnoreActor // (Final|Native|Public|BlueprintCallable) // @ game+0x10a2710
};

// Class FSD.CharacterStateComponent
// Size: 0x100 (Inherited: 0xb0)
struct UCharacterStateComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	char StateId; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct APlayerCharacter* Character; // 0xc0(0x08)
	struct UDialogDataAsset* EnterStateShout; // 0xc8(0x08)
	struct UDialogDataAsset* ExitStateShout; // 0xd0(0x08)
	struct UDialogDataAsset* AttentionShout; // 0xd8(0x08)
	struct UPlayerMovementComponent* PlayerMovement; // 0xe0(0x08)
	char pad_E8[0x18]; // 0xe8(0x18)

	void ReceiveStateTick(float DeltaTime); // Function FSD.CharacterStateComponent.ReceiveStateTick // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveStateExit(); // Function FSD.CharacterStateComponent.ReceiveStateExit // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveStateEnter(); // Function FSD.CharacterStateComponent.ReceiveStateEnter // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	bool IsLocallyControlled(); // Function FSD.CharacterStateComponent.IsLocallyControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a32a0
	bool HasAuthority(); // Function FSD.CharacterStateComponent.HasAuthority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a3190
	float GetStateTime(); // Function FSD.CharacterStateComponent.GetStateTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a3100
	char GetStateID(); // Function FSD.CharacterStateComponent.GetStateID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a30e0
	bool GetStateActive(); // Function FSD.CharacterStateComponent.GetStateActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a30c0
	struct UPlayerMovementComponent* GetCharacterMovement(); // Function FSD.CharacterStateComponent.GetCharacterMovement // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a2d50
};

// Class FSD.CharacterUseComponent
// Size: 0x200 (Inherited: 0xb0)
struct UCharacterUseComponent : UActorComponent {
	struct FMulticastInlineDelegate OnDepositingBegin; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnDepositingEnd; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnBeginHoveringEvent; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnEndHoveringEvent; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnBeginUsingEvent; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnEndUsingEvent; // 0x100(0x10)
	struct FMulticastInlineDelegate OnBeginUseNoUsable; // 0x110(0x10)
	struct FMulticastInlineDelegate OnEndUseNoUsable; // 0x120(0x10)
	struct FUsableRepliactional ActiveUsablee; // 0x130(0x10)
	struct UUsableComponentBase* HoveringUsable; // 0x140(0x08)
	struct USceneComponent* HoveringUsableCollider; // 0x148(0x08)
	struct USceneComponent* ActiveUsableCollider; // 0x150(0x08)
	struct USphereComponent* UseCollider; // 0x158(0x08)
	struct USoundBase* AudioBeginDepositing; // 0x160(0x08)
	struct USoundBase* AudioEndDepositing; // 0x168(0x08)
	float UseDistance; // 0x170(0x04)
	char pad_174[0x1]; // 0x174(0x01)
	enum class EUseRestriction UseRestriction; // 0x175(0x01)
	char pad_176[0x2]; // 0x176(0x02)
	struct APlayerCharacter* Character; // 0x178(0x08)
	char pad_180[0x30]; // 0x180(0x30)
	struct TMap<struct UUsableComponentBase*, float> UseCooldownTracker; // 0x1b0(0x50)

	void Server_SetCanUse(enum class EUseRestriction UseRestriction); // Function FSD.CharacterUseComponent.Server_SetCanUse // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x10a7910
	void Server_EndUse(); // Function FSD.CharacterUseComponent.Server_EndUse // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x10a78c0
	void Server_BeginUse(char Key, struct UUsableComponentBase* Usable, struct USceneComponent* UsableCollider); // Function FSD.CharacterUseComponent.Server_BeginUse // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x10a77b0
	void OnRep_ActiveUsablee(struct FUsableRepliactional lastUsable); // Function FSD.CharacterUseComponent.OnRep_ActiveUsablee // (Final|Native|Protected) // @ game+0x10a7610
	void OnCharacterStateChanged(enum class ECharacterState NewState); // Function FSD.CharacterUseComponent.OnCharacterStateChanged // (Final|Native|Protected) // @ game+0x10a7590
	bool IsLookingAtUsable(); // Function FSD.CharacterUseComponent.IsLookingAtUsable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a7560
	bool IsLookingAtDepositable(); // Function FSD.CharacterUseComponent.IsLookingAtDepositable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a7530
	float GetUseProgress(); // Function FSD.CharacterUseComponent.GetUseProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a72b0
	struct AActor* GetLookingAtActor(); // Function FSD.CharacterUseComponent.GetLookingAtActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a70e0
	bool GetIsUsing(); // Function FSD.CharacterUseComponent.GetIsUsing // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a6ea0
	bool GetIsDepositing(); // Function FSD.CharacterUseComponent.GetIsDepositing // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a6e70
	void All_PlaySingleUse(char Key, struct UUsableComponentBase* Usable); // Function FSD.CharacterUseComponent.All_PlaySingleUse // (Net|Native|Event|NetMulticast|Public) // @ game+0x10a6960
	void AddCustomUsableComponent(struct UUsableComponentBase* Usable, enum class ECustomUsableType eType); // Function FSD.CharacterUseComponent.AddCustomUsableComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x10a68a0
};

// Class FSD.CharacterVanityComponent
// Size: 0x1d8 (Inherited: 0xb0)
struct UCharacterVanityComponent : UActorComponent {
	char pad_B0[0x10]; // 0xb0(0x10)
	struct UCharacterVanityItems* AvailableVanityItems; // 0xc0(0x08)
	struct UBeardColorVanityItem* ShownBeardColor; // 0xc8(0x08)
	struct UMaterialInterface* ArmorMaterial; // 0xd0(0x08)
	struct UMaterialInstanceDynamic* DynamicSkinMaterial; // 0xd8(0x08)
	enum class EHeadVanityType HeadVanityType; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
	struct TArray<struct UVanityItem*> EquippedVanity; // 0xe8(0x10)
	struct UMaterialInterface* SkinMaterial; // 0xf8(0x08)
	struct TArray<struct FTattooArmorItem> Tattoos; // 0x100(0x10)
	struct TArray<struct UMaterialInterface*> CachedMaterials; // 0x110(0x10)
	char pad_120[0x58]; // 0x120(0x58)
	struct TMap<enum class EVanitySlot, struct USkeletalMeshComponent*> VanityMeshes; // 0x178(0x50)
	char pad_1C8[0x10]; // 0x1c8(0x10)

	void UpdateMeshes(); // Function FSD.CharacterVanityComponent.UpdateMeshes // (Final|Native|Protected) // @ game+0x10a8060
	void UpdateEquippedVanity(bool applyItems); // Function FSD.CharacterVanityComponent.UpdateEquippedVanity // (Final|Native|Public|BlueprintCallable) // @ game+0x10a7fd0
	void SetEquippedVanityInViewer(struct TArray<struct UVanityItem*> Vanity); // Function FSD.CharacterVanityComponent.SetEquippedVanityInViewer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x10a7d30
	void Server_SetEquippedVanity(struct TArray<struct UVanityItem*> equippedItems); // Function FSD.CharacterVanityComponent.Server_SetEquippedVanity // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10a79c0
	struct UVanityItem* Receive_GetEquippedVanityItem(struct UObject* WorldContextObject, struct UPlayerCharacterID* Character, enum class EVanitySlot Slot); // Function FSD.CharacterVanityComponent.Receive_GetEquippedVanityItem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a76c0
	void OnRep_EquippedVanity(); // Function FSD.CharacterVanityComponent.OnRep_EquippedVanity // (Final|Native|Protected) // @ game+0x10a76a0
	struct UVanityItem* GetEquippedVanityItem(enum class EVanitySlot Slot); // Function FSD.CharacterVanityComponent.GetEquippedVanityItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a6db0
	struct UCharacterVanityItems* GetAvailableVanityItems(); // Function FSD.CharacterVanityComponent.GetAvailableVanityItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a6ca0
	void EnforceValidPaintjob(); // Function FSD.CharacterVanityComponent.EnforceValidPaintjob // (Final|Native|Public|BlueprintCallable) // @ game+0x10a6c80
	void CreateEquippedGear(); // Function FSD.CharacterVanityComponent.CreateEquippedGear // (Final|Native|Public|BlueprintCallable) // @ game+0x10a6c10
};

// Class FSD.CharacterVanityItems
// Size: 0x1a8 (Inherited: 0x30)
struct UCharacterVanityItems : UDataAsset {
	struct TArray<struct UHeadVanityItem*> HeadItems; // 0x30(0x10)
	struct UVanitySchematicBank* HeadSchematicBank; // 0x40(0x08)
	struct TArray<struct UBeardVanityItem*> BeardItems; // 0x48(0x10)
	struct UVanitySchematicBank* BeardSchematicBank; // 0x58(0x08)
	struct TArray<struct UArmorVanityItem*> ArmorItems; // 0x60(0x10)
	struct TArray<struct UArmorMaterialVanityItem*> ArmorMaterialItems; // 0x70(0x10)
	struct TArray<struct UArmorMaterialVanityItem*> ArmorMaterialItemsInTreassures; // 0x80(0x10)
	struct TArray<struct UEyeBrowsVanityItem*> EyebrowsItems; // 0x90(0x10)
	struct UVanitySchematicBank* EyebrowSchematicBank; // 0xa0(0x08)
	struct TArray<struct UMoustacheVanityItem*> MoustacheItems; // 0xa8(0x10)
	struct UVanitySchematicBank* MoustacheSchematicBank; // 0xb8(0x08)
	struct TArray<struct USideburnsVanityItem*> SideburnItems; // 0xc0(0x10)
	struct UVanitySchematicBank* SideburnSchematicBank; // 0xd0(0x08)
	struct TArray<struct UBeardColorVanityItem*> BeardMaterialItems; // 0xd8(0x10)
	struct UVanitySchematicBank* BeardMaterialSchematicBank; // 0xe8(0x08)
	struct TArray<struct USkinColorVanityItem*> SkinMaterialItems; // 0xf0(0x10)
	struct UVanitySchematicBank* SkinMaterialSchematicBank; // 0x100(0x08)
	struct TMap<struct FGuid, struct UVanityItem*> VanityMap; // 0x108(0x50)
	struct TMap<enum class EVanitySlot, struct UVanityItem*> DefaultItems; // 0x158(0x50)

	void SortVanityItems(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, struct TArray<struct UVanityItem*> vanityItems); // Function FSD.CharacterVanityItems.SortVanityItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a7eb0
	struct TArray<struct UVanityItem*> GetVanityItems(struct UObject* WorldContextObject, enum class EVanitySlot Slot, bool onlyStoreItems, struct UPlayerCharacterID* characterID); // Function FSD.CharacterVanityItems.GetVanityItems // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a7390
	struct UVanityItem* GetVanityItem(struct FGuid VanityID); // Function FSD.CharacterVanityItems.GetVanityItem // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a72e0
	struct TArray<struct UVanityItem*> GetUnLockedVanityItems(struct UObject* WorldContextObject, enum class EVanitySlot Slot, bool onlyStoreItems, struct UPlayerCharacterID* characterID); // Function FSD.CharacterVanityItems.GetUnLockedVanityItems // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a7110
	struct TArray<struct UVanityItem*> GetLockedVanityItems(struct UObject* WorldContextObject, enum class EVanitySlot Slot, struct UPlayerCharacterID* characterID); // Function FSD.CharacterVanityItems.GetLockedVanityItems // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a6fa0
	struct TArray<struct UVanityItem*> GetItems(enum class EVanitySlot Slot, bool onlyStoreItems); // Function FSD.CharacterVanityItems.GetItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a6ed0
	struct UVanityItem* GetDefaultVanityItem(struct UObject* WorldContext, enum class EVanitySlot Slot, struct UPlayerCharacterID* characterID); // Function FSD.CharacterVanityItems.GetDefaultVanityItem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a6cc0
	void Clean(); // Function FSD.CharacterVanityItems.Clean // (Final|Native|Public|BlueprintCallable) // @ game+0x10a6bf0
};

// Class FSD.CharacterSelectionSwitcher
// Size: 0x220 (Inherited: 0x220)
struct ACharacterSelectionSwitcher : AActor {

	void OnVictoryPoseChanged(struct UVictoryPose* VictoryPose); // Function FSD.CharacterSelectionSwitcher.OnVictoryPoseChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void OnVanityItemEquipped(enum class EVanitySlot Slot); // Function FSD.CharacterSelectionSwitcher.OnVanityItemEquipped // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void Hide(); // Function FSD.CharacterSelectionSwitcher.Hide // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	struct AActor* GetViewerActor(); // Function FSD.CharacterSelectionSwitcher.GetViewerActor // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x158ca90
	struct APlayerCharacter* GetActiveCharacter(); // Function FSD.CharacterSelectionSwitcher.GetActiveCharacter // (Event|Public|BlueprintEvent|Const) // @ game+0x158ca90
};

// Class FSD.ChargedWeapon
// Size: 0x778 (Inherited: 0x6e0)
struct AChargedWeapon : AAmmoDrivenWeapon {
	struct FMulticastInlineDelegate OnChargeChanged; // 0x6e0(0x10)
	struct FMulticastInlineDelegate OnHeatChanged; // 0x6f0(0x10)
	char pad_700[0x8]; // 0x700(0x08)
	struct UAnimMontage* FP_OverheatAnim; // 0x708(0x08)
	struct UAnimMontage* FP_ChargeupMontage; // 0x710(0x08)
	struct UFXSystemAsset* ChargeupParticles; // 0x718(0x08)
	struct UFXSystemComponent* ChargeupParticleInstance; // 0x720(0x08)
	struct UFXSystemAsset* ChargeupFireMuzzleFlash; // 0x728(0x08)
	struct USoundCue* NormalFiresound; // 0x730(0x08)
	struct USoundCue* FullyChargedFireSound; // 0x738(0x08)
	float ChargeSpeed; // 0x740(0x04)
	bool Charging; // 0x744(0x01)
	char pad_745[0x3]; // 0x745(0x03)
	float ChargeProgress; // 0x748(0x04)
	int32_t ShotCostAtBelowFullCharge; // 0x74c(0x04)
	int32_t ShotCostAtFullCharge; // 0x750(0x04)
	bool ChargedShotsOnly; // 0x754(0x01)
	bool AutoFireWhenOverheated; // 0x755(0x01)
	char pad_756[0x2]; // 0x756(0x02)
	float TotalHeat; // 0x758(0x04)
	char pad_75C[0x4]; // 0x75c(0x04)
	float CoolingRate; // 0x760(0x04)
	float HeatPerSecondWhileCharging; // 0x764(0x04)
	float HeatPerSecondWhenCharged; // 0x768(0x04)
	float HeatPerNormalShot; // 0x76c(0x04)
	float HeatPerChargedShot; // 0x770(0x04)
	char pad_774[0x4]; // 0x774(0x04)

	void SetOverheated(bool isOverheated); // Function FSD.ChargedWeapon.SetOverheated // (Final|Native|Protected|BlueprintCallable) // @ game+0x10a7de0
	void Server_SetIsCharging(bool isChargingValue); // Function FSD.ChargedWeapon.Server_SetIsCharging // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10a7a80
	void RecieveChargeProgressChanged(float NewChargeProgress); // Function FSD.ChargedWeapon.RecieveChargeProgressChanged // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void ReceiveOverheatedChanged(bool isOverheated); // Function FSD.ChargedWeapon.ReceiveOverheatedChanged // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	bool GetIsCharging(); // Function FSD.ChargedWeapon.GetIsCharging // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a6e40
};

// Class FSD.ChargedWeaponAnimInstance
// Size: 0x290 (Inherited: 0x270)
struct UChargedWeaponAnimInstance : UAnimInstance {
	bool isCharging; // 0x268(0x01)
	float ChargeupPlayRate; // 0x26c(0x04)
	float ChargeupPlayRateSpeedChange; // 0x270(0x04)
	float ChargedownPlayRateSpeedChange; // 0x274(0x04)
	float MaxChargeupPlayRate; // 0x278(0x04)
	struct AChargedWeapon* Weapon; // 0x280(0x08)
	char pad_289[0x7]; // 0x289(0x07)
};

// Class FSD.ProjectileBase
// Size: 0x2f0 (Inherited: 0x220)
struct AProjectileBase : AActor {
	struct FProjectileImpact ProjectileImpact; // 0x220(0x38)
	bool IsSpawnedFromWeapon; // 0x258(0x01)
	bool Exploded; // 0x259(0x01)
	bool DoOnImpact; // 0x25a(0x01)
	bool DoOnImpact2; // 0x25b(0x01)
	bool DoOnImpact3; // 0x25c(0x01)
	bool DoOnSpawnVar; // 0x25d(0x01)
	char pad_25E[0x12]; // 0x25e(0x12)
	bool IsDorment; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)
	struct USphereComponent* CollisionComponent; // 0x278(0x08)
	char pad_280[0x4]; // 0x280(0x04)
	float LifeSpan; // 0x284(0x04)
	float VelocityMultiplier; // 0x288(0x04)
	float GravityMultiplier; // 0x28c(0x04)
	bool AffectedByDifficultySpeedModifier; // 0x290(0x01)
	bool SetInitialSpeedToMaxSpeed; // 0x291(0x01)
	bool AutoDisableCollisionOnImpact; // 0x292(0x01)
	char pad_293[0x5]; // 0x293(0x05)
	struct USoundCue* WhizbySound; // 0x298(0x08)
	float WhizByCooldown; // 0x2a0(0x04)
	float WhizByStartDistance; // 0x2a4(0x04)
	char pad_2A8[0x8]; // 0x2a8(0x08)
	enum class EOnProjectileImpactBehaviourEnum EOnImpactBehaviour; // 0x2b0(0x04)
	char pad_2B4[0x3c]; // 0x2b4(0x3c)

	struct UTerrainMaterial* TryGetTerrainMaterial(); // Function FSD.ProjectileBase.TryGetTerrainMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11d5480
	void StopMovement(); // Function FSD.ProjectileBase.StopMovement // (Final|Native|Public|BlueprintCallable) // @ game+0x11d5460
	void Server_SetState(struct FVector_NetQuantize Position, struct FVector_NetQuantize Velocity); // Function FSD.ProjectileBase.Server_SetState // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11d4bb0
	void Server_Penetrated(struct FProjectileImpact Impact); // Function FSD.ProjectileBase.Server_Penetrated // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11d4ae0
	void Server_Impacted(struct FProjectileImpact Impact); // Function FSD.ProjectileBase.Server_Impacted // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11d4a10
	void OnUpgradeElementAdded(struct UProjectileUpgradeElement* element); // Function FSD.ProjectileBase.OnUpgradeElementAdded // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRep_ProjectileImpact(); // Function FSD.ProjectileBase.OnRep_ProjectileImpact // (Native|Public) // @ game+0x6cb4d0
	void OnRep_IsDorment(bool wasDorment); // Function FSD.ProjectileBase.OnRep_IsDorment // (Native|Public) // @ game+0x11d47d0
	void OnPenetrated(bool PredictedPenetration, struct FHitResult HitResult); // Function FSD.ProjectileBase.OnPenetrated // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	void OnInitialized(); // Function FSD.ProjectileBase.OnInitialized // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnImpacted(bool PredictedImpact, struct FHitResult HitResult); // Function FSD.ProjectileBase.OnImpacted // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	void MakeBouncy(); // Function FSD.ProjectileBase.MakeBouncy // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void InitState(struct FVector ShootDirection, struct FVector initialBonusVelocity); // Function FSD.ProjectileBase.InitState // (Native|Public|HasOutParms|HasDefaults) // @ game+0x11d43f0
	void InitComponents(); // Function FSD.ProjectileBase.InitComponents // (Native|Public) // @ game+0x11d43d0
	void IgnoreCollision(struct UPrimitiveComponent* otherCollider); // Function FSD.ProjectileBase.IgnoreCollision // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11d4350
	bool HasImpactAuthority(); // Function FSD.ProjectileBase.HasImpactAuthority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11d4320
	float GetGameTimeSinceActivation(); // Function FSD.ProjectileBase.GetGameTimeSinceActivation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11d42c0
	int32_t GetBoneIndex(); // Function FSD.ProjectileBase.GetBoneIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11d40d0
	void DoOnSpawn(); // Function FSD.ProjectileBase.DoOnSpawn // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void DisableProjectileCollision(struct AProjectileBase* projectileA, struct AProjectileBase* projectileB); // Function FSD.ProjectileBase.DisableProjectileCollision // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11d3ee0
	void DisableAndDestroy(); // Function FSD.ProjectileBase.DisableAndDestroy // (Native|Public|BlueprintCallable) // @ game+0x11d3ec0
	void DamageArmor(struct UDamageComponent* DamageComponent, struct FHitResult HitResult); // Function FSD.ProjectileBase.DamageArmor // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x11d3da0
	void CustomEvent(struct UItemUpgrade* Event); // Function FSD.ProjectileBase.CustomEvent // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Client_DrawServersDebugPath(struct FVector Location); // Function FSD.ProjectileBase.Client_DrawServersDebugPath // (Net|NetReliableNative|Event|Protected|HasDefaults|NetClient) // @ game+0x11d3d10
	void Activate(struct AActor* owningActor, struct FVector Origin, struct FVector_NetQuantizeNormal Direction, struct FVector_NetQuantizeNormal initialBonusVelocity); // Function FSD.ProjectileBase.Activate // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11d3ba0
};

// Class FSD.Projectile
// Size: 0x340 (Inherited: 0x2f0)
struct AProjectile : AProjectileBase {
	struct FProjectileState State; // 0x2f0(0x28)
	char pad_318[0x8]; // 0x318(0x08)
	bool UseArmorDamageBoneCheck; // 0x320(0x01)
	char pad_321[0x7]; // 0x321(0x07)
	struct TArray<struct AActor*> IgnoreActorClasses; // 0x328(0x10)
	struct UFSDProjectileMovementComponent* MovementComponent; // 0x338(0x08)

	struct AProjectileBase* SpawnProjectileFromSelf(struct UObject* WorldContextObject, struct AProjectileBase* projectileClass, struct FVector Origin, struct FRotator velocityDirection); // Function FSD.Projectile.SpawnProjectileFromSelf // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11d50d0
	struct AProjectileBase* SpawnProjectile(struct UObject* WorldContextObject, struct AProjectileBase* projectileClass, struct APawn* projectileOwner, struct FVector Origin, struct FRotator velocityDirection); // Function FSD.Projectile.SpawnProjectile // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x11d4f40
	struct AProjectileBase* SpawnBallisticProjectile(struct UObject* WorldContextObject, struct AProjectile* projectileClass, struct APawn* projectileOwner, struct FVector Origin, struct FVector Velocity); // Function FSD.Projectile.SpawnBallisticProjectile // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x11d4db0
	void SetHomingTargetComponent(struct USceneComponent* HomingTargetComponent, float Delay); // Function FSD.Projectile.SetHomingTargetComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x11d4ce0
	void Server_DisableHoming(); // Function FSD.Projectile.Server_DisableHoming // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11d49f0
	void OnRep_State(struct FProjectileState oldState); // Function FSD.Projectile.OnRep_State // (Native|Protected|HasOutParms) // @ game+0x11d4920
	void OnPenetration(struct FHitResult HitResult); // Function FSD.Projectile.OnPenetration // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11d46f0
	void OnImpact(struct FHitResult HitResult); // Function FSD.Projectile.OnImpact // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11d4610
	void OnBounce(struct FHitResult ImpactResult, struct FVector ImpactVelocity); // Function FSD.Projectile.OnBounce // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11d44e0
	struct UFSDPhysicalMaterial* FindBoneIndexFromArmor(struct FHitResult HitResult, int32_t outBoneIndex); // Function FSD.Projectile.FindBoneIndexFromArmor // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x11d3f90
};

// Class FSD.ChargedProjectile
// Size: 0x348 (Inherited: 0x340)
struct AChargedProjectile : AProjectile {
	bool ExplodesWhenDead; // 0x340(0x01)
	bool PersistentExplosion; // 0x341(0x01)
	bool AoEDamageInFlight; // 0x342(0x01)
	char pad_343[0x1]; // 0x343(0x01)
	float DirectDamageReduction; // 0x344(0x04)

	void OnAoEDamageEnabled(); // Function FSD.ChargedProjectile.OnAoEDamageEnabled // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ClaimableRewardEntryWidget
// Size: 0x298 (Inherited: 0x230)
struct UClaimableRewardEntryWidget : UUserWidget {
	struct FMulticastInlineDelegate OnRewardClaimed; // 0x230(0x10)
	struct FClaimableRewardEntry Data; // 0x240(0x58)

	void WidgetDelegate__DelegateSignature(struct UClaimableRewardEntryWidget* EntryWidget); // DelegateFunction FSD.ClaimableRewardEntryWidget.WidgetDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void SignalRewardClaimed(); // Function FSD.ClaimableRewardEntryWidget.SignalRewardClaimed // (Final|Native|Protected|BlueprintCallable) // @ game+0x10a7e70
	void SetData(struct FClaimableRewardEntry InData); // Function FSD.ClaimableRewardEntryWidget.SetData // (Final|Native|Public|BlueprintCallable) // @ game+0x10a7b40
	void ReceiveDataChanged(); // Function FSD.ClaimableRewardEntryWidget.ReceiveDataChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ClaimableRewardViewWidget
// Size: 0x2a0 (Inherited: 0x230)
struct UClaimableRewardViewWidget : UUserWidget {
	struct FClaimableRewardView Data; // 0x230(0x70)

	void ReceiveEndFlow(); // Function FSD.ClaimableRewardViewWidget.ReceiveEndFlow // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveDataChanged(); // Function FSD.ClaimableRewardViewWidget.ReceiveDataChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveBeginFlow(); // Function FSD.ClaimableRewardViewWidget.ReceiveBeginFlow // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void EndRewardFlow(); // Function FSD.ClaimableRewardViewWidget.EndRewardFlow // (Final|Native|Public|BlueprintCallable) // @ game+0x10a6c30
	void BeginRewardFlow(struct FClaimableRewardView InViewData); // Function FSD.ClaimableRewardViewWidget.BeginRewardFlow // (Final|Native|Public|BlueprintCallable) // @ game+0x10a6a30
};

// Class FSD.ExampleActor
// Size: 0x240 (Inherited: 0x220)
struct AExampleActor : AActor {
	struct FMulticastInlineDelegate OnExampleUpdatedEvent; // 0x220(0x10)
	float Field; // 0x230(0x04)
	char pad_234[0xc]; // 0x234(0x0c)

	void Server_ExampleFunction(); // Function FSD.ExampleActor.Server_ExampleFunction // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x10ac7a0
	void Client_ExampleFunction(); // Function FSD.ExampleActor.Client_ExampleFunction // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x10ab220
	void All_ExampleFunction(); // Function FSD.ExampleActor.All_ExampleFunction // (Net|Native|Event|NetMulticast|Public) // @ game+0x10aad30
};

// Class FSD.CollectableResourceData
// Size: 0x138 (Inherited: 0xf0)
struct UCollectableResourceData : UResourceData {
	struct UDebrisPositioning* Positioning; // 0xf0(0x08)
	float Rarity; // 0xf8(0x04)
	float InfluenceRadius; // 0xfc(0x04)
	struct TArray<struct TSoftObjectPtr<struct UDebrisBase>> Debris; // 0x100(0x10)
	bool UseTerrainPlacement; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)
	struct TArray<SoftClassProperty> CollectableClasses; // 0x118(0x10)
	struct TArray<struct AActor*> CollectableClassesLoaded; // 0x128(0x10)
};

// Class FSD.CharacterShoutsData
// Size: 0xe8 (Inherited: 0x30)
struct UCharacterShoutsData : UDataAsset {
	struct FCharacterShouts Shouts; // 0x30(0xb8)
};

// Class FSD.ShoutWidget
// Size: 0x258 (Inherited: 0x230)
struct UShoutWidget : UUserWidget {
	struct TWeakObjectPtr<struct APlayerCharacter> Sender; // 0x230(0x08)
	struct FText Text; // 0x238(0x18)
	float Duration; // 0x250(0x04)
	bool IsSubtitle; // 0x254(0x01)
	char pad_255[0x3]; // 0x255(0x03)

	void OnShout(); // Function FSD.ShoutWidget.OnShout // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct FString GetTimeString(int32_t Seconds); // Function FSD.ShoutWidget.GetTimeString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10ab7a0
	void GetSplitTimeString(int32_t Seconds, struct FString MinutesString, struct FString SecondsString); // Function FSD.ShoutWidget.GetSplitTimeString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x10ab660
	struct FString GetCountDownString(int32_t Seconds); // Function FSD.ShoutWidget.GetCountDownString // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ab2f0
};

// Class FSD.CommunicationComponent
// Size: 0x278 (Inherited: 0xb0)
struct UCommunicationComponent : UActorComponent {
	struct FMulticastInlineDelegate OnMissionShout; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnMissionShoutEnd; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnMixerAnnouncement; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnMissionControlFinished; // 0xe0(0x10)
	bool ShoutingEnabled; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct UShoutWidget* ShoutWidgetType; // 0xf8(0x08)
	struct UCharacterShoutsData* CharacterShouts; // 0x100(0x08)
	float PitchMultiplier; // 0x108(0x04)
	float MinShoutDelay; // 0x10c(0x04)
	float CloseRangeShoutDistance; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct TMap<struct UDialogDataAsset*, float> DelayedShouts; // 0x118(0x50)
	struct FGameplayTagContainer KillShoutAllowedTags; // 0x168(0x20)
	bool bMissionControlPaused; // 0x188(0x01)
	char pad_189[0x7]; // 0x189(0x07)
	struct UAudioComponent* MissionControlAudioComponent; // 0x190(0x08)
	struct TMap<struct APlayerCharacter*, struct UShoutWidget*> ActiveShouts; // 0x198(0x50)
	struct TArray<struct FActiveOutline> ActiveOutlines; // 0x1e8(0x10)
	struct APlayerCharacter* Character; // 0x1f8(0x08)
	struct UDialogDataAsset* LastShout; // 0x200(0x08)
	struct UAudioComponent* ShoutAudioComponent; // 0x208(0x08)
	struct TMap<struct UDialogDataAsset*, float> ShoutHistory; // 0x210(0x50)
	char pad_260[0x8]; // 0x260(0x08)
	struct TArray<struct FMissionShoutQueueItem> MissionShoutQueue; // 0x268(0x10)

	void ShoutCustomOrDefault(struct UDialogDataAsset* CustomShout, enum class EShoutType DefaultShout); // Function FSD.CommunicationComponent.ShoutCustomOrDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x10acb00
	void ShoutCustomLocalOnly(struct UDialogDataAsset* Shout); // Function FSD.CommunicationComponent.ShoutCustomLocalOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x10aca80
	void ShoutCustomClosestDwarf(struct UObject* WorldContext, struct UDialogDataAsset* Shout, struct FVector TargetLocation); // Function FSD.CommunicationComponent.ShoutCustomClosestDwarf // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x10ac980
	void ShoutCustom(struct UDialogDataAsset* Shout); // Function FSD.CommunicationComponent.ShoutCustom // (Final|Native|Public|BlueprintCallable) // @ game+0x10ac900
	void Shout(enum class EShoutType Shout); // Function FSD.CommunicationComponent.Shout // (Final|Native|Public|BlueprintCallable) // @ game+0x10ac880
	void SetMissionControlPaused(bool IsPaused); // Function FSD.CommunicationComponent.SetMissionControlPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x10ac7f0
	void ServerShout(struct UDialogDataAsset* Shout); // Function FSD.CommunicationComponent.ServerShout // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0x10ac6e0
	void ServerMixerAnnouncement(struct FMixerAnnouncement Announcement); // Function FSD.CommunicationComponent.ServerMixerAnnouncement // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10ac5e0
	void ServerMissionShout(struct UDialogDataAsset* Shout, int32_t Index, bool bPriority); // Function FSD.CommunicationComponent.ServerMissionShout // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10ac4a0
	struct UAudioComponent* PlayPitchedByClass(struct UObject* WorldContextObject, struct APlayerCharacter* CharacterClass, struct USoundBase* Sound, struct UDialogDataAsset* Shout, enum class EShoutType ShoutType, struct UAudioComponent* AudioComponent); // Function FSD.CommunicationComponent.PlayPitchedByClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10ac220
	void PlayPitchedAsync(struct UDialogDataAsset* Shout, enum class EShoutType ShoutType, bool IgnoreCoolDown, struct UAudioComponent* AudioComponent, struct UObject* WorldContextObject, float shoutVolumeMultiplier); // Function FSD.CommunicationComponent.PlayPitchedAsync // (Final|Native|Public|BlueprintCallable) // @ game+0x10ac050
	struct UAudioComponent* PlayPitched(struct USoundBase* Sound, struct UDialogDataAsset* Shout, enum class EShoutType ShoutType, bool IgnoreCoolDown, struct UAudioComponent* AudioComponent, struct UObject* WorldContextObject); // Function FSD.CommunicationComponent.PlayPitched // (Final|Native|Public|BlueprintCallable) // @ game+0x10abe80
	void MixerAnnouncementLocalOnly(struct UObject* WorldContext, struct FMixerAnnouncement Announcement); // Function FSD.CommunicationComponent.MixerAnnouncementLocalOnly // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10abd60
	void MixerAnnouncement(struct UObject* WorldContext, struct FMixerAnnouncement Announcement); // Function FSD.CommunicationComponent.MixerAnnouncement // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10abc40
	int32_t MissionShoutLocally(struct UObject* WorldContext, struct UDialogDataAsset* Shout); // Function FSD.CommunicationComponent.MissionShoutLocally // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10abb80
	void MissionShout(struct UObject* WorldContext, struct UDialogDataAsset* Shout, bool bPriority); // Function FSD.CommunicationComponent.MissionShout // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10aba80
	bool IsMissionControlSpeaking(); // Function FSD.CommunicationComponent.IsMissionControlSpeaking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10aba50
	void ClientShout(struct APlayerCharacter* Sender, struct UDialogDataAsset* Shout, int32_t Index); // Function FSD.CommunicationComponent.ClientShout // (Net|Native|Event|Protected|NetClient|NetValidate) // @ game+0x10ab0f0
	void ClientMixerAnnouncement(struct FMixerAnnouncement Announcement); // Function FSD.CommunicationComponent.ClientMixerAnnouncement // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0x10aaff0
	void ClientMissionShout(struct UDialogDataAsset* Shout, int32_t Index, bool bPriority); // Function FSD.CommunicationComponent.ClientMissionShout // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0x10aaeb0
};

// Class FSD.CommnuityRewardBundle
// Size: 0x40 (Inherited: 0x30)
struct UCommnuityRewardBundle : UDataAsset {
	struct TArray<struct FCommunityReward> Rewards; // 0x30(0x10)

	void AwardRewards(struct UObject* WorldContext); // Function FSD.CommnuityRewardBundle.AwardRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x10aad70
};

// Class FSD.CommnuityRewardSetup
// Size: 0x40 (Inherited: 0x30)
struct UCommnuityRewardSetup : UDataAsset {
	struct TArray<struct UCommnuityRewardBundle*> TierRewards; // 0x30(0x10)

	struct TMap<struct UResourceData*, int32_t> GetResourcesTierOnlyReward(int32_t Tier); // Function FSD.CommnuityRewardSetup.GetResourcesTierOnlyReward // (Final|Native|Public|BlueprintCallable) // @ game+0x10ab510
	struct TMap<struct UResourceData*, int32_t> GetResourcesReward(int32_t Tier); // Function FSD.CommnuityRewardSetup.GetResourcesReward // (Final|Native|Public|BlueprintCallable) // @ game+0x10ab3c0
	void AwardTierRewards(struct UObject* WorldContext, int32_t Tier); // Function FSD.CommnuityRewardSetup.AwardTierRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x10aadf0
};

// Class FSD.CommunityGoalCategory
// Size: 0x48 (Inherited: 0x30)
struct UCommunityGoalCategory : UDataAsset {
	struct FText Title; // 0x30(0x18)
};

// Class FSD.CommunityGoalFaction
// Size: 0xe8 (Inherited: 0x30)
struct UCommunityGoalFaction : UDataAsset {
	struct FText Title; // 0x30(0x18)
	struct FText Description; // 0x48(0x18)
	struct FText ShortDescription; // 0x60(0x18)
	struct FText JoinHeader; // 0x78(0x18)
	struct FText JoinBody; // 0x90(0x18)
	struct UTexture2D* Icon; // 0xa8(0x08)
	struct UTexture2D* Frame; // 0xb0(0x08)
	struct FSlateColor Color; // 0xb8(0x28)
	enum class EFSDFaction FactionID; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
};

// Class FSD.CommunityGoal
// Size: 0x98 (Inherited: 0x30)
struct UCommunityGoal : UDataAsset {
	bool TierValuesAreInitialized; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FGuid SaveGameID; // 0x34(0x10)
	bool Active; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	struct FText Title; // 0x48(0x18)
	struct FText MetaDescription; // 0x60(0x18)
	struct UCommunityGoalCategory* Category; // 0x78(0x08)
	enum class ECommunityGoalType CommunityGoalType; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	float GoalPerMemberTier1; // 0x84(0x04)
	float GoalPerMemberTier2; // 0x88(0x04)
	float GoalPerMemberTier3; // 0x8c(0x04)
	struct UCommnuityRewardSetup* RewardSetup; // 0x90(0x08)

	float TotalTierProgress(float Value, int32_t Members); // Function FSD.CommunityGoal.TotalTierProgress // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x10acea0
	float TierValue(enum class ECommunityGoalTier Tier, float Value, int32_t Members); // Function FSD.CommunityGoal.TierValue // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x10acd90
	float TierProgress(enum class ECommunityGoalTier Tier, float Value, int32_t Members); // Function FSD.CommunityGoal.TierProgress // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x10acc80
	float TierGoal(enum class ECommunityGoalTier Tier, int32_t Members); // Function FSD.CommunityGoal.TierGoal // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x10acbc0
	int32_t RewardTier(float Value, int32_t Members); // Function FSD.CommunityGoal.RewardTier // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x10ac3d0
	void IncrementGoal(struct UObject* WorldContext, float Value); // Function FSD.CommunityGoal.IncrementGoal // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x10ab980
	struct FText GoalToText(enum class ECommunityGoalType StatType, float Value); // Function FSD.CommunityGoal.GoalToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10ab860
	struct FText GetCategoryTitle(); // Function FSD.CommunityGoal.GetCategoryTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ab240
	bool AreTiersInitialized(); // Function FSD.CommunityGoal.AreTiersInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10aad50
};

// Class FSD.CommunityGoalWrapper
// Size: 0x240 (Inherited: 0x28)
struct UCommunityGoalWrapper : UObject {
	bool HasCGS; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	struct FCommunityGoalStateData CGSData; // 0x2c(0x10)
	int32_t LastCollectedRewardID; // 0x3c(0x04)
	char pad_40[0x8]; // 0x40(0x08)
	struct FCommunityFactionData FactionData; // 0x48(0x38)
	bool FreeBeerRewardActive; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct FMulticastInlineDelegate OnFreeBeerRewardChanged; // 0x88(0x10)
	char pad_98[0x20]; // 0x98(0x20)
	struct FString SteamTicket; // 0xb8(0x10)
	struct FString SteamBranch; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnFactionsDataReceived; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnDiscordCGSDataEvent; // 0xe8(0x10)
	struct FMulticastInlineDelegate UICheck; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnGoalsInitializedDelegate; // 0x108(0x10)
	char pad_118[0x20]; // 0x118(0x20)
	bool AreAllGoalsInitialized; // 0x138(0x01)
	char pad_139[0x107]; // 0x139(0x107)

	void UpdateAllGoalsInitialized(); // Function FSD.CommunityGoalWrapper.UpdateAllGoalsInitialized // (Final|Native|Public|BlueprintCallable) // @ game+0x10b08b0
	bool RewardReceived(); // Function FSD.CommunityGoalWrapper.RewardReceived // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b0860
	void RequestGoalStateData(); // Function FSD.CommunityGoalWrapper.RequestGoalStateData // (Final|Native|Public|BlueprintCallable) // @ game+0x10b0820
	void RequestFactionsData(); // Function FSD.CommunityGoalWrapper.RequestFactionsData // (Final|Native|Public|BlueprintCallable) // @ game+0x10b0800
	void NextPeriod(); // Function FSD.CommunityGoalWrapper.NextPeriod // (Final|Native|Public|BlueprintCallable) // @ game+0x10b0490
	void InitializeGoalTierTargetValues(struct UCommunityGoal* goalToInitialize); // Function FSD.CommunityGoalWrapper.InitializeGoalTierTargetValues // (Final|Native|Public|BlueprintCallable) // @ game+0x10b0410
	struct UCommunityGoalFaction* GetPlayerCurrentFaction(struct UObject* WorldContext); // Function FSD.CommunityGoalWrapper.GetPlayerCurrentFaction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10b0320
	void ClaimRewardMessage(struct UObject* WorldContext, struct FCommunityRewardNotification rewardNotification); // Function FSD.CommunityGoalWrapper.ClaimRewardMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x10afbf0
	void ClaimReward(); // Function FSD.CommunityGoalWrapper.ClaimReward // (Final|Native|Public|BlueprintCallable) // @ game+0x10afbd0
	void CheckUI(); // Function FSD.CommunityGoalWrapper.CheckUI // (Final|Native|Public|BlueprintCallable) // @ game+0x10afbb0
};

// Class FSD.ControllerIconSettings
// Size: 0xc8 (Inherited: 0x38)
struct UControllerIconSettings : UDeveloperSettings {
	struct FInputTranslationTable InputTranslationTable; // 0x38(0x50)
	struct TArray<struct FActionIconMapping> Xbox_KeyIcons; // 0x88(0x10)
	struct TArray<struct FActionIconMapping> Playstation_KeyIcons; // 0x98(0x10)
	struct TArray<struct FActionIconMapping> Playstation5_KeyIcons; // 0xa8(0x10)
	struct TArray<struct FActionIconMapping> MouseKeyboard_KeyIcons; // 0xb8(0x10)

	bool FindMouseKeyboardKeyIcon(struct FKey Key, struct FActionIconMapping KeyIcon); // Function FSD.ControllerIconSettings.FindMouseKeyboardKeyIcon // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x10b0100
	bool FindKeyIcon(struct FKey Key, struct FActionIconMapping KeyIcon); // Function FSD.ControllerIconSettings.FindKeyIcon // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x10aff90
	bool FindControllerKeyIcon(struct FKey Key, struct FActionIconMapping KeyIcon); // Function FSD.ControllerIconSettings.FindControllerKeyIcon // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x10afe20
};

// Class FSD.ConvertedRobot
// Size: 0x6c0 (Inherited: 0x3a0)
struct AConvertedRobot : AEnemyDeepPathfinderCharacter {
	char pad_3A0[0x8]; // 0x3a0(0x08)
	struct UEnemyComponent* EnemyComponent; // 0x3a8(0x08)
	struct UPawnStatsComponent* PawnStats; // 0x3b0(0x08)
	struct UOutlineComponent* outline; // 0x3b8(0x08)
	struct UHitscanComponent* HitScan; // 0x3c0(0x08)
	struct USingleUsableComponent* Usable; // 0x3c8(0x08)
	struct USceneComponent* TurretRoot; // 0x3d0(0x08)
	struct USkeletalMeshComponent* TurretMesh; // 0x3d8(0x08)
	struct UPointLightComponent* MuzzleFlash; // 0x3e0(0x08)
	struct USpotLightComponent* SpotLight; // 0x3e8(0x08)
	struct UStaticMeshComponent* LightCone; // 0x3f0(0x08)
	struct UStaticMeshComponent* LaserBeam; // 0x3f8(0x08)
	struct USceneComponent* ShieldRoot; // 0x400(0x08)
	struct UStaticMeshComponent* InnerShield; // 0x408(0x08)
	struct UStaticMeshComponent* OuterShield; // 0x410(0x08)
	struct UAudioComponent* PulsatingSoundComp; // 0x418(0x08)
	struct UAudioComponent* LaserWarningSound; // 0x420(0x08)
	struct UDamageComponent* Damage; // 0x428(0x08)
	struct FMulticastInlineDelegate OnStateChanged; // 0x430(0x10)
	struct FMulticastInlineDelegate OnShieldChanged; // 0x440(0x10)
	struct FMulticastInlineDelegate OnIntroductionStart; // 0x450(0x10)
	char pad_460[0x10]; // 0x460(0x10)
	bool ForceSit; // 0x470(0x01)
	char pad_471[0x7]; // 0x471(0x07)
	struct USoundBase* LaserSound; // 0x478(0x08)
	struct USoundBase* LastPowerDownSound; // 0x480(0x08)
	struct USoundBase* PowerUpSound; // 0x488(0x08)
	struct TWeakObjectPtr<struct UAudioComponent> LaserSoundComp; // 0x490(0x08)
	char pad_498[0x18]; // 0x498(0x18)
	float IntroductionTime; // 0x4b0(0x04)
	bool IsIntroducing; // 0x4b4(0x01)
	bool IntroductionDone; // 0x4b5(0x01)
	bool IsGrowingShield; // 0x4b6(0x01)
	char pad_4B7[0x1]; // 0x4b7(0x01)
	float AimDownwardsOffset; // 0x4b8(0x04)
	float BigShieldScale; // 0x4bc(0x04)
	float SmallShieldScale; // 0x4c0(0x04)
	float ShieldGrowthRate; // 0x4c4(0x04)
	float LerpExp; // 0x4c8(0x04)
	float MinimumShieldSize; // 0x4cc(0x04)
	float TargetShieldSize; // 0x4d0(0x04)
	float IdleRotationSpeed; // 0x4d4(0x04)
	float LaserScaleRate; // 0x4d8(0x04)
	char pad_4DC[0x4]; // 0x4dc(0x04)
	float MaxSearchAngle; // 0x4e0(0x04)
	char pad_4E4[0x1c]; // 0x4e4(0x1c)
	bool DoSpecialWhenEnemy; // 0x500(0x01)
	bool DoSpecialWhenFriendly; // 0x501(0x01)
	bool PerfectTrackingWhenEnemy; // 0x502(0x01)
	bool PerfectTrackingWhenFriendly; // 0x503(0x01)
	char pad_504[0x2]; // 0x504(0x02)
	bool ReplaceBurstAttack; // 0x506(0x01)
	char pad_507[0x1]; // 0x507(0x01)
	struct USoundBase* GrenadeFireSound; // 0x508(0x08)
	struct UParticleSystem* GrenadeFireParticle; // 0x510(0x08)
	bool IsFiring; // 0x518(0x01)
	char pad_519[0x3]; // 0x519(0x03)
	float TurretSpinSpeed; // 0x51c(0x04)
	struct TArray<struct AActor*> Parasites; // 0x520(0x10)
	int32_t SpawnParasiteNumer; // 0x530(0x04)
	int32_t MaxParasiteSlots; // 0x534(0x04)
	float ChanceToSpawnParasite; // 0x538(0x04)
	char pad_53C[0x4]; // 0x53c(0x04)
	struct AParasiteEnemy* ParasiteClass; // 0x540(0x08)
	char pad_548[0x6]; // 0x548(0x06)
	bool SpinTurret; // 0x54e(0x01)
	char pad_54F[0x11]; // 0x54f(0x11)
	struct AProjectile* SpecialAttackProjectile; // 0x560(0x08)
	struct AProjectile* FriendlyProjectile; // 0x568(0x08)
	char pad_570[0xc]; // 0x570(0x0c)
	bool HasLockedOn; // 0x57c(0x01)
	char pad_57D[0x3]; // 0x57d(0x03)
	struct USoundBase* TargetingSound; // 0x580(0x08)
	struct UAnimSequenceBase* GrenadeShotAnimation; // 0x588(0x08)
	float LockOnTime; // 0x590(0x04)
	char pad_594[0x4]; // 0x594(0x04)
	struct USoundCue* ShootSound; // 0x598(0x08)
	float ShootSoundFadeout; // 0x5a0(0x04)
	char pad_5A4[0x4]; // 0x5a4(0x04)
	struct UAudioComponent* ShootSoundInstance; // 0x5a8(0x08)
	struct USoundCue* ShootSoundTail; // 0x5b0(0x08)
	struct UParticleSystem* MuzzleEffect; // 0x5b8(0x08)
	struct UParticleSystem* TracerEffect; // 0x5c0(0x08)
	struct FRuntimeFloatCurve MuzzleLightCurve; // 0x5c8(0x88)
	char pad_650[0x8]; // 0x650(0x08)
	float GunRange; // 0x658(0x04)
	float FireRate; // 0x65c(0x04)
	float GrenadeFireRate; // 0x660(0x04)
	char pad_664[0x4]; // 0x664(0x04)
	float BurstCooldown; // 0x668(0x04)
	char pad_66C[0x4]; // 0x66c(0x04)
	int32_t MinBurst; // 0x670(0x04)
	int32_t MaxBurst; // 0x674(0x04)
	float TurretLerpSpeed; // 0x678(0x04)
	float DamageWhenFriendly; // 0x67c(0x04)
	float FriendlyFriendlyFireMultiplier; // 0x680(0x04)
	char pad_684[0x4]; // 0x684(0x04)
	bool StartedSpecialAttack; // 0x688(0x01)
	enum class ERobotState TeamState; // 0x689(0x01)
	char pad_68A[0xe]; // 0x68a(0x0e)
	bool IsWalking; // 0x698(0x01)
	bool IsDoingSpecialAttack; // 0x699(0x01)
	char pad_69A[0x6]; // 0x69a(0x06)
	struct UStaticMeshComponent* TurretRotation; // 0x6a0(0x08)
	char pad_6A8[0x8]; // 0x6a8(0x08)
	struct AActor* CurrentTarget; // 0x6b0(0x08)
	char pad_6B8[0x8]; // 0x6b8(0x08)

	void UpdateGunsInsideTerrain(); // Function FSD.ConvertedRobot.UpdateGunsInsideTerrain // (Final|Native|Protected) // @ game+0x10b08d0
	void StartBossFight(); // Function FSD.ConvertedRobot.StartBossFight // (Final|Native|Public|BlueprintCallable) // @ game+0x10b0890
	void ParasiteDamaged(float aDamage); // Function FSD.ConvertedRobot.ParasiteDamaged // (Final|Native|Protected) // @ game+0x10b0780
	void OnWeaponsFired(struct FVector aHitResult); // Function FSD.ConvertedRobot.OnWeaponsFired // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x10b06f0
	void OnUsed(struct APlayerCharacter* aUser, enum class EInputKeys Key); // Function FSD.ConvertedRobot.OnUsed // (Final|Native|Protected) // @ game+0x10b0630
	void OnSeePawn(struct APawn* APawn); // Function FSD.ConvertedRobot.OnSeePawn // (Final|Native|Public) // @ game+0x10b05b0
	void OnRep_TeamState(); // Function FSD.ConvertedRobot.OnRep_TeamState // (Native|Protected) // @ game+0x10877d0
	void OnRep_Target(); // Function FSD.ConvertedRobot.OnRep_Target // (Native|Protected) // @ game+0x1083ef0
	void OnRep_SpinTurret(); // Function FSD.ConvertedRobot.OnRep_SpinTurret // (Final|Native|Protected) // @ game+0x10b0590
	void OnRep_IsIntroducting(); // Function FSD.ConvertedRobot.OnRep_IsIntroducting // (Final|Native|Protected) // @ game+0x10b0570
	void OnRep_IsFiring(); // Function FSD.ConvertedRobot.OnRep_IsFiring // (Final|Native|Protected) // @ game+0x10b0550
	void OnRep_IsDoingSpecialAttack(); // Function FSD.ConvertedRobot.OnRep_IsDoingSpecialAttack // (Final|Native|Protected) // @ game+0x10b0530
	void OnParasiteDeath(struct AActor* AParasiteEnemy); // Function FSD.ConvertedRobot.OnParasiteDeath // (Final|Native|Protected) // @ game+0x10b04b0
	enum class ERobotState GetTeamState(); // Function FSD.ConvertedRobot.GetTeamState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b03f0
	struct FVector GetPlayerMediumPoint(); // Function FSD.ConvertedRobot.GetPlayerMediumPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b03b0
	struct TArray<struct AActor*> GetParasites(); // Function FSD.ConvertedRobot.GetParasites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b0290
	bool GetHasPoweredDown(); // Function FSD.ConvertedRobot.GetHasPoweredDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b0270
	void DestroyAttatchPoint(struct USceneComponent* aComponent); // Function FSD.ConvertedRobot.DestroyAttatchPoint // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10afd90
	void CannonEffects(); // Function FSD.ConvertedRobot.CannonEffects // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x10926c0
	void BP_OnStateChanged(enum class ERobotState TeamState); // Function FSD.ConvertedRobot.BP_OnStateChanged // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void BP_OnShieldChanged(bool isGrowing); // Function FSD.ConvertedRobot.BP_OnShieldChanged // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void BP_OnInstroduce(); // Function FSD.ConvertedRobot.BP_OnInstroduce // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ConvertedRobotAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UConvertedRobotAnimInstance : UAnimInstance {
	bool HasIntroduced; // 0x26c(0x01)
	bool IsWalking; // 0x26d(0x01)
	bool IsIntroducing; // 0x26e(0x01)
	bool ShouldSit; // 0x26f(0x01)
	bool StopSit; // 0x270(0x01)
	bool ShouldCollapse; // 0x271(0x01)
	bool IsPoweredDown; // 0x272(0x01)
	float WalkingRate; // 0x274(0x04)
	float NormalWalkSpeed; // 0x278(0x04)
	char pad_27F[0x1]; // 0x27f(0x01)
};

// Class FSD.ConvertedRobotTurretAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UConvertedRobotTurretAnimInstance : UAnimInstance {
	bool ReplaceBurstAttack; // 0x268(0x01)
	bool IsFiringGrenades; // 0x269(0x01)
	bool IsDoingSpecialAttack; // 0x26a(0x01)
	bool ShouldFireBullets; // 0x26b(0x01)
	bool StopFiringBullets; // 0x26c(0x01)
	bool ShouldCannonDeploy; // 0x26d(0x01)
};

// Class FSD.EnemyAIController
// Size: 0x358 (Inherited: 0x358)
struct AEnemyAIController : AFSDAIController {
};

// Class FSD.ConvertedRobotController
// Size: 0x428 (Inherited: 0x358)
struct AConvertedRobotController : AEnemyAIController {
	float CheckRangeInterval; // 0x358(0x04)
	float MaxTimeInRange; // 0x35c(0x04)
	char pad_360[0x4]; // 0x360(0x04)
	float PersonalSpaceRange; // 0x364(0x04)
	char pad_368[0x10]; // 0x368(0x10)
	struct FGameplayTagQuery FriendlyTargetingQuery; // 0x378(0x48)
	float SpecialAttackRange; // 0x3c0(0x04)
	float SpecialAttackFireRate; // 0x3c4(0x04)
	char pad_3C8[0x20]; // 0x3c8(0x20)
	float WaitBeforeSpecial; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	float WaitAfterSpecial; // 0x3f0(0x04)
	char pad_3F4[0x8]; // 0x3f4(0x08)
	float MinSpecialAttackCooldown; // 0x3fc(0x04)
	float MaxSpecialAttackCooldown; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct UBehaviorTree* BehaviourTree; // 0x408(0x08)
	float UpdateTargetInterval; // 0x410(0x04)
	char pad_414[0x4]; // 0x414(0x04)
	float PowerDownAfterSeconds; // 0x418(0x04)
	char pad_41C[0xc]; // 0x41c(0x0c)

	void ResetCloseTimer(); // Function FSD.ConvertedRobotController.ResetCloseTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x10b0840
};

// Class FSD.CoolDownItemAggregator
// Size: 0xe8 (Inherited: 0xc8)
struct UCoolDownItemAggregator : UItemAggregator {
	float CooldownDuration; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct USoundBase* AudioCoolDownFinished; // 0xd0(0x08)
	float CooldownRemaining; // 0xd8(0x04)
	bool CoolDownIsPaused; // 0xdc(0x01)
	char pad_DD[0x3]; // 0xdd(0x03)
	struct AItem* Item; // 0xe0(0x08)

	void SetPaused(bool IsPaused); // Function FSD.CoolDownItemAggregator.SetPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x10b58d0
	bool IsCoolingDown(); // Function FSD.CoolDownItemAggregator.IsCoolingDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b5300
	float GetCoolDownProgress(); // Function FSD.CoolDownItemAggregator.GetCoolDownProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b50b0
	void ActivateCoolDown(bool startPaused); // Function FSD.CoolDownItemAggregator.ActivateCoolDown // (Final|Native|Public|BlueprintCallable) // @ game+0x10b4e60
};

// Class FSD.CoolDownProgressWidget
// Size: 0x280 (Inherited: 0x230)
struct UCoolDownProgressWidget : UUserWidget {
	struct FCoolDownProgressStyle Style; // 0x230(0x40)
	struct TWeakObjectPtr<struct UObject> CoolDownObject; // 0x270(0x08)
	bool bIsFinished; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)

	void UpdateProgress(float Progress); // Function FSD.CoolDownProgressWidget.UpdateProgress // (Final|Native|Protected|BlueprintCallable) // @ game+0x10b5950
	void ReceiveUpdateProgress(float InProgress); // Function FSD.CoolDownProgressWidget.ReceiveUpdateProgress // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveInitWidget(); // Function FSD.CoolDownProgressWidget.ReceiveInitWidget // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Init(struct UObject* InCoolDownObject, struct FCoolDownProgressStyle InStyle); // Function FSD.CoolDownProgressWidget.Init // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x10b51e0
};

// Class FSD.PricingTier
// Size: 0x40 (Inherited: 0x30)
struct UPricingTier : UDataAsset {
	struct FString PriceKey; // 0x30(0x10)
};

// Class FSD.SchematicPricingTier
// Size: 0x40 (Inherited: 0x40)
struct USchematicPricingTier : UPricingTier {
};

// Class FSD.CreditsResourceData
// Size: 0xf0 (Inherited: 0xf0)
struct UCreditsResourceData : UResourceData {
};

// Class FSD.CritterManager
// Size: 0xf8 (Inherited: 0xb0)
struct UCritterManager : UActorComponent {
	bool DisableCritters; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	float ActivationRange; // 0xb4(0x04)
	char pad_B8[0x40]; // 0xb8(0x40)
};

// Class FSD.CrosshairWidget
// Size: 0x230 (Inherited: 0x230)
struct UCrosshairWidget : UUserWidget {

	void SetData(struct AItem* Item); // Function FSD.CrosshairWidget.SetData // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnUpgraded(struct AItem* Item); // Function FSD.CrosshairWidget.OnUpgraded // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.CrosshairAggregator
// Size: 0xf0 (Inherited: 0xc8)
struct UCrosshairAggregator : UItemAggregator {
	char pad_C8[0x8]; // 0xc8(0x08)
	struct FMulticastInlineDelegate OnCrosshairCreated; // 0xd0(0x10)
	struct UUserWidget* CrosshairWidget; // 0xe0(0x08)
	struct UUserWidget* CrossHairType; // 0xe8(0x08)

	void SetCrosshair(struct UUserWidget* Widget); // Function FSD.CrosshairAggregator.SetCrosshair // (Final|Native|Public|BlueprintCallable) // @ game+0x10b5850
	struct UUserWidget* GetOrCreateCrosshair(); // Function FSD.CrosshairAggregator.GetOrCreateCrosshair // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10b51b0
};

// Class FSD.CryosprayItem
// Size: 0x868 (Inherited: 0x6e0)
struct ACryosprayItem : AAmmoDrivenWeapon {
	struct UProjectileLauncherComponent* ProjectileLauncher; // 0x6e0(0x08)
	struct UDamageComponent* DamageComponent; // 0x6e8(0x08)
	struct UStickyFlameSpawner* StickyFlames; // 0x6f0(0x08)
	struct UDamageComponent* AoEColdDamageComponent; // 0x6f8(0x08)
	struct UMotionAudioController* VelocityAudio; // 0x700(0x08)
	struct UParticleSystemComponent* FlameParticleComponent; // 0x708(0x08)
	bool PressurizedProjectileEnabled; // 0x710(0x01)
	char pad_711[0x3]; // 0x711(0x03)
	float PressurizedProjectileDelay; // 0x714(0x04)
	int32_t PressurizeProjectileFullCost; // 0x718(0x04)
	char pad_71C[0xc]; // 0x71c(0x0c)
	struct UParticleSystem* ChargeupParticles; // 0x728(0x08)
	struct UParticleSystemComponent* ChargeupParticleInstance; // 0x730(0x08)
	struct FDecalData ImpactDecal; // 0x738(0x18)
	float DecalDelay; // 0x750(0x04)
	char pad_754[0x4]; // 0x754(0x04)
	struct UParticleSystem* ImpactParticles; // 0x758(0x08)
	struct UParticleSystemComponent* ImpactParticleInstance; // 0x760(0x08)
	struct TArray<struct FName> FlameParameterNames; // 0x768(0x10)
	float DamageSphereRadius; // 0x778(0x04)
	float MaxFlameDistance; // 0x77c(0x04)
	float FlameGrowthPerSecond; // 0x780(0x04)
	float friendlyFireModifier; // 0x784(0x04)
	float ChargeupTime; // 0x788(0x04)
	float ChargeDownTime; // 0x78c(0x04)
	char pad_790[0x1]; // 0x790(0x01)
	bool isCharging; // 0x791(0x01)
	char pad_792[0x2]; // 0x792(0x02)
	float ChargeProgress; // 0x794(0x04)
	bool bRepressurerising; // 0x798(0x01)
	char pad_799[0x3]; // 0x799(0x03)
	float RepressurerisingDoneAtPct; // 0x79c(0x04)
	float ChargeUpFadeOutTime; // 0x7a0(0x04)
	char pad_7A4[0x4]; // 0x7a4(0x04)
	struct UFSDAudioComponent* ChargeUpAudioComponent; // 0x7a8(0x08)
	float PressureTime; // 0x7b0(0x04)
	float PressureDropMultiplier; // 0x7b4(0x04)
	float PressureGainMultiplier; // 0x7b8(0x04)
	float CurrentPressure; // 0x7bc(0x04)
	float RePressureDuration; // 0x7c0(0x04)
	float RePressureProgress; // 0x7c4(0x04)
	struct TArray<struct UItemUpgrade*> upgrades; // 0x7c8(0x10)
	bool LongReachEnabled; // 0x7d8(0x01)
	char pad_7D9[0xf]; // 0x7d9(0x0f)
	bool AoEColdEnabled; // 0x7e8(0x01)
	char pad_7E9[0x7f]; // 0x7e9(0x7f)

	void ServerDoDamage(struct FVector_NetQuantize Start, struct FVector_NetQuantize End, char Power); // Function FSD.CryosprayItem.ServerDoDamage // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10b5630
	void Server_TriggerAoECold(); // Function FSD.CryosprayItem.Server_TriggerAoECold // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10b5800
	void Server_PreLaunchProjectile(); // Function FSD.CryosprayItem.Server_PreLaunchProjectile // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10b57b0
	void ReceiveRepressurisingChanged(bool Value); // Function FSD.CryosprayItem.ReceiveRepressurisingChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnTargetDamaged(struct UHealthComponentBase* Health, float Amount, struct UPrimitiveComponent* HitComponent, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.CryosprayItem.OnTargetDamaged // (Final|Native|Protected) // @ game+0x10b54e0
	void OnRep_IsCharging(bool OldValue); // Function FSD.CryosprayItem.OnRep_IsCharging // (Final|Native|Protected) // @ game+0x10b5450
	void OnProjectileSpawned(struct AProjectileBase* Projectile); // Function FSD.CryosprayItem.OnProjectileSpawned // (Final|Native|Protected) // @ game+0x10b53d0
	void OnProjectileLaunched(struct FVector Location); // Function FSD.CryosprayItem.OnProjectileLaunched // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x158ca90
	void OnPressurizedPartileShoot(); // Function FSD.CryosprayItem.OnPressurizedPartileShoot // (Final|Native|Protected) // @ game+0x10b53b0
	void OnPreProjectileLaunch(); // Function FSD.CryosprayItem.OnPreProjectileLaunch // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void All_PreLaunchProjectile(); // Function FSD.CryosprayItem.All_PreLaunchProjectile // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1092350
};

// Class FSD.CryoSprayAnimInstance
// Size: 0x290 (Inherited: 0x270)
struct UCryoSprayAnimInstance : UAnimInstance {
	struct ACryosprayItem* Weapon; // 0x268(0x08)
	bool IsFiring; // 0x270(0x01)
	float ChargeProgress; // 0x274(0x04)
	struct FRotator ChargeRotation; // 0x278(0x0c)
	float ChargeBlend; // 0x284(0x04)
	float Pressure; // 0x288(0x04)
};

// Class FSD.CustomKeyBindingLibrary
// Size: 0x28 (Inherited: 0x28)
struct UCustomKeyBindingLibrary : UBlueprintFunctionLibrary {
};

// Class FSD.KeyBindingSettings
// Size: 0x50 (Inherited: 0x30)
struct UKeyBindingSettings : UDataAsset {
	struct TArray<struct FCustomKeySetting> KeyboardMouseButtons; // 0x30(0x10)
	struct TArray<struct FCustomKeySetting> ControllerButtons; // 0x40(0x10)
};

// Class FSD.CustomRichTextDecorator
// Size: 0x30 (Inherited: 0x28)
struct UCustomRichTextDecorator : URichTextBlockDecorator {
	struct URichTextBlock* RichTextBlock; // 0x28(0x08)
};

// Class FSD.DailyDealSettings
// Size: 0x40 (Inherited: 0x30)
struct UDailyDealSettings : UDataAsset {
	struct TArray<struct FDailyDealSetup> DailyDeals; // 0x30(0x10)

	bool IsDailyDealBought(struct UObject* WorldContextObject); // Function FSD.DailyDealSettings.IsDailyDealBought // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10b5330
	int32_t GetDailyDealSeed(); // Function FSD.DailyDealSettings.GetDailyDealSeed // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10b5180
	void GetDailyDeal(struct FDailyDeal outDeal); // Function FSD.DailyDealSettings.GetDailyDeal // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10b5100
	bool CanAffordDailyDeal(struct UObject* WorldContextObject); // Function FSD.DailyDealSettings.CanAffordDailyDeal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10b5030
	bool BuyDailyDeal(struct UObject* WorldContextObject); // Function FSD.DailyDealSettings.BuyDailyDeal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10b4fb0
};

// Class FSD.DamageAttackComponent
// Size: 0xf8 (Inherited: 0xf0)
struct UDamageAttackComponent : UAttackBaseComponent {
	struct UDamageComponent* Damage; // 0xf0(0x08)
};

// Class FSD.DamageBonusBase
// Size: 0x38 (Inherited: 0x30)
struct UDamageBonusBase : UDataAsset {
	struct UDamageCondition* Condition; // 0x30(0x08)

	struct UDamageBonusBase* AddDamageBonusToComponent(struct UDamageBonusBase* damageBonusClass, struct UDamageComponent* DamageComponent); // Function FSD.DamageBonusBase.AddDamageBonusToComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10b4ef0
};

// Class FSD.FlatDamageBonus
// Size: 0x48 (Inherited: 0x38)
struct UFlatDamageBonus : UDamageBonusBase {
	float Damage; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct UDamageClass* DamageClass; // 0x40(0x08)
};

// Class FSD.RangedFlatDamageBonus
// Size: 0x48 (Inherited: 0x38)
struct URangedFlatDamageBonus : UDamageBonusBase {
	struct UCurveFloat* DamageCurve; // 0x38(0x08)
	struct UDamageClass* DamageClass; // 0x40(0x08)
};

// Class FSD.TargetSpecificDamageBonus
// Size: 0x90 (Inherited: 0x38)
struct UTargetSpecificDamageBonus : UDamageBonusBase {
	float Bonus; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FGameplayTagQuery tagQuery; // 0x40(0x48)
	struct FName Key; // 0x88(0x08)
};

// Class FSD.DamageConversionBonus
// Size: 0x48 (Inherited: 0x38)
struct UDamageConversionBonus : UDamageBonusBase {
	struct UDamageClass* DamageClass; // 0x38(0x08)
	float ConversionPercentage; // 0x40(0x04)
	bool DamageIsAdded; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
};

// Class FSD.TargetStateDamageBonus
// Size: 0x48 (Inherited: 0x38)
struct UTargetStateDamageBonus : UDamageBonusBase {
	enum class ETargetStateDamageBonusType TargetState; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float Bonus; // 0x3c(0x04)
	struct UDamageClass* DamageClass; // 0x40(0x08)
};

// Class FSD.StatusDamageBonus
// Size: 0x58 (Inherited: 0x38)
struct UStatusDamageBonus : UDamageBonusBase {
	struct TArray<struct UStatusEffect*> StatusEffects; // 0x38(0x10)
	float Bonus; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct UDamageClass* DamageClass; // 0x50(0x08)
};

// Class FSD.StatusAndStateDamageBonus
// Size: 0x68 (Inherited: 0x38)
struct UStatusAndStateDamageBonus : UDamageBonusBase {
	struct TArray<struct UStatusEffect*> StatusEffects; // 0x38(0x10)
	struct TArray<enum class ETargetStateDamageBonusType> TargetStates; // 0x48(0x10)
	float Bonus; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct UDamageClass* DamageClass; // 0x60(0x08)
};

// Class FSD.PushStatusEffectDamageBonus
// Size: 0x58 (Inherited: 0x38)
struct UPushStatusEffectDamageBonus : UDamageBonusBase {
	char pad_38[0x10]; // 0x38(0x10)
	struct UStatusEffect* StatusEffect; // 0x48(0x08)
	float Chance; // 0x50(0x04)
	bool IgnoreArmorHit; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class FSD.PushDynamicStatusEffectDamageBonus
// Size: 0x60 (Inherited: 0x38)
struct UPushDynamicStatusEffectDamageBonus : UDamageBonusBase {
	char pad_38[0x10]; // 0x38(0x10)
	struct UStatusEffect* BaseSTE; // 0x48(0x08)
	struct UStatusEffect* StatusEffect; // 0x50(0x08)
	float Chance; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class FSD.FearAoEBonus
// Size: 0x40 (Inherited: 0x38)
struct UFearAoEBonus : UDamageBonusBase {
	float FearFactor; // 0x38(0x04)
	float range; // 0x3c(0x04)
};

// Class FSD.AmmoLeftDamageBonus
// Size: 0x58 (Inherited: 0x48)
struct UAmmoLeftDamageBonus : UFlatDamageBonus {
	struct UCurveFloat* AmmoDamageCurve; // 0x48(0x08)
	char pad_50[0x8]; // 0x50(0x08)
};

// Class FSD.AmmoUsedDamageBonus
// Size: 0x40 (Inherited: 0x38)
struct UAmmoUsedDamageBonus : UDamageBonusBase {
	float DamageBonusPerRoundFired; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.RandomDamageBonus
// Size: 0x40 (Inherited: 0x38)
struct URandomDamageBonus : UDamageBonusBase {
	struct FRandRange RandomDamageRange; // 0x38(0x08)
};

// Class FSD.PercentDamageBonus
// Size: 0x40 (Inherited: 0x38)
struct UPercentDamageBonus : UDamageBonusBase {
	float DamageMultiplier; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.GatlingHotShellsBonus
// Size: 0x48 (Inherited: 0x48)
struct UGatlingHotShellsBonus : UDamageConversionBonus {
};

// Class FSD.BreakIceBonus
// Size: 0x40 (Inherited: 0x38)
struct UBreakIceBonus : UDamageBonusBase {
	float DeFrostAmount; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.KnockbackDamageBonus
// Size: 0x40 (Inherited: 0x38)
struct UKnockbackDamageBonus : UDamageBonusBase {
	float KnockBackHorizontalForce; // 0x38(0x04)
	float KnockBackVerticalForce; // 0x3c(0x04)
};

// Class FSD.CarryElementalStatus
// Size: 0x48 (Inherited: 0x38)
struct UCarryElementalStatus : UDamageBonusBase {
	float CarryBonusAmount; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct UDamageClass* CarriedClass; // 0x40(0x08)
};

// Class FSD.LockCountSTEBonus
// Size: 0x48 (Inherited: 0x38)
struct ULockCountSTEBonus : UDamageBonusBase {
	int32_t MinLockCount; // 0x38(0x04)
	bool UseTotalLockCount; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	struct UStatusEffect* StatusEffect; // 0x40(0x08)
};

// Class FSD.TagDamageBonus
// Size: 0x48 (Inherited: 0x38)
struct UTagDamageBonus : UDamageBonusBase {
	struct TArray<struct UDamageTag*> Tags; // 0x38(0x10)
};

// Class FSD.SpawnOnImpactDamageBonus
// Size: 0x40 (Inherited: 0x38)
struct USpawnOnImpactDamageBonus : UDamageBonusBase {
	struct AActor* ActorToSpawn; // 0x38(0x08)
};

// Class FSD.DamageClass
// Size: 0x50 (Inherited: 0x30)
struct UDamageClass : UDataAsset {
	struct UPawnStat* ResistanceStat; // 0x30(0x08)
	float RagdollScale; // 0x38(0x04)
	bool BypassesShield; // 0x3c(0x01)
	bool AffectedByFriendlyFire; // 0x3d(0x01)
	char pad_3E[0x2]; // 0x3e(0x02)
	struct UTexture2D* IndicatorImage; // 0x40(0x08)
	struct UDialogDataAsset* DamageShout; // 0x48(0x08)
};

// Class FSD.DamageComponent
// Size: 0x1b0 (Inherited: 0xb0)
struct UDamageComponent : UActorComponent {
	struct FMulticastInlineDelegate OnTargetKilledEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnTargetDamagedEvent; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnNoTargetHitEvent; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnHitDeadTarget; // 0xe0(0x10)
	char pad_F0[0x4]; // 0xf0(0x04)
	enum class EDamageComponentType DamageComponentType; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	float Damage; // 0xf8(0x04)
	float ArmorDamageMultiplier; // 0xfc(0x04)
	bool ShattersArmor; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct UDamageClass* DamageClass; // 0x108(0x08)
	float WeakpointDamageMultiplier; // 0x110(0x04)
	float FrozenDamageBonusScale; // 0x114(0x04)
	float friendlyFireModifier; // 0x118(0x04)
	float SelfFriendlyFireMultiplier; // 0x11c(0x04)
	struct FGameplayTag FriendlyFireTag; // 0x120(0x08)
	bool StaggerOnlyOnWeakpointHit; // 0x128(0x01)
	char pad_129[0x3]; // 0x129(0x03)
	float StaggerChance; // 0x12c(0x04)
	float StaggerDuration; // 0x130(0x04)
	float FearFactor; // 0x134(0x04)
	struct TArray<struct UDamageBonusBase*> DamageBonuses; // 0x138(0x10)
	struct TArray<struct UDamageModifier*> DamageModifiers; // 0x148(0x10)
	struct TArray<struct UDamageTag*> DamageTags; // 0x158(0x10)
	char pad_168[0x10]; // 0x168(0x10)
	bool UseAreaOfEffect; // 0x178(0x01)
	char pad_179[0x3]; // 0x179(0x03)
	float RadialDamage; // 0x17c(0x04)
	bool NoFriendlyFireFromRadial; // 0x180(0x01)
	char pad_181[0x7]; // 0x181(0x07)
	struct UDamageClass* RadialDamageClass; // 0x188(0x08)
	float MinDamagePct; // 0x190(0x04)
	float DamageRadius; // 0x194(0x04)
	float MaxDamageRadius; // 0x198(0x04)
	char pad_19C[0x14]; // 0x19c(0x14)

	void PreTestDamageConditions(); // Function FSD.DamageComponent.PreTestDamageConditions // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10b95a0
	struct UDamageComponent* GetDamageComponentCDO(struct UDamageComponent* DamageComponent); // Function FSD.DamageComponent.GetDamageComponentCDO // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x109af60
	float GetDamage(); // Function FSD.DamageComponent.GetDamage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b9310
	void DamageTargetFromHit(struct FHitResult HitResult); // Function FSD.DamageComponent.DamageTargetFromHit // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x10b9230
	void DamageTarget(struct AActor* Target, struct FVector Location, struct UPrimitiveComponent* HitComponent, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.DamageComponent.DamageTarget // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|Const) // @ game+0x10b90d0
	void DamageArmor_Server(struct AActor* Target, struct UPrimitiveComponent* collider, int32_t BoneIndex, struct FVector impactLocation); // Function FSD.DamageComponent.DamageArmor_Server // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|Const) // @ game+0x10b8f80
	void DamageArmor_All(struct AActor* Target, struct UPrimitiveComponent* collider, int32_t BoneIndex); // Function FSD.DamageComponent.DamageArmor_All // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x10b8e80
	bool ArmorSupportsLocalOnlyCall(struct AActor* Target); // Function FSD.DamageComponent.ArmorSupportsLocalOnlyCall // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b8df0
};

// Class FSD.DamageCondition
// Size: 0x28 (Inherited: 0x28)
struct UDamageCondition : UObject {
};

// Class FSD.FalseDamageCondition
// Size: 0x28 (Inherited: 0x28)
struct UFalseDamageCondition : UDamageCondition {
};

// Class FSD.MultiDamageCondition
// Size: 0x40 (Inherited: 0x28)
struct UMultiDamageCondition : UDamageCondition {
	struct TArray<struct UDamageCondition*> Conditions; // 0x28(0x10)
	bool RequireAllTrue; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class FSD.RandomDamageCondition
// Size: 0x30 (Inherited: 0x28)
struct URandomDamageCondition : UDamageCondition {
	float Chance; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class FSD.LockCountDamageCondition
// Size: 0x30 (Inherited: 0x28)
struct ULockCountDamageCondition : UDamageCondition {
	int32_t MinLockCount; // 0x28(0x04)
	bool UseTotalLockCount; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
};

// Class FSD.LocksRemainingDamageCondition
// Size: 0x30 (Inherited: 0x28)
struct ULocksRemainingDamageCondition : UDamageCondition {
	int32_t MaxLocksRemaining; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class FSD.TargetStateDamageCondition
// Size: 0x30 (Inherited: 0x28)
struct UTargetStateDamageCondition : UDamageCondition {
	enum class ETargetStateDamageBonusType TargetState; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class FSD.TargetSTEDamageCondition
// Size: 0x38 (Inherited: 0x28)
struct UTargetSTEDamageCondition : UDamageCondition {
	struct TArray<struct UStatusEffect*> StatusEffects; // 0x28(0x10)
};

// Class FSD.TargetTagsDamageCondition
// Size: 0x70 (Inherited: 0x28)
struct UTargetTagsDamageCondition : UDamageCondition {
	struct FGameplayTagQuery tagQuery; // 0x28(0x48)
};

// Class FSD.WeakpointDamageCondition
// Size: 0x28 (Inherited: 0x28)
struct UWeakpointDamageCondition : UDamageCondition {
};

// Class FSD.DirectDamageCondition
// Size: 0x30 (Inherited: 0x28)
struct UDirectDamageCondition : UDamageCondition {
	enum class EDirectDamageConditionEnum Type; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class FSD.ClipStatusDamageCondition
// Size: 0x30 (Inherited: 0x28)
struct UClipStatusDamageCondition : UDamageCondition {
	int32_t BulletAmount; // 0x28(0x04)
	bool CountBulletsLeft; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
};

// Class FSD.ItemTemperatureDamageCondition
// Size: 0x30 (Inherited: 0x28)
struct UItemTemperatureDamageCondition : UDamageCondition {
	int32_t HeatThreshold; // 0x28(0x04)
	bool MustBeUnderThreshold; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
};

// Class FSD.PlayerShieldsDamageCondition
// Size: 0x30 (Inherited: 0x28)
struct UPlayerShieldsDamageCondition : UDamageCondition {
	struct FFloatInterval ShieldPercentageRequired; // 0x28(0x08)
};

// Class FSD.PlayerHealthDamageCondition
// Size: 0x30 (Inherited: 0x28)
struct UPlayerHealthDamageCondition : UDamageCondition {
	struct FFloatInterval HealthPercentageRequired; // 0x28(0x08)
};

// Class FSD.CooldownDamageCondition
// Size: 0x30 (Inherited: 0x28)
struct UCooldownDamageCondition : UDamageCondition {
	float CoolDown; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class FSD.BoltActionWeaponDamageCondition
// Size: 0x30 (Inherited: 0x28)
struct UBoltActionWeaponDamageCondition : UDamageCondition {
	enum class EBoltActionWeaponConditions WeaponCondition; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class FSD.PlasmaCarbineDamageCondition
// Size: 0x30 (Inherited: 0x28)
struct UPlasmaCarbineDamageCondition : UDamageCondition {
	enum class EPlasmaCarbineConditions WeaponCondition; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	int32_t Condition; // 0x2c(0x04)
};

// Class FSD.MaterialDamageMultiplierCondition
// Size: 0x38 (Inherited: 0x28)
struct UMaterialDamageMultiplierCondition : UDamageCondition {
	struct FFloatInterval MultiplierRangeRequired; // 0x28(0x08)
	bool Invert; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class FSD.DamageFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UDamageFunctionLibrary : UBlueprintFunctionLibrary {

	bool IsCorrosiveDeath(struct UDamageClass* DamageClass, struct TArray<struct UDamageTag*> Tags); // Function FSD.DamageFunctionLibrary.IsCorrosiveDeath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x10b9410
};

// Class FSD.DamageModifier
// Size: 0x48 (Inherited: 0x30)
struct UDamageModifier : UDataAsset {
	struct UDamageCondition* Condition; // 0x30(0x08)
	struct TArray<struct FDamageModifierItem> Modifiers; // 0x38(0x10)
};

// Class FSD.DamageSettings
// Size: 0x140 (Inherited: 0x30)
struct UDamageSettings : UDataAsset {
	float TemperatureChangePerColdDamagePoint; // 0x30(0x04)
	float TemperatureChangePerIceDamagePoint; // 0x34(0x04)
	float TemperatureChangePerHeatDamagePoint; // 0x38(0x04)
	float TemperatureChangePerFireDamagePoint; // 0x3c(0x04)
	float TemperatureShockActivationWindow; // 0x40(0x04)
	float FrozenDamageBonus; // 0x44(0x04)
	struct UStatusEffect* EnemyOnFireStatusEffect; // 0x48(0x08)
	struct UStatusEffect* PlayerOnFireStatusEffect; // 0x50(0x08)
	struct UStatusEffect* TemperatureShockFromFrozenStatusEffect; // 0x58(0x08)
	struct UStatusEffect* TemperatureShockFromBurningStatusEffect; // 0x60(0x08)
	struct UDamageComponent* ArmorShatterDamage; // 0x68(0x08)
	struct UNiagaraSystem* ArmorShatterEmitter; // 0x70(0x08)
	struct USoundCue* ArmorShatterSound; // 0x78(0x08)
	struct TArray<struct FDecalData> ImpactDecals; // 0x80(0x10)
	struct FRuntimeFloatCurve ArmorToArmorDamageBreakingCurve; // 0x90(0x88)
	struct UDamageTag* DetonateFrozen; // 0x118(0x08)
	struct UDamageTag* DetonateOnFire; // 0x120(0x08)
	struct UDamageTag* DirectHit; // 0x128(0x08)
	struct UDamageTag* MeltTarget; // 0x130(0x08)
	struct UDamageTag* IgnoreBodypartDamageReduction; // 0x138(0x08)
};

// Class FSD.DamageSubsystem
// Size: 0x60 (Inherited: 0x30)
struct UDamageSubsystem : UGameInstanceSubsystem {
	struct TArray<struct FDamageSubsystemItem> Items; // 0x30(0x10)
	char pad_40[0x20]; // 0x40(0x20)
};

// Class FSD.DamageTag
// Size: 0x30 (Inherited: 0x30)
struct UDamageTag : UDataAsset {
};

// Class FSD.DanceSettings
// Size: 0x40 (Inherited: 0x30)
struct UDanceSettings : UDataAsset {
	struct TArray<struct FDanceItem> DanceMoves; // 0x30(0x10)
};

// Class FSD.DashPoints
// Size: 0x1d0 (Inherited: 0xb0)
struct UDashPoints : UActorComponent {
	struct FMulticastInlineDelegate OnStartDashEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnStopDashEvent; // 0xc0(0x10)
	char pad_D0[0xc]; // 0xd0(0x0c)
	struct FVector_NetQuantize DashLocation; // 0xdc(0x0c)
	char pad_E8[0x10]; // 0xe8(0x10)
	struct FRuntimeFloatCurve DashSpeedCurve; // 0xf8(0x88)
	char pad_180[0x18]; // 0x180(0x18)
	float PointOffset; // 0x198(0x04)
	float MaxRangeFromPlayer; // 0x19c(0x04)
	float MinRangeFromPlayer; // 0x1a0(0x04)
	float MinHeightAboveTarget; // 0x1a4(0x04)
	float MaxHeightAboveTarget; // 0x1a8(0x04)
	float safeReduction; // 0x1ac(0x04)
	float AcceptedDashradius; // 0x1b0(0x04)
	float DashSpeed; // 0x1b4(0x04)
	float SlowdownRadius; // 0x1b8(0x04)
	char pad_1BC[0xc]; // 0x1bc(0x0c)
	int32_t IgnoreTheClosestPoints; // 0x1c8(0x04)
	enum class EDashPointsGenerationMode GenerationMode; // 0x1cc(0x01)
	bool IsDashing; // 0x1cd(0x01)
	bool IgnoreRules; // 0x1ce(0x01)
	char pad_1CF[0x1]; // 0x1cf(0x01)

	void UpdateDashPointData(); // Function FSD.DashPoints.UpdateDashPointData // (Final|Native|Public|BlueprintCallable) // @ game+0x10b9600
	void StopDashing(); // Function FSD.DashPoints.StopDashing // (Final|Native|Public|BlueprintCallable) // @ game+0x10b95e0
	void StartDashing(); // Function FSD.DashPoints.StartDashing // (Final|Native|Public|BlueprintCallable) // @ game+0x10b95c0
	void OnRep_Dashing(); // Function FSD.DashPoints.OnRep_Dashing // (Final|Native|Public) // @ game+0x10b9580
	void OnParentDeath(struct UHealthComponentBase* Health); // Function FSD.DashPoints.OnParentDeath // (Final|Native|Protected) // @ game+0x10b9500
	struct FVector GetDashPoint(struct AActor* fromTarget, bool success); // Function FSD.DashPoints.GetDashPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10b9330
};

// Class FSD.DeadStateComponent
// Size: 0x108 (Inherited: 0x100)
struct UDeadStateComponent : UCharacterStateComponent {
	float respawnDelay; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)

	void SetDeathParameters(float respawnDelay, float effectDelay, struct UAnimMontage* deathMontage, struct UParticleSystem* deathEffect, bool useAnimationTimeAsRespawnTime); // Function FSD.DeadStateComponent.SetDeathParameters // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.DealWidget
// Size: 0x230 (Inherited: 0x230)
struct UDealWidget : UUserWidget {

	void UpdateDealText(); // Function FSD.DealWidget.UpdateDealText // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.FSDDebrisSettings
// Size: 0x68 (Inherited: 0x38)
struct UFSDDebrisSettings : UDeveloperSettings {
	struct FSoftObjectPath DefaultInfluencerDensityCurve; // 0x38(0x18)
	struct FSoftObjectPath DefaultInfluencerSizeCurve; // 0x50(0x18)
};

// Class FSD.CSGTriangleMapper
// Size: 0xd0 (Inherited: 0x30)
struct UCSGTriangleMapper : UDataAsset {
	bool Enabled; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UTerrainMaterial* AttachToMaterial; // 0x38(0x08)
	struct TArray<struct UTerrainType*> AttachToTypes; // 0x40(0x10)
	int32_t CellCategories; // 0x50(0x04)
	float DensityInM2; // 0x54(0x04)
	float MinVerticalAngle; // 0x58(0x04)
	float MaxVerticalAngle; // 0x5c(0x04)
	struct FVector ScaleMin; // 0x60(0x0c)
	struct FVector ScaleMax; // 0x6c(0x0c)
	float ScaleBias; // 0x78(0x04)
	bool IndependentScaleAxes; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
	struct FVector BaseNormal; // 0x80(0x0c)
	float SurfaceNormalFactor; // 0x8c(0x04)
	struct FVector SurfaceNormalLimiter; // 0x90(0x0c)
	float RandomNormalFactor; // 0x9c(0x04)
	float RotationMinAngle; // 0xa0(0x04)
	float RotationMaxAngle; // 0xa4(0x04)
	float PosOffset; // 0xa8(0x04)
	float PosOffsetSurface; // 0xac(0x04)
	struct TArray<struct FCellNoise> NoiseLayers; // 0xb0(0x10)
	struct FDebrisCellNoiseParameters CellNoiseParameters; // 0xc0(0x10)
};

// Class FSD.DebrisBase
// Size: 0x1f8 (Inherited: 0xd0)
struct UDebrisBase : UCSGTriangleMapper {
	struct UObject* CaveInfluencer; // 0xd0(0x08)
	struct FRuntimeFloatCurve InfluencerDensityCurve; // 0xd8(0x88)
	struct FRuntimeFloatCurve InfluencerSizeCurve; // 0x160(0x88)
	struct UCurveFloat* CaveInfluenceCurve; // 0x1e8(0x08)
	struct UCurveFloat* CaveInflunceSizeCurve; // 0x1f0(0x08)
};

// Class FSD.DebrisCarved
// Size: 0x250 (Inherited: 0x1f8)
struct UDebrisCarved : UDebrisBase {
	enum class EDebrisCarvedType carverType; // 0x1f8(0x01)
	char pad_1F9[0x7]; // 0x1f9(0x07)
	struct TArray<struct FUDebrisCarveMesh> Meshes; // 0x200(0x10)
	struct UTerrainMaterial* TerrainMaterial; // 0x210(0x08)
	struct FDebrisInfluence CaveInfluenceToAdd; // 0x218(0x10)
	enum class ECarveFilterType Filter; // 0x228(0x01)
	char pad_229[0x3]; // 0x229(0x03)
	float ExpensiveNoise; // 0x22c(0x04)
	enum class CarveOptionsCellSize CarveCellSize; // 0x230(0x01)
	char pad_231[0x3]; // 0x231(0x03)
	int32_t MinNumCarves; // 0x234(0x04)
	int32_t MaxNumCarves; // 0x238(0x04)
	float CarveOffsetRadius; // 0x23c(0x04)
	struct AActor* SpawnAttachClass; // 0x240(0x08)
	float AttachSpawnOffsetDistance; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
};

// Class FSD.DebrisActorComponent
// Size: 0x200 (Inherited: 0x1f0)
struct UDebrisActorComponent : USceneComponent {
	char pad_1F0[0x4]; // 0x1f0(0x04)
	bool Enabled; // 0x1f4(0x01)
	char pad_1F5[0xb]; // 0x1f5(0x0b)
};

// Class FSD.DebrisItemComponent
// Size: 0x230 (Inherited: 0x200)
struct UDebrisItemComponent : UDebrisActorComponent {
	struct UDebrisPositioning* Debris; // 0x1f8(0x08)
	struct TArray<struct FDebrisItemActorItem> Actors; // 0x200(0x10)
	enum class EDebrisItemPass ItemPass; // 0x210(0x01)
	float InfluenceRange; // 0x214(0x04)
	float MinDistanceToImportantLocations; // 0x218(0x04)
	bool UseAmount; // 0x21c(0x01)
	struct FIRandRange Amount; // 0x220(0x08)
	int32_t AmountSearchMultiplier; // 0x228(0x04)
	char pad_22E[0x2]; // 0x22e(0x02)
};

// Class FSD.DebrisDataComponent
// Size: 0x200 (Inherited: 0x200)
struct UDebrisDataComponent : UDebrisActorComponent {
	struct UDebrisBase* Debris; // 0x1f8(0x08)
};

// Class FSD.DebrisVeinComponent
// Size: 0x210 (Inherited: 0x200)
struct UDebrisVeinComponent : UDebrisActorComponent {
	struct UTerrainMaterial* Material; // 0x1f8(0x08)
	enum class EDebrisCarvedType carverType; // 0x200(0x01)
	struct UVeinResourceCreator* VeinCreator; // 0x208(0x08)
};

// Class FSD.DebrisPatchComponent
// Size: 0x210 (Inherited: 0x200)
struct UDebrisPatchComponent : UDebrisActorComponent {
	struct UTerrainMaterial* Material; // 0x1f8(0x08)
	struct UPatchResourceCreator* PatchCreator; // 0x200(0x08)
};

// Class FSD.InfluencerComponent
// Size: 0x310 (Inherited: 0x200)
struct UInfluencerComponent : UDebrisActorComponent {
	struct FRuntimeFloatCurve ProbabilityCurve; // 0x1f8(0x88)
	struct FRuntimeFloatCurve ScaleCurve; // 0x280(0x88)
};

// Class FSD.DebrisProbabilityComponent
// Size: 0x210 (Inherited: 0x200)
struct UDebrisProbabilityComponent : UDebrisActorComponent {
	struct FRandRange ProbabilityRange; // 0x1f8(0x08)
	bool IsProbabilityShared; // 0x200(0x01)
	char pad_209[0x7]; // 0x209(0x07)
};

// Class FSD.DebrisDataActor
// Size: 0x238 (Inherited: 0x220)
struct ADebrisDataActor : AActor {
	char pad_220[0x18]; // 0x220(0x18)
};

// Class FSD.DebrisInstances
// Size: 0x6e0 (Inherited: 0x620)
struct UDebrisInstances : UHierarchicalInstancedStaticMeshComponent {
	struct UDebrisBase* DebrisBase; // 0x618(0x08)
	int32_t DebrisIndex; // 0x624(0x04)
	char pad_62C[0xb4]; // 0x62c(0xb4)
};

// Class FSD.DebrisMesh
// Size: 0x258 (Inherited: 0x1f8)
struct UDebrisMesh : UDebrisBase {
	struct TArray<struct FDebrisStaticMesh> Meshes; // 0x1f8(0x10)
	struct UMaterialInterface* CommonMaterial; // 0x208(0x08)
	struct FText InGameName; // 0x210(0x18)
	struct FName GemTrackerName; // 0x228(0x08)
	struct FText InGameDescription; // 0x230(0x18)
	float StartCullDistance; // 0x248(0x04)
	float EndCullDistance; // 0x24c(0x04)
	char pad_250[0x8]; // 0x250(0x08)
};

// Class FSD.DebrisCellNoise
// Size: 0x58 (Inherited: 0x30)
struct UDebrisCellNoise : UDataAsset {
	int32_t Seed; // 0x30(0x04)
	struct FVector CellSize; // 0x34(0x0c)
	int32_t NumValues; // 0x40(0x04)
	struct FVector InvCellSize; // 0x44(0x0c)
	bool Initialized; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class FSD.DebrisPositioning
// Size: 0x1f8 (Inherited: 0x1f8)
struct UDebrisPositioning : UDebrisBase {
};

// Class FSD.DebrisSet
// Size: 0x40 (Inherited: 0x30)
struct UDebrisSet : UDataAsset {
	struct TArray<struct TSoftObjectPtr<struct UDebrisBase>> Debris; // 0x30(0x10)
};

// Class FSD.DebrisStaticCarved
// Size: 0x240 (Inherited: 0x1f8)
struct UDebrisStaticCarved : UDebrisBase {
	enum class EDebrisCarvedType carverType; // 0x1f8(0x01)
	char pad_1F9[0x7]; // 0x1f9(0x07)
	struct TArray<struct FUDebrisStaticCarveMesh> Meshes; // 0x200(0x10)
	struct UTerrainMaterial* TerrainMaterial; // 0x210(0x08)
	struct FDebrisInfluence CaveInfluenceToAdd; // 0x218(0x10)
	enum class ECarveFilterType Filter; // 0x228(0x01)
	char pad_229[0x3]; // 0x229(0x03)
	float CarveOffsetRadius; // 0x22c(0x04)
	struct AActor* SpawnAttachClass; // 0x230(0x08)
	float AttachSpawnOffsetDistance; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
};

// Class FSD.CustomItemPlacementHandling
// Size: 0x28 (Inherited: 0x28)
struct UCustomItemPlacementHandling : UInterface {
};

// Class FSD.InfluencerSpawnComponent
// Size: 0x200 (Inherited: 0x1f0)
struct UInfluencerSpawnComponent : USceneComponent {
	struct UCaveInfluencer* Influencer; // 0x1f0(0x08)
	float range; // 0x1f8(0x04)
	char pad_1FC[0x4]; // 0x1fc(0x04)
};

// Class FSD.DecalManager
// Size: 0xb0 (Inherited: 0xb0)
struct UDecalManager : UActorComponent {

	void SpawnDecal(struct FVector Location, struct FVector Normal, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.DecalManager.SpawnDecal // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10bf650
};

// Class FSD.DeepCSGWorld
// Size: 0x810 (Inherited: 0x220)
struct ADeepCSGWorld : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct UTerrainMaterial* DebugCarveInsideTerrainMaterial; // 0x228(0x08)
	struct UTerrainMaterial* DebugCarveOutsizeTerrainMaterial; // 0x230(0x08)
	struct UTerrainMaterial* DebugCarveEdgeTerrainMaterial; // 0x238(0x08)
	struct UTerrainMaterial* GoldTerrainMaterial; // 0x240(0x08)
	struct UTerrainMaterial* MOMTerrrainMaterial; // 0x248(0x08)
	struct UTerrainMaterial* NitraTerrrainMaterial; // 0x250(0x08)
	struct UTerrainMaterial* EmptyTerrainMaterial; // 0x258(0x08)
	struct UTerrainMaterial* DefaultBurntTerrainMaterial; // 0x260(0x08)
	struct UTerrainMaterial* DefaultHardRockMaterial; // 0x268(0x08)
	struct UTerrainMaterial* DefaultBedRockMaterial; // 0x270(0x08)
	struct UTerrainType* GoldTerrainType; // 0x278(0x08)
	struct UTerrainType* MOMTerrainType; // 0x280(0x08)
	struct UTerrainType* RockTerrainType; // 0x288(0x08)
	struct UTerrainType* CrystalTerrainType; // 0x290(0x08)
	struct UTerrainType* EmptyTerrainType; // 0x298(0x08)
	struct UTerrainType* DirtTerrainType; // 0x2a0(0x08)
	struct UTerrainType* DefaultBurntTerrainType; // 0x2a8(0x08)
	struct UTerrainMaterialsCollection* TerrainMaterials; // 0x2b0(0x08)
	struct TArray<struct UDebrisSet*> StandardDebrisSets; // 0x2b8(0x10)
	struct TArray<struct UDebrisBase*> AddedDebris; // 0x2c8(0x10)
	struct TArray<struct UDebrisBase*> DebrisLevelGenerationCarved; // 0x2d8(0x10)
	struct TArray<struct UDebrisBase*> DebrisLargeCarved; // 0x2e8(0x10)
	struct TArray<struct UDebrisBase*> DebrisSmallCarved; // 0x2f8(0x10)
	struct TArray<struct UDebrisBase*> DebrisMeshes; // 0x308(0x10)
	struct UMaterialInterface* DefaultScannerMaterial; // 0x318(0x08)
	struct ADebrisDataActor* DebrisActorInstance; // 0x320(0x08)
	int32_t DebrisActorIndex; // 0x328(0x04)
	char pad_32C[0x4]; // 0x32c(0x04)
	struct AProceduralSetup* ProceduralSetup; // 0x330(0x08)
	struct TArray<struct UObject*> TerrainMaterialAssets; // 0x338(0x10)
	char pad_348[0x38]; // 0x348(0x38)
	struct UAsyncPathRequests* AsyncPathRequests; // 0x380(0x08)
	struct FMulticastInlineDelegate OnBaseLayerCommitDone; // 0x388(0x10)
	struct FMulticastInlineDelegate OnBaseLayerFinalCommitDone; // 0x398(0x10)
	struct TArray<struct AActor*> TerrainAttachedActors; // 0x3a8(0x10)
	struct TArray<struct TWeakObjectPtr<struct UObject>> TerrainListeners; // 0x3b8(0x10)
	struct TArray<struct UDebrisBase*> RegisteredDebrisList; // 0x3c8(0x10)
	struct TArray<struct FDebrisWhenCarving> DebrisWhenCarvingList; // 0x3d8(0x10)
	struct TArray<struct UDebrisInstances*> DebrisInstanceList; // 0x3e8(0x10)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> ShowAlwaysScannerComponents; // 0x3f8(0x10)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> FogOfWarScannerComponents; // 0x408(0x10)
	struct TArray<struct UDebrisBase*> DebrisHandles; // 0x418(0x10)
	char pad_428[0x2c0]; // 0x428(0x2c0)
	struct FTerrainLateJoinData LateJoinData; // 0x6e8(0xa8)
	struct TArray<struct FEncodedChunkId> visibleChunks; // 0x790(0x10)
	char pad_7A0[0x70]; // 0x7a0(0x70)

	void UnRegisterScannerComponent(struct UPrimitiveComponent* Component); // Function FSD.DeepCSGWorld.UnRegisterScannerComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x10bfc60
	void TerrainOp_RemoveFloating(struct FRemoveFloatingIslandOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_RemoveFloating // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10bfbe0
	void TerrainOp_PickAxe(struct FPickaxeDigOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_PickAxe // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10bfb60
	void TerrainOp_Melt(struct FMeltOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_Melt // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10bfac0
	void TerrainOp_Explode(struct FGrenadeExplodeOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_Explode // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10bfa30
	void TerrainOp_Drill(struct FDrillOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_Drill // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10bf9b0
	void TerrainOp_CarveSTLMesh(struct FCarveWithSTLMeshOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_CarveSTLMesh // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10bf850
	void TerrainOp_CarveSplineSegment(struct FSplineSegmentCarveOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_CarveSplineSegment // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10bf910
	void TerrainOp_CarveCollider(struct FCarveWithColliderOperationData Data); // Function FSD.DeepCSGWorld.TerrainOp_CarveCollider // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10bf790
	void TerrainMaterialDataLoaded(); // Function FSD.DeepCSGWorld.TerrainMaterialDataLoaded // (Final|Native|Protected) // @ game+0x10bf770
	void SetVisibleToScanner(struct FVector Center, struct FVector range); // Function FSD.DeepCSGWorld.SetVisibleToScanner // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10bf570
	void SelectDebrisSettings(); // Function FSD.DeepCSGWorld.SelectDebrisSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x10bf550
	void ResetEntireWorld(); // Function FSD.DeepCSGWorld.ResetEntireWorld // (Final|Native|Public|BlueprintCallable) // @ game+0x10bf530
	void RemoveDebrisInstance_TerrainOp2(int32_t instance, int32_t Component); // Function FSD.DeepCSGWorld.RemoveDebrisInstance_TerrainOp2 // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10bf470
	void RemoveDebrisInSphere(struct FVector Position, float Radius, bool onlyFragile, bool alsoDurable); // Function FSD.DeepCSGWorld.RemoveDebrisInSphere // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10bf300
	void RegisterScannerComponent(struct UPrimitiveComponent* Component, bool useFogOfWar); // Function FSD.DeepCSGWorld.RegisterScannerComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x10bf230
	bool Raycast(struct FVector Start, struct FVector Direction, float MaxDistance, struct FCSGRaycastHitInfo HitInfo, enum class ELandscapeCellFilter Filter); // Function FSD.DeepCSGWorld.Raycast // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10bf070
	bool Linecast(struct FVector Start, struct FVector End, struct FCSGRaycastHitInfo HitInfo, enum class ELandscapeCellFilter Filter); // Function FSD.DeepCSGWorld.Linecast // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10beed0
	bool IsPositionVisibleToScanner(struct FVector Pos); // Function FSD.DeepCSGWorld.IsPositionVisibleToScanner // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10bee30
	bool IsPointInsideTerrain(struct FVector Pos); // Function FSD.DeepCSGWorld.IsPointInsideTerrain // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10bed90
	bool IsComponentRegisteredWithScanner(struct UPrimitiveComponent* Component); // Function FSD.DeepCSGWorld.IsComponentRegisteredWithScanner // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10bed00
	int32_t GetTerrainHash(); // Function FSD.DeepCSGWorld.GetTerrainHash // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10becd0
	int32_t GetShadowQuality(); // Function FSD.DeepCSGWorld.GetShadowQuality // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10beca0
	struct ADebrisDataActor* GetDebrisDataActor(); // Function FSD.DeepCSGWorld.GetDebrisDataActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10bec70
	void GetAllTerrainActorsAroundPoint(struct FVector Center, struct FVector range, struct TArray<struct AActor*> TerrainActors); // Function FSD.DeepCSGWorld.GetAllTerrainActorsAroundPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10beb10
	void GenerateAllMeshes(); // Function FSD.DeepCSGWorld.GenerateAllMeshes // (Final|Native|Public|BlueprintCallable) // @ game+0x10beaf0
	void FinishGeneration_Blocking(); // Function FSD.DeepCSGWorld.FinishGeneration_Blocking // (Final|Native|Public|BlueprintCallable) // @ game+0x10bead0
	float FindTotalVolumeOfMaterialInWorld(struct UTerrainMaterial* Material); // Function FSD.DeepCSGWorld.FindTotalVolumeOfMaterialInWorld // (Final|Native|Public|BlueprintCallable) // @ game+0x10bea30
	void CarveWithSTLMeshUsingTransform_Wait(struct ADeepCSGWorld* CSGWorld, struct USTLMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FTransform Transform, enum class EPreciousMaterialOptions Precious, struct FLatentActionInfo LatentInfo); // Function FSD.DeepCSGWorld.CarveWithSTLMeshUsingTransform_Wait // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10bda90
	void CarveWithSTLMeshUsingTransform(struct USTLMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FTransform Transform, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithSTLMeshUsingTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10bd8a0
	void CarveWithSTLMesh_Wait(struct ADeepCSGWorld* CSGWorld, struct USTLMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FVector Pos, struct FQuat Orientation, struct FVector Scale, enum class EPreciousMaterialOptions Precious, struct FLatentActionInfo LatentInfo); // Function FSD.DeepCSGWorld.CarveWithSTLMesh_Wait // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x10bdd00
	void CarveWithSTLMesh(struct USTLMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FVector Pos, struct FQuat Orientation, struct FVector Scale, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithSTLMesh // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10bd680
	void CarveWithStaticMeshUsingTransform_Wait(struct ADeepCSGWorld* CSGWorld, struct UStaticMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FTransform Transform, enum class EPreciousMaterialOptions Precious, struct FLatentActionInfo LatentInfo); // Function FSD.DeepCSGWorld.CarveWithStaticMeshUsingTransform_Wait // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10be7c0
	void CarveWithStaticMeshUsingTransform(struct UStaticMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FTransform Transform, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithStaticMeshUsingTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10be5d0
	void CarveWithStaticMesh(struct UStaticMeshCarver* MeshCarver, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FVector Pos, struct FQuat Orientation, struct FVector Scale, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithStaticMesh // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10be3b0
	void CarveWithSplineSegments(struct TArray<struct FCarveSplineSegment> Segments, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithSplineSegments // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x10be240
	void CarveWithSplineSegment(struct FVector SplineStart, struct FVector SplineStartTangent, struct FVector SplineEnd, struct FVector SplineEndTangent, float Radius, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithSplineSegment // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10bdfb0
	void CarveWithMeshUsingTransform_Wait(struct ADeepCSGWorld* CSGWorld, struct UStaticMesh* StaticMesh, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FTransform Transform, float ExpensiveNoise, enum class EPreciousMaterialOptions Precious, struct FLatentActionInfo LatentInfo); // Function FSD.DeepCSGWorld.CarveWithMeshUsingTransform_Wait // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10bd160
	void CarveWithMeshUsingTransform(struct UStaticMesh* StaticMesh, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FTransform Transform, float ExpensiveNoise, enum class EPreciousMaterialOptions Precious, enum class CarveOptionsCellSize CarverSize); // Function FSD.DeepCSGWorld.CarveWithMeshUsingTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10bcf00
	void CarveWithMesh_Wait(struct ADeepCSGWorld* CSGWorld, struct UStaticMesh* StaticMesh, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FVector Pos, struct FQuat Orientation, struct FVector Scale, struct FLatentActionInfo LatentInfo); // Function FSD.DeepCSGWorld.CarveWithMesh_Wait // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x10bd410
	void CarveWithMesh(struct UStaticMesh* StaticMesh, struct UTerrainMaterial* Material, enum class ECarveFilterType CarveFilter, struct FVector Pos, struct FQuat Orientation, struct FVector Scale, enum class EPreciousMaterialOptions Precious); // Function FSD.DeepCSGWorld.CarveWithMesh // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10bcce0
	float CalcApproximateTerrainDensity(struct FVector Pos, float Radius); // Function FSD.DeepCSGWorld.CalcApproximateTerrainDensity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10bcc00
	void BaseLayerCommitFinal(bool blocking); // Function FSD.DeepCSGWorld.BaseLayerCommitFinal // (Final|Native|Public|BlueprintCallable) // @ game+0x10bcb70
	void BaseLayerCommit(bool blocking, bool scheduleTesselation); // Function FSD.DeepCSGWorld.BaseLayerCommit // (Final|Native|Public|BlueprintCallable) // @ game+0x10bcaa0
	void AttachActorToTerrain(struct AActor* Actor, struct FVector Pos); // Function FSD.DeepCSGWorld.AttachActorToTerrain // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10bc9d0
	void ApplyBaseDebrisCarvers(struct TArray<struct UDebrisBase*> Carvers); // Function FSD.DeepCSGWorld.ApplyBaseDebrisCarvers // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x10bc920
};

// Class FSD.SavableDataAsset
// Size: 0x58 (Inherited: 0x30)
struct USavableDataAsset : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	bool EnableDangerousSaveGameIDEditing; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FGuid SaveGameID; // 0x3c(0x10)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct UBuildRestriction* BuildRestriction; // 0x50(0x08)

	struct FGuid GetSavegameID(); // Function FSD.SavableDataAsset.GetSavegameID // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c07d0
};

// Class FSD.DeepDiveTemplate
// Size: 0xc0 (Inherited: 0x58)
struct UDeepDiveTemplate : USavableDataAsset {
	struct TArray<struct UDifficultySetting*> Difficulties; // 0x58(0x10)
	struct TArray<struct FDeepDiveTemplateItem> missions; // 0x68(0x10)
	struct TArray<enum class ESchematicType> Rewards; // 0x78(0x10)
	int32_t CreditsPerPrimaryObjective; // 0x88(0x04)
	int32_t CreditsPerSecondaryObjective; // 0x8c(0x04)
	int32_t XPPerPrimaryObjective; // 0x90(0x04)
	int32_t XPPerSecondaryObjective; // 0x94(0x04)
	float HazardBonus; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FRandInterval MutatorCount; // 0xa0(0x10)
	struct FRandInterval WarningCount; // 0xb0(0x10)

	enum class ESchematicType GetStageRewardType(int32_t stageIndex); // Function FSD.DeepDiveTemplate.GetStageRewardType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c4b00
};

// Class FSD.DeepDiveSettings
// Size: 0x98 (Inherited: 0x30)
struct UDeepDiveSettings : UDataAsset {
	struct UDeepDiveTemplate* NormalTemplate; // 0x30(0x08)
	struct UDeepDiveTemplate* HardTemplate; // 0x38(0x08)
	struct TArray<struct UMutator*> BaseMutators; // 0x40(0x10)
	struct TArray<struct UMissionMutator*> Mutators; // 0x50(0x10)
	struct TArray<struct UMissionWarning*> Warnings; // 0x60(0x10)
	struct TArray<struct UDialogDataAsset*> DeepDiveMissionCompleteShouts; // 0x70(0x10)
	struct TArray<struct FDeepDiveLoaderSequence> LoaderSequnces; // 0x80(0x10)
	struct UMissionNameBank* DeepDiveNameBank; // 0x90(0x08)
};

// Class FSD.DeepDiveFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UDeepDiveFunctionLibrary : UBlueprintFunctionLibrary {

	bool IsDeepDiveElite(struct UObject* WorldContextObject, struct UDeepDive* DeepDive); // Function FSD.DeepDiveFunctionLibrary.IsDeepDiveElite // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10c4c80
	bool GetHasEverCompletedDeepDive(struct UObject* WorldContextObject, struct UDeepDiveTemplate* DeepDive); // Function FSD.DeepDiveFunctionLibrary.GetHasEverCompletedDeepDive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10c4420
};

// Class FSD.DeepDiveManager
// Size: 0x1d8 (Inherited: 0x28)
struct UDeepDiveManager : UObject {
	struct FMulticastInlineDelegate OnDeepDivesRefresh; // 0x28(0x10)
	struct UDeepDive* ActiveNormalDeepDive; // 0x38(0x08)
	struct UDeepDive* ActiveHardDeepDive; // 0x40(0x08)
	struct UDeepDive* ActiveDeepDive; // 0x48(0x08)
	struct UGeneratedMission* CurrentMission; // 0x50(0x08)
	char pad_58[0x4]; // 0x58(0x04)
	float currentDepth; // 0x5c(0x04)
	struct TMap<int32_t, struct FDeepDiveBank> DeepDiveBank; // 0x60(0x50)
	int32_t NumFailedRequests; // 0xb0(0x04)
	int32_t BackendDataValid; // 0xb4(0x04)
	int32_t BackendSeed; // 0xb8(0x04)
	bool LockSeed; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	struct FDateTime BackendExpirationTime; // 0xc0(0x08)
	struct FDateTime LastRequestTime; // 0xc8(0x08)
	char pad_D0[0x108]; // 0xd0(0x108)

	void StartDeepDive(struct UDeepDive* DeepDive); // Function FSD.DeepDiveManager.StartDeepDive // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10c5a80
	void ReInitialize(); // Function FSD.DeepDiveManager.ReInitialize // (Final|Native|Public|BlueprintCallable) // @ game+0x10c5640
	void MarkGivenRewards(); // Function FSD.DeepDiveManager.MarkGivenRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x10c4e20
	bool IsEliteDeepDive(struct UGeneratedMission* mission); // Function FSD.DeepDiveManager.IsEliteDeepDive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c4d40
	struct UDeepDive* GetDeepDiveFromMission(struct UGeneratedMission* mission); // Function FSD.DeepDiveManager.GetDeepDiveFromMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c42f0
	struct UGeneratedMission* GetCurrentSingleMission(); // Function FSD.DeepDiveManager.GetCurrentSingleMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c42c0
	int32_t GetCurrentDeepDiveStage(); // Function FSD.DeepDiveManager.GetCurrentDeepDiveStage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c4270
	struct UDeepDive* GetActiveNormalDeepDive(); // Function FSD.DeepDiveManager.GetActiveNormalDeepDive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c4250
	struct UDeepDive* GetActiveHardDeepDive(); // Function FSD.DeepDiveManager.GetActiveHardDeepDive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c4230
	struct UDeepDive* GetActiveDeepDive(); // Function FSD.DeepDiveManager.GetActiveDeepDive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c4210
	void DeepDiveRefreshDelegate__DelegateSignature(); // DelegateFunction FSD.DeepDiveManager.DeepDiveRefreshDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool CompleteCurrentSingleMission(); // Function FSD.DeepDiveManager.CompleteCurrentSingleMission // (Final|Native|Public|BlueprintCallable) // @ game+0x10c36e0
	bool AreAllSelectedClassesQualified(); // Function FSD.DeepDiveManager.AreAllSelectedClassesQualified // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c34d0
};

// Class FSD.DeepDive
// Size: 0x98 (Inherited: 0x28)
struct UDeepDive : UObject {
	struct TArray<struct UGeneratedMission*> missions; // 0x28(0x10)
	struct UBiome* Biome; // 0x38(0x08)
	struct TArray<struct FDeepDiveRewardItem> GivenRewards; // 0x40(0x10)
	int32_t MissionsCompleted; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct TArray<int32_t> StagesCompleted; // 0x58(0x10)
	int32_t CurrentMissionIndex; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct UDeepDiveTemplate* Template; // 0x70(0x08)
	struct FText DeepDiveName; // 0x78(0x18)
	int32_t BestTime; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)

	bool IsCompleted(); // Function FSD.DeepDive.IsCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c4c50
	bool HasCompletedStage(int32_t stageIndex); // Function FSD.DeepDive.HasCompletedStage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c4bc0
	struct FDeepDiveRewardItem GetGivenRewardAtStage(int32_t stageIndex); // Function FSD.DeepDive.GetGivenRewardAtStage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10c4380
};

// Class FSD.AsyncPathRequestsInterface
// Size: 0x28 (Inherited: 0x28)
struct UAsyncPathRequestsInterface : UInterface {
};

// Class FSD.AsyncPathRequests
// Size: 0xc8 (Inherited: 0xb0)
struct UAsyncPathRequests : UActorComponent {
	struct TArray<struct TWeakObjectPtr<struct UObject>> RequestListeners; // 0xb0(0x10)
	char pad_C0[0x8]; // 0xc0(0x08)
};

// Class FSD.DeepPathfinderSceneComponent
// Size: 0x200 (Inherited: 0x1f0)
struct UDeepPathfinderSceneComponent : USceneComponent {
	char pad_1F0[0x10]; // 0x1f0(0x10)
};

// Class FSD.FlyingEnemyDeepPathfinderCharacter
// Size: 0x3d0 (Inherited: 0x3a0)
struct AFlyingEnemyDeepPathfinderCharacter : AEnemyDeepPathfinderCharacter {
	char pad_3A0[0x10]; // 0x3a0(0x10)
	struct UPhysicalMaterial* FrozenMaterial; // 0x3b0(0x08)
	struct UPhysicsAsset* FrozenAsset; // 0x3b8(0x08)
	struct USoundCue* FrozenDeathSound; // 0x3c0(0x08)
	struct UParticleSystem* FrozenDeathparticles; // 0x3c8(0x08)

	void TriggerFrozenRagdoll(); // Function FSD.FlyingEnemyDeepPathfinderCharacter.TriggerFrozenRagdoll // (Native|Protected) // @ game+0x1090b80
	void OnFreezeImpact(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.FlyingEnemyDeepPathfinderCharacter.OnFreezeImpact // (Native|Public|HasOutParms|HasDefaults) // @ game+0x10c4e40
	void BP_FreezeImpact(); // Function FSD.FlyingEnemyDeepPathfinderCharacter.BP_FreezeImpact // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.FrozenPawnImpactComponent
// Size: 0x100 (Inherited: 0xb0)
struct UFrozenPawnImpactComponent : UActorComponent {
	struct FMulticastInlineDelegate OnStartFallingEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnFreezeImpactEvent; // 0xc0(0x10)
	char pad_D0[0x10]; // 0xd0(0x10)
	struct UPhysicalMaterial* FrozenMaterial; // 0xe0(0x08)
	struct UPhysicsAsset* FrozenAsset; // 0xe8(0x08)
	struct USoundCue* FrozenDeathSound; // 0xf0(0x08)
	struct UParticleSystem* FrozenDeathparticles; // 0xf8(0x08)

	void TriggerFrozenRagdoll(); // Function FSD.FrozenPawnImpactComponent.TriggerFrozenRagdoll // (Native|Protected) // @ game+0x109fdd0
	void OnFrozen(bool frozen); // Function FSD.FrozenPawnImpactComponent.OnFrozen // (Final|Native|Protected) // @ game+0x10c51e0
	void OnFreezeImpact(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.FrozenPawnImpactComponent.OnFreezeImpact // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x10c5010
};

// Class FSD.DeepPathfinderMovement
// Size: 0x428 (Inherited: 0x138)
struct UDeepPathfinderMovement : UPawnMovementComponent {
	char pad_138[0x8]; // 0x138(0x08)
	bool UseDormancy; // 0x140(0x01)
	char pad_141[0x3]; // 0x141(0x03)
	float MaxPawnSpeed; // 0x144(0x04)
	float StrafeSpeed; // 0x148(0x04)
	float MinSlowdownAngle; // 0x14c(0x04)
	float MaxSlowdownAngle; // 0x150(0x04)
	float MaxStrafeDistance; // 0x154(0x04)
	float AlignDirectionSpeed; // 0x158(0x04)
	float FleeSpeedBoostMultiplier; // 0x15c(0x04)
	float MaxAcceleration; // 0x160(0x04)
	float MaxBrakingDeceleration; // 0x164(0x04)
	float AngleSpeedFilterFactor; // 0x168(0x04)
	uint32_t AIAvoidanceWeight; // 0x16c(0x04)
	enum class DeepPathFinderType PathfinderType; // 0x170(0x01)
	enum class DeepPathFinderSize PathfinderSize; // 0x171(0x01)
	enum class ETeleportType MovementPhysicsType; // 0x172(0x01)
	enum class DeepPathFinderPreference PathfinderPreference; // 0x173(0x01)
	bool AlignTowardsTargetIfStationary; // 0x174(0x01)
	char pad_175[0x3]; // 0x175(0x03)
	float AlignToTargetMinRequiredAngle; // 0x178(0x04)
	bool AllowSlowTickRateWhenNotVisible; // 0x17c(0x01)
	bool ForceAPathIfNoneFound; // 0x17d(0x01)
	bool DrawServerPath; // 0x17e(0x01)
	char pad_17F[0x1]; // 0x17f(0x01)
	struct FMulticastInlineDelegate OnPathBegin; // 0x180(0x10)
	struct FMulticastInlineDelegate OnPauseMovementElapsed; // 0x190(0x10)
	struct FMulticastInlineDelegate OnPathFinished; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnRefreshDestination; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnStateChanged; // 0x1c0(0x10)
	char pad_1D0[0x28]; // 0x1d0(0x28)
	struct ADeepCSGWorld* CSGWorld; // 0x1f8(0x08)
	uint32_t PathMovedDist; // 0x200(0x04)
	uint32_t LocalPathMovedDist; // 0x204(0x04)
	struct FDeepRepPath Path; // 0x208(0xd0)
	struct UFakeMoverSettings* MoveSettings; // 0x2d8(0x08)
	struct AActor* TargetActor; // 0x2e0(0x08)
	int32_t CurrentPathIndex; // 0x2e8(0x04)
	float CurrentPathFraction; // 0x2ec(0x04)
	struct FVector Destination; // 0x2f0(0x0c)
	char pad_2FC[0x4]; // 0x2fc(0x04)
	struct AActor* DestinationActor; // 0x300(0x08)
	float AcceptanceRadius; // 0x308(0x04)
	bool OnlyPartPath; // 0x30c(0x01)
	char pad_30D[0x3]; // 0x30d(0x03)
	float PauseMovementTime; // 0x310(0x04)
	enum class EDeepMovementMode MoveMode; // 0x314(0x01)
	char pad_315[0x3]; // 0x315(0x03)
	struct UPawnStatsComponent* PawnStats; // 0x318(0x08)
	char pad_320[0xc]; // 0x320(0x0c)
	struct FVector LastForwardDir; // 0x32c(0x0c)
	float VerticalAngleSpeed; // 0x338(0x04)
	float HorizontalAngleSpeed; // 0x33c(0x04)
	bool IsStrafing; // 0x340(0x01)
	bool HasOustandingPathRequest; // 0x341(0x01)
	bool LastPathReachedPreciseDestination; // 0x342(0x01)
	char pad_343[0x25]; // 0x343(0x25)
	float PostponedTickTime; // 0x368(0x04)
	bool LastMoveSuccessful; // 0x36c(0x01)
	bool HandleRotation; // 0x36d(0x01)
	bool TickAfterOwnerDeath; // 0x36e(0x01)
	struct FHandleRotationOptions HandleRotationOptions; // 0x36f(0x01)
	char pad_370[0x18]; // 0x370(0x18)
	struct FVector UnfilteredPosition; // 0x388(0x0c)
	struct FVector LastDestPosUsed; // 0x394(0x0c)
	float DampOmega; // 0x3a0(0x04)
	bool UseMovementSpring; // 0x3a4(0x01)
	bool SnapToPathfinderOnFirstMove; // 0x3a5(0x01)
	char pad_3A6[0x2]; // 0x3a6(0x02)
	struct FFakeMoverState FakePhysicsMove; // 0x3a8(0x60)
	float FakeSyncTime; // 0x408(0x04)
	char pad_40C[0x1c]; // 0x40c(0x1c)

	void UpdateTargetActor(struct AActor* NewTarget); // Function FSD.DeepPathfinderMovement.UpdateTargetActor // (Final|Native|Public|BlueprintCallable) // @ game+0x10c60a0
	void UpdateDestination(struct FVector Dest); // Function FSD.DeepPathfinderMovement.UpdateDestination // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c6010
	void UnPauseMovement(); // Function FSD.DeepPathfinderMovement.UnPauseMovement // (Final|Native|Public|BlueprintCallable) // @ game+0x10c5ff0
	void TeleportTo(struct FVector destLoc, struct FRotator destRot); // Function FSD.DeepPathfinderMovement.TeleportTo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c5ee0
	void StopMove(); // Function FSD.DeepPathfinderMovement.StopMove // (Final|Native|Public|BlueprintCallable) // @ game+0x10c5ec0
	void StopAttackStance(); // Function FSD.DeepPathfinderMovement.StopAttackStance // (Final|Native|Public|BlueprintCallable) // @ game+0x10c5ea0
	bool StartMoveToActor(struct AActor* Dest, float AcceptanceRadius); // Function FSD.DeepPathfinderMovement.StartMoveToActor // (Final|Native|Public|BlueprintCallable) // @ game+0x10c5dd0
	bool StartMoveTo(struct FVector Dest, float AcceptanceRadius); // Function FSD.DeepPathfinderMovement.StartMoveTo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c5cf0
	bool StartFleeFrom(struct FVector dangerPos, float Distance); // Function FSD.DeepPathfinderMovement.StartFleeFrom // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c5c10
	void StartFakePhysicsMoveSet(struct UFakeMoverSettings* MoveSettings); // Function FSD.DeepPathfinderMovement.StartFakePhysicsMoveSet // (Final|Native|Public|BlueprintCallable) // @ game+0x10c5b90
	void StartFakePhysics(struct FVector Vel); // Function FSD.DeepPathfinderMovement.StartFakePhysics // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c5b00
	void StartAttackStance(struct FVector stancePos); // Function FSD.DeepPathfinderMovement.StartAttackStance // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c59f0
	void SnapToPathfinder(); // Function FSD.DeepPathfinderMovement.SnapToPathfinder // (Final|Native|Public|BlueprintCallable) // @ game+0x10c59d0
	void SetSlowDownAngles(float Min, float Max); // Function FSD.DeepPathfinderMovement.SetSlowDownAngles // (Final|Native|Public|BlueprintCallable) // @ game+0x10c5910
	void SetMaxSpeed(float Speed); // Function FSD.DeepPathfinderMovement.SetMaxSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x10c5890
	void SetHandleRotation(bool flag); // Function FSD.DeepPathfinderMovement.SetHandleRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x10c5780
	void SetFreezeAlignment(bool Freeze); // Function FSD.DeepPathfinderMovement.SetFreezeAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x10c56f0
	void SetControlledExternally(bool controlled); // Function FSD.DeepPathfinderMovement.SetControlledExternally // (Final|Native|Public|BlueprintCallable) // @ game+0x10c5660
	void PauseMovement(float Time); // Function FSD.DeepPathfinderMovement.PauseMovement // (Final|Native|Public|BlueprintCallable) // @ game+0x10c55c0
	bool PathExistTo(struct FVector Dest); // Function FSD.DeepPathfinderMovement.PathExistTo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c5420
	bool PathExistsBetween(struct FVector From, struct FVector to); // Function FSD.DeepPathfinderMovement.PathExistsBetween // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c54c0
	void OnRep_PathMovedDist(uint32_t lastPathMovedDist); // Function FSD.DeepPathfinderMovement.OnRep_PathMovedDist // (Final|Native|Private) // @ game+0x10c5380
	void OnRep_Path(struct FDeepRepPath oldPath); // Function FSD.DeepPathfinderMovement.OnRep_Path // (Final|Native|Private|HasOutParms) // @ game+0x10c5290
	void OnRep_MoveSettings(struct UFakeMoverSettings* MoveSettings); // Function FSD.DeepPathfinderMovement.OnRep_MoveSettings // (Final|Native|Private) // @ game+0x10b53d0
	bool IsFreezeAlignmentSet(); // Function FSD.DeepPathfinderMovement.IsFreezeAlignmentSet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c4dd0
	float GetVerticalAngleSpeed(); // Function FSD.DeepPathfinderMovement.GetVerticalAngleSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x10c4b90
	void GetRandomSpawnPointAtApproximateDistance_Async(struct FVector Origin, float Distance, bool success, struct FVector outPos, struct FLatentActionInfo LatentInfo); // Function FSD.DeepPathfinderMovement.GetRandomSpawnPointAtApproximateDistance_Async // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c4920
	void GetRandomReachablePointAtApproximateDistance_Async(struct FVector Origin, float Distance, bool success, struct FVector outPos, struct FLatentActionInfo LatentInfo); // Function FSD.DeepPathfinderMovement.GetRandomReachablePointAtApproximateDistance_Async // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c4740
	bool GetRandomReachablePointAtApproximateDistance(struct FVector Origin, float Distance, struct FVector outPos); // Function FSD.DeepPathfinderMovement.GetRandomReachablePointAtApproximateDistance // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c4610
	struct FVector GetPathForwardDirection(); // Function FSD.DeepPathfinderMovement.GetPathForwardDirection // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10c4570
	enum class DeepPathFinderType GetPathfinderType(); // Function FSD.DeepPathfinderMovement.GetPathfinderType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c45e0
	enum class DeepPathFinderSize GetPathfinderSize(); // Function FSD.DeepPathfinderMovement.GetPathfinderSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c45b0
	enum class EDeepMovementState GetMovementState(); // Function FSD.DeepPathfinderMovement.GetMovementState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c4540
	bool GetIsStrafing(); // Function FSD.DeepPathfinderMovement.GetIsStrafing // (Final|Native|Public|BlueprintCallable) // @ game+0x10c4510
	float GetHorizontalAngleSpeed(); // Function FSD.DeepPathfinderMovement.GetHorizontalAngleSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x10c44e0
	struct UFakeMoverSettings* GetCurrentFakePhysicsMoveSet(); // Function FSD.DeepPathfinderMovement.GetCurrentFakePhysicsMoveSet // (Final|Native|Public|BlueprintCallable) // @ game+0x10c42a0
	bool FlyToConnectedPosition(struct FVector destPos); // Function FSD.DeepPathfinderMovement.FlyToConnectedPosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c4170
	bool FindPointKeepingDistance(struct FVector Origin, float MinDistance, float MaxDistance, struct FVector Target, float idealTargetDistance, struct FVector outPos); // Function FSD.DeepPathfinderMovement.FindPointKeepingDistance // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c3f50
	struct FVector FindPathfinderPointBelow(struct FVector Pos, float HeightOffset); // Function FSD.DeepPathfinderMovement.FindPathfinderPointBelow // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c3e60
	struct FVector FindPathfinderPointAbove(struct FVector Pos, float HeightOffset); // Function FSD.DeepPathfinderMovement.FindPathfinderPointAbove // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c3d70
	struct FVector FindPathfinderOffsetPoint(struct FVector Pos, enum class EOffsetFrom offsetFrom, float HeightOffset); // Function FSD.DeepPathfinderMovement.FindPathfinderOffsetPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c3c20
	struct FVector FindNearestPathfinderPointOverrideType(struct FVector Pos, enum class DeepPathFinderType overrideType, float MaxDistance); // Function FSD.DeepPathfinderMovement.FindNearestPathfinderPointOverrideType // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c38f0
	void FindNearestPathfinderPoint_Async(struct FVector Pos, float MaxDistance, bool success, struct FVector outPos, struct FLatentActionInfo LatentInfo); // Function FSD.DeepPathfinderMovement.FindNearestPathfinderPoint_Async // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c3a40
	struct FVector FindNearestPathfinderPoint(struct FVector Pos, float MaxDistance); // Function FSD.DeepPathfinderMovement.FindNearestPathfinderPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c3800
	struct FVector FindNearestConnectedPathfinderPoint(struct FVector Pos, float MaxDistance); // Function FSD.DeepPathfinderMovement.FindNearestConnectedPathfinderPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c3710
	struct FQuat CalcPathfinderOrientation(struct FVector Pos, struct FVector forwardDir); // Function FSD.DeepPathfinderMovement.CalcPathfinderOrientation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c35e0
	bool BackOffFrom(struct FVector dangerPos, float Distance); // Function FSD.DeepPathfinderMovement.BackOffFrom // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c3500
	void AddFakeMoverImpulse(struct FVector Impulse); // Function FSD.DeepPathfinderMovement.AddFakeMoverImpulse // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10c3440
};

// Class FSD.DefenseEvent
// Size: 0x370 (Inherited: 0x358)
struct ADefenseEvent : AGameEvent {
	float DefendDuration; // 0x358(0x04)
	char pad_35C[0x4]; // 0x35c(0x04)
	struct UWidget* DefendWidget; // 0x360(0x08)
	float Progress; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)

	void OnRep_Progress(float OldValue); // Function FSD.DefenseEvent.OnRep_Progress // (Final|Native|Protected) // @ game+0x10c9950
};

// Class FSD.DefensePointActor
// Size: 0x260 (Inherited: 0x220)
struct ADefensePointActor : AActor {
	char pad_220[0x20]; // 0x220(0x20)
	struct AGameEvent* DefenseEvent; // 0x240(0x08)
	struct AGameEvent* ActiveDefenceEvent; // 0x248(0x08)
	enum class EDefendPointState DefendState; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)
	struct USingleUsableComponent* DefendPointUsable; // 0x258(0x08)

	void SetState(enum class EDefendPointState State); // Function FSD.DefensePointActor.SetState // (Final|Native|Public|BlueprintCallable) // @ game+0x10c9c80
	void OnRep_DefendState(); // Function FSD.DefensePointActor.OnRep_DefendState // (Final|Native|Protected) // @ game+0x10c98b0
	void OnDefensePointActivated(struct APlayerCharacter* Player, enum class EInputKeys Key); // Function FSD.DefensePointActor.OnDefensePointActivated // (Native|Protected) // @ game+0x10c9680
	void DefenseStart(); // Function FSD.DefensePointActor.DefenseStart // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void DefenseFail(); // Function FSD.DefensePointActor.DefenseFail // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void DefenseComplete(); // Function FSD.DefensePointActor.DefenseComplete // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.DefenseObjective
// Size: 0x1a8 (Inherited: 0x178)
struct UDefenseObjective : UObjective {
	int32_t DefensePoints; // 0x178(0x04)
	int32_t PointsDefended; // 0x17c(0x04)
	struct TArray<SoftClassProperty> ObjectiveDefenseClasses; // 0x180(0x10)
	struct TArray<struct ADefensePointActor*> ActiveObjectiveDefenseActors; // 0x190(0x10)
	struct UDebrisPositioning* DebrisPositioning; // 0x1a0(0x08)

	void PointDefended(); // Function FSD.DefenseObjective.PointDefended // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10c99d0
	void OnRep_PointsRepaired(); // Function FSD.DefenseObjective.OnRep_PointsRepaired // (Final|Native|Protected) // @ game+0x10c9930
	void OnDefensePointsSpawned(); // Function FSD.DefenseObjective.OnDefensePointsSpawned // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.DestinationActorComponent
// Size: 0xb8 (Inherited: 0xb0)
struct UDestinationActorComponent : UActorComponent {
	struct TWeakObjectPtr<struct AActor> DestinationActor; // 0xb0(0x08)

	float GetDistToDestinationActor(); // Function FSD.DestinationActorComponent.GetDistToDestinationActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c92d0
};

// Class FSD.DetPack
// Size: 0x288 (Inherited: 0x220)
struct ADetPack : AActor {
	char pad_220[0x20]; // 0x220(0x20)
	float UpgradedStaggerChance; // 0x240(0x04)
	float UpgradedStaggerDuration; // 0x244(0x04)
	float UpgradedFearFactor; // 0x248(0x04)
	float VisualDamageRadius; // 0x24c(0x04)
	float IncreasedFearRadius; // 0x250(0x04)
	float IncreasedStaggerRadius; // 0x254(0x04)
	struct UProjectileMovementComponent* Movement; // 0x258(0x08)
	struct UExplosionComponent* Explosion; // 0x260(0x08)
	struct USingleUsableComponent* UseComp; // 0x268(0x08)
	struct USimpleHealthComponent* SimpleHealth; // 0x270(0x08)
	struct ADetPackItem* Detonator; // 0x278(0x08)
	bool HasExploded; // 0x280(0x01)
	bool IsMoving; // 0x281(0x01)
	bool ExplodesOnDeath; // 0x282(0x01)
	bool HasExtraStaggerRadius; // 0x283(0x01)
	bool HasExtraFearRadius; // 0x284(0x01)
	char pad_285[0x3]; // 0x285(0x03)

	void UseFearStaggerUpgrades(); // Function FSD.DetPack.UseFearStaggerUpgrades // (Final|Native|Protected|BlueprintCallable) // @ game+0x10c9d20
	void RecieveHitObject(); // Function FSD.DetPack.RecieveHitObject // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_IsMoving(); // Function FSD.DetPack.OnRep_IsMoving // (Final|Native|Protected) // @ game+0x10c9910
	void OnRep_HasExploded(); // Function FSD.DetPack.OnRep_HasExploded // (Final|Native|Protected) // @ game+0x10c98d0
	void OnExploded(); // Function FSD.DetPack.OnExploded // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDetPackPickedUp(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.DetPack.OnDetPackPickedUp // (Final|Native|Protected) // @ game+0x10c97d0
	void OnDetPackDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.DetPack.OnDetPackDeath // (Final|Native|Public) // @ game+0x10c9750
};

// Class FSD.DetPackItem
// Size: 0x468 (Inherited: 0x390)
struct ADetPackItem : AAnimatedItem {
	char pad_390[0x10]; // 0x390(0x10)
	struct ADetPack* DetPackClass; // 0x3a0(0x08)
	struct AItem* LoadoutProxy; // 0x3a8(0x08)
	struct UAnimMontage* FPThrowMontage; // 0x3b0(0x08)
	struct UAnimMontage* TPThrowMontage; // 0x3b8(0x08)
	struct UAnimMontage* FP_DetonateAnim; // 0x3c0(0x08)
	struct UAnimMontage* WPN_DetonateAnim; // 0x3c8(0x08)
	struct UAnimMontage* FP_EquipDetonatorAnimation; // 0x3d0(0x08)
	struct UAnimMontage* WPN_EquipDetonatorAnimation; // 0x3d8(0x08)
	struct USkeletalMeshComponent* DetonatorFPMesh; // 0x3e0(0x08)
	struct USkeletalMeshComponent* DetonatorTPMesh; // 0x3e8(0x08)
	struct UForceFeedbackEffect* DetonatorTriggerForceFeedback; // 0x3f0(0x08)
	struct UCapacityHoldingItemAggregator* Capacity; // 0x3f8(0x08)
	float SupplyStatusWeight; // 0x400(0x04)
	float ThrowVelocity; // 0x404(0x04)
	float EnheiritOwnerVelocityScale; // 0x408(0x04)
	float ThrowAngle; // 0x40c(0x04)
	float CooldownAfterThrow; // 0x410(0x04)
	float CooldownAfterDetonation; // 0x414(0x04)
	float ThrowDelay; // 0x418(0x04)
	float ThrowZOffset; // 0x41c(0x04)
	struct UDialogDataAsset* ShoutDetPackPlaced; // 0x420(0x08)
	struct UDialogDataAsset* ShoutOutOfAmmo; // 0x428(0x08)
	char pad_430[0x4]; // 0x430(0x04)
	float CooldownLeft; // 0x434(0x04)
	struct TArray<struct ADetPack*> ThrownPacks; // 0x438(0x10)
	struct TArray<struct UItemUpgrade*> DetPackUpgrades; // 0x448(0x10)
	char pad_458[0xa]; // 0x458(0x0a)
	bool IsDetonatorOut; // 0x462(0x01)
	bool HasThrownPack; // 0x463(0x01)
	char pad_464[0x4]; // 0x464(0x04)

	void Simulate_ThrowGrenade(); // Function FSD.DetPackItem.Simulate_ThrowGrenade // (Net|Native|Event|NetMulticast|Protected) // @ game+0x10c9d00
	void Server_ThrowGrenade(); // Function FSD.DetPackItem.Server_ThrowGrenade // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10926c0
	void Server_Detonate(); // Function FSD.DetPackItem.Server_Detonate // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10c9c60
	void Server_CycleItem(); // Function FSD.DetPackItem.Server_CycleItem // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10c9c40
	void Receive_OnRep_IsDetonatorOut(); // Function FSD.DetPackItem.Receive_OnRep_IsDetonatorOut // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_IsDetonatorOut(); // Function FSD.DetPackItem.OnRep_IsDetonatorOut // (Final|Native|Protected) // @ game+0x10c98f0
	void OnDetonatingFinished(); // Function FSD.DetPackItem.OnDetonatingFinished // (Final|Native|Protected) // @ game+0x10c9890
	int32_t GetCurrentGrenades(); // Function FSD.DetPackItem.GetCurrentGrenades // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c92a0
};

// Class FSD.DialogDataAsset
// Size: 0x70 (Inherited: 0x30)
struct UDialogDataAsset : UDataAsset {
	bool Enabled; // 0x30(0x01)
	bool AudioOnly; // 0x31(0x01)
	char pad_32[0x2]; // 0x32(0x02)
	float ShoutDelay; // 0x34(0x04)
	float ShoutCoolDown; // 0x38(0x04)
	float ShoutChance; // 0x3c(0x04)
	struct TArray<struct FDialogStruct> Entries; // 0x40(0x10)
	struct TArray<struct USoundSubmixBase*> SubmixSends; // 0x50(0x10)
	struct TArray<int32_t> ShuffledIndices; // 0x60(0x10)

	int32_t SelectIndex(struct UObject* WorldContext); // Function FSD.DialogDataAsset.SelectIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10c9bb0
	bool SelectEntry(struct UObject* WorldContext, struct FDialogStruct Dialog); // Function FSD.DialogDataAsset.SelectEntry // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x10c9a80
	struct FDialogStruct GetShout(int32_t Index); // Function FSD.DialogDataAsset.GetShout // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c9480
};

// Class FSD.DifficultyManager
// Size: 0xf8 (Inherited: 0xb0)
struct UDifficultyManager : UActorComponent {
	char pad_B0[0x24]; // 0xb0(0x24)
	float MinModifierEnemyCount; // 0xd4(0x04)
	float MinModifierAttackCooldown; // 0xd8(0x04)
	float MinModifierSpeed; // 0xdc(0x04)
	int32_t ForcedPlayerCount; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct AFSDGameMode* GameMode; // 0xe8(0x08)
	struct AFSDGameState* GameState; // 0xf0(0x08)

	struct UDifficultySetting* SelectDifficulty(int32_t Index); // Function FSD.DifficultyManager.SelectDifficulty // (Final|Native|Public|BlueprintCallable) // @ game+0x10c99f0
	float GetSmallEnemyDamageResistance(); // Function FSD.DifficultyManager.GetSmallEnemyDamageResistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c95c0
	float GetPointExtractionScaler(); // Function FSD.DifficultyManager.GetPointExtractionScaler // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c9450
	float GetExtraLargeEnemyDamageResistanceD(); // Function FSD.DifficultyManager.GetExtraLargeEnemyDamageResistanceD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c9420
	float GetExtraLargeEnemyDamageResistanceC(); // Function FSD.DifficultyManager.GetExtraLargeEnemyDamageResistanceC // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c93f0
	float GetExtraLargeEnemyDamageResistanceB(); // Function FSD.DifficultyManager.GetExtraLargeEnemyDamageResistanceB // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c93c0
	float GetExtraLargeEnemyDamageResistance(); // Function FSD.DifficultyManager.GetExtraLargeEnemyDamageResistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c9390
	float GetEnemyDamageResistance(); // Function FSD.DifficultyManager.GetEnemyDamageResistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c9360
	float GetEnemyDamageModifier(); // Function FSD.DifficultyManager.GetEnemyDamageModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c9330
	float GetEnemyCountModifier(); // Function FSD.DifficultyManager.GetEnemyCountModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c9300
	struct UDifficultySetting* GetCurrentDifficulty(); // Function FSD.DifficultyManager.GetCurrentDifficulty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c9270
	float GetBossDifficultyScaler(); // Function FSD.DifficultyManager.GetBossDifficultyScaler // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c9240
};

// Class FSD.DifficultySetting
// Size: 0x238 (Inherited: 0x58)
struct UDifficultySetting : USavableDataAsset {
	struct FText DifficultyName; // 0x58(0x18)
	struct FText ShortDifficultyName; // 0x70(0x18)
	struct FText UnlockRequirementDescription; // 0x88(0x18)
	struct UCampaign* CampaignRequirement; // 0xa0(0x08)
	struct UCampaign* SelectedByDefaultCampaignRequirement; // 0xa8(0x08)
	float EnvironmentalDamageModifier; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct TArray<float> ExtraLargeEnemyDamageResistance; // 0xb8(0x10)
	struct TArray<float> ExtraLargeEnemyDamageResistanceB; // 0xc8(0x10)
	struct TArray<float> ExtraLargeEnemyDamageResistanceC; // 0xd8(0x10)
	struct TArray<float> ExtraLargeEnemyDamageResistanceD; // 0xe8(0x10)
	struct TArray<float> EnemyDamageResistance; // 0xf8(0x10)
	struct TArray<float> SmallEnemyDamageResistance; // 0x108(0x10)
	struct TArray<float> EnemyDamageModifier; // 0x118(0x10)
	struct TArray<float> EnemyCountModifier; // 0x128(0x10)
	float BossDifficultyScaler; // 0x138(0x04)
	float PointExtractionScaler; // 0x13c(0x04)
	struct FRandInterval EncounterDifficulty; // 0x140(0x10)
	struct FRandInterval StationaryDifficulty; // 0x150(0x10)
	float SpecialEncounterModifier; // 0x160(0x04)
	float HazardBonus; // 0x164(0x04)
	float friendlyFireModifier; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)
	struct FRandInterval EnemyWaveInterval; // 0x170(0x10)
	struct FRandInterval EnemyNormalWaveInterval; // 0x180(0x10)
	struct FRandInterval EnemyNormalWaveDifficulty; // 0x190(0x10)
	float WaveStartDelayScale; // 0x1a0(0x04)
	char pad_1A4[0x4]; // 0x1a4(0x04)
	struct FRandInterval EnemyDiversity; // 0x1a8(0x10)
	struct FRandInterval StationaryEnemyDiversity; // 0x1b8(0x10)
	struct FIRandRange DisruptiveEnemyPoolCount; // 0x1c8(0x08)
	int32_t MinPoolSize; // 0x1d0(0x04)
	char pad_1D4[0x4]; // 0x1d4(0x04)
	struct FVeteranComposition Veterans; // 0x1d8(0x20)
	float SpeedModifier; // 0x1f8(0x04)
	float AttackCooldownModifier; // 0x1fc(0x04)
	float ProjectileSpeedModifier; // 0x200(0x04)
	int32_t DifficultyGroup; // 0x204(0x04)
	int32_t DifficultyGroupIndex; // 0x208(0x04)
	char pad_20C[0x4]; // 0x20c(0x04)
	struct TArray<struct UMissionStat*> MissionCompletedStats; // 0x210(0x10)
	bool UseSharedHealthPool; // 0x220(0x01)
	char pad_221[0x3]; // 0x221(0x03)
	float HeathRegenerationMax; // 0x224(0x04)
	float ReviveHealthRatio; // 0x228(0x04)
	float EliteChanceModifier; // 0x22c(0x04)
	float EliteCooldown; // 0x230(0x04)
	int32_t MaxActiveElites; // 0x234(0x04)

	bool IsUnlocked(struct UObject* WorldContext); // Function FSD.DifficultySetting.IsUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c95f0
	float AddHazardBonus(float BaseValue); // Function FSD.DifficultySetting.AddHazardBonus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c91b0
};

// Class FSD.DiscordWrapper
// Size: 0x2f0 (Inherited: 0x28)
struct UDiscordWrapper : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct FDiscordServerInviteData ServerInfo; // 0x38(0x78)
	struct FMulticastInlineDelegate OnResponseSuccessChanged; // 0xb0(0x10)
	bool LastResponseSuccessful; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
	struct FMulticastInlineDelegate OnDiscordEoMDataEvent; // 0xc8(0x10)
	char pad_D8[0x30]; // 0xd8(0x30)
	bool UserIn; // 0x108(0x01)
	char pad_109[0x7]; // 0x109(0x07)
	struct FDiscordRewardNotification rewardNotification; // 0x110(0x40)
	int32_t UserInStatus; // 0x150(0x04)
	bool HasEoM; // 0x154(0x01)
	char pad_155[0x3]; // 0x155(0x03)
	struct FDiscordEoMData EoMData; // 0x158(0x20)
	char pad_178[0x100]; // 0x178(0x100)
	bool IsConnected; // 0x278(0x01)
	char pad_279[0x1]; // 0x279(0x01)
	bool ServerInfoLoaded; // 0x27a(0x01)
	char pad_27B[0x5]; // 0x27b(0x05)
	struct FMulticastInlineDelegate OnDiscordServerInfoLoaded; // 0x280(0x10)
	struct FMulticastInlineDelegate OnDiscordServerCountLoaded; // 0x290(0x10)
	struct FMulticastInlineDelegate OnDiscordUserInServer; // 0x2a0(0x10)
	char pad_2B0[0x40]; // 0x2b0(0x40)

	void RequestUserInServer(); // Function FSD.DiscordWrapper.RequestUserInServer // (Final|Native|Public|BlueprintCallable) // @ game+0x10cd450
	void RequestFactionAdjustment(int32_t Faction, bool force); // Function FSD.DiscordWrapper.RequestFactionAdjustment // (Final|Native|Public|BlueprintCallable) // @ game+0x10cd390
	void RequestEoMData(); // Function FSD.DiscordWrapper.RequestEoMData // (Final|Native|Public|BlueprintCallable) // @ game+0x10cd370
	void RequestDiscordServerInfo(); // Function FSD.DiscordWrapper.RequestDiscordServerInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x10cd350
	void RejectInviteSignature(); // Function FSD.DiscordWrapper.RejectInviteSignature // (Final|Native|Public) // @ game+0x10cd330
	void IgnoreInviteSignature(); // Function FSD.DiscordWrapper.IgnoreInviteSignature // (Final|Native|Public) // @ game+0x10ccef0
	struct FString GetAvatarURL(); // Function FSD.DiscordWrapper.GetAvatarURL // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10ccd50
	void AdjustFaction(); // Function FSD.DiscordWrapper.AdjustFaction // (Final|Native|Public|BlueprintCallable) // @ game+0x10cc900
	void AcceptInviteSignature(); // Function FSD.DiscordWrapper.AcceptInviteSignature // (Final|Native|Public) // @ game+0x10cc8e0
};

// Class FSD.DoubleDrillAggregator
// Size: 0x148 (Inherited: 0x140)
struct UDoubleDrillAggregator : UCapacityBasedItemAggregator {
	char pad_140[0x8]; // 0x140(0x08)
};

// Class FSD.DualAnimatedItem
// Size: 0x390 (Inherited: 0x338)
struct ADualAnimatedItem : AItem {
	struct UAnimInstance* FPAnimInstance; // 0x338(0x08)
	struct UPlayerAnimInstance* TPAnimInstance; // 0x340(0x08)
	struct USkeletalMeshComponent* FPRMesh; // 0x348(0x08)
	struct USkeletalMeshComponent* FPLMesh; // 0x350(0x08)
	struct USkeletalMeshComponent* TPRMesh; // 0x358(0x08)
	struct USkeletalMeshComponent* TPLMesh; // 0x360(0x08)
	struct UAnimMontage* FP_EquipAnimation; // 0x368(0x08)
	struct UAnimMontage* TP_EquipAnimation; // 0x370(0x08)
	float EquipDuration; // 0x378(0x04)
	char pad_37C[0x4]; // 0x37c(0x04)
	struct UItemCharacterAnimationSet* CharacterAnimationSet; // 0x380(0x08)
	char pad_388[0x8]; // 0x388(0x08)

	struct USkeletalMeshComponent* GetRItemMesh(); // Function FSD.DualAnimatedItem.GetRItemMesh // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d12e0
	struct USkeletalMeshComponent* GetLItemMesh(); // Function FSD.DualAnimatedItem.GetLItemMesh // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d1240
};

// Class FSD.DoubleDrillItem
// Size: 0x4c8 (Inherited: 0x390)
struct ADoubleDrillItem : ADualAnimatedItem {
	char pad_390[0x18]; // 0x390(0x18)
	struct UFirstPersonParticleSystemComponent* FP_Left_DrillParticles; // 0x3a8(0x08)
	struct UFirstPersonParticleSystemComponent* FP_Right_DrillParticles; // 0x3b0(0x08)
	struct UDamageComponent* DamageComponent; // 0x3b8(0x08)
	struct UFSDAudioComponent* AudioComponent; // 0x3c0(0x08)
	struct UDoubleDrillAggregator* Aggregator; // 0x3c8(0x08)
	struct UAnimMontage* FPMineMontage; // 0x3d0(0x08)
	struct UAnimMontage* TPMineMontage; // 0x3d8(0x08)
	struct UAnimMontage* FPOverheat; // 0x3e0(0x08)
	struct UAnimMontage* TPOverheat; // 0x3e8(0x08)
	struct UAnimMontage* FPGunsling; // 0x3f0(0x08)
	struct UAnimMontage* TPGunsling; // 0x3f8(0x08)
	struct FName MiningSpeedAudioParamterName; // 0x400(0x08)
	struct UParticleSystem* DrillParticles; // 0x408(0x08)
	struct UForceFeedbackEffect* DrillRumble; // 0x410(0x08)
	float BlockParticlesScaleFP; // 0x418(0x04)
	float BlockParticlesScaleTP; // 0x41c(0x04)
	enum class EDoubleDrillState State; // 0x420(0x01)
	char pad_421[0x3]; // 0x421(0x03)
	float MovementPenalty; // 0x424(0x04)
	float MiningRate; // 0x428(0x04)
	float HeatReductionPerKill; // 0x42c(0x04)
	struct FVector CarveSize; // 0x430(0x0c)
	float CarveNoise; // 0x43c(0x04)
	float CarverRayCastLength; // 0x440(0x04)
	float CarveTerrainDistanceCheck; // 0x444(0x04)
	float TimeToNextMine; // 0x448(0x04)
	float CurrentDrillSpeed; // 0x44c(0x04)
	float DamageDistance; // 0x450(0x04)
	float DamageRadius; // 0x454(0x04)
	float FriendlyDamageRadius; // 0x458(0x04)
	float DamageRate; // 0x45c(0x04)
	float Damage; // 0x460(0x04)
	float ArmorDamageMultiplier; // 0x464(0x04)
	struct UDamageClass* DamageClass; // 0x468(0x08)
	float friendlyFireModifier; // 0x470(0x04)
	float MaxFuel; // 0x474(0x04)
	float Fuel; // 0x478(0x04)
	float FuelUsePerDig; // 0x47c(0x04)
	float FuelUsePerMelee; // 0x480(0x04)
	float SupplyStatusWeight; // 0x484(0x04)
	struct UDialogDataAsset* ShoutOutOfFuel; // 0x488(0x08)
	struct TArray<struct FHitResult> HitCache; // 0x490(0x10)
	struct TArray<struct FDoubleDrillDamageItem> DamageCache; // 0x4a0(0x10)
	char pad_4B0[0x10]; // 0x4b0(0x10)
	float DrillParticlesDuration; // 0x4c0(0x04)
	bool IsMining; // 0x4c4(0x01)
	bool IsGunslinging; // 0x4c5(0x01)
	char pad_4C6[0x2]; // 0x4c6(0x02)

	void Server_StopMining(); // Function FSD.DoubleDrillItem.Server_StopMining // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x10c9c40
	void Server_StartMining(); // Function FSD.DoubleDrillItem.Server_StartMining // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x10c9c60
	void Server_DoDamage(struct TArray<struct FDoubleDrillDamageItem> Targets); // Function FSD.DoubleDrillItem.Server_DoDamage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x10cd550
	void Server_DigBlock(struct FVector_NetQuantize Start, struct FVector_NetQuantize End); // Function FSD.DoubleDrillItem.Server_DigBlock // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x10cd470
	void OnTargetKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.DoubleDrillItem.OnTargetKilled // (Final|Native|Public) // @ game+0x10cd1f0
	void OnStopDrilling(); // Function FSD.DoubleDrillItem.OnStopDrilling // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnStartDrilling(); // Function FSD.DoubleDrillItem.OnStartDrilling // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRep_SimulatingMining(); // Function FSD.DoubleDrillItem.OnRep_SimulatingMining // (Final|Native|Public) // @ game+0x10cd150
	void OnRep_IsGunslinging(); // Function FSD.DoubleDrillItem.OnRep_IsGunslinging // (Final|Native|Public) // @ game+0x10cd130
	void OnDrillParticlesTimerElapsed(); // Function FSD.DoubleDrillItem.OnDrillParticlesTimerElapsed // (Final|Native|Public) // @ game+0x10cd110
	void Client_Resupply(float percentage); // Function FSD.DoubleDrillItem.Client_Resupply // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x10ccc40
	void BP_OnDrillDamage(); // Function FSD.DoubleDrillItem.BP_OnDrillDamage // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void All_SimulateDigDebris(struct FVector_NetQuantize Position, int32_t DebrisIndex); // Function FSD.DoubleDrillItem.All_SimulateDigDebris // (Net|Native|Event|NetMulticast|Public) // @ game+0x10ccae0
	void All_SimulateDigBlock(struct FVector_NetQuantize Position, bool spawnParticles, int32_t Material); // Function FSD.DoubleDrillItem.All_SimulateDigBlock // (Net|Native|Event|NetMulticast|Public) // @ game+0x10cc9c0
	void All_SimulateDamage(struct TArray<struct FDoubleDrillDamageItem> Targets); // Function FSD.DoubleDrillItem.All_SimulateDamage // (Net|Native|Event|NetMulticast|Public) // @ game+0x10cc920
};

// Class FSD.DoubleDrillAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UDoubleDrillAnimInstance : UAnimInstance {
	float DrillSpeed; // 0x268(0x04)
	bool IsMining; // 0x26c(0x01)
	bool IsGunslinging; // 0x26d(0x01)
	struct ADoubleDrillItem* Item; // 0x270(0x08)
	char pad_27E[0x2]; // 0x27e(0x02)
};

// Class FSD.DownedStateComponent
// Size: 0x148 (Inherited: 0x100)
struct UDownedStateComponent : UCharacterStateComponent {
	struct FDeathIntroSettings Intro; // 0x100(0x24)
	float DownedHealthLossPerSecond; // 0x124(0x04)
	float TerrainRemovedFallThreshold; // 0x128(0x04)
	bool DownedBombActive; // 0x12c(0x01)
	char pad_12D[0x3]; // 0x12d(0x03)
	struct UDamageComponent* DownedBombDamage; // 0x130(0x08)
	struct FMulticastInlineDelegate OnEnableDownedBombUIEvent; // 0x138(0x10)

	void TriggerDownedBombDamage(); // Function FSD.DownedStateComponent.TriggerDownedBombDamage // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x10cd660
	void Server_TriggerDownedBomb(); // Function FSD.DownedStateComponent.Server_TriggerDownedBomb // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x10cd5f0
	void Receive_TriggerDownedBomb(); // Function FSD.DownedStateComponent.Receive_TriggerDownedBomb // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct UDamageComponent* CreateDownedBombDamage(struct UDamageComponent* DamageClass); // Function FSD.DownedStateComponent.CreateDownedBombDamage // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10cccc0
};

// Class FSD.DrinkableActor
// Size: 0x228 (Inherited: 0x220)
struct ADrinkableActor : AActor {
	struct UDrinkableDataAsset* DrinkableData; // 0x220(0x08)

	void Pickup(struct APlayerCharacter* byCharacter); // Function FSD.DrinkableActor.Pickup // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10cd2b0
	void OnRep_DrinkableData(); // Function FSD.DrinkableActor.OnRep_DrinkableData // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Fill(); // Function FSD.DrinkableActor.Fill // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.DrinkableDataAsset
// Size: 0x218 (Inherited: 0x58)
struct UDrinkableDataAsset : USavableDataAsset {
	struct FText DrinkableName; // 0x58(0x18)
	struct FText DrinkableDescription; // 0x70(0x18)
	int32_t DrinkablePrice; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
	struct TSoftObjectPtr<struct UTexture2D> DrinkableIcon; // 0x90(0x28)
	int32_t RequiredPlayerRank; // 0xb8(0x04)
	bool ParticipatesInFreeBeerEvent; // 0xbc(0x01)
	enum class EDrinkableAlcoholStrength AlcoholStrength; // 0xbd(0x01)
	char pad_BE[0x2]; // 0xbe(0x02)
	struct UDrinkableDataAsset* SupporterEdition; // 0xc0(0x08)
	bool bPlayFireworks; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)
	struct UMissionStat* StatConsumed; // 0xd0(0x08)
	struct UMissionStat* StatRoundOrdered; // 0xd8(0x08)
	SoftClassProperty DrinkableActorClass; // 0xe0(0x28)
	SoftClassProperty DrinkableItemClass; // 0x108(0x28)
	struct UDialogDataAsset* OrderShout; // 0x130(0x08)
	struct UDialogDataAsset* OrderCheeringShout; // 0x138(0x08)
	struct UDialogDataAsset* DrinkSaluteShout; // 0x140(0x08)
	struct UTemporaryBuff* buff; // 0x148(0x08)
	SoftClassProperty DrinkEffect; // 0x150(0x28)
	struct TMap<struct UResourceData*, int32_t> UnlockCost; // 0x178(0x50)
	struct TMap<struct UResourceData*, int32_t> PurchaseCost; // 0x1c8(0x50)

	bool TryUnlockSpecialDrinks(struct UObject* WorldContext); // Function FSD.DrinkableDataAsset.TryUnlockSpecialDrinks // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10cd7a0
	bool TryUnlockDrink(struct UObject* WorldContext); // Function FSD.DrinkableDataAsset.TryUnlockDrink // (Final|Native|Public|BlueprintCallable) // @ game+0x10cd710
	bool TryPurchaseDrink(struct UObject* WorldContext); // Function FSD.DrinkableDataAsset.TryPurchaseDrink // (Final|Native|Public|BlueprintCallable) // @ game+0x10cd680
	void OnRoundOrdered(struct APlayerCharacter* Character); // Function FSD.DrinkableDataAsset.OnRoundOrdered // (Final|Native|Public|BlueprintCallable) // @ game+0x10cd170
	bool MustBeUnlocked(); // Function FSD.DrinkableDataAsset.MustBeUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10cd030
	bool IsUnlocked(struct UObject* WorldContext); // Function FSD.DrinkableDataAsset.IsUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ccfa0
	bool IsDrinkFree(struct UObject* WorldContext); // Function FSD.DrinkableDataAsset.IsDrinkFree // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10ccf10
	bool HasSupporterEdition(); // Function FSD.DrinkableDataAsset.HasSupporterEdition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ccec0
	struct UTexture2D* GetDrinkableIcon(); // Function FSD.DrinkableDataAsset.GetDrinkableIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10cce90
	struct UDrinkableDataAsset* GetDrinkableEdition(struct UObject* WorldContext, struct APlayerController* Player); // Function FSD.DrinkableDataAsset.GetDrinkableEdition // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10ccdd0
	bool AreSpecialDrinksUnlocked(struct UObject* WorldContext); // Function FSD.DrinkableDataAsset.AreSpecialDrinksUnlocked // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10ccbc0
};

// Class FSD.DrinkEffectComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UDrinkEffectComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	float BeerEffectDurationSeconds; // 0xb8(0x04)
	bool AutoDestroy; // 0xbc(0x01)
	bool EffectIsActive; // 0xbd(0x01)
	char pad_BE[0x2]; // 0xbe(0x02)

	void StopEffect(); // Function FSD.DrinkEffectComponent.StopEffect // (Final|Native|Protected|BlueprintCallable) // @ game+0x10cd640
	void OnStopEffect(); // Function FSD.DrinkEffectComponent.OnStopEffect // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnStartEffect(struct APlayerCharacter* Character); // Function FSD.DrinkEffectComponent.OnStartEffect // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnChangedCharacter(struct APlayerCharacter* changedToCharacter, struct UObject* DrinkEffectClass); // Function FSD.DrinkEffectComponent.OnChangedCharacter // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x10cd060
};

// Class FSD.DrinkableItem
// Size: 0x398 (Inherited: 0x390)
struct ADrinkableItem : AAnimatedItem {
	struct UDrinkableDataAsset* DrinkableData; // 0x390(0x08)

	void OnRep_DrinkableData(); // Function FSD.DrinkableItem.OnRep_DrinkableData // (Final|Native|Protected) // @ game+0x8dc380
	void Consume(); // Function FSD.DrinkableItem.Consume // (Final|Native|Protected|BlueprintCallable) // @ game+0x10d0ce0
	void ClientConsumed(); // Function FSD.DrinkableItem.ClientConsumed // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0x10d0c70
	bool CheckCanSalute(); // Function FSD.DrinkableItem.CheckCanSalute // (Event|Protected|BlueprintEvent|Const) // @ game+0x158ca90
};

// Class FSD.DrinkSettings
// Size: 0xb0 (Inherited: 0x30)
struct UDrinkSettings : UDataAsset {
	struct TArray<struct FBarleySpawnItem> BarleySpawns; // 0x30(0x10)
	struct FRandInterval BarleyAmount; // 0x40(0x10)
	struct TMap<struct UResourceData*, int32_t> SpecialBeerUnlockCost; // 0x50(0x50)
	struct TArray<struct UDrinkableDataAsset*> Drinkables; // 0xa0(0x10)

	struct TArray<struct UDrinkableDataAsset*> GetBarDrinkables(struct UObject* WorldContext, bool IncludeDailySpecial, bool includeNotUnlocked, bool includePlayerRankTooLow); // Function FSD.DrinkSettings.GetBarDrinkables // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10d1020
	struct UDrinkableDataAsset* GetBarDailySpecial(struct UObject* WorldContext); // Function FSD.DrinkSettings.GetBarDailySpecial // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10d0fa0
};

// Class FSD.DroneAbillityStatsComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UDroneAbillityStatsComponent : UActorComponent {
	bool UseOwnArmorDamageMultiplier; // 0xb0(0x01)
	char pad_B1[0xf]; // 0xb1(0x0f)
};

// Class FSD.DroneCharacter
// Size: 0x398 (Inherited: 0x380)
struct ADroneCharacter : ADeepPathfinderCharacter {
	struct UHealthComponent* HealthComponent; // 0x380(0x08)
	struct UOutlineComponent* OutlineComponent; // 0x388(0x08)
	struct USimpleObjectInfoComponent* ObjectInfo; // 0x390(0x08)
};

// Class FSD.DroneDisplayActionComponent
// Size: 0x200 (Inherited: 0x1f0)
struct UDroneDisplayActionComponent : USceneComponent {
	struct UTextRenderComponent* DisplayText; // 0x1f0(0x08)
	char pad_1F8[0x8]; // 0x1f8(0x08)

	void SetMode(enum class EDroneActions droneAction); // Function FSD.DroneDisplayActionComponent.SetMode // (Final|Native|Public|BlueprintCallable) // @ game+0x10d1ad0
};

// Class FSD.DroneFlame
// Size: 0x268 (Inherited: 0x220)
struct ADroneFlame : AActor {
	struct UParticleSystemComponent* FlameParticles; // 0x220(0x08)
	struct UDamageComponent* Damage; // 0x228(0x08)
	char pad_230[0x8]; // 0x230(0x08)
	struct TArray<struct FName> FlameParameterNames; // 0x238(0x10)
	struct UStatusEffect* OnFireStatusEffect; // 0x248(0x08)
	float DamageTickRate; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)
	float Duration; // 0x258(0x04)
	float FlameDiameter; // 0x25c(0x04)
	float range; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
};

// Class FSD.DroneMiningToolBase
// Size: 0xe8 (Inherited: 0xb0)
struct UDroneMiningToolBase : UActorComponent {
	struct FMulticastInlineDelegate HitSomething; // 0xb0(0x10)
	char pad_C0[0x10]; // 0xc0(0x10)
	float range; // 0xd0(0x04)
	float SameHitDistance; // 0xd4(0x04)
	float MineRadius; // 0xd8(0x04)
	int32_t MineStrength; // 0xdc(0x04)
	char pad_E0[0x8]; // 0xe0(0x08)

	void StopMining(); // Function FSD.DroneMiningToolBase.StopMining // (Final|Native|Public|BlueprintCallable) // @ game+0x10d20b0
	void StartMining(); // Function FSD.DroneMiningToolBase.StartMining // (Final|Native|Public|BlueprintCallable) // @ game+0x10d2000
	void SpawnEffects(struct UTerrainMaterial* aTerrainMaterial, bool aParialHit, struct FVector_NetQuantize aLocation, struct FVector_NetQuantize aImpactNormal); // Function FSD.DroneMiningToolBase.SpawnEffects // (Net|Native|Event|NetMulticast|Public) // @ game+0x10d1e60
};

// Class FSD.DroneUseComponent
// Size: 0x120 (Inherited: 0xb0)
struct UDroneUseComponent : UActorComponent {
	struct FMulticastInlineDelegate OnUsed; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnBeginUse; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnStopUse; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnProgress; // 0xe0(0x10)
	struct UDialogDataAsset* BoscoLaserpointerShout; // 0xf0(0x08)
	char pad_F8[0xc]; // 0xf8(0x0c)
	struct TWeakObjectPtr<struct USingleUsableComponent> SyncToUsable; // 0x104(0x08)
	float Progress; // 0x10c(0x04)
	float useDuration; // 0x110(0x04)
	char pad_114[0x8]; // 0x114(0x08)
	bool ResetOnFail; // 0x11c(0x01)
	bool CanUse; // 0x11d(0x01)
	char pad_11E[0x2]; // 0x11e(0x02)

	void SyncedUsableUserCountChangedResponse(int32_t userCount); // Function FSD.DroneUseComponent.SyncedUsableUserCountChangedResponse // (Final|Native|Protected) // @ game+0x10d2250
	void SyncedUsableUsedResponse(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.DroneUseComponent.SyncedUsableUsedResponse // (Final|Native|Protected) // @ game+0x10d2190
	void SyncedUsableBeginUseResponse(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.DroneUseComponent.SyncedUsableBeginUseResponse // (Final|Native|Protected) // @ game+0x10d20d0
	void SetUseDuration(float useDuration); // Function FSD.DroneUseComponent.SetUseDuration // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10d1de0
	void SetCanUse(bool CanUse); // Function FSD.DroneUseComponent.SetCanUse // (Final|Native|Public|BlueprintCallable) // @ game+0x10d17f0
	float GetProgress(); // Function FSD.DroneUseComponent.GetProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d12c0
	void EndUse(); // Function FSD.DroneUseComponent.EndUse // (Final|Native|Public|BlueprintCallable) // @ game+0x10d0f50
	void BeginUse(); // Function FSD.DroneUseComponent.BeginUse // (Final|Native|Public|BlueprintCallable) // @ game+0x10d0c50
};

// Class FSD.DropPod
// Size: 0x290 (Inherited: 0x220)
struct ADropPod : AActor {
	float DropHeight; // 0x220(0x04)
	struct FVector TargetLocation; // 0x224(0x0c)
	struct UAutoCarverComponent* AutoCarver; // 0x230(0x08)
	struct UCurveFloat* DepartCurve; // 0x238(0x08)
	float CarverRotationSpeed; // 0x240(0x04)
	struct FVector CarverScale; // 0x244(0x0c)
	float DepartureTime; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)
	struct FVector StartLocation; // 0x258(0x0c)
	enum class EDropPodState State; // 0x264(0x01)
	char pad_265[0x7]; // 0x265(0x07)
	float DrillSpeed; // 0x26c(0x04)
	float FreeFallAcceleration; // 0x270(0x04)
	float FreeFallSpeed; // 0x274(0x04)
	char pad_278[0x18]; // 0x278(0x18)

	void StartDrilling(); // Function FSD.DropPod.StartDrilling // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10d1fe0
	void PrepForTakeOff(); // Function FSD.DropPod.PrepForTakeOff // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10d1640
	void OnRep_State(); // Function FSD.DropPod.OnRep_State // (Final|Native|Protected) // @ game+0x10d15e0
	void OnPrepForTakeOff(); // Function FSD.DropPod.OnPrepForTakeOff // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDroppodImpact(); // Function FSD.DropPod.OnDroppodImpact // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDrillingStarted(); // Function FSD.DropPod.OnDrillingStarted // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDeparting(); // Function FSD.DropPod.OnDeparting // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct ADropPod* DropToMission(struct UObject* WorldContextObject, struct ADropPod* podClass, struct FVector Location); // Function FSD.DropPod.DropToMission // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10d0e40
	void Depart(); // Function FSD.DropPod.Depart // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10d0e20
};

// Class FSD.FSDMiningHead
// Size: 0x298 (Inherited: 0x290)
struct AFSDMiningHead : ADropPod {
	struct UResourceBank* ResourceBank; // 0x290(0x08)
};

// Class FSD.DropToTerrainComponent
// Size: 0xf8 (Inherited: 0xb0)
struct UDropToTerrainComponent : UActorComponent {
	char pad_B0[0xc]; // 0xb0(0x0c)
	float FallVelocity; // 0xbc(0x04)
	float TerrainTraceMaxDistance; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct FMulticastInlineDelegate OnFallToTerrainStateChanged; // 0xc8(0x10)
	struct FVector CurrentLocation; // 0xd8(0x0c)
	struct FVector DropTarget; // 0xe4(0x0c)
	bool IsDetecting; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)

	void StopDropDetection(bool stopFalling); // Function FSD.DropToTerrainComponent.StopDropDetection // (Native|Protected|BlueprintCallable) // @ game+0x10d2020
	void SetParentPositionOnAll(struct FVector CurrentParentLocation); // Function FSD.DropToTerrainComponent.SetParentPositionOnAll // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults|NetValidate) // @ game+0x10d1b50
	void OnTerrainRemoved(); // Function FSD.DropToTerrainComponent.OnTerrainRemoved // (Final|Native|Protected) // @ game+0x10d1620
	void BeginDropDetection(); // Function FSD.DropToTerrainComponent.BeginDropDetection // (Native|Protected|BlueprintCallable) // @ game+0x109fdb0
};

// Class FSD.DualWieldWeapon
// Size: 0x720 (Inherited: 0x6e0)
struct ADualWieldWeapon : AAmmoDrivenWeapon {
	char pad_6E0[0x8]; // 0x6e0(0x08)
	struct UFirstPersonSkeletalMeshComponent* FPMeshLeft; // 0x6e8(0x08)
	struct USkeletalMeshComponent* TPMeshLeft; // 0x6f0(0x08)
	struct UAnimMontage* WPN_Left_Reload; // 0x6f8(0x08)
	struct UAnimMontage* WPN_Left_TP_Reload; // 0x700(0x08)
	struct UFXSystemAsset* CasingParticlesLeft; // 0x708(0x08)
	char pad_710[0x8]; // 0x710(0x08)
	struct FName MuzzleLeft; // 0x718(0x08)
};

// Class FSD.DualWieldAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UDualWieldAnimInstance : UAnimInstance {
};

// Class FSD.DualMachinePistols
// Size: 0x730 (Inherited: 0x720)
struct ADualMachinePistols : ADualWieldWeapon {
	struct UStatusEffect* EmptyClipStatusEffect; // 0x720(0x08)
	char pad_728[0x8]; // 0x728(0x08)

	void Server_TriggerStatusEffect(); // Function FSD.DualMachinePistols.Server_TriggerStatusEffect // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10d1680
};

// Class FSD.DynamicReverbComponent
// Size: 0x118 (Inherited: 0xb0)
struct UDynamicReverbComponent : UActorComponent {
	float LargeCaveValue; // 0xb0(0x04)
	float MediumCaveValue; // 0xb4(0x04)
	float SmallCaveValue; // 0xb8(0x04)
	float FadeTime; // 0xbc(0x04)
	float Priority; // 0xc0(0x04)
	float TunnelAmbienceFadeIn; // 0xc4(0x04)
	float TunnelAmbienceFadeOut; // 0xc8(0x04)
	char pad_CC[0xc]; // 0xcc(0x0c)
	struct UAudioComponent* TunnelSoundInstance; // 0xd8(0x08)
	char pad_E0[0x38]; // 0xe0(0x38)

	void TunnelTimerTriggered(); // Function FSD.DynamicReverbComponent.TunnelTimerTriggered // (Final|Native|Protected) // @ game+0x10d22f0
	void TimerTriggered(); // Function FSD.DynamicReverbComponent.TimerTriggered // (Final|Native|Protected) // @ game+0x10d22d0
};

// Class FSD.EffectSettings
// Size: 0x40 (Inherited: 0x30)
struct UEffectSettings : UDataAsset {
	struct TArray<struct TSoftObjectPtr<struct UNiagaraSystem>> ParticlesForShaderGeneration; // 0x30(0x10)

	bool NeedsShadeGeneration(); // Function FSD.EffectSettings.NeedsShadeGeneration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d1490
	void MarkShadersGenerated(); // Function FSD.EffectSettings.MarkShadersGenerated // (Final|Native|Public|BlueprintCallable) // @ game+0x10d1390
	void CompileShaders(); // Function FSD.EffectSettings.CompileShaders // (Final|Native|Public|BlueprintCallable) // @ game+0x10d0cc0
};

// Class FSD.ElectroBeam
// Size: 0x2b8 (Inherited: 0x220)
struct AElectroBeam : AActor {
	struct UCapsuleComponent* collider; // 0x220(0x08)
	struct TArray<struct AActor*> ParentPlants; // 0x228(0x10)
	struct FVector LocationOffset; // 0x238(0x0c)
	struct FVector_NetQuantize SourceLocation; // 0x244(0x0c)
	struct FVector_NetQuantize TargetLocation; // 0x250(0x0c)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct USceneComponent* DelaySource; // 0x260(0x08)
	struct USceneComponent* DelayTarget; // 0x268(0x08)
	struct UParticleSystemComponent* BeamEffect; // 0x270(0x08)
	struct UAudioComponent* ZappSound; // 0x278(0x08)
	struct TArray<struct UStatusEffect*> StatusEffectsToApply; // 0x280(0x10)
	float MaxLitTime; // 0x290(0x04)
	float MinLitTime; // 0x294(0x04)
	float MaxUnlitTime; // 0x298(0x04)
	float MinUnlitTime; // 0x29c(0x04)
	bool ShouldFlicker; // 0x2a0(0x01)
	bool IsLit; // 0x2a1(0x01)
	char pad_2A2[0x16]; // 0x2a2(0x16)

	void SetTarget(struct USceneComponent* TargetPoint); // Function FSD.ElectroBeam.SetTarget // (Final|Native|Public) // @ game+0x10d1d60
	void SetSource(struct USceneComponent* SourcePoint); // Function FSD.ElectroBeam.SetSource // (Final|Native|Public) // @ game+0x10d1ce0
	void SetParents(struct AActor* firstParent, struct AActor* secondParent); // Function FSD.ElectroBeam.SetParents // (Final|Native|Public|BlueprintCallable) // @ game+0x10d1c20
	void RecalculateBeam(); // Function FSD.ElectroBeam.RecalculateBeam // (Final|Native|Public|BlueprintCallable) // @ game+0x10d1660
	void OnRep_TargetLocation(); // Function FSD.ElectroBeam.OnRep_TargetLocation // (Final|Native|Public) // @ game+0x10d1600
	void OnRep_SourceLocation(); // Function FSD.ElectroBeam.OnRep_SourceLocation // (Final|Native|Public) // @ game+0x10d15c0
	void OnRep_Flag(); // Function FSD.ElectroBeam.OnRep_Flag // (Final|Native|Private) // @ game+0x10d1560
	void OnParentTwoDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.ElectroBeam.OnParentTwoDeath // (Final|Native|Public) // @ game+0x10d14e0
	void OnParentOneDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.ElectroBeam.OnParentOneDeath // (Final|Native|Public) // @ game+0x10d14e0
	struct UParticleSystemComponent* GetParticleEffect(); // Function FSD.ElectroBeam.GetParticleEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x10d1290
	struct UCapsuleComponent* GetCollider(); // Function FSD.ElectroBeam.GetCollider // (Final|Native|Public|BlueprintCallable) // @ game+0xb103e0
	struct UAudioComponent* GetAudio(); // Function FSD.ElectroBeam.GetAudio // (Final|Native|Public|BlueprintCallable) // @ game+0x10d0f70
	void DelayedSetTarget(struct USceneComponent* TargetPoint); // Function FSD.ElectroBeam.DelayedSetTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x10d0da0
	void DelayedSetSource(struct USceneComponent* SourcePoint); // Function FSD.ElectroBeam.DelayedSetSource // (Final|Native|Public|BlueprintCallable) // @ game+0x10d0d20
	void DeactivateCollisionAndEffect(); // Function FSD.ElectroBeam.DeactivateCollisionAndEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x10d0d00
};

// Class FSD.SentryElectroBeam
// Size: 0x2c8 (Inherited: 0x2b8)
struct ASentryElectroBeam : AElectroBeam {
	struct TArray<struct ARedeployableSentryGun*> Sentries; // 0x2b8(0x10)
};

// Class FSD.ElevatorPlant
// Size: 0x2f0 (Inherited: 0x220)
struct AElevatorPlant : AActor {
	struct FMulticastInlineDelegate OnStartTimelineEvent; // 0x220(0x10)
	struct FMulticastInlineDelegate COnStateChangedEvent; // 0x230(0x10)
	struct UAudioComponent* MovingSoundComponent; // 0x240(0x08)
	struct USoundCue* GrabSound; // 0x248(0x08)
	struct FVector RestPositionOffset; // 0x250(0x0c)
	struct FVector RelativeRestLocation; // 0x25c(0x0c)
	struct FVector RelativeDestinationLocation; // 0x268(0x0c)
	struct FVector BaseTangentDirectionOffset; // 0x274(0x0c)
	struct FVector LeafTangentDirectionOffset; // 0x280(0x0c)
	struct FVector LeafLocationNoise; // 0x28c(0x0c)
	struct FRotator LeafNoiseRotator; // 0x298(0x0c)
	float BaseTangentLength; // 0x2a4(0x04)
	struct USplineMeshComponent* CSplineMesh; // 0x2a8(0x08)
	struct USceneComponent* CVineBase; // 0x2b0(0x08)
	struct USceneComponent* CVineLeaf; // 0x2b8(0x08)
	char pad_2C0[0x10]; // 0x2c0(0x10)
	float InitialBaseTangentLength; // 0x2d0(0x04)
	float LeafLocationNoiseSize; // 0x2d4(0x04)
	float VineMovementAlpha; // 0x2d8(0x04)
	bool IsMoving; // 0x2dc(0x01)
	bool IsOpen; // 0x2dd(0x01)
	bool Extend; // 0x2de(0x01)
	char pad_2DF[0x1]; // 0x2df(0x01)
	struct UCurveFloat* DipOffsetCurve; // 0x2e0(0x08)
	struct UCurveFloat* LocationLerpCurve; // 0x2e8(0x08)

	void SetLeafNoiseRotator(struct FRotator aRotator); // Function FSD.ElevatorPlant.SetLeafNoiseRotator // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10d1a30
	void SetLeafLocationNoise(struct FVector aVector); // Function FSD.ElevatorPlant.SetLeafLocationNoise // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10d1990
	void SetIsOpen(bool aValue); // Function FSD.ElevatorPlant.SetIsOpen // (Final|Native|Protected|BlueprintCallable) // @ game+0x10d1900
	void SetIsExtended(bool aValue); // Function FSD.ElevatorPlant.SetIsExtended // (Final|Native|Protected|BlueprintCallable) // @ game+0x10d1870
	void SetBaseTangentLength(float Value); // Function FSD.ElevatorPlant.SetBaseTangentLength // (Final|Native|Protected|BlueprintCallable) // @ game+0x10d1770
	void SetBaseTangentDirectionOffset(struct FVector aVector); // Function FSD.ElevatorPlant.SetBaseTangentDirectionOffset // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10d16d0
	void OnRep_RelavtiveDestinationLocation(); // Function FSD.ElevatorPlant.OnRep_RelavtiveDestinationLocation // (Final|Native|Protected) // @ game+0x10d15a0
	void OnRep_Open(); // Function FSD.ElevatorPlant.OnRep_Open // (Final|Native|Protected) // @ game+0x10d1580
	void OnMatchStarted(); // Function FSD.ElevatorPlant.OnMatchStarted // (Final|Native|Protected) // @ game+0x10d14c0
	void MoreTick(struct FVector DipOffset, float aValue); // Function FSD.ElevatorPlant.MoreTick // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10d13b0
	float GetVineMovementAlpha(); // Function FSD.ElevatorPlant.GetVineMovementAlpha // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d1370
	struct FVector GetRelativeRestLocation(); // Function FSD.ElevatorPlant.GetRelativeRestLocation // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d1340
	struct FVector GetRelativeDestinationLocation(); // Function FSD.ElevatorPlant.GetRelativeDestinationLocation // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d1310
	float GetLeafLocationNoiseSize(); // Function FSD.ElevatorPlant.GetLeafLocationNoiseSize // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d1270
	bool GetIsMoving(); // Function FSD.ElevatorPlant.GetIsMoving // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d1220
	bool GetIsExtended(); // Function FSD.ElevatorPlant.GetIsExtended // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d1200
	float GetInitialTangentLenth(); // Function FSD.ElevatorPlant.GetInitialTangentLenth // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d11e0
};

// Class FSD.EliminationObjective
// Size: 0x218 (Inherited: 0x178)
struct UEliminationObjective : UObjective {
	int32_t ObjectCount; // 0x178(0x04)
	char pad_17C[0x4]; // 0x17c(0x04)
	struct UDebrisPositioning* Positioning; // 0x180(0x08)
	struct TArray<int32_t> ExcludeRoomIDs; // 0x188(0x10)
	SoftClassProperty ObjectToSpawn; // 0x198(0x28)
	struct UCaveInfluencer* CaveInfluencer; // 0x1c0(0x08)
	float DebrisRadius; // 0x1c8(0x04)
	char pad_1CC[0x4]; // 0x1cc(0x04)
	struct TArray<struct TSoftObjectPtr<struct UDebrisBase>> ObjectDebris; // 0x1d0(0x10)
	int32_t EnemiesKilled; // 0x1e0(0x04)
	int32_t EnemiesToKill; // 0x1e4(0x04)
	struct TArray<struct FEliminationDescriptors> TargetDescriptors; // 0x1e8(0x10)
	struct TArray<struct FEliminationDescriptors> TargetQueue; // 0x1f8(0x10)
	struct TArray<struct FEliminationTarget> ActiveEliminationTargets; // 0x208(0x10)

	void RegisterEliminationTargets(struct TArray<struct AFSDPawn*> Targets); // Function FSD.EliminationObjective.RegisterEliminationTargets // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x10d9400
	void ReceiveTargetSpawned(); // Function FSD.EliminationObjective.ReceiveTargetSpawned // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void ReceiveTargetKilled(); // Function FSD.EliminationObjective.ReceiveTargetKilled // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnTargetKilled(struct UHealthComponentBase* Health); // Function FSD.EliminationObjective.OnTargetKilled // (Final|Native|Protected) // @ game+0x10d9380
	void OnRep_EnemiesToKill(int32_t prevAmount); // Function FSD.EliminationObjective.OnRep_EnemiesToKill // (Final|Native|Protected) // @ game+0x107ea10
	void OnRep_EnemiesKilled(int32_t prevAmount); // Function FSD.EliminationObjective.OnRep_EnemiesKilled // (Final|Native|Protected) // @ game+0x107ea10
	struct TArray<struct UEnemyDescriptor*> GetNextTargetInQueue(); // Function FSD.EliminationObjective.GetNextTargetInQueue // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10d8fd0
};

// Class FSD.EncounterActor
// Size: 0x220 (Inherited: 0x220)
struct AEncounterActor : AActor {

	void Receive_EncounterHasSpawned(struct APawn* spawnedPawn); // Function FSD.EncounterActor.Receive_EncounterHasSpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.EncounterManager
// Size: 0x118 (Inherited: 0xb0)
struct UEncounterManager : UActorComponent {
	float SpawnDistanceFromRoomBounds; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct TArray<struct FEncounterManagerItem> Encounters; // 0xb8(0x10)
	struct AProceduralSetup* ProceduralSetup; // 0xc8(0x08)
	struct UEnemySpawnManager* SpawnManager; // 0xd0(0x08)
	struct TArray<struct UEnemyDescriptor*> EnemyPool; // 0xd8(0x10)
	struct TArray<struct UEnemyDescriptor*> EncounterPool; // 0xe8(0x10)
	struct TArray<struct UCritterDescriptor*> CritterPool; // 0xf8(0x10)
	char pad_108[0x10]; // 0x108(0x10)

	void ShowSpawnLocations(); // Function FSD.EncounterManager.ShowSpawnLocations // (Final|Exec|Native|Public) // @ game+0x10d9500
	struct TArray<struct UEnemyDescriptor*> GetEnemyPool(); // Function FSD.EncounterManager.GetEnemyPool // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d8ef0
	struct TArray<struct UEnemyDescriptor*> GetEncounterPool(); // Function FSD.EncounterManager.GetEncounterPool // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d8df0
	struct TArray<struct UCritterDescriptor*> GetCritterPool(); // Function FSD.EncounterManager.GetCritterPool // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d8d60
};

// Class FSD.EncounterSettings
// Size: 0x168 (Inherited: 0x30)
struct UEncounterSettings : UDataAsset {
	struct FIRandRange StationaryEnemyCount; // 0x30(0x08)
	struct TArray<struct UEnemyDescriptor*> CommonEnemies; // 0x38(0x10)
	struct TArray<struct UEnemyDescriptor*> SpecialEnemies; // 0x48(0x10)
	struct TArray<struct UEnemyDescriptor*> DisruptiveEnemies; // 0x58(0x10)
	struct TArray<struct UEnemyDescriptor*> StationaryEnemies; // 0x68(0x10)
	struct TArray<struct UCritterDescriptor*> CommonCritters; // 0x78(0x10)
	struct TArray<struct FEncounterRareCritterItem> RareCritters; // 0x88(0x10)
	struct TArray<struct FEncounterSpecialItem> SpecialEncounters; // 0x98(0x10)
	float RequiredDifficultyPerDiversity; // 0xa8(0x04)
	float GlobalDifficultyScale; // 0xac(0x04)
	struct FRandInterval EncounterDifficulty; // 0xb0(0x10)
	struct FRandInterval StationaryDifficulty; // 0xc0(0x10)
	struct FRandRange CritterSpawnDifficulty; // 0xd0(0x08)
	struct FGameplayTag SmallRoomTag; // 0xd8(0x08)
	struct FGameplayTag MediumRoomTag; // 0xe0(0x08)
	struct FGameplayTag LargeRoomTag; // 0xe8(0x08)
	float SmallRoomDifficultyModifier; // 0xf0(0x04)
	float MediumRoomDifficultyModifier; // 0xf4(0x04)
	float LargeRoomDifficultyModifier; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct TMap<struct UEnemyDescriptor*, struct FEliteEnemyEntry> HeroEnemies; // 0x100(0x50)
	struct FRandInterval HeroEnemySpawn; // 0x150(0x10)
	struct UMutator* TestMutator; // 0x160(0x08)
};

// Class FSD.EnemyFamily
// Size: 0x50 (Inherited: 0x30)
struct UEnemyFamily : UDataAsset {
	struct UTexture2D* Icon; // 0x30(0x08)
	struct FText Name; // 0x38(0x18)
};

// Class FSD.ObjectInfoComponent
// Size: 0xb0 (Inherited: 0xb0)
struct UObjectInfoComponent : UActorComponent {

	struct UDialogDataAsset* GetLookAtShout(struct UPrimitiveComponent* TargetComponent); // Function FSD.ObjectInfoComponent.GetLookAtShout // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a1780
	bool GetIsPingableByLaserpointer(struct UPrimitiveComponent* TargetComponent); // Function FSD.ObjectInfoComponent.GetIsPingableByLaserpointer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a16e0
	struct FText GetInGameName(struct UPrimitiveComponent* TargetComponent); // Function FSD.ObjectInfoComponent.GetInGameName // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a14d0
	struct UTexture2D* GetInGameIcon(struct UPrimitiveComponent* TargetComponent); // Function FSD.ObjectInfoComponent.GetInGameIcon // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a1430
	struct FText GetInGameDescription(struct UPrimitiveComponent* TargetComponent); // Function FSD.ObjectInfoComponent.GetInGameDescription // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a1390
	struct UActorContextWidget* GetContextWidget(struct APlayerController* InPlayerController); // Function FSD.ObjectInfoComponent.GetContextWidget // (Native|Public|BlueprintCallable) // @ game+0x11a12f0
};

// Class FSD.SimpleObjectInfoComponent
// Size: 0x168 (Inherited: 0xb0)
struct USimpleObjectInfoComponent : UObjectInfoComponent {
	struct FText InGameName; // 0xb0(0x18)
	struct FText InGameDescription; // 0xc8(0x18)
	struct UDialogDataAsset* LookAtShout; // 0xe0(0x08)
	struct UDialogDataAsset* LookAtShoutOverride; // 0xe8(0x08)
	char pad_F0[0x8]; // 0xf0(0x08)
	struct UTexture2D* Icon; // 0xf8(0x08)
	bool bIsPingableByLaserpointer; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct UActorContextWidget* ContextWidgetClass; // 0x108(0x08)
	struct TMap<struct TWeakObjectPtr<struct USceneComponent>, struct FSimpleObjectInfoData> ComponentMap; // 0x110(0x50)
	struct UActorContextWidget* ContextWidget; // 0x160(0x08)

	void SetInGameName(struct FString GameName); // Function FSD.SimpleObjectInfoComponent.SetInGameName // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x11a2640
	void SetInGameDescription(struct FString GameDescription); // Function FSD.SimpleObjectInfoComponent.SetInGameDescription // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x11a25a0
	void SetContextWidget(struct UActorContextWidget* InContextWidget); // Function FSD.SimpleObjectInfoComponent.SetContextWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x11a2520
	void OverrideLookAtShoutOrUseDefault(struct UDialogDataAsset* InShout); // Function FSD.SimpleObjectInfoComponent.OverrideLookAtShoutOrUseDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x11a2420
	void OverrideLookAtShout(struct UDialogDataAsset* InShout); // Function FSD.SimpleObjectInfoComponent.OverrideLookAtShout // (Final|Native|Public|BlueprintCallable) // @ game+0x11a23a0
	struct UDialogDataAsset* GetDefaultLookAtShout(); // Function FSD.SimpleObjectInfoComponent.GetDefaultLookAtShout // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a2d50
	void ClearLookAtShoutOverride(); // Function FSD.SimpleObjectInfoComponent.ClearLookAtShoutOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x11a1250
	void AddComponentObjectInfo(struct USceneComponent* TargetComponent, struct FSimpleObjectInfoData Data); // Function FSD.SimpleObjectInfoComponent.AddComponentObjectInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11a1060
};

// Class FSD.EnemyComponent
// Size: 0x1a0 (Inherited: 0x168)
struct UEnemyComponent : USimpleObjectInfoComponent {
	struct UEnemyFamily* Family; // 0x168(0x08)
	struct UDialogDataAsset* KillShout; // 0x170(0x08)
	struct UEnemyID* EnemyID; // 0x178(0x08)
	struct FString mixerName; // 0x180(0x10)
	struct FMulticastInlineDelegate OnMixerNameChange; // 0x190(0x10)

	struct UEnemyID* GetID(); // Function FSD.EnemyComponent.GetID // (Final|Native|Public) // @ game+0x10d8fb0
	struct FText GetFamilyName(); // Function FSD.EnemyComponent.GetFamilyName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d8f50
	struct UTexture2D* GetFamilyIcon(); // Function FSD.EnemyComponent.GetFamilyIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d8f20
};

// Class FSD.TestAnimInstance
// Size: 0x990 (Inherited: 0x270)
struct UTestAnimInstance : UAnimInstance {
	struct FTestAnimInstanceProxy AnimInstanceProxy; // 0x270(0x700)
	float WalkCycleSpeed; // 0x970(0x04)
	float StartMovingSpeed; // 0x974(0x04)
	float StopMovingSpeed; // 0x978(0x04)
	float WalkCycleMinRate; // 0x97c(0x04)
	float MeshScale; // 0x980(0x04)
	char pad_984[0xc]; // 0x984(0x0c)
};

// Class FSD.JellyFishAnimInstance
// Size: 0x2c0 (Inherited: 0x2c0)
struct UJellyFishAnimInstance : UEnemyAnimInstance {
	float HorizontalAngle; // 0x2b8(0x04)
	float VerticalSpeed; // 0x2bc(0x04)
};

// Class FSD.GliderBeastAnimInstance
// Size: 0x2f0 (Inherited: 0x2c0)
struct UGliderBeastAnimInstance : UEnemyAnimInstance {
	float SyncAnimLength; // 0x2b8(0x04)
	struct FGliderAnimSync AnimSync; // 0x2bc(0x20)
	bool IsFrozen; // 0x2dc(0x01)
	char pad_2E5[0xb]; // 0x2e5(0x0b)
};

// Class FSD.EnemyAttacker
// Size: 0x28 (Inherited: 0x28)
struct UEnemyAttacker : UInterface {

	float GetAttackDamageModifier(); // Function FSD.EnemyAttacker.GetAttackDamageModifier // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d8d30
};

// Class FSD.EnemyControlStateComponent
// Size: 0x290 (Inherited: 0x100)
struct UEnemyControlStateComponent : UCharacterStateComponent {
	bool UseThirdPersonCam; // 0x100(0x01)
	char pad_101[0xf]; // 0x101(0x0f)
	struct FControlEnemyState StateData; // 0x110(0x60)
	char pad_170[0x8]; // 0x170(0x08)
	enum class EEnemyControlState ControlState; // 0x178(0x01)
	char pad_179[0x37]; // 0x179(0x37)
	struct FQuat AngularVelocity; // 0x1b0(0x10)
	struct FQuat ControlRotation; // 0x1c0(0x10)
	char pad_1D0[0xc0]; // 0x1d0(0xc0)

	void ServerExit(); // Function FSD.EnemyControlStateComponent.ServerExit // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10d94b0
	void OnRep_StateData(struct FControlEnemyState oldState); // Function FSD.EnemyControlStateComponent.OnRep_StateData // (Final|Native|Protected|HasOutParms) // @ game+0x10d9290
	void OnRep_ControlState(enum class EEnemyControlState oldState); // Function FSD.EnemyControlStateComponent.OnRep_ControlState // (Final|Native|Protected) // @ game+0x10d91f0
	void OnEnemyCrashMontageEnded(struct UAnimMontage* Montage, bool interrupted); // Function FSD.EnemyControlStateComponent.OnEnemyCrashMontageEnded // (Final|Native|Protected) // @ game+0x10d9120
	void OnControllingEnemyAttached(); // Function FSD.EnemyControlStateComponent.OnControllingEnemyAttached // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnControllingEnemy(bool IsControlling); // Function FSD.EnemyControlStateComponent.OnControllingEnemy // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void JumpPressed(); // Function FSD.EnemyControlStateComponent.JumpPressed // (Final|Native|Protected) // @ game+0x10d9100
	struct UAIPlayerControlComponent* GetAiPlayerControlComponent(); // Function FSD.EnemyControlStateComponent.GetAiPlayerControlComponent // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x10d8d00
};

// Class FSD.EnemyDescriptor
// Size: 0x218 (Inherited: 0x30)
struct UEnemyDescriptor : UDataAsset {
	struct UEnemyID* EnemyID; // 0x30(0x08)
	SoftClassProperty EnemyClass; // 0x38(0x28)
	enum class EVeteranScaling VeteranScaling; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct TArray<struct UEnemyDescriptor*> VeteranClasses; // 0x68(0x10)
	struct TMap<struct UBiome*, SoftClassProperty> BiomeEnemyClassOverrides; // 0x78(0x50)
	SoftClassProperty EliteEnemyClass; // 0xc8(0x28)
	struct TSet<struct UMissionTemplate*> BannedMissionTypes; // 0xf0(0x50)
	enum class EEnemySignificance EnemySignificance; // 0x140(0x01)
	char pad_141[0x3]; // 0x141(0x03)
	struct FVector SpawnOffset; // 0x144(0x0c)
	bool UsesSpawnEffects; // 0x150(0x01)
	char pad_151[0x3]; // 0x151(0x03)
	enum class ECreatureSize CreatureSize; // 0x154(0x04)
	struct UDebrisPositioning* Positioning; // 0x158(0x08)
	int32_t PlacementCategories; // 0x160(0x04)
	char pad_164[0x4]; // 0x164(0x04)
	struct UCaveInfluencer* CaveInfluencer; // 0x168(0x08)
	struct TArray<struct FEnemyDebris> Debris; // 0x170(0x10)
	float InfluencerRange; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct AActor* PlacementCarver; // 0x188(0x08)
	enum class DeepPathFinderType PathfinderType; // 0x190(0x01)
	char pad_191[0x7]; // 0x191(0x07)
	struct FGameplayTagQuery PlacementRoomQuery; // 0x198(0x48)
	float SpawnSpread; // 0x1e0(0x04)
	int32_t IdealSpawnSize; // 0x1e4(0x04)
	bool CanBeUsedForConstantPressure; // 0x1e8(0x01)
	bool CanBeUsedInEncounters; // 0x1e9(0x01)
	char pad_1EA[0x2]; // 0x1ea(0x02)
	float DifficultyRating; // 0x1ec(0x04)
	int32_t MinSpawnCount; // 0x1f0(0x04)
	int32_t MaxSpawnCount; // 0x1f4(0x04)
	float Rarity; // 0x1f8(0x04)
	float SpawnAmountModifier; // 0x1fc(0x04)
	int32_t RequiredMainCampaignProgress; // 0x200(0x04)
	bool UsesSpawnRarityModifiers; // 0x204(0x01)
	char pad_205[0x3]; // 0x205(0x03)
	struct TArray<struct FSpawnRarityItem> SpawnRarityModifiers; // 0x208(0x10)

	struct APawn* GetEnemyClass(struct UBiome* Biome, bool isElite); // Function FSD.EnemyDescriptor.GetEnemyClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d8e20
};

// Class FSD.BaseCritterDescriptor
// Size: 0xb8 (Inherited: 0x30)
struct UBaseCritterDescriptor : UDataAsset {
	SoftClassProperty CritterClass; // 0x30(0x28)
	struct TMap<struct UBiome*, SoftClassProperty> BiomeClassOverrides; // 0x58(0x50)
	struct UDebrisPositioning* Positioning; // 0xa8(0x08)
	enum class DeepPathFinderType PathfinderType; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class FSD.CritterDescriptor
// Size: 0xd0 (Inherited: 0xb8)
struct UCritterDescriptor : UBaseCritterDescriptor {
	struct FIRandRange SpawnAmountPerRoom; // 0xb8(0x08)
	float SpawnChancePerRoom; // 0xc0(0x04)
	struct FIRandRange SpawnAmountPerLevel; // 0xc4(0x08)
	char pad_CC[0x4]; // 0xcc(0x04)
};

// Class FSD.RareCritterDescriptor
// Size: 0xc0 (Inherited: 0xb8)
struct URareCritterDescriptor : UBaseCritterDescriptor {
	float Rarity; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
};

// Class FSD.EnemyMinersManualData
// Size: 0x180 (Inherited: 0x30)
struct UEnemyMinersManualData : UDataAsset {
	struct UEnemyID* EnemyID; // 0x30(0x08)
	struct FText Name; // 0x38(0x18)
	struct FText RichDescription; // 0x50(0x18)
	struct TArray<struct FText> GameplayTips; // 0x68(0x10)
	enum class EEnemyFamily Family; // 0x78(0x01)
	enum class EEnemyType EnemyType; // 0x79(0x01)
	char pad_7A[0x6]; // 0x7a(0x06)
	struct TArray<struct FEnemyAttackDescription> AttackType; // 0x80(0x10)
	struct TArray<struct FEnemyAttackDescription> SpecialAttacks; // 0x90(0x10)
	struct TArray<struct UAnimSequenceBase*> AttackAnimations; // 0xa0(0x10)
	enum class EArmorType ArmorType; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct FText Armor; // 0xb8(0x18)
	struct FText Weakpoint; // 0xd0(0x18)
	struct FEnemyMinersManualStats EnemyStats; // 0xe8(0x0c)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct TArray<enum class EDamageType> Resistances; // 0xf8(0x10)
	struct TArray<enum class EDamageType> Weaknesses; // 0x108(0x10)
	struct TArray<struct FText> LoreInfo; // 0x118(0x10)
	bool AlwaysUnlocked; // 0x128(0x01)
	char pad_129[0x3]; // 0x129(0x03)
	int32_t InfoUnlockSpeed; // 0x12c(0x04)
	struct TSoftObjectPtr<struct UTexture2D> EnemyIcon; // 0x130(0x28)
	SoftClassProperty PreviewActor; // 0x158(0x28)

	struct UTexture2D* GetEnemyIcon(); // Function FSD.EnemyMinersManualData.GetEnemyIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10910e0
};

// Class FSD.HealthComponentBase
// Size: 0x148 (Inherited: 0xb0)
struct UHealthComponentBase : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FMulticastInlineDelegate OnHealthChanged; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnDamageHealed; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnDamageTaken; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnHit; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnBodypartHit; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnDeath; // 0x108(0x10)
	struct FMulticastInlineDelegate OnRadialDamage; // 0x118(0x10)
	struct FMulticastInlineDelegate OnCanTakeDamageChanged; // 0x128(0x10)
	bool ShowLaserPointMarkerWhenDead; // 0x138(0x01)
	bool canTakeDamage; // 0x139(0x01)
	bool PassthroughTemperatureDamage; // 0x13a(0x01)
	char pad_13B[0xd]; // 0x13b(0x0d)

	float TakeRadialDamage(float damageAmount, struct FVector BlastCenter, float BlastRadius, float MaxDamageRadius, float MinDamagePct, struct AController* EventInstigator, struct AActor* DamageCauser, struct UPrimitiveComponent* HitComponent, struct UDamageClass* DamageClass); // Function FSD.HealthComponentBase.TakeRadialDamage // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x115e360
	void TakeDamageSimple(float damageAmount, struct AActor* DamageCauser, struct UDamageClass* DamageClass); // Function FSD.HealthComponentBase.TakeDamageSimple // (Final|Native|Public|BlueprintCallable) // @ game+0x115e250
	void SetHealthDirectly(float newHealthValue); // Function FSD.HealthComponentBase.SetHealthDirectly // (Native|Public|BlueprintCallable) // @ game+0x115e1d0
	void SetCanTakeDamage(bool canTakeDamage); // Function FSD.HealthComponentBase.SetCanTakeDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x115e050
	void Kill(struct AActor* DamageCauser); // Function FSD.HealthComponentBase.Kill // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x115d2c0
	bool IsDead(); // Function FSD.HealthComponentBase.IsDead // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115d280
	bool IsAlive(); // Function FSD.HealthComponentBase.IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115d240
	float Heal(float Amount); // Function FSD.HealthComponentBase.Heal // (Native|Public|BlueprintCallable) // @ game+0x115d1b0
	bool GetShowHealthBar(); // Function FSD.HealthComponentBase.GetShowHealthBar // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115d130
	float GetHealthPct(); // Function FSD.HealthComponentBase.GetHealthPct // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115d040
	struct TScriptInterface<None> GetHealthComponentForCollider(struct UPrimitiveComponent* Primitive); // Function FSD.HealthComponentBase.GetHealthComponentForCollider // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115cf90
	struct FVector GetHealthBarWorldOffset(); // Function FSD.HealthComponentBase.GetHealthBarWorldOffset // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x115cf50
	float GetHealth(); // Function FSD.HealthComponentBase.GetHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115cf10
	struct UParticleSystem* GetGenericImpactParticles(); // Function FSD.HealthComponentBase.GetGenericImpactParticles // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115cee0
	bool GetCanTakeDamage(); // Function FSD.HealthComponentBase.GetCanTakeDamage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115cdf0
	bool CanTakeDamageFrom(struct UDamageClass* DamageClass); // Function FSD.HealthComponentBase.CanTakeDamageFrom // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115cd50
	void CanTakeDamageDelegate__DelegateSignature(bool OutCanTakeDamage); // DelegateFunction FSD.HealthComponentBase.CanTakeDamageDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
};

// Class FSD.HealthComponent
// Size: 0x248 (Inherited: 0x148)
struct UHealthComponent : UHealthComponentBase {
	struct FMulticastInlineDelegate OnArmorChanged; // 0x148(0x10)
	struct FMulticastInlineDelegate OnArmorDamaged; // 0x158(0x10)
	struct FMulticastInlineDelegate OnArmorHealed; // 0x168(0x10)
	struct FMulticastInlineDelegate OnDeathDetailed; // 0x178(0x10)
	struct FMulticastInlineDelegate OnNewHealthSegment; // 0x188(0x10)
	float Damage; // 0x198(0x04)
	char pad_19C[0x4]; // 0x19c(0x04)
	struct TArray<float> HealthSegmentSizes; // 0x1a0(0x10)
	bool CanDamageThroughSegments; // 0x1b0(0x01)
	char pad_1B1[0xf]; // 0x1b1(0x0f)
	struct TArray<struct USubHealthComponent*> SubHealthComponents; // 0x1c0(0x10)
	bool ShouldUseLargestSubhealthDamageTaken; // 0x1d0(0x01)
	bool InvulnerableToNonDefinedResistances; // 0x1d1(0x01)
	char pad_1D2[0x6]; // 0x1d2(0x06)
	struct TMap<struct UPawnStat*, float> Resistances; // 0x1d8(0x50)
	bool AffectedByGlobalWeakpointDamageMultiplier; // 0x228(0x01)
	bool UseDormancy; // 0x229(0x01)
	char pad_22A[0x6]; // 0x22a(0x06)
	struct UPawnStatsComponent* PawnStats; // 0x230(0x08)
	char pad_238[0x10]; // 0x238(0x10)

	void ToggleCanTakeDamage(); // Function FSD.HealthComponent.ToggleCanTakeDamage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1159d20
	void Resupply(float percentage); // Function FSD.HealthComponent.Resupply // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11599e0
	void OnRep_Damage(float oldDamage); // Function FSD.HealthComponent.OnRep_Damage // (Native|Protected) // @ game+0x11596e0
	void HealArmor(float Amount); // Function FSD.HealthComponent.HealArmor // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1159320
	bool HasArmor(); // Function FSD.HealthComponent.HasArmor // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11592f0
	float GetMaxArmor(); // Function FSD.HealthComponent.GetMaxArmor // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11590b0
	enum class EHealthbarType GetHealthbarType(); // Function FSD.HealthComponent.GetHealthbarType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1159010
	void GetCurrentHealthSegment(int32_t Segment, float segmentHealth, float segmentHealthPercent); // Function FSD.HealthComponent.GetCurrentHealthSegment // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1158e40
	float GetArmorPct(); // Function FSD.HealthComponent.GetArmorPct // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1158e00
	float GetArmor(); // Function FSD.HealthComponent.GetArmor // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1158dc0
	void Client_ReceivedHit(float Amount, struct UDamageClass* DamageClass, struct AActor* DamageCauser, bool anyHealthLost); // Function FSD.HealthComponent.Client_ReceivedHit // (Net|Native|Event|Protected|NetClient) // @ game+0x1158c00
};

// Class FSD.EnemyHealthComponent
// Size: 0x280 (Inherited: 0x248)
struct UEnemyHealthComponent : UHealthComponent {
	struct FVector KillImpactNormal; // 0x248(0x0c)
	enum class EEnemyHealthScaling EnemyHealthScaling; // 0x254(0x01)
	char pad_255[0x3]; // 0x255(0x03)
	float Courage; // 0x258(0x04)
	float MaxHealth; // 0x25c(0x04)
	bool bShowHealthBar; // 0x260(0x01)
	char pad_261[0x3]; // 0x261(0x03)
	struct FVector HealthBarOffsetWorld; // 0x264(0x0c)
	bool bIsBossFight; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	int32_t BossFightHealthBarSegments; // 0x274(0x04)
	bool bRegisterEnemy; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)

	float GetMaxHealth(); // Function FSD.EnemyHealthComponent.GetMaxHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e2f60
};

// Class FSD.EnemyMeleeAttackAnimNotify
// Size: 0x40 (Inherited: 0x38)
struct UEnemyMeleeAttackAnimNotify : UAnimNotify {
	struct FName AttackTag; // 0x38(0x08)
};

// Class FSD.EnemyRangedAttackAnimNotify
// Size: 0x38 (Inherited: 0x38)
struct UEnemyRangedAttackAnimNotify : UAnimNotify {
};

// Class FSD.StopLeadingNotify
// Size: 0x38 (Inherited: 0x38)
struct UStopLeadingNotify : UAnimNotify {
};

// Class FSD.EnemySettings
// Size: 0x158 (Inherited: 0x30)
struct UEnemySettings : UDataAsset {
	struct TArray<struct UEnemyDescriptor*> EnemiesAllowedInWaves; // 0x30(0x10)
	struct FRandRange EnemyWaveRange; // 0x40(0x08)
	struct TMap<struct UEnemyID*, struct UEnemyDescriptor*> EnemyDescriptor; // 0x48(0x50)
	struct FGameplayTagQuery EliteAllowQuery; // 0x98(0x48)
	struct TMap<struct UEnemyDescriptor*, struct FEliteEnemyEntry> HeroEnemies; // 0xe0(0x50)
	struct FRandFloatInterval HeroEnemySpawn; // 0x130(0x10)
	int32_t EliteRequiredCampaignProgress; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)
	struct TArray<struct UDamageComponent*> ExplodingEnemiesDamageComponents; // 0x148(0x10)
};

// Class FSD.SpawnSettings
// Size: 0x58 (Inherited: 0x30)
struct USpawnSettings : UDataAsset {
	struct TArray<struct UParticleSystem*> SpawnEffects; // 0x30(0x10)
	struct TArray<struct USoundCue*> SpawnSounds; // 0x40(0x10)
	struct FRandRange SpawnDuration; // 0x50(0x08)
};

// Class FSD.EnemySpawnManager
// Size: 0x268 (Inherited: 0xb0)
struct UEnemySpawnManager : UActorComponent {
	struct FMulticastInlineDelegate OnEnemyDestroyed; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnEnemyDied; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnEnemySpawned; // 0xd0(0x10)
	struct USpawnEffectsComponent* SpawnEffects; // 0xe0(0x08)
	char pad_E8[0x8]; // 0xe8(0x08)
	struct TArray<struct APawn*> ActiveEnemies; // 0xf0(0x10)
	struct TArray<struct APawn*> ActiveSwarmerEnemies; // 0x100(0x10)
	struct TArray<struct UStatusEffect*> ActiveGlobalStatusEffects; // 0x110(0x10)
	struct TMap<struct UEnemyDescriptor*, struct FSpawnRarityModifierItem> SpawnRarityModifiers; // 0x120(0x50)
	struct TArray<struct APawn*> ActiveCritters; // 0x170(0x10)
	struct TArray<struct APawn*> CritcalEnemies; // 0x180(0x10)
	int32_t MaxActiveEnemies; // 0x190(0x04)
	int32_t MaxActiveSwarmers; // 0x194(0x04)
	int32_t MaxActiveCritters; // 0x198(0x04)
	float MaxDistanceBeforeCleanup; // 0x19c(0x04)
	struct FGameplayTag SwarmerTag; // 0x1a0(0x08)
	struct FGameplayTag RegularTag; // 0x1a8(0x08)
	struct FGameplayTag CritterTag; // 0x1b0(0x08)
	struct AProceduralSetup* ProceduralSetup; // 0x1b8(0x08)
	struct TArray<struct FSpawnQueueItem> SpawnQueue; // 0x1c0(0x10)
	bool bDestroyingAllEnemies; // 0x1d0(0x01)
	char pad_1D1[0x97]; // 0x1d1(0x97)

	void SpawnerDestroyed(struct APawn* Actor); // Function FSD.EnemySpawnManager.SpawnerDestroyed // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e3b90
	bool SpawnEnemy(struct UEnemyDescriptor* descriptor, struct FTransform Transform, struct FDelegate Callback, bool useSpawnFX, bool Alert); // Function FSD.EnemySpawnManager.SpawnEnemy // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10e3960
	void SetSpawningEnabled(bool newSpawningEnabled); // Function FSD.EnemySpawnManager.SetSpawningEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x10e38d0
	void RemoveGlobalStatusEffect(struct UStatusEffect* StatusEffect); // Function FSD.EnemySpawnManager.RemoveGlobalStatusEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x10e3830
	void RegisterSpawner(struct APawn* Actor); // Function FSD.EnemySpawnManager.RegisterSpawner // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e37b0
	void RegisterSpawnedEnemy(struct AActor* enemy); // Function FSD.EnemySpawnManager.RegisterSpawnedEnemy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e3730
	void PromoteToCritical(struct APawn* Pawn); // Function FSD.EnemySpawnManager.PromoteToCritical // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e35b0
	void OnMatchStarted(); // Function FSD.EnemySpawnManager.OnMatchStarted // (Final|Native|Private) // @ game+0x10e3430
	void OnMatchEnded(); // Function FSD.EnemySpawnManager.OnMatchEnded // (Final|Native|Private) // @ game+0x8dc380
	bool GetSpawningEnabled(); // Function FSD.EnemySpawnManager.GetSpawningEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e30b0
	void EnemyDestroyed(struct AActor* Actor); // Function FSD.EnemySpawnManager.EnemyDestroyed // (Final|Native|Private) // @ game+0x10e2e50
	void EnemyDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.EnemySpawnManager.EnemyDeath // (Final|Native|Private) // @ game+0x10e2dd0
	void DestroyAllEnemies(); // Function FSD.EnemySpawnManager.DestroyAllEnemies // (Final|Native|Public|BlueprintCallable) // @ game+0x10e2d30
	bool CanSpawn(struct UEnemyDescriptor* EnemyDescriptor); // Function FSD.EnemySpawnManager.CanSpawn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e2ca0
	void AddGlobalStatusEffect(struct UStatusEffect* StatusEffect); // Function FSD.EnemySpawnManager.AddGlobalStatusEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x10e2b80
};

// Class FSD.SpawnEffectsComponent
// Size: 0x1d8 (Inherited: 0xb0)
struct USpawnEffectsComponent : UActorComponent {
	struct FSpawnEffectsArray ActiveEffects; // 0xb0(0x120)
	struct UMaterialInstance* BiomeMaterialOverride; // 0x1d0(0x08)
};

// Class FSD.PheromoneSpawnerComponent
// Size: 0x118 (Inherited: 0xb0)
struct UPheromoneSpawnerComponent : UActorComponent {
	struct FRandRange SpawnInterval; // 0xb0(0x08)
	float AttackPositioningCostModifier; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct UEnemyDescriptor* enemy; // 0xc0(0x08)
	struct TMap<struct AActor*, float> InfectedActors; // 0xc8(0x50)
};

// Class FSD.EnemyDetonationSetting
// Size: 0x60 (Inherited: 0x30)
struct UEnemyDetonationSetting : UDataAsset {
	struct UDamageComponent* FireDamage; // 0x30(0x08)
	struct UNiagaraSystem* FireParticles; // 0x38(0x08)
	struct USoundCue* FireSound; // 0x40(0x08)
	struct UDamageComponent* IceDamage; // 0x48(0x08)
	struct UNiagaraSystem* IceParticles; // 0x50(0x08)
	struct USoundCue* IceSound; // 0x58(0x08)
};

// Class FSD.TemperatureComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UTemperatureComponent : UActorComponent {
	char pad_B0[0x10]; // 0xb0(0x10)
	float FrozenDamageBonusScale; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)

	bool TryPushHeatSource(struct AActor* Target, float Temperature, enum class ETemperatureIntensity Intensity); // Function FSD.TemperatureComponent.TryPushHeatSource // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1213300
	bool TryPopHeatSource(struct AActor* Target, float Temperature, enum class ETemperatureIntensity Intensity); // Function FSD.TemperatureComponent.TryPopHeatSource // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1213110
	void ResetTemperature(); // Function FSD.TemperatureComponent.ResetTemperature // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x108cac0
	float GetCurrentTemperature(); // Function FSD.TemperatureComponent.GetCurrentTemperature // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1212170
	void ChangeTemperature(float Degrees, struct AActor* Source); // Function FSD.TemperatureComponent.ChangeTemperature // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1211f30
};

// Class FSD.EnemyTemperatureComponent
// Size: 0x148 (Inherited: 0xc8)
struct UEnemyTemperatureComponent : UTemperatureComponent {
	float UpdateTime; // 0xc8(0x04)
	bool DieIfFrozen; // 0xcc(0x01)
	bool DieIfBurning; // 0xcd(0x01)
	char pad_CE[0x2]; // 0xce(0x02)
	float TemperatureChangeScale; // 0xd0(0x04)
	float BurnTemperature; // 0xd4(0x04)
	float DouseFireTemperature; // 0xd8(0x04)
	float FreezeTemperature; // 0xdc(0x04)
	float UnFreezeTemperature; // 0xe0(0x04)
	int32_t WarmingRate; // 0xe4(0x04)
	int32_t CoolingRate; // 0xe8(0x04)
	bool IsHeatsourceWhenOnFire; // 0xec(0x01)
	char pad_ED[0x3]; // 0xed(0x03)
	float OnFireHeatRange; // 0xf0(0x04)
	float MaxColdSlowdown; // 0xf4(0x04)
	char pad_F8[0x8]; // 0xf8(0x08)
	struct UEnemyDetonationSetting* DetonationSetting; // 0x100(0x08)
	struct UPawnStatsComponent* PawnStats; // 0x108(0x08)
	char pad_110[0x18]; // 0x110(0x18)
	int32_t WarmingCooldown; // 0x128(0x04)
	char pad_12C[0x8]; // 0x12c(0x08)
	char FireDetonationStack; // 0x134(0x01)
	char IceDetonationStack; // 0x135(0x01)
	char pad_136[0x12]; // 0x136(0x12)

	void TimerCallback(); // Function FSD.EnemyTemperatureComponent.TimerCallback // (Final|Native|Protected) // @ game+0x10e3c10
	void OnDeath(struct UHealthComponent* HealthComponent, float damageAmount, struct UDamageClass* DamageClass, struct AActor* damageCause, struct AController* Instigator, struct UFSDPhysicalMaterial* PhysicalMaterial, bool IsRadial, struct TArray<struct UDamageTag*> Tags); // Function FSD.EnemyTemperatureComponent.OnDeath // (Final|Native|Protected|HasOutParms) // @ game+0x10e3120
	void DoTemperatureShock(struct UStatusEffectsComponent* Status); // Function FSD.EnemyTemperatureComponent.DoTemperatureShock // (Final|Native|Protected) // @ game+0x10e2d50
	void All_IceDetonation(); // Function FSD.EnemyTemperatureComponent.All_IceDetonation // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x10e2c20
	void All_FireDetonation(); // Function FSD.EnemyTemperatureComponent.All_FireDetonation // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x10e2c00
};

// Class FSD.EnemyTemperatureReplicatorComponent
// Size: 0xf0 (Inherited: 0xb0)
struct UEnemyTemperatureReplicatorComponent : UActorComponent {
	struct FMulticastInlineDelegate OnTemperatureEffectChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnIsFrozenChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnIsOnFireChanged; // 0xd0(0x10)
	struct TWeakObjectPtr<struct UEnemyTemperatureComponent> EnemyTemperatureComponent; // 0xe0(0x08)
	int32_t TemperatureEffect; // 0xe8(0x04)
	bool bIsFrozen; // 0xec(0x01)
	bool bIsOnFire; // 0xed(0x01)
	char pad_EE[0x2]; // 0xee(0x02)

	void OnRep_TemperatureEffect(); // Function FSD.EnemyTemperatureReplicatorComponent.OnRep_TemperatureEffect // (Final|Native|Protected) // @ game+0x10e3490
	void OnRep_IsOnFire(); // Function FSD.EnemyTemperatureReplicatorComponent.OnRep_IsOnFire // (Final|Native|Protected) // @ game+0x10e3470
	void OnRep_IsFrozen(); // Function FSD.EnemyTemperatureReplicatorComponent.OnRep_IsFrozen // (Final|Native|Protected) // @ game+0x10e3450
	bool IsOnFire(); // Function FSD.EnemyTemperatureReplicatorComponent.IsOnFire // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e3100
	bool IsFrozen(); // Function FSD.EnemyTemperatureReplicatorComponent.IsFrozen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a30c0
	float GetTemperatureEffect(); // Function FSD.EnemyTemperatureReplicatorComponent.GetTemperatureEffect // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e30d0
	void BoolDelegate__DelegateSignature(bool Value); // DelegateFunction FSD.EnemyTemperatureReplicatorComponent.BoolDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
};

// Class FSD.EnemyWaveController
// Size: 0x30 (Inherited: 0x28)
struct UEnemyWaveController : UObject {
	bool IsComplete; // 0x28(0x01)
	bool IsSuitableForSolo; // 0x29(0x01)
	char pad_2A[0x6]; // 0x2a(0x06)

	void StartWave(); // Function FSD.EnemyWaveController.StartWave // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void ResumeWave(); // Function FSD.EnemyWaveController.ResumeWave // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void PauseWave(); // Function FSD.EnemyWaveController.PauseWave // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void OnWaveCompleted(); // Function FSD.EnemyWaveController.OnWaveCompleted // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.EnemyWaveManager
// Size: 0x138 (Inherited: 0xb0)
struct UEnemyWaveManager : UActorComponent {
	struct TArray<struct FWaveEntry> ScriptedWaves; // 0xb0(0x10)
	struct TArray<struct FWaveEntry> EndMissionWaves; // 0xc0(0x10)
	struct TArray<struct UEnemyWaveController*> ActiveScriptedWaves; // 0xd0(0x10)
	float StartDelay; // 0xe0(0x04)
	float spawnRadiusFromSpawnPoint; // 0xe4(0x04)
	bool ScriptedWavesEnabled; // 0xe8(0x01)
	bool NormalWavesEnabled; // 0xe9(0x01)
	bool OverrideDifficultyScriptedWaveInternal; // 0xea(0x01)
	char pad_EB[0x1]; // 0xeb(0x01)
	struct FRandRange OverrideScriptedWaveInterval; // 0xec(0x08)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct AFSDGameMode* GameMode; // 0xf8(0x08)
	struct UEnemySpawnManager* SpawnManager; // 0x100(0x08)
	char pad_108[0x10]; // 0x108(0x10)
	struct TArray<struct UObject*> NormalWavesBlockStack; // 0x118(0x10)
	struct TArray<struct UObject*> ScriptedWavesBlockStack; // 0x128(0x10)

	struct UEnemyWaveController* TriggerWave(struct UEnemyWaveController* waveClass); // Function FSD.EnemyWaveManager.TriggerWave // (Final|Native|Public|BlueprintCallable) // @ game+0x10e3cc0
	void TriggerEndWave(bool cancelAllWaves); // Function FSD.EnemyWaveManager.TriggerEndWave // (Final|Native|Public|BlueprintCallable) // @ game+0x10e3c30
	void SpawnScriptedWave(); // Function FSD.EnemyWaveManager.SpawnScriptedWave // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e3b70
	void PushDisableScriptedWaves(struct UObject* Owner); // Function FSD.EnemyWaveManager.PushDisableScriptedWaves // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e36b0
	void PushDisableNormalWaves(struct UObject* Owner); // Function FSD.EnemyWaveManager.PushDisableNormalWaves // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e3630
	void PopDisableScriptedWaves(struct UObject* Owner); // Function FSD.EnemyWaveManager.PopDisableScriptedWaves // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e3530
	void PopDisableNormalWaves(struct UObject* Owner); // Function FSD.EnemyWaveManager.PopDisableNormalWaves // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e34b0
	void OnMatchEnded(); // Function FSD.EnemyWaveManager.OnMatchEnded // (Final|Native|Protected) // @ game+0x10e3410
	void OnEnemySpawned(struct APawn* enemy); // Function FSD.EnemyWaveManager.OnEnemySpawned // (Final|Native|Protected) // @ game+0x10e3390
	bool AreScriptedWavesBlocked(); // Function FSD.EnemyWaveManager.AreScriptedWavesBlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e2c70
	bool AreNormalWavesBlocked(); // Function FSD.EnemyWaveManager.AreNormalWavesBlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e2c40
};

// Class FSD.EscortMuleAIController
// Size: 0x410 (Inherited: 0x358)
struct AEscortMuleAIController : AFSDAIController {
	char pad_358[0x10]; // 0x358(0x10)
	struct TArray<struct FVector> CurrentPath; // 0x368(0x10)
	char pad_378[0x50]; // 0x378(0x50)
	struct TArray<struct FVector> GaragePath; // 0x3c8(0x10)
	int32_t PathIndex; // 0x3d8(0x04)
	int32_t CurrentRoom; // 0x3dc(0x04)
	struct UEscortObjective* EscortObj; // 0x3e0(0x08)
	int32_t TunnelStartIndex; // 0x3e8(0x04)
	int32_t TunnelEndIndex; // 0x3ec(0x04)
	char pad_3F0[0x18]; // 0x3f0(0x18)
	struct FRandomStream RandomStream; // 0x408(0x08)

	void SetDozerNextPathSegment(); // Function FSD.EscortMuleAIController.SetDozerNextPathSegment // (Final|Native|Public|BlueprintCallable) // @ game+0x10e38b0
	void OnPathComplete(); // Function FSD.EscortMuleAIController.OnPathComplete // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct TArray<struct FVector> GetPathForDebug(int32_t Segment); // Function FSD.EscortMuleAIController.GetPathForDebug // (Final|Native|Public|BlueprintCallable) // @ game+0x10e2fe0
	struct FVector GetPathEndTagent(); // Function FSD.EscortMuleAIController.GetPathEndTagent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x10e2fa0
	void FindDozerPath(struct FVector StartPosition); // Function FSD.EscortMuleAIController.FindDozerPath // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10e2ed0
};

// Class FSD.EscortObjective
// Size: 0x338 (Inherited: 0x178)
struct UEscortObjective : UObjective {
	struct FMulticastInlineDelegate OnProgressUpdated; // 0x178(0x10)
	struct FMulticastInlineDelegate OnShellBreakPauseChange; // 0x188(0x10)
	struct FMulticastInlineDelegate OnMuleRefueled; // 0x198(0x10)
	bool DidRescueDorettaHead; // 0x1a8(0x01)
	char pad_1A9[0x3]; // 0x1a9(0x03)
	int32_t AreasToScan; // 0x1ac(0x04)
	int32_t ScanCount; // 0x1b0(0x04)
	char pad_1B4[0x4]; // 0x1b4(0x04)
	struct TArray<struct FVector> ScanLocations; // 0x1b8(0x10)
	struct UDebrisPositioning* Positioning; // 0x1c8(0x08)
	struct UDebrisPositioning* EscortMulePositioning; // 0x1d0(0x08)
	struct UCurveFloat* CostDistanceCurve; // 0x1d8(0x08)
	float DebrisRadius; // 0x1e0(0x04)
	char pad_1E4[0x4]; // 0x1e4(0x04)
	struct TArray<struct UDebrisBase*> ObjectDebris; // 0x1e8(0x10)
	SoftClassProperty RefuelObjectClass; // 0x1f8(0x28)
	SoftClassProperty DestinationClass; // 0x220(0x28)
	int32_t AreasScanned; // 0x248(0x04)
	enum class EEscortMissionState State; // 0x24c(0x01)
	bool FinalBattle; // 0x24d(0x01)
	char pad_24E[0x2]; // 0x24e(0x02)
	struct UCarvedResourceData* FuelResource; // 0x250(0x08)
	struct UResourceData* GemResource; // 0x258(0x08)
	struct FMulticastInlineDelegate OnCannisterRegistered; // 0x260(0x10)
	float ServerShellProgress; // 0x270(0x04)
	char pad_274[0x1c]; // 0x274(0x1c)
	int32_t SecondsToDestroyHeartstone; // 0x290(0x04)
	int32_t FullCanistersRequired; // 0x294(0x04)
	int32_t FullCanisters; // 0x298(0x04)
	int32_t FuelResourceAmount; // 0x29c(0x04)
	SoftClassProperty GarageDropCarver; // 0x2a0(0x28)
	SoftClassProperty EscortMuleDropBeaconClass; // 0x2c8(0x28)
	SoftClassProperty GarageClass; // 0x2f0(0x28)
	struct FVector EscortMuleDropLocation; // 0x318(0x0c)
	char pad_324[0x4]; // 0x324(0x04)
	struct AEscortMule* EscortMule; // 0x328(0x08)
	struct AEscortDestination* EscortDestination; // 0x330(0x08)

	void SyncProgressTimer(); // Function FSD.EscortObjective.SyncProgressTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x10e7ca0
	void StartShellBreak(); // Function FSD.EscortObjective.StartShellBreak // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x10e7c80
	void SpawnGarage(); // Function FSD.EscortObjective.SpawnGarage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void SetState(enum class EEscortMissionState State); // Function FSD.EscortObjective.SetState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e7b10
	void SetShellBreakPaused(bool newPaused); // Function FSD.EscortObjective.SetShellBreakPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x10e7a00
	void SetEscortMule(struct AEscortMule* MULE); // Function FSD.EscortObjective.SetEscortMule // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e7790
	void RegisterFuelCannister(struct AExtractorItem* extractor); // Function FSD.EscortObjective.RegisterFuelCannister // (Final|Native|Public|BlueprintCallable) // @ game+0x10e7300
	void RecordFailStage(bool muleDied); // Function FSD.EscortObjective.RecordFailStage // (Final|Native|Protected|BlueprintCallable) // @ game+0x10e7270
	void OnResourceChanged(struct UCappedResource* CappedResource, float Amount); // Function FSD.EscortObjective.OnResourceChanged // (Final|Native|Protected) // @ game+0x10e71a0
	void OnRep_FullCanisters(); // Function FSD.EscortObjective.OnRep_FullCanisters // (Final|Native|Protected) // @ game+0x10e7100
	void OnRep_EscortState(); // Function FSD.EscortObjective.OnRep_EscortState // (Final|Native|Protected) // @ game+0x10c9930
	void OnRep_EscortMule(); // Function FSD.EscortObjective.OnRep_EscortMule // (Final|Native|Protected) // @ game+0x10e70c0
	void OnRep_AreasToScan(int32_t prevAmount); // Function FSD.EscortObjective.OnRep_AreasToScan // (Final|Native|Protected) // @ game+0x107ea10
	void OnRep_AreasScanned(int32_t prevAmount); // Function FSD.EscortObjective.OnRep_AreasScanned // (Final|Native|Protected) // @ game+0x107ea10
	void OnMuleDied(struct UHealthComponentBase* HealthComponent); // Function FSD.EscortObjective.OnMuleDied // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnHealthChanged(float Health); // Function FSD.EscortObjective.OnHealthChanged // (Final|Native|Protected) // @ game+0x10e7020
	void OnFullCanistersChanged(int32_t Amount); // Function FSD.EscortObjective.OnFullCanistersChanged // (Final|Native|Protected) // @ game+0x10e6fa0
	void OnEscortMuleSpawnedEvent(); // Function FSD.EscortObjective.OnEscortMuleSpawnedEvent // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	float GetShellBreakProgress(); // Function FSD.EscortObjective.GetShellBreakProgress // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x10e6c90
	bool DoesPathExist(struct FVector Start, struct FVector End); // Function FSD.EscortObjective.DoesPathExist // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x10e6970
};

// Class FSD.EscortMule
// Size: 0x490 (Inherited: 0x2f0)
struct AEscortMule : AFSDPawn {
	char pad_2F0[0x8]; // 0x2f0(0x08)
	struct FMulticastInlineDelegate OnMuleActivated; // 0x2f8(0x10)
	struct FMulticastInlineDelegate OnSpeedChanged; // 0x308(0x10)
	struct FMulticastInlineDelegate OnFullCanistersChanged; // 0x318(0x10)
	struct FMulticastInlineDelegate OnExitGaragePathSet; // 0x328(0x10)
	struct FMulticastInlineDelegate Cheat_SetMuleSpeed; // 0x338(0x10)
	struct FMulticastInlineDelegate Cheat_JumpToNextPhase; // 0x348(0x10)
	struct UFriendlyHealthComponent* HealthComponent; // 0x358(0x08)
	struct USimpleObjectInfoComponent* ObjectInfo; // 0x360(0x08)
	struct URestrictedResourceBank* ResourceBank; // 0x368(0x08)
	struct FTransform TargetTransform; // 0x370(0x30)
	struct FTransform PreviousTransform; // 0x3a0(0x30)
	char pad_3D0[0x20]; // 0x3d0(0x20)
	struct FEscortMuleMovementState MovementState; // 0x3f0(0x50)
	float SpeedModifier; // 0x440(0x04)
	char pad_444[0x4]; // 0x444(0x04)
	struct USkeletalMeshComponent* Mesh; // 0x448(0x08)
	struct UOutlineComponent* OutlineComponent; // 0x450(0x08)
	float HealPerTickNormal; // 0x458(0x04)
	float HealPerTickUnderAttack; // 0x45c(0x04)
	bool CannisterVisible_Left; // 0x460(0x01)
	bool CannisterVisible_Right; // 0x461(0x01)
	char pad_462[0x2]; // 0x462(0x02)
	struct FVector NextStop; // 0x464(0x0c)
	bool IsCarvingTunnel; // 0x470(0x01)
	char pad_471[0x3]; // 0x471(0x03)
	int32_t FullCanisters; // 0x474(0x04)
	struct TArray<struct FEscortMuleExtractorSlot> ExtractorSlots; // 0x478(0x10)
	char pad_488[0x8]; // 0x488(0x08)

	bool TryHeal(struct APlayerCharacter* User, float Amount); // Function FSD.EscortMule.TryHeal // (Final|Native|Protected|BlueprintCallable) // @ game+0x10e7cc0
	void SetTargetTransform(struct FTransform InTransform); // Function FSD.EscortMule.SetTargetTransform // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10e7b90
	void SetSpeedModifier(float inSpeedModifier); // Function FSD.EscortMule.SetSpeedModifier // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e7a90
	void SetFullExtracterAttached(struct UInstantUsable* Usable); // Function FSD.EscortMule.SetFullExtracterAttached // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e7980
	void SetExtractorDetached(struct UInstantUsable* Usable); // Function FSD.EscortMule.SetExtractorDetached // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e7900
	void SetExitGaragePath(struct TArray<struct FVector> Path); // Function FSD.EscortMule.SetExitGaragePath // (Final|Native|Public|BlueprintCallable) // @ game+0x10e7810
	void ResetExtractors(); // Function FSD.EscortMule.ResetExtractors // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e73a0
	void PathIsReady(); // Function FSD.EscortMule.PathIsReady // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRep_SpeedModifier(); // Function FSD.EscortMule.OnRep_SpeedModifier // (Final|Native|Protected) // @ game+0x10e7180
	void OnRep_MovementState(); // Function FSD.EscortMule.OnRep_MovementState // (Final|Native|Protected) // @ game+0x10e7140
	void OnRep_IsCarvingTunnel(); // Function FSD.EscortMule.OnRep_IsCarvingTunnel // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_ExtractorSlots(); // Function FSD.EscortMule.OnRep_ExtractorSlots // (Final|Native|Protected) // @ game+0x10e70e0
	void OnObjectiveStateChanged(enum class EEscortMissionState NewState); // Function FSD.EscortMule.OnObjectiveStateChanged // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnExtractorSlotChanged(struct FEscortMuleExtractorSlot Slot, int32_t Index); // Function FSD.EscortMule.OnExtractorSlotChanged // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void OnExtractorDetached(struct AExtractorItem* Item); // Function FSD.EscortMule.OnExtractorDetached // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ObjectiveStateChange(enum class EEscortMissionState NewState); // Function FSD.EscortMule.ObjectiveStateChange // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10e6f00
	enum class EEscortExtractorState GetExtractorState(struct UInstantUsable* Usable); // Function FSD.EscortMule.GetExtractorState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e6bb0
	void ActivateMule(); // Function FSD.EscortMule.ActivateMule // (Final|Native|Protected|BlueprintCallable) // @ game+0x10e6720
};

// Class FSD.EscortMuleTrack
// Size: 0x248 (Inherited: 0x220)
struct AEscortMuleTrack : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct FGameplayTagContainer GameplayTags; // 0x228(0x20)
};

// Class FSD.EscortDestination
// Size: 0x260 (Inherited: 0x220)
struct AEscortDestination : AActor {
	struct FMulticastInlineDelegate OnShellCracked; // 0x220(0x10)
	struct UDamageComponent* EndExplosionDamage; // 0x230(0x08)
	float NextBreakpoint; // 0x238(0x04)
	int32_t StageForAnalytics; // 0x23c(0x04)
	int32_t SecondsToDestroyHeartstone; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)
	struct TArray<float> BreakpointsPercent; // 0x248(0x10)
	float Radius; // 0x258(0x04)
	float ShellThickness; // 0x25c(0x04)

	void MeltPlatforms(struct ADeepCSGWorld* CSGWorld, struct TArray<struct FVector> meltPoints, float meltRadius); // Function FSD.EscortDestination.MeltPlatforms // (Final|Native|Protected|BlueprintCallable) // @ game+0x10e6da0
	struct UTerrainMaterial* GetTerrainMaterialByHandle(struct ADeepCSGWorld* CSGWorld, int32_t materialHandle); // Function FSD.EscortDestination.GetTerrainMaterialByHandle // (Final|Native|Protected|BlueprintCallable) // @ game+0x10e6cb0
	int32_t GetSecondsToDestroyObjective(); // Function FSD.EscortDestination.GetSecondsToDestroyObjective // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10e6c70
	struct FVector GetClosestPointOnRadius(struct FVector CurrentLocation, int32_t numberOfShellsCracked, struct FVector dirFromCenter); // Function FSD.EscortDestination.GetClosestPointOnRadius // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10e6a60
};

// Class FSD.FSDPhysicsActor
// Size: 0x238 (Inherited: 0x220)
struct AFSDPhysicsActor : AActor {
	int32_t MovementUpdateFrequency; // 0x220(0x04)
	int32_t MovementUpdateEventTriggeredFrequency; // 0x224(0x04)
	char pad_228[0x10]; // 0x228(0x10)

	void ForceMovementUpdate(); // Function FSD.FSDPhysicsActor.ForceMovementUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x1121720
};

// Class FSD.CarriableItem
// Size: 0x260 (Inherited: 0x238)
struct ACarriableItem : AFSDPhysicsActor {
	struct FMulticastInlineDelegate OnAttachedChangeDelegate; // 0x238(0x10)
	struct FMulticastInlineDelegate OnCarriableDeposited; // 0x248(0x10)
	bool StrictDeposit; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)

	void Throw(struct FVector force); // Function FSD.CarriableItem.Throw // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x158ca90
	void Receive_OnDeposited(struct APlayerCharacter* fromPlayer); // Function FSD.CarriableItem.Receive_OnDeposited // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnAttachChanged(bool Attached); // Function FSD.CarriableItem.OnAttachChanged // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.DorrettaHead
// Size: 0x270 (Inherited: 0x260)
struct ADorrettaHead : ACarriableItem {
	struct UCarriableInstantUsable* Usable; // 0x260(0x08)
	struct UCarriableComponent* CarriableComponent; // 0x268(0x08)
};

// Class FSD.FuelCannisterAttachedAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UFuelCannisterAttachedAnimInstance : UAnimInstance {
	bool CanBeTaken; // 0x268(0x01)

	void SetCanBeTaken(bool canBeTakenValue); // Function FSD.FuelCannisterAttachedAnimInstance.SetCanBeTaken // (Final|Native|Public|BlueprintCallable) // @ game+0x10e7710
};

// Class FSD.FuelCannisterItemAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UFuelCannisterItemAnimInstance : UAnimInstance {
	bool IsOnGround; // 0x268(0x01)
	bool IsFull; // 0x269(0x01)
	bool IsShooting; // 0x26a(0x01)
};

// Class FSD.EscortMuleAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UEscortMuleAnimInstance : UAnimInstance {
	bool LeftCannistersVisible; // 0x268(0x01)
	bool RightCannistersVisible; // 0x269(0x01)
	bool IsEngineRunning; // 0x26a(0x01)
	bool IsBeingRefueled; // 0x26b(0x01)
	bool PlatformOut; // 0x26c(0x01)

	void OnTookDamage(struct UHealthComponent* Health); // Function FSD.EscortMuleAnimInstance.OnTookDamage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ExplosiveBarrelEvent
// Size: 0x360 (Inherited: 0x358)
struct AExplosiveBarrelEvent : AGameEvent {
	struct UDamageComponent* EndDamage; // 0x358(0x08)
};

// Class FSD.ExtractorItem
// Size: 0x550 (Inherited: 0x390)
struct AExtractorItem : AAnimatedItem {
	char pad_390[0x8]; // 0x390(0x08)
	struct FMulticastInlineDelegate OnCurrentLoadChangedEvent; // 0x398(0x10)
	struct FMulticastInlineDelegate OnCharacterEquipChange; // 0x3a8(0x10)
	struct UBoxComponent* DroppedCollider; // 0x3b8(0x08)
	struct USkeletalMeshComponent* DroppedMesh; // 0x3c0(0x08)
	struct UFirstPersonParticleSystemComponent* FP_DrillParticles; // 0x3c8(0x08)
	struct UFSDAudioComponent* AudioComponent; // 0x3d0(0x08)
	struct UPointLightComponent* SurfaceLight; // 0x3d8(0x08)
	struct UParticleSystemComponent* MeltingParticles; // 0x3e0(0x08)
	struct UParticleSystemComponent* InvalidSurfaceParticles; // 0x3e8(0x08)
	struct UParticleSystemComponent* FPMuzzleParticles; // 0x3f0(0x08)
	struct UParticleSystemComponent* FPMuzzleInvalidParticles; // 0x3f8(0x08)
	struct UParticleSystemComponent* TPMuzzleParticles; // 0x400(0x08)
	struct UParticleSystemComponent* TPMuzzleInvalidParticles; // 0x408(0x08)
	struct UAnimMontage* FPMineMontage; // 0x410(0x08)
	struct UAnimMontage* TPMineMontage; // 0x418(0x08)
	struct UAnimMontage* FPGunsling; // 0x420(0x08)
	struct UAnimMontage* TPGunsling; // 0x428(0x08)
	struct FName MiningSpeedAudioParamterName; // 0x430(0x08)
	struct UParticleSystem* DrillParticles; // 0x438(0x08)
	struct UForceFeedbackEffect* DrillRumble; // 0x440(0x08)
	float BlockParticlesScaleFP; // 0x448(0x04)
	float BlockParticlesScaleTP; // 0x44c(0x04)
	enum class EExtractorState State; // 0x450(0x01)
	char pad_451[0x3]; // 0x451(0x03)
	float MovementPenalty; // 0x454(0x04)
	float CarverRayCastLength; // 0x458(0x04)
	float CarveTerrainDistanceCheck; // 0x45c(0x04)
	float CurrentDrillSpeed; // 0x460(0x04)
	char pad_464[0x14]; // 0x464(0x14)
	float DrillParticlesDuration; // 0x478(0x04)
	char pad_47C[0x4]; // 0x47c(0x04)
	struct UResourceData* ExtractetMaterial; // 0x480(0x08)
	float TimeBeforeInvalidShout; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)
	struct UDialogDataAsset* InvalidSurfaceShout; // 0x490(0x08)
	struct UDialogDataAsset* ShoutFull; // 0x498(0x08)
	struct USoundCue* DigSound; // 0x4a0(0x08)
	bool IsMining; // 0x4a8(0x01)
	bool IsGunslinging; // 0x4a9(0x01)
	bool ReadyToExtract; // 0x4aa(0x01)
	char pad_4AB[0xd]; // 0x4ab(0x0d)
	struct UParticleSystem* VacuumEffect; // 0x4b8(0x08)
	struct UParticleSystem* ChunkSplatEffect; // 0x4c0(0x08)
	struct USoundCue* ChunkSplatSound; // 0x4c8(0x08)
	char pad_4D0[0x24]; // 0x4d0(0x24)
	float MaxDifference; // 0x4f4(0x04)
	char pad_4F8[0x4]; // 0x4f8(0x04)
	float MeltingTime; // 0x4fc(0x04)
	float ChunkMultiplier; // 0x500(0x04)
	float CollectChunkCooldown; // 0x504(0x04)
	float CrossfadeSpeed; // 0x508(0x04)
	char pad_50C[0x14]; // 0x50c(0x14)
	float VacuumEffectOffset; // 0x520(0x04)
	float MaxCapacity; // 0x524(0x04)
	float PlayerCountBonus; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)
	struct FColor SurfaceLightInitialColor; // 0x530(0x04)
	struct FColor SurfaceLightEndColor; // 0x534(0x04)
	float SurfaceLightMinIntensity; // 0x538(0x04)
	float SurfaceLightMaxIntensity; // 0x53c(0x04)
	float CurrentLoad; // 0x540(0x04)
	char pad_544[0xc]; // 0x544(0x0c)

	void SetCanPickup(bool canPickup); // Function FSD.ExtractorItem.SetCanPickup // (BlueprintAuthorityOnly|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void Server_StopMining(); // Function FSD.ExtractorItem.Server_StopMining // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x10e76c0
	void Server_StartMining(); // Function FSD.ExtractorItem.Server_StartMining // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x10e7670
	void Server_SetReadyToExtract(bool IsReady); // Function FSD.ExtractorItem.Server_SetReadyToExtract // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10e75b0
	void Server_DigBlock(struct FVector_NetQuantize Start, struct FVector_NetQuantize End); // Function FSD.ExtractorItem.Server_DigBlock // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x10e7480
	void Server_CollectChunk(struct AResourceChunk* chunk); // Function FSD.ExtractorItem.Server_CollectChunk // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x10e73c0
	void ResetCurrentLoad(); // Function FSD.ExtractorItem.ResetCurrentLoad // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10e7380
	void OnValidSurfaceChanged(bool IsValid); // Function FSD.ExtractorItem.OnValidSurfaceChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnThrown(struct FVector Direction); // Function FSD.ExtractorItem.OnThrown // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x158ca90
	void OnStopDrilling(); // Function FSD.ExtractorItem.OnStopDrilling // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnStartDrilling(); // Function FSD.ExtractorItem.OnStartDrilling // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRep_SimulatingMining(); // Function FSD.ExtractorItem.OnRep_SimulatingMining // (Final|Native|Public) // @ game+0x10e7160
	void OnRep_IsGunslinging(); // Function FSD.ExtractorItem.OnRep_IsGunslinging // (Final|Native|Public) // @ game+0x10e7120
	void OnRep_CurrentLoad(); // Function FSD.ExtractorItem.OnRep_CurrentLoad // (Final|Native|Protected) // @ game+0x10e70a0
	void OnCurrentLoadChanged(float load); // Function FSD.ExtractorItem.OnCurrentLoadChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnChunkCooldownOver(); // Function FSD.ExtractorItem.OnChunkCooldownOver // (Final|Native|Public) // @ game+0x10e6f80
	bool IsFull(); // Function FSD.ExtractorItem.IsFull // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e6d70
	struct UBoxComponent* GetRootCollider(); // Function FSD.ExtractorItem.GetRootCollider // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e6c40
	void All_SimulateDigBlock(struct FVector_NetQuantize Position, bool spawnParticles, int32_t Material); // Function FSD.ExtractorItem.All_SimulateDigBlock // (Net|Native|Event|NetMulticast|Public) // @ game+0x10e6850
	void All_ChunkSplat(struct AResourceChunk* chunk); // Function FSD.ExtractorItem.All_ChunkSplat // (Net|Native|Event|NetMulticast|Public) // @ game+0x10e67c0
	void AddResource(float Amount); // Function FSD.ExtractorItem.AddResource // (Final|Native|Public|BlueprintCallable) // @ game+0x10e6740
};

// Class FSD.ExtruderPlant
// Size: 0x248 (Inherited: 0x220)
struct AExtruderPlant : AActor {
	struct USkeletalMeshComponent* SkeletalMesh; // 0x220(0x08)
	struct UAnimationAsset* ExtrudeAnimation; // 0x228(0x08)
	struct UAnimationAsset* RetractAnimation; // 0x230(0x08)
	struct UAudioComponent* Audio; // 0x238(0x08)
	char pad_240[0x8]; // 0x240(0x08)
};

// Class FSD.FacilityGeneratorLine
// Size: 0x320 (Inherited: 0x220)
struct AFacilityGeneratorLine : AActor {
	struct FTransform StartTransform; // 0x220(0x30)
	struct TArray<struct FTransform> EndTransforms; // 0x250(0x10)
	float HeightOffsetMin; // 0x260(0x04)
	float HeightOffsetMax; // 0x264(0x04)
	float MaxSegmentLength; // 0x268(0x04)
	float CarveRadius; // 0x26c(0x04)
	struct USplineComponent* SplineComponent; // 0x270(0x08)
	struct USplineDecoratorComponent* SplineDecorator; // 0x278(0x08)
	struct TSoftObjectPtr<struct UStaticMesh> LineMeshPtr; // 0x280(0x28)
	struct TSoftObjectPtr<struct UMaterialInterface> MaterialConnected; // 0x2a8(0x28)
	struct TSoftObjectPtr<struct UMaterialInterface> MaterialUnconnected; // 0x2d0(0x28)
	struct ATetherStation* Station; // 0x2f8(0x08)
	struct UStaticMesh* MeshInstance; // 0x300(0x08)
	struct TArray<struct FVector> ReplicatedPath; // 0x308(0x10)
	bool Connected; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)

	void SetConnected(bool InConnected); // Function FSD.FacilityGeneratorLine.SetConnected // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10ecff0
	void ReceiveBeginPathFinding(); // Function FSD.FacilityGeneratorLine.ReceiveBeginPathFinding // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_Path(); // Function FSD.FacilityGeneratorLine.OnRep_Path // (Final|Native|Protected) // @ game+0x10ec860
	void OnRep_Connected(); // Function FSD.FacilityGeneratorLine.OnRep_Connected // (Final|Native|Protected) // @ game+0x10ec7a0
};

// Class FSD.RessuplyPod
// Size: 0x2d8 (Inherited: 0x220)
struct ARessuplyPod : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct FMulticastInlineDelegate OnStateChanged; // 0x228(0x10)
	struct FGameplayTagContainer GameplayTags; // 0x238(0x20)
	struct UDamageComponent* Damage; // 0x258(0x08)
	float KillRadius; // 0x260(0x04)
	float DropHeight; // 0x264(0x04)
	float DropDelay; // 0x268(0x04)
	float MissionShoutDelay; // 0x26c(0x04)
	struct UDialogDataAsset* DialogOrderAccepted; // 0x270(0x08)
	struct UDialogDataAsset* DialogPodArrived; // 0x278(0x08)
	char pad_280[0x8]; // 0x280(0x08)
	struct UDialogDataAsset* CurrentMissionShout; // 0x288(0x08)
	struct FVector StartLocation; // 0x290(0x0c)
	struct FVector TargetLocation; // 0x29c(0x0c)
	enum class ERessuplyPodState State; // 0x2a8(0x01)
	char pad_2A9[0x3]; // 0x2a9(0x03)
	float TargetDropTime; // 0x2ac(0x04)
	char pad_2B0[0xc]; // 0x2b0(0x0c)
	float ServerDropProgress; // 0x2bc(0x04)
	struct UCurveFloat* DropCurve; // 0x2c0(0x08)
	struct AActor* PlayerSpawnPoint; // 0x2c8(0x08)
	float CloseToImpactDistance; // 0x2d0(0x04)
	char pad_2D4[0x4]; // 0x2d4(0x04)

	void SetIdling(); // Function FSD.RessuplyPod.SetIdling // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11e4280
	void RessuplyPodStateDelegate__DelegateSignature(struct ARessuplyPod* InPod, enum class ERessuplyPodState InState); // DelegateFunction FSD.RessuplyPod.RessuplyPodStateDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnTunnelBLocked(); // Function FSD.RessuplyPod.OnTunnelBLocked // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_State(enum class ERessuplyPodState oldState); // Function FSD.RessuplyPod.OnRep_State // (Final|Native|Protected) // @ game+0x11e3ed0
	void OnDropStarted(); // Function FSD.RessuplyPod.OnDropStarted // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDroppodImpact(); // Function FSD.RessuplyPod.OnDroppodImpact // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDroppodCloseToImpact(); // Function FSD.RessuplyPod.OnDroppodCloseToImpact // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct AActor* DropToTarget(struct UObject* WorldContextObject, struct ARessuplyPod* podClass, struct FVector Location, struct AActor* requester); // Function FSD.RessuplyPod.DropToTarget // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11e33d0
};

// Class FSD.FacilityHackingPod
// Size: 0x2f0 (Inherited: 0x2d8)
struct AFacilityHackingPod : ARessuplyPod {
	struct FMulticastInlineDelegate OnHackingPodStateChanged; // 0x2d8(0x10)
	enum class EHackingPodState PodState; // 0x2e8(0x01)
	char pad_2E9[0x7]; // 0x2e9(0x07)

	void SetState(enum class EHackingPodState aState); // Function FSD.FacilityHackingPod.SetState // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x10ed310
	void OnRep_PodState(enum class EHackingPodState oldState); // Function FSD.FacilityHackingPod.OnRep_PodState // (Final|Native|Protected) // @ game+0x10ec880
	void OnExitState(enum class EHackingPodState oldState); // Function FSD.FacilityHackingPod.OnExitState // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnEnterState(enum class EHackingPodState NextState); // Function FSD.FacilityHackingPod.OnEnterState // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	enum class EHackingPodState GetState(); // Function FSD.FacilityHackingPod.GetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ec270
};

// Class FSD.FacilityHackingPodAnimInstance
// Size: 0x2a0 (Inherited: 0x270)
struct UFacilityHackingPodAnimInstance : UAnimInstance {
	struct AActor* SaluteTarget; // 0x270(0x08)
	struct FRotator LookingDirection; // 0x278(0x0c)
	struct FRotator TargetRotation; // 0x284(0x0c)
	bool IsHacking; // 0x290(0x01)
	enum class EHackingPodState PodState; // 0x291(0x01)
	char pad_292[0x2]; // 0x292(0x02)
	float RadarDishAngle; // 0x294(0x04)
	char pad_298[0x8]; // 0x298(0x08)

	void SetSaluter(struct AActor* salutingTarget); // Function FSD.FacilityHackingPodAnimInstance.SetSaluter // (Final|Native|Public|BlueprintCallable) // @ game+0x10ed290
	void ResetSaluteTarget(); // Function FSD.FacilityHackingPodAnimInstance.ResetSaluteTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x10ecfd0
};

// Class FSD.ItemDispenserAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UItemDispenserAnimInstance : UAnimInstance {
	bool IsOpen; // 0x268(0x01)
	bool HasItem; // 0x269(0x01)
};

// Class FSD.FacilityTetherDispenserAnimInstnace
// Size: 0x280 (Inherited: 0x270)
struct UFacilityTetherDispenserAnimInstnace : UItemDispenserAnimInstance {
	enum class EHackingPodState PodState; // 0x270(0x01)
	bool ShouldShowDispenser; // 0x271(0x01)
	bool ShouldCloseFromDispenser; // 0x272(0x01)
	bool ShouldShowButton; // 0x273(0x01)
	bool ShouldHideButton; // 0x274(0x01)
	char pad_275[0xb]; // 0x275(0x0b)
};

// Class FSD.FacilityObjective
// Size: 0x2f0 (Inherited: 0x178)
struct UFacilityObjective : UObjective {
	char pad_178[0x10]; // 0x178(0x10)
	SoftClassProperty generatorClass; // 0x188(0x28)
	SoftClassProperty GeneratorBeaconClass; // 0x1b0(0x28)
	int32_t GeneratorCount; // 0x1d8(0x04)
	int32_t ObjectivesStage; // 0x1dc(0x04)
	struct TArray<struct FSubObjective> SubObjectives; // 0x1e0(0x10)
	struct FDelegate OnFirstEncounterDroneSpawned_Delegate; // 0x1f0(0x10)
	struct FDelegate OnSecondEncounterDroneSpawned_Delegate; // 0x200(0x10)
	char pad_210[0x10]; // 0x210(0x10)
	struct TArray<struct APawn*> spawnedEnemies; // 0x220(0x10)
	char pad_230[0x8]; // 0x230(0x08)
	struct TArray<struct UEnemyDescriptor*> TurretDescriptors; // 0x238(0x10)
	struct TArray<struct UEnemyDescriptor*> GeneratorRoomTurretDescriptors; // 0x248(0x10)
	struct TArray<struct UEnemyDescriptor*> EncounterEnemies; // 0x258(0x10)
	float EncounterDifficulty; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct FRandInterval Diversity; // 0x270(0x10)
	struct FIRandRange TurretEncountersRange; // 0x280(0x08)
	int32_t MinimumTurretEncounters; // 0x288(0x04)
	struct FIRandRange TunnelTurretsRange; // 0x28c(0x08)
	char pad_294[0x4]; // 0x294(0x04)
	struct TArray<struct AActor*> SmallGenerators; // 0x298(0x10)
	struct ATetherStation* mainFacility; // 0x2a8(0x08)
	struct TArray<int32_t> ShieldGeneratorRooms; // 0x2b0(0x10)
	int32_t MainFacilityRoom; // 0x2c0(0x04)
	char pad_2C4[0x4]; // 0x2c4(0x04)
	struct TArray<struct AActor*> ShieldGenerators; // 0x2c8(0x10)
	struct UResourceData* GoalResource; // 0x2d8(0x08)
	float AmountRequired; // 0x2e0(0x04)
	float AmountCollected; // 0x2e4(0x04)
	int32_t GeneratorsActivated; // 0x2e8(0x04)
	char pad_2EC[0x4]; // 0x2ec(0x04)

	void SpawnFacilityEncounters(struct AProceduralSetup* setup, struct UEncounterManager* Encounters, struct UDebrisPositioning* Positioning); // Function FSD.FacilityObjective.SpawnFacilityEncounters // (Final|Native|Public|BlueprintCallable) // @ game+0x10ed690
	struct TArray<struct FTransform> SpawnEndBattleTurrets(int32_t amountOfTurrets, struct AProceduralSetup* setup, struct UDebrisPositioning* DebrisPositioning, struct AActor* terrainPlacement, struct TArray<struct AActor*> existingTurrets, bool success); // Function FSD.FacilityObjective.SpawnEndBattleTurrets // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x10ed450
	void SetMainFacility(struct ATetherStation* mainFacility); // Function FSD.FacilityObjective.SetMainFacility // (Final|Native|Protected|BlueprintCallable) // @ game+0x10ed210
	void SetGeneratorRooms(struct TArray<int32_t> generatorRoomsIndicies); // Function FSD.FacilityObjective.SetGeneratorRooms // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x10ed080
	void SecondGeneratorEncounterSpawn(struct APawn* spawned); // Function FSD.FacilityObjective.SecondGeneratorEncounterSpawn // (Final|Native|Protected) // @ game+0x10ec050
	void Receive_AddEnemies(struct AProceduralSetup* setup); // Function FSD.FacilityObjective.Receive_AddEnemies // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void ProgressCurrentObjective(); // Function FSD.FacilityObjective.ProgressCurrentObjective // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10ecfb0
	struct AActor* PlaceObjectInRoom(struct AProceduralSetup* setup, struct FRoomNode RoomNode, struct UDebrisPositioning* Positioning, struct AActor* placementActor); // Function FSD.FacilityObjective.PlaceObjectInRoom // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x10ecb40
	void OnResourceChanged(struct UCappedResource* Resource, float Amount); // Function FSD.FacilityObjective.OnResourceChanged // (Final|Native|Public) // @ game+0x10ec940
	void OnRep_ObjectivesStage(); // Function FSD.FacilityObjective.OnRep_ObjectivesStage // (Final|Native|Protected) // @ game+0x10ec840
	void OnRep_GeneratorsActivated(); // Function FSD.FacilityObjective.OnRep_GeneratorsActivated // (Final|Native|Protected) // @ game+0x10ec7c0
	void OnRep_AmountCollected(); // Function FSD.FacilityObjective.OnRep_AmountCollected // (Final|Native|Protected) // @ game+0x10ec780
	void OnCoreDeposited(); // Function FSD.FacilityObjective.OnCoreDeposited // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	bool IsSubObjectiveComplete(int32_t objectiveIndex); // Function FSD.FacilityObjective.IsSubObjectiveComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ec570
	void InitGeneratorCount(int32_t generators); // Function FSD.FacilityObjective.InitGeneratorCount // (Final|Native|Public|BlueprintCallable) // @ game+0x10ec4c0
	struct FTransform GetTurretGoal(struct AProceduralSetup* setup, struct FVector Origin, float idealRange, struct UDebrisPositioning* DebrisPositioning, struct AActor* terrainPlacement, bool success); // Function FSD.FacilityObjective.GetTurretGoal // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10ec290
	struct TArray<struct AActor*> GetShieldGenerators(); // Function FSD.FacilityObjective.GetShieldGenerators // (Final|Native|Public|BlueprintCallable) // @ game+0x10ec1e0
	int32_t GetShieldGeneratorCount(); // Function FSD.FacilityObjective.GetShieldGeneratorCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ec1c0
	int32_t GetFacilityRoomIndex(); // Function FSD.FacilityObjective.GetFacilityRoomIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ec170
	struct FVector GetFacilityLocation(); // Function FSD.FacilityObjective.GetFacilityLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ec130
	struct FSubObjective GetCurrentObjective(); // Function FSD.FacilityObjective.GetCurrentObjective // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ec0f0
	void GeneratorActivated(); // Function FSD.FacilityObjective.GeneratorActivated // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10ec0d0
	void FirstGeneratorEncounterSpawn(struct APawn* spawned); // Function FSD.FacilityObjective.FirstGeneratorEncounterSpawn // (Final|Native|Protected) // @ game+0x10ec050
	void DropOverCharger(struct AProceduralSetup* setup, int32_t roomIndex, struct FVector facilityLocation, float idealRange, float idealZDistance, struct UDebrisPositioning* DebrisPositioning, struct ARessuplyPod* generatorClass); // Function FSD.FacilityObjective.DropOverCharger // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10ebae0
	void ChangeObjective(); // Function FSD.FacilityObjective.ChangeObjective // (Final|Native|Public) // @ game+0x10ebac0
	void AddShieldGenerator(struct AActor* charger, int32_t roomIndex); // Function FSD.FacilityObjective.AddShieldGenerator // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10eb9a0
};

// Class FSD.HackableBuildingObjective
// Size: 0x178 (Inherited: 0x178)
struct UHackableBuildingObjective : UObjective {

	void DropOverCharger(struct AProceduralSetup* setup, struct FVector buildingLocation, float idealRange, float idealZDistance, struct UDebrisPositioning* DebrisPositioning, struct ARessuplyPod* generatorClass); // Function FSD.HackableBuildingObjective.DropOverCharger // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10ebcf0
};

// Class FSD.FacilityPowerStation
// Size: 0x258 (Inherited: 0x220)
struct AFacilityPowerStation : AActor {
	struct FMulticastInlineDelegate OnHackingProgressDelegate; // 0x220(0x10)
	struct FMulticastInlineDelegate OnProgresspointDelegate; // 0x230(0x10)
	float ProgressPoint; // 0x240(0x04)
	int32_t ProgresPointCount; // 0x244(0x04)
	char pad_248[0x4]; // 0x248(0x04)
	float TimeToDefend; // 0x24c(0x04)
	float Progress; // 0x250(0x04)
	bool IsHacking; // 0x254(0x01)
	char pad_255[0x3]; // 0x255(0x03)

	void StopHacking(); // Function FSD.FacilityPowerStation.StopHacking // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10ed7b0
	void StartHacking(); // Function FSD.FacilityPowerStation.StartHacking // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10ed790
	void OnRep_Progress(); // Function FSD.FacilityPowerStation.OnRep_Progress // (Final|Native|Protected) // @ game+0x10ec900
	void OnRep_IsHacking(); // Function FSD.FacilityPowerStation.OnRep_IsHacking // (Final|Native|Protected) // @ game+0x10ec800
	void OnHackingComplete(); // Function FSD.FacilityPowerStation.OnHackingComplete // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnHackingChanged(bool IsHacking); // Function FSD.FacilityPowerStation.OnHackingChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	bool IsHacked(); // Function FSD.FacilityPowerStation.IsHacked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ec540
};

// Class FSD.FacilityShieldGenerator
// Size: 0x248 (Inherited: 0x220)
struct AFacilityShieldGenerator : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct FGameplayTagContainer GameplayTags; // 0x228(0x20)
};

// Class FSD.TentacleBase
// Size: 0x4d0 (Inherited: 0x340)
struct ATentacleBase : AEnemyPawn {
	struct USplineComponent* SplineComponent; // 0x340(0x08)
	char pad_348[0x8]; // 0x348(0x08)
	struct FTransform RestTransform; // 0x350(0x30)
	struct FTransform LastTransform; // 0x380(0x30)
	struct FTransform DesiredTransform; // 0x3b0(0x30)
	struct FTentacleTarget DesiredTarget; // 0x3e0(0x20)
	char pad_400[0x60]; // 0x400(0x60)
	struct FVector TargetLocation; // 0x460(0x0c)
	float MovementAlpha; // 0x46c(0x04)
	float HeadMovementDuration; // 0x470(0x04)
	float CanSwayCooldown; // 0x474(0x04)
	struct FVector2D SwayRange; // 0x478(0x08)
	float NeckBaseTangentLength; // 0x480(0x04)
	struct FVector NeckBasePositionOffset; // 0x484(0x0c)
	struct FVector NeckBaseTangentOffset; // 0x490(0x0c)
	float NeckTopTangentLength; // 0x49c(0x04)
	struct FVector NeckTopPositionOffset; // 0x4a0(0x0c)
	struct FVector NeckTopTangentOffset; // 0x4ac(0x0c)
	float DurationTentacleRetract; // 0x4b8(0x04)
	float DurationTentacleFoldout; // 0x4bc(0x04)
	struct USceneComponent* HeadRoot; // 0x4c0(0x08)
	struct USceneComponent* HeadRotator; // 0x4c8(0x08)

	void Recieve_OnRep_Owner(); // Function FSD.TentacleBase.Recieve_OnRep_Owner // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_DesiredTarget(); // Function FSD.TentacleBase.OnRep_DesiredTarget // (Final|Native|Protected) // @ game+0x1212a00
	void MoveHydraHead(struct FTransform newDesiredTransform, float newCanSwayCooldown, float newHeadMovementDuration, bool UseSpring); // Function FSD.TentacleBase.MoveHydraHead // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1212270
	struct AStabberVineRoot* GetStabberVineRoot(); // Function FSD.TentacleBase.GetStabberVineRoot // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x12121b0
	struct USceneComponent* GetHeadRotator(); // Function FSD.TentacleBase.GetHeadRotator // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct USceneComponent* GetHeadRoot(); // Function FSD.TentacleBase.GetHeadRoot // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.FacilityTentacle
// Size: 0x520 (Inherited: 0x4d0)
struct AFacilityTentacle : ATentacleBase {
	char pad_4D0[0x8]; // 0x4d0(0x08)
	float SwaySpeed; // 0x4d8(0x04)
	bool Extended; // 0x4dc(0x01)
	char pad_4DD[0x3]; // 0x4dd(0x03)
	struct TArray<struct UAnimMontage*> HitReactions; // 0x4e0(0x10)
	enum class EFacilityTentacleState TentacleState; // 0x4f0(0x01)
	char pad_4F1[0x7]; // 0x4f1(0x07)
	struct USkeletalMeshComponent* HeadMesh; // 0x4f8(0x08)
	char pad_500[0x20]; // 0x500(0x20)

	void PlayHitReaction(float Amount); // Function FSD.FacilityTentacle.PlayHitReaction // (Final|Native|Protected) // @ game+0x10ecf30
	void OnStateChanged(enum class EFacilityTentacleState NewState); // Function FSD.FacilityTentacle.OnStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_TentacleState(); // Function FSD.FacilityTentacle.OnRep_TentacleState // (Final|Native|Protected) // @ game+0x10ec920
	bool FindBurrowLocation(struct UDebrisPositioning* Debris, struct FVector Origin, float Radius, struct FVector OutLocation); // Function FSD.FacilityTentacle.FindBurrowLocation // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10ebed0
};

// Class FSD.FacilityTentacleHeadAnimInstance
// Size: 0x2c0 (Inherited: 0x2c0)
struct UFacilityTentacleHeadAnimInstance : UEnemyAnimInstance {
	bool Searching; // 0x2b8(0x01)
	bool Melee; // 0x2b9(0x01)
	bool RangedAttack; // 0x2ba(0x01)
};

// Class FSD.FacilityTurretController
// Size: 0x388 (Inherited: 0x358)
struct AFacilityTurretController : AFSDAIController {
	struct UAIPerceptionComponent* Perception; // 0x358(0x08)
	char pad_360[0x18]; // 0x360(0x18)
	float RememberTargetTime; // 0x378(0x04)
	float RetargetOnAttackChance; // 0x37c(0x04)
	bool RespectAttack; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)

	void OnTurretsAttackingChanged(bool IsAttacking); // Function FSD.FacilityTurretController.OnTurretsAttackingChanged // (Final|Native|Private) // @ game+0x10ecab0
	void OnTargetRevived(); // Function FSD.FacilityTurretController.OnTargetRevived // (Final|Native|Private) // @ game+0x10eca90
	void OnTargetDied(struct UHealthComponentBase* Health); // Function FSD.FacilityTurretController.OnTargetDied // (Final|Native|Public) // @ game+0x10eca10
	void OnPerceptionUpdated(struct AActor* sensedActor, struct FAIStimulus Stimulus); // Function FSD.FacilityTurretController.OnPerceptionUpdated // (Final|Native|Public) // @ game+0x10ec600
};

// Class FSD.FacilityTurret
// Size: 0x448 (Inherited: 0x340)
struct AFacilityTurret : AEnemyPawn {
	struct USceneComponent* Root; // 0x340(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x348(0x08)
	char pad_350[0x10]; // 0x350(0x10)
	float IndicatorActivationDelay; // 0x360(0x04)
	char pad_364[0x4]; // 0x364(0x04)
	bool FinishAttackIgnoreLoS; // 0x368(0x01)
	bool InvulnerableOnInactive; // 0x369(0x01)
	char pad_36A[0x2]; // 0x36a(0x02)
	float FoldOutTime; // 0x36c(0x04)
	char pad_370[0x8]; // 0x370(0x08)
	struct USoundCue* EngagedAudio; // 0x378(0x08)
	char pad_380[0x20]; // 0x380(0x20)
	float Offset; // 0x3a0(0x04)
	float AimAcceleration; // 0x3a4(0x04)
	char pad_3A8[0x8]; // 0x3a8(0x08)
	struct FRuntimeFloatCurve AimSpeedCurve; // 0x3b0(0x88)
	struct AActor* CurrentTarget; // 0x438(0x08)
	bool TurretEngaged; // 0x440(0x01)
	bool AlwaysActive; // 0x441(0x01)
	char pad_442[0x6]; // 0x442(0x06)

	void SetIsAttacking(bool IsAttacking); // Function FSD.FacilityTurret.SetIsAttacking // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x10ed180
	void OnRep_TurretEngaged(); // Function FSD.FacilityTurret.OnRep_TurretEngaged // (Native|Protected) // @ game+0x10877d0
	void OnProjectileSpawned(); // Function FSD.FacilityTurret.OnProjectileSpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnEngagedChanged(bool engaged); // Function FSD.FacilityTurret.OnEngagedChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnAttack(); // Function FSD.FacilityTurret.OnAttack // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	struct FRotator GetLookingDirection(); // Function FSD.FacilityTurret.GetLookingDirection // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ec190
};

// Class FSD.SpinningFacilityturret
// Size: 0x478 (Inherited: 0x448)
struct ASpinningFacilityturret : AFacilityTurret {
	struct FRotator TargetRotation; // 0x448(0x0c)
	struct FRandRange AimAtTargetEveryTurn; // 0x454(0x08)
	float TurnCooldown; // 0x45c(0x04)
	float TurnTimer; // 0x460(0x04)
	float Acceptance; // 0x464(0x04)
	float TurnSpeed; // 0x468(0x04)
	char pad_46C[0xc]; // 0x46c(0x0c)
};

// Class FSD.AimingFacilityTurret
// Size: 0x508 (Inherited: 0x448)
struct AAimingFacilityTurret : AFacilityTurret {
	bool IsLockedOn; // 0x448(0x01)
	char pad_449[0x7]; // 0x449(0x07)
	struct UParticleSystemComponent* aimIndicator; // 0x450(0x08)
	struct UParticleSystemComponent* aimIndicatorLock; // 0x458(0x08)
	char pad_460[0x20]; // 0x460(0x20)
	float LockOnTime; // 0x480(0x04)
	float BurstInterval; // 0x484(0x04)
	float FireInterval; // 0x488(0x04)
	float TurretRotationSpeed; // 0x48c(0x04)
	float InitialLockonDelay; // 0x490(0x04)
	float RegainLosLockonModifier; // 0x494(0x04)
	float AimZOffset; // 0x498(0x04)
	float TargetLeadingStrength; // 0x49c(0x04)
	float TargetLeadingResponsiveness; // 0x4a0(0x04)
	float RaimainAfterShotTime; // 0x4a4(0x04)
	float TargetLeadingAfterLockonMultiplier; // 0x4a8(0x04)
	float TurningSpeedAfterLockOnMultipier; // 0x4ac(0x04)
	float PreLockonTargetChangeChance; // 0x4b0(0x04)
	float PreLockongTargetChangeRate; // 0x4b4(0x04)
	float IndicatorFlashTime; // 0x4b8(0x04)
	bool TrackTargetAfterLockon; // 0x4bc(0x01)
	bool ConstantAimAfterLock; // 0x4bd(0x01)
	bool UseTraceForLockOn; // 0x4be(0x01)
	char pad_4BF[0x12]; // 0x4bf(0x12)
	enum class EIndicatorMode IndicatorMode; // 0x4d1(0x01)
	char pad_4D2[0xa]; // 0x4d2(0x0a)
	struct FInt32Interval BurstCount; // 0x4dc(0x08)
	char pad_4E4[0x24]; // 0x4e4(0x24)

	void SetupAimindicator(struct UParticleSystemComponent* aimIndicator, struct UParticleSystemComponent* aimIndicatorLock); // Function FSD.AimingFacilityTurret.SetupAimindicator // (Final|Native|Protected|BlueprintCallable) // @ game+0x10ed390
	void OnRep_IsLockedOn(); // Function FSD.AimingFacilityTurret.OnRep_IsLockedOn // (Final|Native|Private) // @ game+0x10ec820
	void OnRep_IndicatorMode(); // Function FSD.AimingFacilityTurret.OnRep_IndicatorMode // (Final|Native|Private) // @ game+0x10ec7e0
	void OnLockedOn(bool lockedOn); // Function FSD.AimingFacilityTurret.OnLockedOn // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.FacilityTurretAnimInstance
// Size: 0x2d0 (Inherited: 0x2c0)
struct UFacilityTurretAnimInstance : UEnemyAnimInstance {
	struct FRotator AimRotation; // 0x2b8(0x0c)
	bool IsEngaged; // 0x2c8(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)
};

// Class FSD.FadeVisibilitySubSystem
// Size: 0x78 (Inherited: 0x30)
struct UFadeVisibilitySubSystem : UWorldSubsystem {
	char pad_30[0x48]; // 0x30(0x48)

	void ScalePrimitive(struct UPrimitiveComponent* Component, struct FVector StartScale, struct FVector EndScale, float Duration); // Function FSD.FadeVisibilitySubSystem.ScalePrimitive // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x10f22d0
	void ScaleOutPrimitive(struct UPrimitiveComponent* Component, float Duration); // Function FSD.FadeVisibilitySubSystem.ScaleOutPrimitive // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f2210
	void ScaleInPrimitive(struct UPrimitiveComponent* Component, float Duration); // Function FSD.FadeVisibilitySubSystem.ScaleInPrimitive // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f2150
	void FadeOutLight(struct ULightComponent* Light, float Duration); // Function FSD.FadeVisibilitySubSystem.FadeOutLight // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f1880
	void FadeInMaterialByName(struct UMeshComponent* Component, struct FName Name, struct FName ParameterName, float Duration); // Function FSD.FadeVisibilitySubSystem.FadeInMaterialByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f1740
	void FadeInMaterialByIndex(struct UMeshComponent* Component, int32_t MaterialIndex, struct FName ParameterName, float Duration); // Function FSD.FadeVisibilitySubSystem.FadeInMaterialByIndex // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f1610
	void FadeInLight(struct ULightComponent* Light, float Duration); // Function FSD.FadeVisibilitySubSystem.FadeInLight // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f1550
};

// Class FSD.FakeFallComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UFakeFallComponent : UActorComponent {
	char pad_B0[0x28]; // 0xb0(0x28)

	void StartFakeFall(); // Function FSD.FakeFallComponent.StartFakeFall // (Final|Native|Public|BlueprintCallable) // @ game+0x10f2e40
};

// Class FSD.FakeMoverSettings
// Size: 0x90 (Inherited: 0x30)
struct UFakeMoverSettings : UDataAsset {
	enum class DeepPathFinderSize PathfinderColiSize; // 0x30(0x01)
	bool StickToSurface; // 0x31(0x01)
	bool AlignRotationToSurface; // 0x32(0x01)
	char pad_33[0x1]; // 0x33(0x01)
	float AirFriction; // 0x34(0x04)
	float SurfaceFriction; // 0x38(0x04)
	float Gravity; // 0x3c(0x04)
	float AirGravity; // 0x40(0x04)
	struct FFakeMoverPropulsion Propulsion; // 0x44(0x14)
	struct FFakeMoverTarget NearestPlayerInfluence; // 0x58(0x1c)
	struct FFakeMoverTarget TargetInfluence; // 0x74(0x1c)
};

// Class FSD.FakePhysicsMover
// Size: 0x2c0 (Inherited: 0x220)
struct AFakePhysicsMover : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct FFakeMoverState MoverState; // 0x228(0x60)
	struct FFakeMoveState posVel; // 0x288(0x24)
	char pad_2AC[0x4]; // 0x2ac(0x04)
	struct UFakeMoverSettings* MoveSettings; // 0x2b0(0x08)
	float SyncTime; // 0x2b8(0x04)
	char pad_2BC[0x4]; // 0x2bc(0x04)

	void Teleport(struct FVector Pos, struct FVector Vel); // Function FSD.FakePhysicsMover.Teleport // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10f2e60
	void OnRep_PosVel(struct FFakeMoveState posVel); // Function FSD.FakePhysicsMover.OnRep_PosVel // (Final|Native|Public|HasOutParms) // @ game+0x10f1da0
	void OnRep_MoveSettings(struct UFakeMoverSettings* MoveSettings); // Function FSD.FakePhysicsMover.OnRep_MoveSettings // (Final|Native|Public) // @ game+0x10b53d0
	void ApplyImpulse(struct FVector Impulse); // Function FSD.FakePhysicsMover.ApplyImpulse // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10f13e0
};

// Class FSD.FallingStateComponent
// Size: 0x1b0 (Inherited: 0x100)
struct UFallingStateComponent : UCharacterStateComponent {
	float FallDamageStartVelocity; // 0x100(0x04)
	float FallDamageModifier; // 0x104(0x04)
	float AutoClimbMinDelay; // 0x108(0x04)
	float AutoClimbLookForwardDistance; // 0x10c(0x04)
	float MaxClimbHeight; // 0x110(0x04)
	float MinClimbHeight; // 0x114(0x04)
	float CapsuleCheckZOffset; // 0x118(0x04)
	float MinInputDotProduct; // 0x11c(0x04)
	float JumpZVelocity; // 0x120(0x04)
	bool DebugAutoClimb; // 0x124(0x01)
	char pad_125[0x3]; // 0x125(0x03)
	struct UDialogDataAsset* FallingShout; // 0x128(0x08)
	float ShoutAfterDistance; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
	struct UUseAnimationSetting* ClimbUseSettings; // 0x138(0x08)
	char pad_140[0x2c]; // 0x140(0x2c)
	float HoverBootAirFriction; // 0x16c(0x04)
	float HoverBootAirControl; // 0x170(0x04)
	float HoverBootGravityScale; // 0x174(0x04)
	struct UDialogDataAsset* ShoutHoverBootsBegin; // 0x178(0x08)
	float HoverBootActivateDuration; // 0x180(0x04)
	bool bHoverBootsActive; // 0x184(0x01)
	char pad_185[0x3]; // 0x185(0x03)
	float HoverBootMaxDuration; // 0x188(0x04)
	struct FVector2D JumpBootsVelocityWindow; // 0x18c(0x08)
	float JumpBootsZVelocity; // 0x194(0x04)
	char pad_198[0x8]; // 0x198(0x08)
	bool JumpBootsActive; // 0x1a0(0x01)
	char pad_1A1[0xf]; // 0x1a1(0x0f)

	void ShowJumpBootsActivation(); // Function FSD.FallingStateComponent.ShowJumpBootsActivation // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Server_TakeFallDamage(float Amount); // Function FSD.FallingStateComponent.Server_TakeFallDamage // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10f2900
	void Server_SetJumpPressed(bool Pressed); // Function FSD.FallingStateComponent.Server_SetJumpPressed // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10f2840
	void Server_SetHoverBootsPressed(bool IsPressed); // Function FSD.FallingStateComponent.Server_SetHoverBootsPressed // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10f2780
	void Server_SetFallVelocity(float Velocity); // Function FSD.FallingStateComponent.Server_SetFallVelocity // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0x10f2700
	void Server_ClimbLedge(bool shouldPlayAnimation); // Function FSD.FallingStateComponent.Server_ClimbLedge // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10f2670
	void Server_ActivateJumpBoots(); // Function FSD.FallingStateComponent.Server_ActivateJumpBoots // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10f2620
	void ReceiveHoverBootsTick(float DeltaSeconds); // Function FSD.FallingStateComponent.ReceiveHoverBootsTick // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveHoverBootsActiveChanged(bool IsActive); // Function FSD.FallingStateComponent.ReceiveHoverBootsActiveChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_HoverBootsActive(); // Function FSD.FallingStateComponent.OnRep_HoverBootsActive // (Final|Native|Protected) // @ game+0x10f1d40
	void JumpReleased(); // Function FSD.FallingStateComponent.JumpReleased // (Final|Native|Protected) // @ game+0x10f1d20
	void JumpPressed(); // Function FSD.FallingStateComponent.JumpPressed // (Final|Native|Protected) // @ game+0x10f1d00
	void HoverBootsReleased(); // Function FSD.FallingStateComponent.HoverBootsReleased // (Final|Native|Protected) // @ game+0x10f1ca0
	void HoverBootsPressed(); // Function FSD.FallingStateComponent.HoverBootsPressed // (Final|Native|Protected) // @ game+0x10f1c80
	void All_ShowJumpBootsActivation(); // Function FSD.FallingStateComponent.All_ShowJumpBootsActivation // (Net|Native|Event|NetMulticast|Protected) // @ game+0x10f12e0
	void All_ShowClimbLedge(); // Function FSD.FallingStateComponent.All_ShowClimbLedge // (Net|Native|Event|NetMulticast|Protected) // @ game+0x10f12c0
};

// Class FSD.FindFriendSessionsBlueprintCallProxy
// Size: 0x80 (Inherited: 0x30)
struct UFindFriendSessionsBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char pad_58[0x28]; // 0x58(0x28)

	struct UFindFriendSessionsBlueprintCallProxy* FindFriendSessions(struct UObject* WorldContextObject, struct FString FriendId); // Function FSD.FindFriendSessionsBlueprintCallProxy.FindFriendSessions // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f1aa0
};

// Class FSD.FirstPersonSkeletalMeshComponent
// Size: 0xac0 (Inherited: 0xac0)
struct UFirstPersonSkeletalMeshComponent : USkeletalMeshComponent {

	struct FVector CalcFirstPersonFOVPositionCorrection(struct APlayerController* PlayerController, struct FVector origPos); // Function FSD.FirstPersonSkeletalMeshComponent.CalcFirstPersonFOVPositionCorrection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10f1470
};

// Class FSD.FirstPersonStaticMeshComponent
// Size: 0x490 (Inherited: 0x480)
struct UFirstPersonStaticMeshComponent : UStaticMeshComponent {
	bool EnabledFPFOV; // 0x480(0x01)
	char pad_481[0xf]; // 0x481(0x0f)
};

// Class FSD.FirstPersonWidgetComponent
// Size: 0x540 (Inherited: 0x540)
struct UFirstPersonWidgetComponent : UWidgetComponent {
};

// Class FSD.FirstPersonParticleSystemComponent
// Size: 0x650 (Inherited: 0x650)
struct UFirstPersonParticleSystemComponent : UParticleSystemComponent {

	struct UParticleSystemComponent* SpawnFirstPersonEmitterAttached(struct UParticleSystem* EmitterTemplate, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy); // Function FSD.FirstPersonParticleSystemComponent.SpawnFirstPersonEmitterAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x10f2be0
};

// Class FSD.FirstPersonNiagaraComponent
// Size: 0x5a0 (Inherited: 0x5a0)
struct UFirstPersonNiagaraComponent : UNiagaraComponent {

	struct UNiagaraComponent* SpawnFirstPersonEmitterAttached(struct UNiagaraSystem* inNiagaraSystem, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool inAutoDestroy); // Function FSD.FirstPersonNiagaraComponent.SpawnFirstPersonEmitterAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x10f2980
};

// Class FSD.FirstPersonPointLightComponent
// Size: 0x350 (Inherited: 0x350)
struct UFirstPersonPointLightComponent : UPointLightComponent {
};

// Class FSD.FlameThrowerItem
// Size: 0x8b0 (Inherited: 0x6e0)
struct AFlameThrowerItem : AAmmoDrivenWeapon {
	struct UParticleSystemComponent* FlameParticleComponent; // 0x6e0(0x08)
	struct UDamageComponent* DamageComponent; // 0x6e8(0x08)
	struct UStickyFlameSpawner* StickyFlames; // 0x6f0(0x08)
	struct UDamageComponent* AoEHeatDamageComponent; // 0x6f8(0x08)
	struct UDamageComponent* ExplodingTargetsDamageComponent; // 0x700(0x08)
	struct UMotionAudioController* MotionAudio; // 0x708(0x08)
	int32_t ShotCostProjectile; // 0x710(0x04)
	char pad_714[0x4]; // 0x714(0x04)
	struct FDecalData ImpactDecal; // 0x718(0x18)
	float DecalDelay; // 0x730(0x04)
	float CurrentDecalDelay; // 0x734(0x04)
	struct UParticleSystem* ImpactParticles; // 0x738(0x08)
	struct UParticleSystemComponent* ImpactParticleInstance; // 0x740(0x08)
	struct UParticleSystem* FP_LongReachParticles; // 0x748(0x08)
	struct UParticleSystem* TP_LongReachParticles; // 0x750(0x08)
	float VeryLongReachThreshold; // 0x758(0x04)
	char pad_75C[0x4]; // 0x75c(0x04)
	struct UParticleSystem* FP_VeryLongReachParticles; // 0x760(0x08)
	struct UParticleSystem* TP_VeryLongReachParticles; // 0x768(0x08)
	struct TArray<struct FName> FlameParameterNames; // 0x770(0x10)
	float DamageSphereRadius; // 0x780(0x04)
	float MaxFlameDistance; // 0x784(0x04)
	float FlameGrowthPerSecond; // 0x788(0x04)
	float FlameEndPointResponsiveness; // 0x78c(0x04)
	float FlameIntensityPerSecond; // 0x790(0x04)
	char pad_794[0x4]; // 0x794(0x04)
	struct UStatusEffect* OnFireStatusEffect; // 0x798(0x08)
	float ChanceToFleeOnDamage; // 0x7a0(0x04)
	float MeltPointRadius; // 0x7a4(0x04)
	float MeltPointBuildTime; // 0x7a8(0x04)
	float MeltCarveTime; // 0x7ac(0x04)
	struct UParticleSystem* MeltSteamParticle; // 0x7b0(0x08)
	struct TArray<struct UItemUpgrade*> upgrades; // 0x7b8(0x10)
	bool LongReachEnabled; // 0x7c8(0x01)
	char pad_7C9[0xf]; // 0x7c9(0x0f)
	bool AoEHeatEnabled; // 0x7d8(0x01)
	char pad_7D9[0x3]; // 0x7d9(0x03)
	float KilledTargetsExplosionChance; // 0x7dc(0x04)
	float ShowDamageParticle; // 0x7e0(0x04)
	char pad_7E4[0x4]; // 0x7e4(0x04)
	struct UParticleSystem* DamangeTargetsParticles; // 0x7e8(0x08)
	struct UParticleSystem* KilledTargetsExplodingParticles; // 0x7f0(0x08)
	struct USoundCue* KilledTargetsExplodingSound; // 0x7f8(0x08)
	struct UProjectileLauncherBaseComponent* ProjectileLancher; // 0x800(0x08)
	char pad_808[0xa8]; // 0x808(0xa8)

	void TriggerAoEHeat(); // Function FSD.FlameThrowerItem.TriggerAoEHeat // (Final|Native|Protected) // @ game+0x10f2f40
	void ServerMeltIce(struct TArray<struct FVector> meltPoints); // Function FSD.FlameThrowerItem.ServerMeltIce // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10f2560
	void ServerDoDamage(struct FVector_NetQuantize Start, struct FVector_NetQuantize End); // Function FSD.FlameThrowerItem.ServerDoDamage // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10f2430
	void OnTargetKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.FlameThrowerItem.OnTargetKilled // (Final|Native|Protected) // @ game+0x10f1fb0
	void OnTargetDamaged(struct UHealthComponentBase* Health, float Amount, struct UPrimitiveComponent* HitComponent, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.FlameThrowerItem.OnTargetDamaged // (Final|Native|Protected) // @ game+0x10f1e60
	void All_ShowTargetBurstIntoFire(struct FVector_NetQuantize Location, struct FRotator Rotation); // Function FSD.FlameThrowerItem.All_ShowTargetBurstIntoFire // (Net|Native|Event|NetMulticast|Protected|HasDefaults) // @ game+0x10f1300
	void All_FlameFeedback(struct FVector_NetQuantize Location, struct FRotator Rotation); // Function FSD.FlameThrowerItem.All_FlameFeedback // (Net|Native|Event|NetMulticast|Protected|HasDefaults) // @ game+0x10f11e0
};

// Class FSD.FlameWallProjectile
// Size: 0x368 (Inherited: 0x340)
struct AFlameWallProjectile : AProjectile {
	struct AFlameWallSegment* SegmentParticleClass; // 0x340(0x08)
	int32_t SegmentCount; // 0x348(0x04)
	float WallWidth; // 0x34c(0x04)
	struct AActor* ImpactClass; // 0x350(0x08)
	char pad_358[0x10]; // 0x358(0x10)
};

// Class FSD.FlameWallSegment
// Size: 0x228 (Inherited: 0x220)
struct AFlameWallSegment : AActor {
	struct USphereComponent* CollisionComponent; // 0x220(0x08)
};

// Class FSD.Flare
// Size: 0x2c0 (Inherited: 0x238)
struct AFlare : AFSDPhysicsActor {
	char pad_238[0x20]; // 0x238(0x20)
	float InitialSpeed; // 0x258(0x04)
	float InitialAngularImpulse; // 0x25c(0x04)
	float InitialAngularImpulseRandomScale; // 0x260(0x04)
	int32_t MaxFlares; // 0x264(0x04)
	float ProductionTime; // 0x268(0x04)
	float Duration; // 0x26c(0x04)
	struct FLinearColor ChromaColor; // 0x270(0x10)
	bool IsFlareOn; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
	struct AActor* DamageCauser; // 0x288(0x08)
	struct AActor* WeaponPreviewClass; // 0x290(0x08)
	struct AItem* LoadoutItem; // 0x298(0x08)
	char pad_2A0[0x8]; // 0x2a0(0x08)
	struct UItemID* ItemID; // 0x2a8(0x08)
	struct USoundCue* ImpactGroundSound; // 0x2b0(0x08)
	char pad_2B8[0x8]; // 0x2b8(0x08)

	void OnUpdateShadowRadius(); // Function FSD.Flare.OnUpdateShadowRadius // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRep_IsFlareOn(); // Function FSD.Flare.OnRep_IsFlareOn // (Final|Native|Protected) // @ game+0x10f1d60
	void OnFlareSpawnCompleted(); // Function FSD.Flare.OnFlareSpawnCompleted // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x10aad30
	void OnFlareIgnite(); // Function FSD.Flare.OnFlareIgnite // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnFlareExtinguish(); // Function FSD.Flare.OnFlareExtinguish // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Inhibit(); // Function FSD.Flare.Inhibit // (Final|Native|Public|BlueprintCallable) // @ game+0x10f1cc0
	struct AActor* GetWeaponViewClass(); // Function FSD.Flare.GetWeaponViewClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10f1c40
	struct AFlare* GetFlareDefaultObject(struct AFlare* flareClass); // Function FSD.Flare.GetFlareDefaultObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10f1bc0
	void ActorWasHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.Flare.ActorWasHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x10f1050
	void ActivateFlare(); // Function FSD.Flare.ActivateFlare // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.FlareGunProjectile
// Size: 0x350 (Inherited: 0x340)
struct AFlareGunProjectile : AProjectile {
	float Duration; // 0x340(0x04)
	bool IsFlareOn; // 0x344(0x01)
	char pad_345[0xb]; // 0x345(0x0b)

	void OnUpdateShadowRadius(); // Function FSD.FlareGunProjectile.OnUpdateShadowRadius // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRep_IsFlareOn(); // Function FSD.FlareGunProjectile.OnRep_IsFlareOn // (Final|Native|Public) // @ game+0x10f1d80
	void OnFlareIgnite(); // Function FSD.FlareGunProjectile.OnFlareIgnite // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnFlareExtinguish(); // Function FSD.FlareGunProjectile.OnFlareExtinguish // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnDroppodImpact(struct AMiningPod* DropPod); // Function FSD.FlareGunProjectile.OnDroppodImpact // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Inhibit(); // Function FSD.FlareGunProjectile.Inhibit // (Final|Native|Public|BlueprintCallable) // @ game+0x10f1ce0
	void ActivateFlare(); // Function FSD.FlareGunProjectile.ActivateFlare // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.FlareController
// Size: 0xd8 (Inherited: 0xb0)
struct UFlareController : UActorComponent {
	struct FMulticastInlineDelegate OnShadowQualityChanged; // 0xb0(0x10)
	struct TArray<struct FFlareMeta> FlaresMeta; // 0xc0(0x10)
	char pad_D0[0x8]; // 0xd0(0x08)

	void UnregisterFlareGunProjectile(struct AFlareGunProjectile* flareprj); // Function FSD.FlareController.UnregisterFlareGunProjectile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f2f60
	void UnregisterFlare(struct AFlare* Flare); // Function FSD.FlareController.UnregisterFlare // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f2f60
	void RegisterFlareGunProjectile(struct AFlareGunProjectile* flareprj); // Function FSD.FlareController.RegisterFlareGunProjectile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f20e0
	void RegisterFlare(struct AFlare* Flare); // Function FSD.FlareController.RegisterFlare // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f2070
	struct AActor* FindFlareNear(struct UObject* WorldContextObject, struct FVector Pos, bool allowMoving, float maxLightRadiusFraction); // Function FSD.FlareController.FindFlareNear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x10f1940
};

// Class FSD.NegPointLightComponent
// Size: 0x350 (Inherited: 0x350)
struct UNegPointLightComponent : UPointLightComponent {
};

// Class FSD.PerkAsset
// Size: 0xc8 (Inherited: 0x30)
struct UPerkAsset : UDataAsset {
	struct FGuid SaveGameID; // 0x30(0x10)
	struct FText Title; // 0x40(0x18)
	struct UTexture2D* Icon; // 0x58(0x08)
	bool bIsEquippable; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct UDialogDataAsset* ShoutOnUseCharge; // 0x68(0x08)
	struct TArray<SoftClassProperty> PerkLogicClasses; // 0x70(0x10)
	SoftClassProperty HudIconWidgetClass; // 0x80(0x28)
	struct TArray<SoftClassProperty> HudActivationWidgets; // 0xa8(0x10)
	int32_t MaxUseCharges; // 0xb8(0x04)
	float CoolDownBetweenUse; // 0xbc(0x04)
	bool bIsHighlighted; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)

	bool UseCharge(struct APlayerController* PlayerController); // Function FSD.PerkAsset.UseCharge // (Final|Native|Public|BlueprintCallable) // @ game+0x11b6b60
	bool Unequip(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.PerkAsset.Unequip // (Final|Native|Protected|BlueprintCallable) // @ game+0x11b6aa0
	void SetHighlighted(struct UObject* WorldContext, bool IsHighlighted); // Function FSD.PerkAsset.SetHighlighted // (Final|Native|Protected|BlueprintCallable) // @ game+0x11b6630
	void SetCharacterPerks(struct UObject* WorldContext, struct UPlayerCharacterID* characterID, struct TArray<struct UPerkAsset*> perks); // Function FSD.PerkAsset.SetCharacterPerks // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11b6510
	bool IsUsageType(enum class EPerkUsageType InType); // Function FSD.PerkAsset.IsUsageType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b5700
	bool IsPerkAvailableInTier(int32_t Tier); // Function FSD.PerkAsset.IsPerkAvailableInTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b5540
	bool IsEquippedBy(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.PerkAsset.IsEquippedBy // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b5480
	float GetUseCoolDownTimeLeft(struct APlayerController* PlayerController); // Function FSD.PerkAsset.GetUseCoolDownTimeLeft // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b53e0
	float GetUseCoolDownProgress(struct APlayerController* PlayerController); // Function FSD.PerkAsset.GetUseCoolDownProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b5340
	float GetUseCoolDownDuration(struct APlayerController* PlayerController); // Function FSD.PerkAsset.GetUseCoolDownDuration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b52a0
	enum class EPerkUsageType GetUsageType(); // Function FSD.PerkAsset.GetUsageType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b5270
	enum class EPerkTierState GetStateAtTier(struct UObject* WorldContext, int32_t Tier); // Function FSD.PerkAsset.GetStateAtTier // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b50a0
	int32_t GetRemainingUseCharges(struct APlayerController* PlayerController); // Function FSD.PerkAsset.GetRemainingUseCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b4f40
	int32_t GetRankTier(int32_t Rank); // Function FSD.PerkAsset.GetRankTier // (Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b4ea0
	struct FText GetRankDescription(int32_t Rank); // Function FSD.PerkAsset.GetRankDescription // (Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b4da0
	int32_t GetRankCost(int32_t Rank); // Function FSD.PerkAsset.GetRankCost // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b4d00
	bool GetRankAtTier(int32_t Tier, int32_t Rank); // Function FSD.PerkAsset.GetRankAtTier // (Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b4c20
	int32_t GetMaxUseCharges(struct APlayerController* PlayerController); // Function FSD.PerkAsset.GetMaxUseCharges // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b44e0
	struct UPerkHUDIconWidget* GetHudIconWidgetClass(); // Function FSD.PerkAsset.GetHudIconWidgetClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b43e0
	struct TArray<struct UPerkHUDActivationWidget*> GetHudActivationWidgets(enum class EPerkHUDActivationLocation Location); // Function FSD.PerkAsset.GetHudActivationWidgets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b4310
	struct UPerkDelegateItem* GetDelegates(struct UObject* WorldContext); // Function FSD.PerkAsset.GetDelegates // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b4070
	int32_t GetCurrentRank(struct UObject* WorldContext); // Function FSD.PerkAsset.GetCurrentRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b3fe0
	int32_t GetChargesUsed(struct APlayerController* PlayerController); // Function FSD.PerkAsset.GetChargesUsed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b3f50
	struct FString GetAdditionalRankDescription(int32_t Rank); // Function FSD.PerkAsset.GetAdditionalRankDescription // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b3d20
	bool Equip(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.PerkAsset.Equip // (Final|Native|Protected|BlueprintCallable) // @ game+0x11b3880
	bool CanUseCharge(struct APlayerController* PlayerController); // Function FSD.PerkAsset.CanUseCharge // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b36f0
	bool BuyPerkAtTier(struct UObject* WorldContext, int32_t Tier); // Function FSD.PerkAsset.BuyPerkAtTier // (Final|Native|Protected|BlueprintCallable) // @ game+0x11b3630
};

// Class FSD.FloatPerkAsset
// Size: 0xe8 (Inherited: 0xc8)
struct UFloatPerkAsset : UPerkAsset {
	struct TArray<struct FFloatPerkRank> Ranks; // 0xc8(0x10)
	struct TArray<struct FFloatPerkEffect> Effects; // 0xd8(0x10)

	float GetPerkValue(struct UObject* WorldContext); // Function FSD.FloatPerkAsset.GetPerkValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10f72e0
	float GetLastTierValue(); // Function FSD.FloatPerkAsset.GetLastTierValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10f6ff0
	float GetFloatPerkValue(struct UObject* WorldContext, struct UFloatPerkAsset* Perk, float UnclaimedValue); // Function FSD.FloatPerkAsset.GetFloatPerkValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10f6c90
};

// Class FSD.FloatPerkActivation
// Size: 0x30 (Inherited: 0x30)
struct UFloatPerkActivation : UDataAsset {

	void Receive_ActivatePerk(struct APlayerCharacter* Character, float Value); // Function FSD.FloatPerkActivation.Receive_ActivatePerk // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.StatPerkActivation
// Size: 0x40 (Inherited: 0x30)
struct UStatPerkActivation : UFloatPerkActivation {
	struct UPawnStat* PawnStat; // 0x30(0x08)
	enum class EPawnStatType StatType; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class FSD.FloatPerkComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UFloatPerkComponent : UActorComponent {
	float FloatValue; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct APlayerCharacter* PlayerCharacter; // 0xb8(0x08)

	void Receive_OnInitialized(); // Function FSD.FloatPerkComponent.Receive_OnInitialized // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.CreateComponentPerkActivation
// Size: 0x58 (Inherited: 0x30)
struct UCreateComponentPerkActivation : UFloatPerkActivation {
	SoftClassProperty ComponentClass; // 0x30(0x28)
};

// Class FSD.EscapableGrabberEnemyActivation
// Size: 0x58 (Inherited: 0x30)
struct UEscapableGrabberEnemyActivation : UFloatPerkActivation {
	SoftClassProperty EnemyGrabberClass; // 0x30(0x28)
};

// Class FSD.SetCooldownPerkActivation
// Size: 0x30 (Inherited: 0x30)
struct USetCooldownPerkActivation : UFloatPerkActivation {
};

// Class FSD.SetMaxUsesPerkActivation
// Size: 0x30 (Inherited: 0x30)
struct USetMaxUsesPerkActivation : UFloatPerkActivation {
};

// Class FSD.KillNearbyCreaturePerkComponent
// Size: 0xe8 (Inherited: 0xc0)
struct UKillNearbyCreaturePerkComponent : UFloatPerkComponent {
	SoftClassProperty EnemyClass; // 0xc0(0x28)
};

// Class FSD.BezerkPerkComponent
// Size: 0xd0 (Inherited: 0xc0)
struct UBezerkPerkComponent : UFloatPerkComponent {
	struct UPawnStat* BoostedStat; // 0xc0(0x08)
	float AmountPerValue; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)

	void OnHealthChanged(float Health); // Function FSD.BezerkPerkComponent.OnHealthChanged // (Final|Native|Protected) // @ game+0x10f7480
};

// Class FSD.EyeForEyePerkComponent
// Size: 0x100 (Inherited: 0xc0)
struct UEyeForEyePerkComponent : UFloatPerkComponent {
	float CoolDown; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	SoftClassProperty EyeForEyeSTE; // 0xc8(0x28)
	char pad_F0[0x8]; // 0xf0(0x08)
	struct UStatusEffect* LoadedSTE; // 0xf8(0x08)

	void OnHit(float Damage, struct UDamageClass* inDamageClass, struct AActor* DamageCauser, bool anyHealthLost); // Function FSD.EyeForEyePerkComponent.OnHit // (Final|Native|Protected) // @ game+0x10f7500
};

// Class FSD.ThornsPerkComponent
// Size: 0xe0 (Inherited: 0xc0)
struct UThornsPerkComponent : UFloatPerkComponent {
	struct UDamageClass* DamageClass; // 0xc0(0x08)
	float CoolDown; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct UStatusEffect* ThornsSTE; // 0xd0(0x08)
	char pad_D8[0x8]; // 0xd8(0x08)

	void OnHit(float Damage, struct UDamageClass* inDamageClass, struct AActor* DamageCauser, bool anyHealthLost); // Function FSD.ThornsPerkComponent.OnHit // (Final|Native|Protected) // @ game+0x10f7650
};

// Class FSD.SalutePerkComponent
// Size: 0xd0 (Inherited: 0xc0)
struct USalutePerkComponent : UFloatPerkComponent {
	float CoolDown; // 0xc0(0x04)
	float FleeRadius; // 0xc4(0x04)
	char pad_C8[0x8]; // 0xc8(0x08)

	void OnSalute(); // Function FSD.SalutePerkComponent.OnSalute // (Final|Native|Protected) // @ game+0x10f77a0
};

// Class FSD.ShieldLinkComponent
// Size: 0x138 (Inherited: 0xc0)
struct UShieldLinkComponent : UFloatPerkComponent {
	struct UStatusEffect* BoostedStatusEffect; // 0xc0(0x08)
	struct UStatusEffect* BoostedStatusEffectInstance; // 0xc8(0x08)
	float LinkDistance; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
	struct TSet<struct APlayerCharacter*> LinkedCharacters; // 0xd8(0x50)
	struct UStatusEffect* LinkStatusEffect; // 0x128(0x08)
	char pad_130[0x8]; // 0x130(0x08)

	void TimerFunction(); // Function FSD.ShieldLinkComponent.TimerFunction // (Final|Native|Protected) // @ game+0x10f78e0
};

// Class FSD.BeastMasterComponent
// Size: 0xc8 (Inherited: 0xc0)
struct UBeastMasterComponent : UFloatPerkComponent {
	bool ShowCanCharmIcon; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)

	void SetDamage(struct UDamageComponent* cmp, float dmg); // Function FSD.BeastMasterComponent.SetDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x10f7810
	struct UActorComponent* AddPetComponent(struct UActorComponent* ComponentClass, struct AFSDPawn* targetPet, struct APlayerCharacter* petOwner); // Function FSD.BeastMasterComponent.AddPetComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f6960
};

// Class FSD.PetComponent
// Size: 0xb8 (Inherited: 0xb0)
struct UPetComponent : UActorComponent {
	struct TWeakObjectPtr<struct APlayerCharacter> OwningPlayer; // 0xb0(0x08)

	void ReceiveOwningPlayerChanged(); // Function FSD.PetComponent.ReceiveOwningPlayerChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.BeastMasterUseSphere
// Size: 0x410 (Inherited: 0x410)
struct UBeastMasterUseSphere : USphereComponent {
};

// Class FSD.FloodFillSettings
// Size: 0x68 (Inherited: 0x30)
struct UFloodFillSettings : UDataAsset {
	struct FVector NoiseSize; // 0x30(0x0c)
	float FreqMultiplier; // 0x3c(0x04)
	float AmplitudeMultiplier; // 0x40(0x04)
	float MinValue; // 0x44(0x04)
	float MaxValue; // 0x48(0x04)
	bool Turbulence; // 0x4c(0x01)
	bool Invert; // 0x4d(0x01)
	char pad_4E[0x2]; // 0x4e(0x02)
	int32_t Octaves; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct TArray<struct FLayeredNoise> NoiseLayers; // 0x58(0x10)
};

// Class FSD.DetailNoise
// Size: 0x70 (Inherited: 0x68)
struct UDetailNoise : UFloodFillSettings {
	float NoiseRange; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.FlyingStateComponent
// Size: 0x100 (Inherited: 0x100)
struct UFlyingStateComponent : UCharacterStateComponent {
};

// Class FSD.ForgingFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UForgingFunctionLibrary : UBlueprintFunctionLibrary {

	void SortSchematicDelegate__DelegateSignature(struct USchematic* Schematic1, struct USchematic* Schematic2, bool FirstIsLarger); // DelegateFunction FSD.ForgingFunctionLibrary.SortSchematicDelegate__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x158ca90
	struct USchematic* GiveForginMasteryReward(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GiveForginMasteryReward // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f7380
	bool GiveForgingXP(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GiveForgingXP // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10f7400
	struct TArray<struct USchematic*> GetOwnedSchematicsSorted(struct UObject* WorldContextObject, bool SmallestFirst, struct FDelegate IsLargerThan); // Function FSD.ForgingFunctionLibrary.GetOwnedSchematicsSorted // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x10f7170
	struct TArray<struct USchematic*> GetOwnedSchematics(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetOwnedSchematics // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10f70a0
	enum class ESchematicType GetNextForgingMasterRewardType(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetNextForgingMasterRewardType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10f7020
	int32_t GetForgingXP(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetForgingXP // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10f6f70
	float GetForgingLevelProgress(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetForgingLevelProgress // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10f6ee0
	int32_t GetForgingLevel(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetForgingLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10f6e60
	struct TArray<struct USchematic*> GetForgedSchematics(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetForgedSchematics // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10f6d90
	struct TArray<struct USchematic*> GetAllSchematicsSorted(struct UObject* WorldContextObject, bool SmallestFirst, struct FDelegate IsLargerThan); // Function FSD.ForgingFunctionLibrary.GetAllSchematicsSorted // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x10f6b20
	struct TArray<struct USchematic*> GetAllSchematics(struct UObject* WorldContextObject); // Function FSD.ForgingFunctionLibrary.GetAllSchematics // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10f6a50
};

// Class FSD.FormationData
// Size: 0xd0 (Inherited: 0x30)
struct UFormationData : UDataAsset {
	struct TArray<struct FFormationDataItem> FormationItems; // 0x30(0x10)
	struct FGameplayTagQuery LeaderQuery; // 0x40(0x48)
	struct FGameplayTagQuery MemberQuery; // 0x88(0x48)
};

// Class FSD.GroundFormationData
// Size: 0xe0 (Inherited: 0xd0)
struct UGroundFormationData : UFormationData {
	int32_t FormationSize; // 0xd0(0x04)
	float FormationSpread; // 0xd4(0x04)
	float RandomSpread; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class FSD.FlyingFormationData
// Size: 0xe0 (Inherited: 0xd0)
struct UFlyingFormationData : UFormationData {
	int32_t FormationSize; // 0xd0(0x04)
	float FormationSpread; // 0xd4(0x04)
	float RandomSpread; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class FSD.FormationsManagerComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UFormationsManagerComponent : UActorComponent {
	struct UEnemySpawnManager* SpawnManager; // 0xb0(0x08)
	struct TArray<struct UFormationData*> FormationData; // 0xb8(0x10)
	char pad_C8[0x10]; // 0xc8(0x10)
};

// Class FSD.FragileDebrisCleaner
// Size: 0x200 (Inherited: 0x1f0)
struct UFragileDebrisCleaner : USceneComponent {
	float CleanRadius; // 0x1f0(0x04)
	char pad_1F4[0xc]; // 0x1f4(0x0c)
};

// Class FSD.FriendlyHealthComponent
// Size: 0x288 (Inherited: 0x248)
struct UFriendlyHealthComponent : UHealthComponent {
	char pad_248[0x4]; // 0x248(0x04)
	float MaxHealth; // 0x24c(0x04)
	float friendlyFireModifier; // 0x250(0x04)
	float NeutralDamageModifier; // 0x254(0x04)
	float BigHitDamageModifier; // 0x258(0x04)
	float BigHitDamageReductionThreshold; // 0x25c(0x04)
	struct UParticleSystem* GenericImpactParticles; // 0x260(0x08)
	char pad_268[0x20]; // 0x268(0x20)

	float GetMaxHealth(); // Function FSD.FriendlyHealthComponent.GetMaxHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e2f60
};

// Class FSD.FrozenStateComponent
// Size: 0x130 (Inherited: 0x100)
struct UFrozenStateComponent : UCharacterStateComponent {
	struct FRandRange DeFrostAmount; // 0x100(0x08)
	struct USoundBase* AudioFreeFromIce; // 0x108(0x08)
	struct UFSDPhysicalMaterial* IcePhysicalMaterial; // 0x110(0x08)
	struct UFSDPhysicalMaterial* DwarfFleshMaterial; // 0x118(0x08)
	char pad_120[0x4]; // 0x120(0x04)
	float SlowAnimationSpeed; // 0x124(0x04)
	char pad_128[0x8]; // 0x128(0x08)

	void Server_ThawPlayer(); // Function FSD.FrozenStateComponent.Server_ThawPlayer // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x10f77c0
	void ReceiveOnDefrosting(); // Function FSD.FrozenStateComponent.ReceiveOnDefrosting // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.FSDAchievement
// Size: 0x158 (Inherited: 0x58)
struct UFSDAchievement : USavableDataAsset {
	char pad_58[0x30]; // 0x58(0x30)
	struct FString SteamAPIAchievementName; // 0x88(0x10)
	struct FString SteamAPIStatName; // 0x98(0x10)
	struct FString XboxAchievementID; // 0xa8(0x10)
	float AchievementTargetValue; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	enum class EFSDAchievementType AchievementType; // 0xc0(0x01)
	char pad_C1[0x97]; // 0xc1(0x97)

	void SetAchievementProgressForEntireServer(float Progress, struct UObject* WorldContext); // Function FSD.FSDAchievement.SetAchievementProgressForEntireServer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x10fc8c0
	void SetAchievementProgress(float Progress, struct AFSDPlayerController* Player, struct UObject* WorldContext); // Function FSD.FSDAchievement.SetAchievementProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x10fc7b0
	void ResetStatForAchievement(struct UFSDAchievement* AchievementToReset, struct AFSDPlayerController* Player); // Function FSD.FSDAchievement.ResetStatForAchievement // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10fc6e0
	float GetAchievementTargetValue(); // Function FSD.FSDAchievement.GetAchievementTargetValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10fbfd0
};

// Class FSD.AchievementList
// Size: 0x1a0 (Inherited: 0x30)
struct UAchievementList : UDataAsset {
	struct UFSDAchievement* WeakspotAchievement; // 0x30(0x08)
	struct UFSDAchievement* MissionTimeAchievement; // 0x38(0x08)
	struct UFSDAchievement* MissionHosterAchievement; // 0x40(0x08)
	struct UFSDAchievement* RollerCoasterAchievement; // 0x48(0x08)
	struct UFSDAchievement* DrillByShootingAchievement; // 0x50(0x08)
	struct UFSDAchievement* BarrelKickerAchievement; // 0x58(0x08)
	struct UFSDAchievement* Hazard3CompletedAchievement; // 0x60(0x08)
	struct UFSDAchievement* Hazard3StreakAchievement; // 0x68(0x08)
	struct UFSDAchievement* Hazard4CompletedAchievement; // 0x70(0x08)
	struct UFSDAchievement* Hazard4StreakAchievement; // 0x78(0x08)
	struct UFSDAchievement* Hazard5CompletedAchievement; // 0x80(0x08)
	struct UFSDAchievement* Hazard5StreakAchievement; // 0x88(0x08)
	struct UFSDAchievement* Hazard3NoKillNoSupplyAchievement; // 0x90(0x08)
	struct UFSDAchievement* Hazard4NoKillNoSupplyAchievement; // 0x98(0x08)
	struct UFSDAchievement* Hazard5NoKillNoSupplyAchievement; // 0xa0(0x08)
	struct UFSDAchievement* PlayedWithLowerRankAchievement; // 0xa8(0x08)
	struct UFSDAchievement* MilestoneAchievementPerfMatters; // 0xb0(0x08)
	struct UFSDAchievement* MilestoneAchievement; // 0xb8(0x08)
	struct UFSDAchievement* OwnedPerkAchievement; // 0xc0(0x08)
	struct UFSDAchievement* MovingOnUpAchievement; // 0xc8(0x08)
	struct UFSDAchievement* CorporateClimberAchievement; // 0xd0(0x08)
	struct UFSDAchievement* HatTrickAchievement; // 0xd8(0x08)
	struct UFSDAchievement* FullTeamAchievement; // 0xe0(0x08)
	struct UFSDAchievement* SilverTierEmployeeAchievement; // 0xe8(0x08)
	struct UFSDAchievement* ProTeamAchievement; // 0xf0(0x08)
	struct UFSDAchievement* GoldTierEmployeeAchievement; // 0xf8(0x08)
	struct UFSDAchievement* LegendaryTeamAchievement; // 0x100(0x08)
	struct UFSDAchievement* AllVanityEquippedAchievement; // 0x108(0x08)
	struct UFSDAchievement* MoustacheBuyerAchievement; // 0x110(0x08)
	struct UFSDAchievement* MutatorAchievement; // 0x118(0x08)
	struct UFSDAchievement* StateOfTheArtAchievement; // 0x120(0x08)
	struct UFSDAchievement* ExploringMyOptionsAchievement; // 0x128(0x08)
	struct UFSDAchievement* AdvancedRoboticsAchievement; // 0x130(0x08)
	struct UFSDAchievement* WithoutAPaddleAchievement; // 0x138(0x08)
	struct UFSDAchievement* FirstMissionCompleted; // 0x140(0x08)
	struct UFSDAchievement* HundredMissionsCompleted; // 0x148(0x08)
	struct UFSDAchievement* TenSoloMissionsCompleted; // 0x150(0x08)
	struct UFSDAchievement* SupplyPodsCalledStat; // 0x158(0x08)
	struct UFSDAchievement* LootbugsKilledStat; // 0x160(0x08)
	struct UFSDAchievement* PraetoriansKilledStat; // 0x168(0x08)
	struct UFSDAchievement* NormalDeepDiveCompleted; // 0x170(0x08)
	struct UFSDAchievement* EliteDeepDiveCompleted; // 0x178(0x08)
	struct UFSDAchievement* DeepDiveCompletedUnderTime; // 0x180(0x08)
	struct UFSDAchievement* DeepDivesCompleted; // 0x188(0x08)
	struct TArray<struct UFSDAchievement*> AllAchievements; // 0x190(0x10)
};

// Class FSD.FSDAdvancedLabel
// Size: 0x268 (Inherited: 0x230)
struct UFSDAdvancedLabel : UUserWidget {
	struct FText FormattedText; // 0x230(0x18)
	struct FText ControllerOverrideText; // 0x248(0x18)
	bool UpperCase; // 0x260(0x01)
	enum class EFSDInputSource PreviewAs; // 0x261(0x01)
	char pad_262[0x6]; // 0x262(0x06)

	void SetText(struct FText NewText, struct FText OverrideControllerText); // Function FSD.FSDAdvancedLabel.SetText // (Final|Native|Public|BlueprintCallable) // @ game+0x10fcaa0
	void SetAlwaysShowAs(enum class EFSDInputSource InPreferredSource); // Function FSD.FSDAdvancedLabel.SetAlwaysShowAs // (Final|Native|Protected|BlueprintCallable) // @ game+0x10fca20
	void Refresh(); // Function FSD.FSDAdvancedLabel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x10fc600
	void OnReset(); // Function FSD.FSDAdvancedLabel.OnReset // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnNewLine(int32_t Index); // Function FSD.FSDAdvancedLabel.OnNewLine // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnLanguageChanged(struct FString NewCulture); // Function FSD.FSDAdvancedLabel.OnLanguageChanged // (Final|Native|Protected) // @ game+0x10fc290
	void OnInputSourceChanged(enum class EFSDInputSource Source); // Function FSD.FSDAdvancedLabel.OnInputSourceChanged // (Final|Native|Protected) // @ game+0x10fc210
	void OnAddString(struct FString Value); // Function FSD.FSDAdvancedLabel.OnAddString // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnAddKeyName(struct FString Name); // Function FSD.FSDAdvancedLabel.OnAddKeyName // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnAddIcon(struct FString Name, struct FActionIconMapping Icon); // Function FSD.FSDAdvancedLabel.OnAddIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	struct FText GetText(); // Function FSD.FSDAdvancedLabel.GetText // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x10fc0e0
	bool GetIsDesignTime(); // Function FSD.FSDAdvancedLabel.GetIsDesignTime // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x8ce770
	enum class EFSDInputSource GetCurrentInputSource(); // Function FSD.FSDAdvancedLabel.GetCurrentInputSource // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x10fc080
	struct UTextBlock* CreateTextBlock(struct FString Text, struct FSlateFontInfo InFontInfo, struct FLinearColor Color); // Function FSD.FSDAdvancedLabel.CreateTextBlock // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x10fbdd0
	struct UImage* CreateImageSized(struct UTexture2D* Texture, int32_t Width, int32_t Height); // Function FSD.FSDAdvancedLabel.CreateImageSized // (Final|Native|Protected|BlueprintCallable) // @ game+0x10fbcd0
	struct UImage* CreateImage(struct UTexture2D* Texture, bool MatchSize); // Function FSD.FSDAdvancedLabel.CreateImage // (Final|Native|Protected|BlueprintCallable) // @ game+0x10fbc00
	struct UHorizontalBox* CreateHorizontalBox(); // Function FSD.FSDAdvancedLabel.CreateHorizontalBox // (Final|Native|Protected|BlueprintCallable) // @ game+0x10fbbd0
};

// Class FSD.GamepadCursorSettings
// Size: 0x48 (Inherited: 0x38)
struct UGamepadCursorSettings : UDeveloperSettings {
	float MaxSpeed; // 0x38(0x04)
	float Acceleration; // 0x3c(0x04)
	float StickySlowDown; // 0x40(0x04)
	float DeadZone; // 0x44(0x04)
};

// Class FSD.FSDAnimNotify_PlaySound
// Size: 0x58 (Inherited: 0x58)
struct UFSDAnimNotify_PlaySound : UAnimNotify_PlaySound {
};

// Class FSD.AnimNotify_PlaySound2D
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_PlaySound2D : UAnimNotify {
	struct USoundBase* Sound; // 0x38(0x08)
	float VolumeMultiplier; // 0x40(0x04)
	float PitchMultiplier; // 0x44(0x04)
};

// Class FSD.AnimNotifyState_PlaySound
// Size: 0x58 (Inherited: 0x30)
struct UAnimNotifyState_PlaySound : UAnimNotifyState {
	struct USoundCue* Sound; // 0x30(0x08)
	struct FName SocketName; // 0x38(0x08)
	struct FVector LocationOffset; // 0x40(0x0c)
	struct FRotator RotationOffset; // 0x4c(0x0c)
};

// Class FSD.AnimNotify_FSDPlayParticleEffect
// Size: 0x90 (Inherited: 0x38)
struct UAnimNotify_FSDPlayParticleEffect : UAnimNotify {
	struct UFXSystemAsset* PSTemplate; // 0x38(0x08)
	struct FVector LocationOffset; // 0x40(0x0c)
	struct FRotator RotationOffset; // 0x4c(0x0c)
	bool AlwaysZUp; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	struct FVector Scale; // 0x5c(0x0c)
	char pad_68[0x18]; // 0x68(0x18)
	char Attached : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	struct FName SocketName; // 0x84(0x08)
	bool IsFirstPerson; // 0x8c(0x01)
	bool UseTerainMaterial; // 0x8d(0x01)
	char pad_8E[0x2]; // 0x8e(0x02)
};

// Class FSD.AnimNotifyState_FSDTimedNiagaraEffect
// Size: 0x60 (Inherited: 0x30)
struct UAnimNotifyState_FSDTimedNiagaraEffect : UAnimNotifyState {
	struct UNiagaraSystem* Template; // 0x30(0x08)
	struct FName SocketName; // 0x38(0x08)
	struct FVector LocationOffset; // 0x40(0x0c)
	struct FRotator RotationOffset; // 0x4c(0x0c)
	bool IsFirstPerson; // 0x58(0x01)
	bool bDestroyAtEnd; // 0x59(0x01)
	char pad_5A[0x6]; // 0x5a(0x06)
};

// Class FSD.EnemyPlaySoundKey
// Size: 0x30 (Inherited: 0x30)
struct UEnemyPlaySoundKey : UDataAsset {
};

// Class FSD.EnemyPlaySoundByKeyAnimNotify
// Size: 0x58 (Inherited: 0x38)
struct UEnemyPlaySoundByKeyAnimNotify : UAnimNotify {
	struct UEnemyPlaySoundKey* SoundKey; // 0x38(0x08)
	float VolumeMultiplier; // 0x40(0x04)
	float PitchMultiplier; // 0x44(0x04)
	char bFollow : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FName AttachName; // 0x4c(0x08)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class FSD.AnimNotify_PushSoundMix
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_PushSoundMix : UAnimNotify {
	struct USoundMix* SoundMix; // 0x38(0x08)
	float MaxDistance; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class FSD.AnimNotifyState_SoundMix
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_SoundMix : UAnimNotifyState {
	struct USoundMix* SoundMix; // 0x30(0x08)
	float MaxDistance; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.EnemySpawnEffectsKey
// Size: 0x30 (Inherited: 0x30)
struct UEnemySpawnEffectsKey : UDataAsset {
};

// Class FSD.EnemySpawnEffectsByKeyAnimNotify
// Size: 0x50 (Inherited: 0x38)
struct UEnemySpawnEffectsByKeyAnimNotify : UAnimNotify {
	struct UEnemySpawnEffectsKey* EffectKey; // 0x38(0x08)
	char Attached : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FName SocketName; // 0x44(0x08)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class FSD.AnimNotifyState_EnemyPlaySoundByKey
// Size: 0x60 (Inherited: 0x30)
struct UAnimNotifyState_EnemyPlaySoundByKey : UAnimNotifyState {
	struct UEnemyPlaySoundKey* SoundKey; // 0x30(0x08)
	float FadeOut; // 0x38(0x04)
	struct FName SocketName; // 0x3c(0x08)
	struct FVector LocationOffset; // 0x44(0x0c)
	struct FRotator RotationOffset; // 0x50(0x0c)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class FSD.AnimNotify_CameraShake
// Size: 0x50 (Inherited: 0x38)
struct UAnimNotify_CameraShake : UAnimNotify {
	float InnerRadius; // 0x38(0x04)
	float OuterRadius; // 0x3c(0x04)
	bool ControllerOnly; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct UCameraShake* CameraShake; // 0x48(0x08)
};

// Class FSD.AnimNotify_Shout
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_Shout : UAnimNotify {
	struct UDialogDataAsset* Shout; // 0x38(0x08)
	bool ShoutNetworked; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float LocalShoutVolumeMultiplier; // 0x44(0x04)
};

// Class FSD.AnimNotify_FootStep
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_FootStep : UAnimNotify {
	bool IsLeft; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class FSD.AnimNotify_MessageOwner
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_MessageOwner : UAnimNotify {
	struct FName Message; // 0x38(0x08)
};

// Class FSD.AnimNotify_TerrainFootStep
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_TerrainFootStep : UAnimNotify {
	struct UParticleSystem* ParticleTemplate; // 0x38(0x08)
	struct FName BoneName; // 0x40(0x08)
};

// Class FSD.AnimNotify_SpawnActor
// Size: 0x60 (Inherited: 0x38)
struct UAnimNotify_SpawnActor : UAnimNotify {
	struct AActor* Actor; // 0x38(0x08)
	struct FName SocketName; // 0x40(0x08)
	struct FVector LocationOffset; // 0x48(0x0c)
	struct FRotator RotationOffset; // 0x54(0x0c)
};

// Class FSD.AnimNotify_HideBones
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_HideBones : UAnimNotify {
	struct TArray<struct FName> TargetBoneNames; // 0x38(0x10)
};

// Class FSD.AnimNotify_HideBone
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_HideBone : UAnimNotify {
	struct FName BoneName; // 0x38(0x08)
};

// Class FSD.AnimNotify_UnHideBone
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_UnHideBone : UAnimNotify {
	struct FName BoneName; // 0x38(0x08)
};

// Class FSD.CopyBoneVisibilityCompleted
// Size: 0x28 (Inherited: 0x28)
struct UCopyBoneVisibilityCompleted : UInterface {

	void CopyBoneVisibilityCompleted(int32_t BoneIndex); // Function FSD.CopyBoneVisibilityCompleted.CopyBoneVisibilityCompleted // (Native|Public) // @ game+0x10fbb50
};

// Class FSD.AnimNotify_CopyBoneVisibility
// Size: 0x58 (Inherited: 0x38)
struct UAnimNotify_CopyBoneVisibility : UAnimNotify {
	struct FName SourceBoneName; // 0x38(0x08)
	struct TArray<struct FName> TargetBoneNames; // 0x40(0x10)
	bool HideSourceBone; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class FSD.AnimNotifyState_SpawnMesh
// Size: 0x68 (Inherited: 0x30)
struct UAnimNotifyState_SpawnMesh : UAnimNotifyState {
	struct UStaticMesh* Mesh; // 0x30(0x08)
	bool UseFirstPersonComponent; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FName SocketName; // 0x3c(0x08)
	struct FVector ScaleOverride; // 0x44(0x0c)
	struct FVector LocationOffset; // 0x50(0x0c)
	struct FRotator RotationOffset; // 0x5c(0x0c)
};

// Class FSD.AnimNotifyState_SpawnSkeletalMesh
// Size: 0x70 (Inherited: 0x30)
struct UAnimNotifyState_SpawnSkeletalMesh : UAnimNotifyState {
	struct USkeletalMesh* Mesh; // 0x30(0x08)
	struct UAnimSequenceBase* AnimationToPlay; // 0x38(0x08)
	bool UseFirstPersonComponent; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FName SocketName; // 0x44(0x08)
	struct FVector ScaleOverride; // 0x4c(0x0c)
	struct FVector LocationOffset; // 0x58(0x0c)
	struct FRotator RotationOffset; // 0x64(0x0c)
};

// Class FSD.AnimNotifyState_SpawnSkinnedMesh
// Size: 0x58 (Inherited: 0x30)
struct UAnimNotifyState_SpawnSkinnedMesh : UAnimNotifyState {
	enum class EItemCategory ItemCategory; // 0x30(0x01)
	bool UseFirstPersonComponent; // 0x31(0x01)
	char pad_32[0x2]; // 0x32(0x02)
	struct FName SocketName; // 0x34(0x08)
	struct FVector LocationOffset; // 0x3c(0x0c)
	struct FRotator RotationOffset; // 0x48(0x0c)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class FSD.AnimNotifyState_HideBone
// Size: 0x38 (Inherited: 0x30)
struct UAnimNotifyState_HideBone : UAnimNotifyState {
	struct FName BoneName; // 0x30(0x08)
};

// Class FSD.AnimNotifyState_Salute
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_Salute : UAnimNotifyState {
	struct FName BoneName; // 0x30(0x08)
	bool FirstPerson; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class FSD.AnimNotifyState_InputWindow
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_InputWindow : UAnimNotifyState {
};

// Class FSD.SpawnReleasedActor
// Size: 0x28 (Inherited: 0x28)
struct USpawnReleasedActor : UInterface {

	bool Released(); // Function FSD.SpawnReleasedActor.Released // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x10fc6b0
	bool Attached(struct AActor* Parent); // Function FSD.SpawnReleasedActor.Attached // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x10fbab0
};

// Class FSD.AnimNotifyState_SpawnAndReleaseActor
// Size: 0x58 (Inherited: 0x30)
struct UAnimNotifyState_SpawnAndReleaseActor : UAnimNotifyState {
	struct AActor* Actor; // 0x30(0x08)
	struct FName SocketName; // 0x38(0x08)
	struct FVector LocationOffset; // 0x40(0x0c)
	struct FRotator RotationOffset; // 0x4c(0x0c)
};

// Class FSD.AnimNotifyState_HideEquippedItem
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_HideEquippedItem : UAnimNotifyState {
};

// Class FSD.AnimNotifyState_OverrideItemOffset
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_OverrideItemOffset : UAnimNotifyState {
	struct FVector CameraOffset; // 0x30(0x0c)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.AnimNotifyState_WeaponReload
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_WeaponReload : UAnimNotifyState {
};

// Class FSD.AnimNotifyState_ConstrainItem
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_ConstrainItem : UAnimNotifyState {
	struct FName OldConstraint; // 0x30(0x08)
	struct FName NewConstraint; // 0x38(0x08)
};

// Class FSD.GameAnimationsSettings
// Size: 0x68 (Inherited: 0x38)
struct UGameAnimationsSettings : UDeveloperSettings {
	struct FSoftObjectPath FootstepTestingSound; // 0x38(0x18)
	struct FSoftObjectPath FootstepTestingParticles; // 0x50(0x18)
};

// Class FSD.DynamicMeshScaler
// Size: 0xc0 (Inherited: 0xb0)
struct UDynamicMeshScaler : UActorComponent {
	char pad_B0[0x10]; // 0xb0(0x10)
};

// Class FSD.AnimNotifyState_TimedParticleEffectWithImpactDecals
// Size: 0x80 (Inherited: 0x60)
struct UAnimNotifyState_TimedParticleEffectWithImpactDecals : UAnimNotifyState_TimedParticleEffect {
	struct UMaterialInterface* DecalMaterial; // 0x60(0x08)
	float DecalSize; // 0x68(0x04)
	float FadeStartDelay; // 0x6c(0x04)
	float FadeDuration; // 0x70(0x04)
	char pad_74[0xc]; // 0x74(0x0c)

	void OnParticleCollision(struct FName EventName, float EmitterTime, int32_t ParticleTime, struct FVector Location, struct FVector Velocity, struct FVector Direction, struct FVector Normal, struct FName BoneName, struct UPhysicalMaterial* PhysMat); // Function FSD.AnimNotifyState_TimedParticleEffectWithImpactDecals.OnParticleCollision // (Final|Native|Protected|HasDefaults|Const) // @ game+0x10fc330
};

// Class FSD.FSDAnimationFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UFSDAnimationFunctionLibrary : UBlueprintFunctionLibrary {

	float GetAnimSequenceLength(struct UAnimSequence* AnimSequence); // Function FSD.FSDAnimationFunctionLibrary.GetAnimSequenceLength // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10fbff0
};

// Class FSD.FSDAssetManager
// Size: 0x438 (Inherited: 0x438)
struct UFSDAssetManager : UAssetManager {
};

// Class FSD.FSDAudioComponent
// Size: 0x7e0 (Inherited: 0x7d0)
struct UFSDAudioComponent : UAudioComponent {
	char pad_7D0[0x10]; // 0x7d0(0x10)
};

// Class FSD.FSDBehaviorTreeComponent
// Size: 0x270 (Inherited: 0x270)
struct UFSDBehaviorTreeComponent : UBehaviorTreeComponent {
};

// Class FSD.FSDCheatManager
// Size: 0xa8 (Inherited: 0x78)
struct UFSDCheatManager : UCheatManager {
	int32_t RoomJumpCount; // 0x78(0x04)
	float PreviousMaxDistanceBeforeCleanup; // 0x7c(0x04)
	bool UnlimitedScoutFlareDuration; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct FMulticastInlineDelegate ToggleHoopGameMovement; // 0x88(0x10)
	struct AActor* SpawnPosMarker; // 0x98(0x08)
	bool EscortShowSmartRockDebug; // 0xa0(0x01)
	bool IsUsingSavedCheats; // 0xa1(0x01)
	char pad_A2[0x6]; // 0xa2(0x06)

	void SwitchCharacter(struct UPlayerCharacterID* characterID); // Function FSD.FSDCheatManager.SwitchCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1104370
	void SpawnEnemies(struct UEnemyDescriptor* desscriptor, int32_t count); // Function FSD.FSDCheatManager.SpawnEnemies // (Final|Native|Public|BlueprintCallable) // @ game+0x11042b0
	void SpawnCritters(struct UBaseCritterDescriptor* descriptor, int32_t count); // Function FSD.FSDCheatManager.SpawnCritters // (Final|Native|Public|BlueprintCallable) // @ game+0x11041f0
	void SpawnBosco(SoftClassProperty droneClass, struct AFSDAIController* aControllerClass); // Function FSD.FSDCheatManager.SpawnBosco // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11040b0
	void ShowTutorialDebug(); // Function FSD.FSDCheatManager.ShowTutorialDebug // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1104090
	void SetStandingDown(bool standingDown); // Function FSD.FSDCheatManager.SetStandingDown // (Final|Native|Public|BlueprintCallable) // @ game+0x1104000
	void SetSpawnEnemies(bool SpawnEnemies); // Function FSD.FSDCheatManager.SetSpawnEnemies // (Final|Native|Public|BlueprintCallable) // @ game+0x1103f70
	bool SetSavedCheatValue(struct FName CheatName, int32_t ValueToSet); // Function FSD.FSDCheatManager.SetSavedCheatValue // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0xe296f0
	void SetQuadPickAxe(bool quad); // Function FSD.FSDCheatManager.SetQuadPickAxe // (Final|Native|Public|BlueprintCallable) // @ game+0x1103ee0
	void SetHUDVisible(bool ShowHUD); // Function FSD.FSDCheatManager.SetHUDVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x1103e50
	void SetGodMode(bool God); // Function FSD.FSDCheatManager.SetGodMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1103dc0
	void SetFastMovement(bool fast); // Function FSD.FSDCheatManager.SetFastMovement // (Final|Native|Public|BlueprintCallable) // @ game+0x1103d30
	void ResetTutorials(); // Function FSD.FSDCheatManager.ResetTutorials // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1103d10
	void ResetSpacerigIntroMessage(); // Function FSD.FSDCheatManager.ResetSpacerigIntroMessage // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1103cf0
	void R_RemoveResources(int32_t Number); // Function FSD.FSDCheatManager.R_RemoveResources // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1103c70
	void R_RemoveCredits(int32_t Number); // Function FSD.FSDCheatManager.R_RemoveCredits // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1103bf0
	void R_AddSeasonToken(int32_t Number); // Function FSD.FSDCheatManager.R_AddSeasonToken // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1103a70
	void R_AddResources_Player(float Number); // Function FSD.FSDCheatManager.R_AddResources_Player // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11039f0
	void R_AddResources(float Number); // Function FSD.FSDCheatManager.R_AddResources // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1103970
	void R_AddPerkPoints(int32_t Amount); // Function FSD.FSDCheatManager.R_AddPerkPoints // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11038f0
	void R_AddNitra(float Amount); // Function FSD.FSDCheatManager.R_AddNitra // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1103870
	void R_AddMorkite(float Amount); // Function FSD.FSDCheatManager.R_AddMorkite // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11037f0
	void R_AddMatrixCores(int32_t Number); // Function FSD.FSDCheatManager.R_AddMatrixCores // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1103770
	void R_AddHollomite(float Amount); // Function FSD.FSDCheatManager.R_AddHollomite // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11036f0
	void R_AddGold(float Amount); // Function FSD.FSDCheatManager.R_AddGold // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1103670
	void R_AddDystrum(float Amount); // Function FSD.FSDCheatManager.R_AddDystrum // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11035f0
	void R_AddCredits(int32_t Number); // Function FSD.FSDCheatManager.R_AddCredits // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1103570
	void R_AddCraftingResource(int32_t Amount, int32_t Type); // Function FSD.FSDCheatManager.R_AddCraftingResource // (Final|Exec|Native|Public) // @ game+0x11034b0
	void R_Add_BitterGem(int32_t Amount); // Function FSD.FSDCheatManager.R_Add_BitterGem // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1103b70
	void R_Add_Aquarq(int32_t Amount); // Function FSD.FSDCheatManager.R_Add_Aquarq // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1103af0
	bool IsInGodMode(); // Function FSD.FSDCheatManager.IsInGodMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1103480
	bool GetSavedCheatValue(struct FName CheatName, int32_t ValueToGet); // Function FSD.FSDCheatManager.GetSavedCheatValue // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0xe293e0
	void GetListOfRoomNames(struct TArray<struct FString> roomNames); // Function FSD.FSDCheatManager.GetListOfRoomNames // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11033b0
	void DestroyAllInstances(struct AActor* destroy); // Function FSD.FSDCheatManager.DestroyAllInstances // (Final|Native|Public|BlueprintCallable) // @ game+0x1103330
	void D_Rejoin_RestoreState(); // Function FSD.FSDCheatManager.D_Rejoin_RestoreState // (Final|Exec|Native|Public) // @ game+0x1103310
	void D_MovieModeStartWithCameraShake(bool Value); // Function FSD.FSDCheatManager.D_MovieModeStartWithCameraShake // (Final|Exec|Native|Public) // @ game+0x1103280
	void D_MovieModeStartAtOrigin(bool Value); // Function FSD.FSDCheatManager.D_MovieModeStartAtOrigin // (Final|Exec|Native|Public) // @ game+0x11031f0
	void D_EnableMovieModeInSpacerig(bool Value); // Function FSD.FSDCheatManager.D_EnableMovieModeInSpacerig // (Final|Exec|Native|Public) // @ game+0x1103160
	void D_EnableMovieMode(bool Value); // Function FSD.FSDCheatManager.D_EnableMovieMode // (Final|Exec|Native|Public) // @ game+0x11030d0
	void Cheat_UnlockAllWeapons(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_UnlockAllWeapons // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102f80
	void Cheat_UnlockAllUpgrades(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_UnlockAllUpgrades // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102f10
	void Cheat_UnlockAll_Poses(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_UnlockAll_Poses // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1103060
	void Cheat_UnlockAll_Beers(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_UnlockAll_Beers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102ff0
	void Cheat_SetSpawnPosMarker(struct AActor* Actor); // Function FSD.FSDCheatManager.Cheat_SetSpawnPosMarker // (Final|Native|Public|BlueprintCallable) // @ game+0x1102e90
	void Cheat_SetHealth(float newHealthValue, struct APlayerCharacter* Player); // Function FSD.FSDCheatManager.Cheat_SetHealth // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1102d90
	void Cheat_Schematic_UnlockAll(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_Schematic_UnlockAll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102d20
	void Cheat_Schematic_ResetAll(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_Schematic_ResetAll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102cb0
	void Cheat_Schematic_GiveRandom(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_Schematic_GiveRandom // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102c40
	void Cheat_Schematic_ForgeAll(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_Schematic_ForgeAll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102bd0
	void Cheat_Resources(struct UObject* WorldContextObject, float Amount); // Function FSD.FSDCheatManager.Cheat_Resources // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102b10
	void Cheat_ResetEquippedUpgrades(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_ResetEquippedUpgrades // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102aa0
	void Cheat_RemoveResources(struct UObject* WorldContextObject, int32_t Amount); // Function FSD.FSDCheatManager.Cheat_RemoveResources // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11029f0
	void Cheat_PickAxeVanity_UnlockAll(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_PickAxeVanity_UnlockAll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102980
	void Cheat_PickAxeVanity_ResetAll(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_PickAxeVanity_ResetAll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102910
	void Cheat_MinersManual_ShowAll(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_MinersManual_ShowAll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11028a0
	void Cheat_GenerateNewMissionSeed(struct UObject* WorldContextObject, bool Enabled); // Function FSD.FSDCheatManager.Cheat_GenerateNewMissionSeed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11027e0
	void Cheat_ForceTreasure(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_ForceTreasure // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102770
	void Cheat_ForceLostPack(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_ForceLostPack // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102700
	void Cheat_DeepDives_Refresh(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_DeepDives_Refresh // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102690
	void Cheat_Campaign_Complete(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_Campaign_Complete // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102620
	void Cheat_Campaign_Advance(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.Cheat_Campaign_Advance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11025b0
	void Cheat_AddXP(struct UObject* WorldContextObject, int32_t Amount); // Function FSD.FSDCheatManager.Cheat_AddXP // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102500
	void Cheat_AddPerkPoints(struct UObject* WorldContextObject, int32_t Amount); // Function FSD.FSDCheatManager.Cheat_AddPerkPoints // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1102450
	void Cheat_AddCredits(struct UObject* WorldContextObject, int32_t Amount); // Function FSD.FSDCheatManager.Cheat_AddCredits // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11023a0
	void C_Windows_PrintStack(); // Function FSD.FSDCheatManager.C_Windows_PrintStack // (Final|Exec|Native|Public|Const) // @ game+0x1102380
	void C_Windows_CloseAll(); // Function FSD.FSDCheatManager.C_Windows_CloseAll // (Final|Exec|Native|Public|Const) // @ game+0x1102360
	void C_UnlockOverclocking(); // Function FSD.FSDCheatManager.C_UnlockOverclocking // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1102320
	void C_UnlockAll_WeaponUpgrades(); // Function FSD.FSDCheatManager.C_UnlockAll_WeaponUpgrades // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11022e0
	void C_UnlockAll_WeaponSkins_Paintjobs(); // Function FSD.FSDCheatManager.C_UnlockAll_WeaponSkins_Paintjobs // (Final|Exec|Native|Public) // @ game+0x11022c0
	void C_UnlockAll_WeaponSkins_Frameworks(); // Function FSD.FSDCheatManager.C_UnlockAll_WeaponSkins_Frameworks // (Final|Exec|Native|Public) // @ game+0x11022a0
	void C_UnlockAll_WeaponSkins(); // Function FSD.FSDCheatManager.C_UnlockAll_WeaponSkins // (Final|Exec|Native|Public) // @ game+0x1102280
	void C_UnlockAll_Weapons(); // Function FSD.FSDCheatManager.C_UnlockAll_Weapons // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1102300
	void C_UnlockAll_StoreVanity(); // Function FSD.FSDCheatManager.C_UnlockAll_StoreVanity // (Final|Exec|Native|Public) // @ game+0x1102260
	void C_UnlockAll_Poses_ForAll(); // Function FSD.FSDCheatManager.C_UnlockAll_Poses_ForAll // (Final|Exec|Native|Public) // @ game+0x1102240
	void C_UnlockAll_Poses(); // Function FSD.FSDCheatManager.C_UnlockAll_Poses // (Final|Exec|Native|Public) // @ game+0x1102220
	void C_UnlockAll_PickaxeParts(); // Function FSD.FSDCheatManager.C_UnlockAll_PickaxeParts // (Final|Exec|Native|Public) // @ game+0x1102200
	void C_UnlockAll_Perks(); // Function FSD.FSDCheatManager.C_UnlockAll_Perks // (Final|Exec|Native|Public) // @ game+0x11021e0
	void C_UnlockAll_Drinks(); // Function FSD.FSDCheatManager.C_UnlockAll_Drinks // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11021c0
	void C_UnlockAll_Beers(); // Function FSD.FSDCheatManager.C_UnlockAll_Beers // (Final|Exec|Native|Public) // @ game+0x11021a0
	void C_UnlockAll_ArmorMats(); // Function FSD.FSDCheatManager.C_UnlockAll_ArmorMats // (Final|Exec|Native|Public) // @ game+0x1102180
	void C_UnlockAll(); // Function FSD.FSDCheatManager.C_UnlockAll // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1102160
	void C_Unlock_Facility(); // Function FSD.FSDCheatManager.C_Unlock_Facility // (Final|Exec|Native|Public) // @ game+0x1102340
	void C_Treasures_Track(bool Track); // Function FSD.FSDCheatManager.C_Treasures_Track // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11020d0
	void C_Treasures_Reward(int32_t count); // Function FSD.FSDCheatManager.C_Treasures_Reward // (Final|Exec|Native|Public) // @ game+0x1102050
	void C_ToggleHoopGameMovement(); // Function FSD.FSDCheatManager.C_ToggleHoopGameMovement // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1102030
	void C_ToggleFadingEnabled(); // Function FSD.FSDCheatManager.C_ToggleFadingEnabled // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1102010
	void C_ToggleFadingDebug(); // Function FSD.FSDCheatManager.C_ToggleFadingDebug // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101ff0
	void C_ToggleCanShowBlood(); // Function FSD.FSDCheatManager.C_ToggleCanShowBlood // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101fd0
	void C_StopMovement(bool shouldMove); // Function FSD.FSDCheatManager.C_StopMovement // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101f40
	void C_SpawnScriptedWaveIndex(int32_t Index); // Function FSD.FSDCheatManager.C_SpawnScriptedWaveIndex // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101ec0
	void C_SpawnScriptedWave(); // Function FSD.FSDCheatManager.C_SpawnScriptedWave // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101ea0
	void C_SpawnNormalWave(); // Function FSD.FSDCheatManager.C_SpawnNormalWave // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101e80
	void C_SpawnEvenRewarder(); // Function FSD.FSDCheatManager.C_SpawnEvenRewarder // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101e60
	void C_SpawnBarrelOnPlayer(int32_t Amount); // Function FSD.FSDCheatManager.C_SpawnBarrelOnPlayer // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101de0
	void C_SetUseSavedCheatsByDefault(bool useSavedCheats); // Function FSD.FSDCheatManager.C_SetUseSavedCheatsByDefault // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101d50
	void C_SetTestMission(int32_t missionIndex); // Function FSD.FSDCheatManager.C_SetTestMission // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101cd0
	void C_SetSavedCheats(); // Function FSD.FSDCheatManager.C_SetSavedCheats // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101cb0
	void C_SetPlayers(int32_t Number); // Function FSD.FSDCheatManager.C_SetPlayers // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101c30
	void C_SetHealth(float Health); // Function FSD.FSDCheatManager.C_SetHealth // (Final|Exec|Native|Public) // @ game+0x1101bb0
	void C_SetFlyMode(bool flyEnabled); // Function FSD.FSDCheatManager.C_SetFlyMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101b20
	void C_SetFastFlares(); // Function FSD.FSDCheatManager.C_SetFastFlares // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101b00
	void C_SetEnglish(int32_t Val); // Function FSD.FSDCheatManager.C_SetEnglish // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101a80
	void C_SetDancing(bool shouldDance); // Function FSD.FSDCheatManager.C_SetDancing // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11019f0
	void C_SetAmmoCostEnabled(bool Enabled); // Function FSD.FSDCheatManager.C_SetAmmoCostEnabled // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101960
	void C_Seasons_ResetXP(); // Function FSD.FSDCheatManager.C_Seasons_ResetXP // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101940
	void C_Seasons_ResetTreeOfVanity(); // Function FSD.FSDCheatManager.C_Seasons_ResetTreeOfVanity // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101920
	void C_Seasons_ResetToken(); // Function FSD.FSDCheatManager.C_Seasons_ResetToken // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101900
	void C_Seasons_ResetReroll(); // Function FSD.FSDCheatManager.C_Seasons_ResetReroll // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11018e0
	void C_Seasons_IncrementChallenge(int32_t Index); // Function FSD.FSDCheatManager.C_Seasons_IncrementChallenge // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101860
	void C_Seasons_CompleteScripChallenge(int32_t Number); // Function FSD.FSDCheatManager.C_Seasons_CompleteScripChallenge // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11017e0
	void C_Seasons_ClearChallenges(); // Function FSD.FSDCheatManager.C_Seasons_ClearChallenges // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11017c0
	void C_Seasons_ClearAllProgress(); // Function FSD.FSDCheatManager.C_Seasons_ClearAllProgress // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11017a0
	void C_Seasons_AddXP(int32_t Number); // Function FSD.FSDCheatManager.C_Seasons_AddXP // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101720
	void C_Seasons_AddChallenge(); // Function FSD.FSDCheatManager.C_Seasons_AddChallenge // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101700
	void C_ScoutFlareInfiniteDuration(bool Enabled); // Function FSD.FSDCheatManager.C_ScoutFlareInfiniteDuration // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101670
	void C_Schematics_UnlockAll(); // Function FSD.FSDCheatManager.C_Schematics_UnlockAll // (Final|Exec|Native|Public) // @ game+0x1101650
	void C_Schematics_ResetAll(); // Function FSD.FSDCheatManager.C_Schematics_ResetAll // (Final|Exec|Native|Public) // @ game+0x1101630
	void C_Schematics_ForgeAll(); // Function FSD.FSDCheatManager.C_Schematics_ForgeAll // (Final|Exec|Native|Public) // @ game+0x1101610
	void C_Schematics_ClearHasSeenFirstMessage(); // Function FSD.FSDCheatManager.C_Schematics_ClearHasSeenFirstMessage // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11015f0
	void C_Schematic_GiveRandom(); // Function FSD.FSDCheatManager.C_Schematic_GiveRandom // (Final|Exec|Native|Public) // @ game+0x11015d0
	void C_Revive(); // Function FSD.FSDCheatManager.C_Revive // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11015b0
	void C_Resupply(); // Function FSD.FSDCheatManager.C_Resupply // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101590
	void C_ResetSteamAchievementStats(); // Function FSD.FSDCheatManager.C_ResetSteamAchievementStats // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101430
	void C_ResetForgingXP(); // Function FSD.FSDCheatManager.C_ResetForgingXP // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101410
	void C_ResetCheatedResources(int32_t newAmount); // Function FSD.FSDCheatManager.C_ResetCheatedResources // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101390
	void C_ResetAll_Vanity(); // Function FSD.FSDCheatManager.C_ResetAll_Vanity // (Final|Exec|Native|Public) // @ game+0x1101370
	void C_ResetAchievements(); // Function FSD.FSDCheatManager.C_ResetAchievements // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101350
	void C_Reset_YearTwoGifts(); // Function FSD.FSDCheatManager.C_Reset_YearTwoGifts // (Final|Exec|Native|Public) // @ game+0x1101570
	void C_Reset_WeaponSkinsAndUpgrades(); // Function FSD.FSDCheatManager.C_Reset_WeaponSkinsAndUpgrades // (Final|Exec|Native|Public) // @ game+0x1101510
	void C_Reset_WeaponSkins_Paintjobs(); // Function FSD.FSDCheatManager.C_Reset_WeaponSkins_Paintjobs // (Final|Exec|Native|Public) // @ game+0x1101550
	void C_Reset_WeaponSkins_Framworks(); // Function FSD.FSDCheatManager.C_Reset_WeaponSkins_Framworks // (Final|Exec|Native|Public) // @ game+0x1101530
	void C_Reset_WeaponSkins(); // Function FSD.FSDCheatManager.C_Reset_WeaponSkins // (Final|Exec|Native|Public) // @ game+0x11014f0
	void C_Reset_PickaxeParts(); // Function FSD.FSDCheatManager.C_Reset_PickaxeParts // (Final|Exec|Native|Public) // @ game+0x11014d0
	void C_Reset_Perks(); // Function FSD.FSDCheatManager.C_Reset_Perks // (Final|Exec|Native|Public) // @ game+0x11014b0
	void C_Reset_MinersManual(); // Function FSD.FSDCheatManager.C_Reset_MinersManual // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101490
	void C_Reset_EnemyKillCount(); // Function FSD.FSDCheatManager.C_Reset_EnemyKillCount // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101470
	void C_Reset_Drinks(); // Function FSD.FSDCheatManager.C_Reset_Drinks // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101450
	void C_RemovePlayerRanks(int32_t Number); // Function FSD.FSDCheatManager.C_RemovePlayerRanks // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11012d0
	void C_RemoveAllWidgets(); // Function FSD.FSDCheatManager.C_RemoveAllWidgets // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11012b0
	void C_RefreshDailyDeal(int32_t Seed); // Function FSD.FSDCheatManager.C_RefreshDailyDeal // (Final|Exec|Native|Public) // @ game+0x1101230
	void C_Refinery_BreakPipes(); // Function FSD.FSDCheatManager.C_Refinery_BreakPipes // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101210
	void C_RecordMode(); // Function FSD.FSDCheatManager.C_RecordMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11011f0
	void C_Promotion_SetLevelSpecific(struct APlayerCharacter* onCharacter, int32_t Number); // Function FSD.FSDCheatManager.C_Promotion_SetLevelSpecific // (Final|Native|Public|BlueprintCallable) // @ game+0x1101130
	void C_Promotion_SetLevel(int32_t Number); // Function FSD.FSDCheatManager.C_Promotion_SetLevel // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11010b0
	void C_Promotion_SetCampaignComplete(); // Function FSD.FSDCheatManager.C_Promotion_SetCampaignComplete // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101090
	void C_Promotion_ClearRewardsSeen(); // Function FSD.FSDCheatManager.C_Promotion_ClearRewardsSeen // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1101070
	void C_ProjectileDrawPaths(); // Function FSD.FSDCheatManager.C_ProjectileDrawPaths // (Final|Exec|Native|Public) // @ game+0x8dc380
	void C_ProjectileDebugPrintToggle(); // Function FSD.FSDCheatManager.C_ProjectileDebugPrintToggle // (Final|Exec|Native|Public) // @ game+0x1101050
	void C_MissionMap_TestDistribution(); // Function FSD.FSDCheatManager.C_MissionMap_TestDistribution // (Final|Exec|Native|Public) // @ game+0x1101030
	void C_MissionMap_ForceWarning(int32_t Index); // Function FSD.FSDCheatManager.C_MissionMap_ForceWarning // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100fb0
	void C_MissionMap_ForceAnomaly(int32_t Index); // Function FSD.FSDCheatManager.C_MissionMap_ForceAnomaly // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100f30
	void C_MissionMap_DoubleWarning(int32_t indexA, int32_t indexB); // Function FSD.FSDCheatManager.C_MissionMap_DoubleWarning // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100e70
	void C_MinersManual_EnableWorkInProgress(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.C_MinersManual_EnableWorkInProgress // (Final|Exec|Native|Public) // @ game+0x1100df0
	void C_MachineEvents_Track(bool Track); // Function FSD.FSDCheatManager.C_MachineEvents_Track // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100d60
	void C_MachineEvents_FinishCurrent(); // Function FSD.FSDCheatManager.C_MachineEvents_FinishCurrent // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100d40
	void C_LevelUpCharacter(int32_t Amount); // Function FSD.FSDCheatManager.C_LevelUpCharacter // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100cc0
	void C_KillTeam(); // Function FSD.FSDCheatManager.C_KillTeam // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100ca0
	void C_KillPlayer(); // Function FSD.FSDCheatManager.C_KillPlayer // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100c80
	void C_KillAll(); // Function FSD.FSDCheatManager.C_KillAll // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100c60
	void C_JumpToNextRoom(); // Function FSD.FSDCheatManager.C_JumpToNextRoom // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100c40
	void C_IncrementAllMissionStats(int32_t Amount); // Function FSD.FSDCheatManager.C_IncrementAllMissionStats // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100bc0
	void C_GodMode(); // Function FSD.FSDCheatManager.C_GodMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100ba0
	void C_GiveAllGenericHeroItems(); // Function FSD.FSDCheatManager.C_GiveAllGenericHeroItems // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100b80
	void C_GameDLC_ResetAnnouncements(); // Function FSD.FSDCheatManager.C_GameDLC_ResetAnnouncements // (Final|Exec|Native|Public) // @ game+0x1100b60
	void C_FSDEvent_SetDebugEvent(struct FString EventName); // Function FSD.FSDCheatManager.C_FSDEvent_SetDebugEvent // (Final|Exec|Native|Public) // @ game+0x11008b0
	void C_FSDEvent_ClearSeenRewards(); // Function FSD.FSDCheatManager.C_FSDEvent_ClearSeenRewards // (Final|Exec|Native|Public) // @ game+0x1100890
	void C_ForceCrash(); // Function FSD.FSDCheatManager.C_ForceCrash // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100b40
	void C_FixedPLSSeed(int32_t Seed); // Function FSD.FSDCheatManager.C_FixedPLSSeed // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100ac0
	void C_FixedMissionSeed(int32_t Seed); // Function FSD.FSDCheatManager.C_FixedMissionSeed // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100a40
	void C_FailMission(); // Function FSD.FSDCheatManager.C_FailMission // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100a20
	void C_FadeFromBlack(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.C_FadeFromBlack // (Final|Exec|Native|Static|Public) // @ game+0x11009b0
	void C_Facility_DisableShields(); // Function FSD.FSDCheatManager.C_Facility_DisableShields // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100990
	void C_Escort_ShowSmartRockDebug(bool shouldShow); // Function FSD.FSDCheatManager.C_Escort_ShowSmartRockDebug // (Final|Exec|Native|Public) // @ game+0x1100800
	void C_Escort_SetMuleSpeed(struct UObject* WorldContextObject, float Speed); // Function FSD.FSDCheatManager.C_Escort_SetMuleSpeed // (Final|Exec|Native|Public) // @ game+0x1100730
	void C_Escort_JumpToNextPhase(struct UObject* WorldContextObject); // Function FSD.FSDCheatManager.C_Escort_JumpToNextPhase // (Final|Exec|Native|Public) // @ game+0x11006b0
	void C_Escort_AddOilShale(int32_t Number); // Function FSD.FSDCheatManager.C_Escort_AddOilShale // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100630
	void C_DeepDives_UnlockAll(); // Function FSD.FSDCheatManager.C_DeepDives_UnlockAll // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100610
	void C_DeepDives_SetSeed(int32_t Seed); // Function FSD.FSDCheatManager.C_DeepDives_SetSeed // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100590
	void C_DeepDives_Reset(); // Function FSD.FSDCheatManager.C_DeepDives_Reset // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100570
	void C_DeepDives_Refresh(); // Function FSD.FSDCheatManager.C_DeepDives_Refresh // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100550
	void C_DeepDives_List(); // Function FSD.FSDCheatManager.C_DeepDives_List // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100530
	void C_CompleteObjectives(); // Function FSD.FSDCheatManager.C_CompleteObjectives // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100510
	void C_CompleteMission(); // Function FSD.FSDCheatManager.C_CompleteMission // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11004f0
	void C_ClearAllMissionStats(); // Function FSD.FSDCheatManager.C_ClearAllMissionStats // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11004d0
	void C_ClearAllMilestones(); // Function FSD.FSDCheatManager.C_ClearAllMilestones // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11004b0
	void C_ChangeIntoxication(int32_t Percent); // Function FSD.FSDCheatManager.C_ChangeIntoxication // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100430
	void C_Campaign_ResetProgress(); // Function FSD.FSDCheatManager.C_Campaign_ResetProgress // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100410
	void C_Campaign_ResetCompleted(); // Function FSD.FSDCheatManager.C_Campaign_ResetCompleted // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11003f0
	void C_Campaign_CompleteMain(); // Function FSD.FSDCheatManager.C_Campaign_CompleteMain // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x11003d0
	void C_Campaign_CompleteCurrent(); // Function FSD.FSDCheatManager.C_Campaign_CompleteCurrent // (Final|Exec|Native|Public) // @ game+0x11003b0
	void C_Campaign_Advance(); // Function FSD.FSDCheatManager.C_Campaign_Advance // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100390
	void C_AutoRotateMissionMap(bool Enabled); // Function FSD.FSDCheatManager.C_AutoRotateMissionMap // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100300
	void C_AddXP(int32_t Number); // Function FSD.FSDCheatManager.C_AddXP // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100280
	void C_AddUncappedXP(int32_t Amount); // Function FSD.FSDCheatManager.C_AddUncappedXP // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100200
	void C_AddForgingXP(int32_t Number); // Function FSD.FSDCheatManager.C_AddForgingXP // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1100180
	void AddResourceToTeamDeposit(struct UResourceData* Resource, float Amount); // Function FSD.FSDCheatManager.AddResourceToTeamDeposit // (Final|Native|Public|BlueprintCallable) // @ game+0x11000b0
};

// Class FSD.FSDCloudLoadSave
// Size: 0x158 (Inherited: 0x28)
struct UFSDCloudLoadSave : UObject {
	struct FMulticastInlineDelegate OnCloudLoadAll; // 0x28(0x10)
	struct FMulticastInlineDelegate OnCloudLoadAllFailed; // 0x38(0x10)
	int32_t NumFailedSaves; // 0x48(0x04)
	char pad_4C[0x10c]; // 0x4c(0x10c)

	void StartCloudLoadAll(struct UObject* WorldContextObject, int32_t Index, int32_t Offset); // Function FSD.FSDCloudLoadSave.StartCloudLoadAll // (Final|Native|Public|BlueprintCallable) // @ game+0x110c630
};

// Class FSD.FSDConversionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UFSDConversionLibrary : UBlueprintFunctionLibrary {

	struct FVector_NetQuantizeNormal VectorToNetQuantizeNormal(struct FVector Vec); // Function FSD.FSDConversionLibrary.VectorToNetQuantizeNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x110c870
	struct FVector_NetQuantize VectorToNetQuantize(struct FVector Vec); // Function FSD.FSDConversionLibrary.VectorToNetQuantize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x110c7d0
	struct FVector QuatToVector(struct FQuat Quat); // Function FSD.FSDConversionLibrary.QuatToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x110b8c0
	struct FRotator QuatToRotator(struct FQuat Quat); // Function FSD.FSDConversionLibrary.QuatToRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x110b830
	struct FVector_NetQuantizeNormal QuadToNetQuantizeNormal(struct FQuat Quat); // Function FSD.FSDConversionLibrary.QuadToNetQuantizeNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x110b7a0
	struct FVector ComponentToWorldLocation(struct USceneComponent* Component); // Function FSD.FSDConversionLibrary.ComponentToWorldLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11094d0
	struct FVector ActorToWorldLocation(struct AActor* Actor); // Function FSD.FSDConversionLibrary.ActorToWorldLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1108c10
};

// Class FSD.FSDCreateSessionCallbackProxy
// Size: 0x98 (Inherited: 0x30)
struct UFSDCreateSessionCallbackProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	char pad_50[0x48]; // 0x50(0x48)

	struct UFSDCreateSessionCallbackProxy* FSDCreateSession(struct UObject* WorldContextObject, struct APlayerController* PlayerController, int32_t PublicConnections, bool bUseLAN, bool bFriendsOnly); // Function FSD.FSDCreateSessionCallbackProxy.FSDCreateSession // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1109560
};

// Class FSD.FSDCustomDPIScalingRule
// Size: 0x28 (Inherited: 0x28)
struct UFSDCustomDPIScalingRule : UDPICustomScalingRule {
};

// Class FSD.FSDEvent
// Size: 0x100 (Inherited: 0x30)
struct UFSDEvent : UDataAsset {
	struct FMulticastInlineDelegate OnActiveChanged; // 0x30(0x10)
	struct FName EventName; // 0x40(0x08)
	struct FGuid SaveGameID; // 0x48(0x10)
	bool bHasClaimableRewards; // 0x58(0x01)
	bool bFreeBeerEvent; // 0x59(0x01)
	char pad_5A[0x6]; // 0x5a(0x06)
	struct TArray<SoftClassProperty> EventDebris; // 0x60(0x10)
	struct TArray<struct TSoftObjectPtr<struct UWorld>> SpacerigSublevels; // 0x70(0x10)
	struct FClaimableRewardView ClaimableRewards; // 0x80(0x70)
	struct TArray<SoftClassProperty> Campaigns; // 0xf0(0x10)

	void MarkClaimableRewardsSeen(struct UObject* WorldContext); // Function FSD.FSDEvent.MarkClaimableRewardsSeen // (Final|Native|Public|BlueprintCallable) // @ game+0x110b330
	bool IsFsdEventActive(struct UObject* WorldContext, struct UFSDEvent* FSDEvent); // Function FSD.FSDEvent.IsFsdEventActive // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x110af40
	bool HasUnseenClaimableRewards(struct UObject* WorldContext); // Function FSD.FSDEvent.HasUnseenClaimableRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x110adc0
	bool GiveRewards(struct APlayerController* PlayerController); // Function FSD.FSDEvent.GiveRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x110ab80
	bool GetIsActive(struct UObject* WorldContext); // Function FSD.FSDEvent.GetIsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110a260
};

// Class FSD.FSDEventCollection
// Size: 0x90 (Inherited: 0x30)
struct UFSDEventCollection : UDataAsset {
	struct TSet<struct UFSDEvent*> Events; // 0x30(0x50)
	struct FMulticastInlineDelegate OnEventActiveChanged; // 0x80(0x10)

	struct UFSDEvent* FindEventHandler(struct FName EventName); // Function FSD.FSDEventCollection.FindEventHandler // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1109e60
	struct TArray<struct UFSDEvent*> FindAllEventHandlers(struct FName EventName); // Function FSD.FSDEventCollection.FindAllEventHandlers // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1109d80
};

// Class FSD.FSDEventManager
// Size: 0x220 (Inherited: 0x30)
struct UFSDEventManager : UGameInstanceSubsystem {
	struct FMulticastInlineDelegate OnFSDEventsRefresh; // 0x30(0x10)
	struct FMulticastInlineDelegate OnEventActiveChanged; // 0x40(0x10)
	struct TSet<struct FName> PendingActiveEvents; // 0x50(0x50)
	struct TSet<struct FName> ActiveEvents; // 0xa0(0x50)
	int32_t NumFailedRequests; // 0xf0(0x04)
	bool BackendDataValid; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	struct FDateTime LastRequestTime; // 0xf8(0x08)
	float NextCheckTime; // 0x100(0x04)
	char pad_104[0x11c]; // 0x104(0x11c)

	bool IsEventActive(struct UFSDEvent* FSDEvent); // Function FSD.FSDEventManager.IsEventActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110ae80
	struct TArray<struct UFSDEvent*> GetActiveEventHandlers(); // Function FSD.FSDEventManager.GetActiveEventHandlers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1109f20
	void FSDEventsRefreshDelegate__DelegateSignature(); // DelegateFunction FSD.FSDEventManager.FSDEventsRefreshDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool FSDEventsReady(); // Function FSD.FSDEventManager.FSDEventsReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11096f0
};

// Class FSD.FSDFindSessionsCallbackProxy
// Size: 0xb0 (Inherited: 0x30)
struct UFSDFindSessionsCallbackProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnRefresh; // 0x50(0x10)
	char pad_60[0x38]; // 0x60(0x38)
	struct UObject* WorldContextObject; // 0x98(0x08)
	struct UFSDFindSteamSessions* FSDFindSteamSessions; // 0xa0(0x08)
	char pad_A8[0x8]; // 0xa8(0x08)

	void OnFSDCompleted(bool bSuccess, struct TArray<struct FBlueprintSessionResult> Results); // Function FSD.FSDFindSessionsCallbackProxy.OnFSDCompleted // (Final|Native|Private|HasOutParms) // @ game+0x110b3b0
	void ManualRefreshServerList(); // Function FSD.FSDFindSessionsCallbackProxy.ManualRefreshServerList // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x110b310
	struct UFSDFindSessionsCallbackProxy* FSDFindSessions(struct UObject* WorldContextObject, struct APlayerController* PlayerController, int32_t MaxResults, bool bUseLAN); // Function FSD.FSDFindSessionsCallbackProxy.FSDFindSessions // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1109800
	struct UFSDFindSessionsCallbackProxy* FSDFindFullSessions(struct UObject* WorldContextObject, struct APlayerController* PlayerController, int32_t MaxResults); // Function FSD.FSDFindSessionsCallbackProxy.FSDFindFullSessions // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1109710
};

// Class FSD.FSDFindSteamSessions
// Size: 0x140 (Inherited: 0x28)
struct UFSDFindSteamSessions : UObject {
	struct FMulticastInlineDelegate OnFindResult; // 0x28(0x10)
	char pad_38[0x108]; // 0x38(0x108)
};

// Class FSD.FSDFlyingBugController
// Size: 0x390 (Inherited: 0x358)
struct AFSDFlyingBugController : AFSDAIController {
	char pad_358[0x18]; // 0x358(0x18)
	struct UBehaviorTree* BehaviourTree; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)
	float UpdateLosInterval; // 0x380(0x04)
	bool SetTargetOnAlert; // 0x384(0x01)
	bool SyncTargetWithBB; // 0x385(0x01)
	char pad_386[0xa]; // 0x386(0x0a)

	void OnFlyingBugAlerted(); // Function FSD.FSDFlyingBugController.OnFlyingBugAlerted // (Final|Native|Protected) // @ game+0x110b4d0
};

// Class FSD.DashingFlyingBugController
// Size: 0x390 (Inherited: 0x390)
struct ADashingFlyingBugController : AFSDFlyingBugController {
};

// Class FSD.FSDFriendsAndInvites
// Size: 0x78 (Inherited: 0x28)
struct UFSDFriendsAndInvites : UObject {
	struct FMulticastInlineDelegate OnFriendsChanged; // 0x28(0x10)
	struct FMulticastInlineDelegate OnFriendInvitesChanged; // 0x38(0x10)
	struct FMulticastInlineDelegate OnRequestRefresh; // 0x48(0x10)
	struct TArray<struct FBlueprintFriend> Friends; // 0x58(0x10)
	struct TArray<struct FBlueprintFriend> FriendInvites; // 0x68(0x10)

	void Init(); // Function FSD.FSDFriendsAndInvites.Init // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.MissionResultInfo
// Size: 0xa8 (Inherited: 0x28)
struct UMissionResultInfo : UObject {
	bool HasInfo; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float MissionTime; // 0x2c(0x04)
	float MissionTotalHazBonus; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FText MissionHazName; // 0x38(0x18)
	float MissionHazBonus; // 0x50(0x04)
	float ComplexityBonus; // 0x54(0x04)
	int32_t ComplexityDots; // 0x58(0x04)
	float LenghtBonus; // 0x5c(0x04)
	int32_t LenghtDots; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct TArray<struct FText> WarningTitles; // 0x68(0x10)
	struct TArray<struct UTexture2D*> WarningIcons; // 0x78(0x10)
	struct TArray<float> WarningBonusses; // 0x88(0x10)
	float TotalCreditsSum; // 0x98(0x04)
	float TotalXPSum; // 0x9c(0x04)
	bool WasSuccess; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)

	float GetWarningBonusSum(); // Function FSD.MissionResultInfo.GetWarningBonusSum // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x110aad0
};

// Class FSD.CampaignNotification
// Size: 0x40 (Inherited: 0x28)
struct UCampaignNotification : UObject {
	struct UCampaign* Campaign; // 0x28(0x08)
	struct UCampaignMission* mission; // 0x30(0x08)
	int32_t Progress; // 0x38(0x04)
	bool bIsCampaignCompleted; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
};

// Class FSD.FSDGameInstance
// Size: 0xeb0 (Inherited: 0x198)
struct UFSDGameInstance : UGameInstance {
	char pad_198[0x8]; // 0x198(0x08)
	struct FMulticastInlineDelegate OnTemporaryBuffChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnGameSettingsChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnGraphicsSettingsChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnPressStart; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnJoinPendingInvite; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnSkinChangedEvent; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnLoaderStart; // 0x200(0x10)
	struct FMulticastInlineDelegate OnPlayLevelSequenceInCharacterWorld; // 0x210(0x10)
	struct FMulticastInlineDelegate OnLoaderStop; // 0x220(0x10)
	struct FMulticastInlineDelegate OnCharacterSelectionStart; // 0x230(0x10)
	struct FMulticastInlineDelegate OnStartForging; // 0x240(0x10)
	struct FMulticastInlineDelegate OnForgingDone; // 0x250(0x10)
	struct FMulticastInlineDelegate OnCharacterSelectionStop; // 0x260(0x10)
	struct FMulticastInlineDelegate OnShowCharacterSelectionRefresh; // 0x270(0x10)
	struct FMulticastInlineDelegate OnTutorialManagerSet; // 0x280(0x10)
	struct FMulticastInlineDelegate OnLocalPlayerCharacterSet; // 0x290(0x10)
	struct FMulticastInlineDelegate OnShowReconnectScreen; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnXBoxAccountPickerClosed; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnXBoxChangeUser; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnHDRGammaChanged; // 0x2d0(0x10)
	struct FMulticastInlineDelegate OnGravityChanged; // 0x2e0(0x10)
	struct FMulticastInlineDelegate OnNewPostProcessingManager; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnPreviewSkinChanged; // 0x300(0x10)
	bool ShowingReconnectScreen; // 0x310(0x01)
	char pad_311[0x7]; // 0x311(0x07)
	struct FPendingRewards PendingMissionRewards; // 0x318(0x190)
	struct TArray<struct FClaimableRewardEntry> PendingPromotionRewards; // 0x4a8(0x10)
	struct TWeakObjectPtr<struct UMouseCursorWidget> MouseCursorWidget; // 0x4b8(0x08)
	struct FMulticastInlineDelegate OnShowCharacterSelector; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnShowViewer3D; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnShowCharacterSelectorEquipSlot; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnShowCharacterSelectorEquip; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnShowCharacterSelectorRotate; // 0x500(0x10)
	struct FMulticastInlineDelegate OnShowEndScreen; // 0x510(0x10)
	struct AProceduralSetup* ProceduralSetup; // 0x520(0x08)
	bool HasStartedAMission; // 0x528(0x01)
	char pad_529[0x7]; // 0x529(0x07)
	struct FString FSDPassword; // 0x530(0x10)
	bool FSDPrivateServer; // 0x540(0x01)
	bool SoloSession; // 0x541(0x01)
	bool IsJoiningInvite; // 0x542(0x01)
	bool FirstTimeInFrontend; // 0x543(0x01)
	bool SessionFirstStartOnSpaceRig; // 0x544(0x01)
	bool ShowFirstCharacterSelector; // 0x545(0x01)
	bool ShowSaveWarning; // 0x546(0x01)
	char pad_547[0x1]; // 0x547(0x01)
	struct AActor* WorldViewTargetDummy; // 0x548(0x08)
	struct UMissionResultInfo* MissionResultInfo; // 0x550(0x08)
	bool LoaderSequencePlaying; // 0x558(0x01)
	char pad_559[0x7]; // 0x559(0x07)
	struct FString LastPerksLoadout; // 0x560(0x10)
	struct AActor* CharacterSelectionLastViewTarget; // 0x570(0x08)
	bool HasSeenInfoScreen; // 0x578(0x01)
	char pad_579[0x7]; // 0x579(0x07)
	struct FTransform CharacterSelectionViewTargetTransform; // 0x580(0x30)
	struct FTransform LoaderViewTargetTransform; // 0x5b0(0x30)
	struct FMulticastInlineDelegate OnGeneratedMissionChanged; // 0x5e0(0x10)
	struct FGameStateSeamlessTravelStorage GameStateSeamlessTravelStorage; // 0x5f0(0x150)
	struct FMulticastInlineDelegate OnDonkeyChanged; // 0x740(0x10)
	struct TWeakObjectPtr<struct AMolly> Donkey; // 0x750(0x08)
	struct FMulticastInlineDelegate OnBoscoChanged; // 0x758(0x10)
	bool DEBUGSpawnRandomMissions; // 0x768(0x01)
	char pad_769[0x7]; // 0x769(0x07)
	int32_t DEBUGFixedPLSSeed; // 0x770(0x04)
	char pad_774[0x10]; // 0x774(0x10)
	int32_t DEBUGSeedOverride; // 0x784(0x04)
	bool CanPlayOnline; // 0x788(0x01)
	bool CanCommunicateOnline; // 0x789(0x01)
	char pad_78A[0x6]; // 0x78a(0x06)
	struct FMulticastInlineDelegate OnSteamSearchRegionChanged; // 0x790(0x10)
	struct FMulticastInlineDelegate OnSteamServerJoinStatusChanged; // 0x7a0(0x10)
	struct FMulticastInlineDelegate OnStartSearchForFriendsComplete; // 0x7b0(0x10)
	struct TMap<struct FString, struct FString> FriendSessions; // 0x7c0(0x50)
	struct FMulticastInlineDelegate OnFadeInComplete; // 0x810(0x10)
	char pad_820[0x8]; // 0x820(0x08)
	struct FMulticastInlineDelegate OnNewSpaceRigNotification; // 0x828(0x10)
	char pad_838[0x8]; // 0x838(0x08)
	struct UGoogleAnalyticsWrapper* GoogleAnalyticsWI; // 0x840(0x08)
	struct USpecialEvent* ForcedSpecialEvent; // 0x848(0x08)
	char pad_850[0x2]; // 0x850(0x02)
	bool ShowMinerManualWorkInProgress; // 0x852(0x01)
	char pad_853[0x5]; // 0x853(0x05)
	struct FMulticastInlineDelegate OnCampaignNotification; // 0x858(0x10)
	struct FMulticastInlineDelegate OnMinersManualNotification; // 0x868(0x10)
	struct FMulticastInlineDelegate OnNewHUDWarning; // 0x878(0x10)
	char pad_888[0x48]; // 0x888(0x48)
	float LastDreadnaughtKillTime; // 0x8d0(0x04)
	struct TWeakObjectPtr<struct UWindowWidget> ActiveEscapeMenu; // 0x8d4(0x08)
	char pad_8DC[0x4]; // 0x8dc(0x04)
	struct UCampaignNotification* CampaignNotification; // 0x8e0(0x08)
	struct TWeakObjectPtr<struct APostProcessingManager> PostProcessingManager; // 0x8e8(0x08)
	struct FFadeData Fading; // 0x8f0(0x48)
	struct TArray<struct FSpaceRigNotification> SpaceRigNotifications; // 0x938(0x10)
	struct TWeakObjectPtr<struct ABosco> Drone; // 0x948(0x08)
	struct TWeakObjectPtr<struct APlayerCharacter> LocalPlayerCharacter; // 0x950(0x08)
	struct TWeakObjectPtr<struct ATutorialManager> TutorialManager; // 0x958(0x08)
	struct ACharacterSelectionSwitcher* CharacterSelectionSwitcher; // 0x960(0x08)
	bool bGameSettingsChanged; // 0x968(0x01)
	char pad_969[0x7]; // 0x969(0x07)
	struct FFSDServerSearchOptions ServerSearchOptions; // 0x970(0x50)
	bool ServerSearchActive; // 0x9c0(0x01)
	char pad_9C1[0x17]; // 0x9c1(0x17)
	struct FMulticastInlineDelegate OnPrivilegeCheckComplete; // 0x9d8(0x10)
	char pad_9E8[0x10]; // 0x9e8(0x10)
	bool IsOnPressStartScreen; // 0x9f8(0x01)
	bool HasSeenStartScreen; // 0x9f9(0x01)
	char pad_9FA[0x6]; // 0x9fa(0x06)
	struct AProceduralSetup* ProceduralLevel; // 0xa00(0x08)
	struct UIconGenerationManager* IconGenerationManagerClass; // 0xa08(0x08)
	struct UIconGenerationManager* IconGenerationManager; // 0xa10(0x08)
	char pad_A18[0x8]; // 0xa18(0x08)
	struct UCampaignManager* CampaignManager; // 0xa20(0x08)
	struct UDeepDiveManager* DeepDiveManager; // 0xa28(0x08)
	struct UGeneratedMission* GeneratedMission; // 0xa30(0x08)
	struct UDifficultySetting* DesiredDifficulty; // 0xa38(0x08)
	struct UFSDSaveGame* SaveGame; // 0xa40(0x08)
	enum class EDisconnectReason DisconnectReason; // 0xa48(0x01)
	char pad_A49[0x7]; // 0xa49(0x07)
	struct FString DisconnectErrorCode; // 0xa50(0x10)
	struct TArray<struct UWorld*> AlwaysLoadedWorlds; // 0xa60(0x10)
	bool ShowCharacterSelectionWorld; // 0xa70(0x01)
	char pad_A71[0x7]; // 0xa71(0x07)
	struct AActor* Viewer3DClass; // 0xa78(0x08)
	bool ShowLoaderWorld; // 0xa80(0x01)
	bool CharacterSelectionWorldActive; // 0xa81(0x01)
	bool MixerInteractivityEnabled; // 0xa82(0x01)
	bool LoaderWorldActive; // 0xa83(0x01)
	bool ResetHUDWhenReturning; // 0xa84(0x01)
	bool MovieModeActive; // 0xa85(0x01)
	bool MovieModeActiveInSpacerig; // 0xa86(0x01)
	bool MovieModeStartAtOrigin; // 0xa87(0x01)
	bool MovieModeStartWithCameraShake; // 0xa88(0x01)
	char pad_A89[0x7]; // 0xa89(0x07)
	struct USchematic* ActiveForgeSchematic; // 0xa90(0x08)
	struct UFSDCloudLoadSave* FSDCloudLoadSave; // 0xa98(0x08)
	struct UFSDSessionUpdater* SessionUpdater; // 0xaa0(0x08)
	struct UFSDSendToURL* SendToURL; // 0xaa8(0x08)
	struct UFSDFriendsAndInvites* FriendsAndInvites; // 0xab0(0x08)
	double SessionStartTime; // 0xab8(0x08)
	int32_t SessionStartTimestamp; // 0xac0(0x04)
	float InKBytesPerSecond; // 0xac4(0x04)
	float OutKBytesPerSecond; // 0xac8(0x04)
	bool PreSpawnNigaraParticles; // 0xacc(0x01)
	char pad_ACD[0x3]; // 0xacd(0x03)
	struct UTemporaryBuff* TemporaryBuff; // 0xad0(0x08)
	struct TSoftObjectPtr<struct ULevelSequence> NextLoaderSequence; // 0xad8(0x28)
	enum class EAlwaysLoadedWorlds NextLoaderLevel; // 0xb00(0x01)
	char pad_B01[0x7]; // 0xb01(0x07)
	struct TSoftObjectPtr<struct ULevelSequence> DeepDiveLoaderSequence; // 0xb08(0x28)
	struct TSoftObjectPtr<struct ULevelSequence> DeepDiveLoaderSequence2; // 0xb30(0x28)
	char pad_B58[0x10]; // 0xb58(0x10)
	struct USoundSubmix* ControllerVibrationSubmix; // 0xb68(0x08)
	struct USoundSubmix* ControllerSpeakerSubmix; // 0xb70(0x08)
	char pad_B78[0x338]; // 0xb78(0x338)

	void UpdateGlobelMissionSeed(); // Function FSD.FSDGameInstance.UpdateGlobelMissionSeed // (Final|Native|Public|BlueprintCallable) // @ game+0x110c7b0
	void StopPhotographyInputProcessor(); // Function FSD.FSDGameInstance.StopPhotographyInputProcessor // (Final|Native|Public|BlueprintCallable) // @ game+0x110c790
	void StopPersonalAnalytics(); // Function FSD.FSDGameInstance.StopPersonalAnalytics // (Final|Native|Public|BlueprintCallable) // @ game+0x110c770
	void SteamServerJoinStatusDelegate__DelegateSignature(enum class ESteamServerJoinStatus Status); // DelegateFunction FSD.FSDGameInstance.SteamServerJoinStatusDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void SteamSearchRegionDelegate__DelegateSignature(enum class ESteamSearchRegion Region); // DelegateFunction FSD.FSDGameInstance.SteamSearchRegionDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void StartPhotographyInputProcessor(); // Function FSD.FSDGameInstance.StartPhotographyInputProcessor // (Final|Native|Public|BlueprintCallable) // @ game+0x110c750
	void StartPersonalAnalytics(); // Function FSD.FSDGameInstance.StartPersonalAnalytics // (Final|Native|Public|BlueprintCallable) // @ game+0x110c730
	struct AProceduralSetup* SpawnProcedural(); // Function FSD.FSDGameInstance.SpawnProcedural // (Final|Native|Public|BlueprintCallable) // @ game+0x110c600
	bool ShouldPendingRewardsBeShown(); // Function FSD.FSDGameInstance.ShouldPendingRewardsBeShown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110c5d0
	bool ShouldPendingRewardsBeGiven(); // Function FSD.FSDGameInstance.ShouldPendingRewardsBeGiven // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110c5a0
	void SetViewer3DClass(struct AActor* NewClass, enum class ECharselectionCameraLocation Location); // Function FSD.FSDGameInstance.SetViewer3DClass // (Final|Native|Public|BlueprintCallable) // @ game+0x110c4e0
	void SetSteamServerJoinStatus(enum class ESteamServerJoinStatus NewStatus); // Function FSD.FSDGameInstance.SetSteamServerJoinStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x110c450
	void SetSteamSearchRegion(enum class ESteamSearchRegion NewRegion); // Function FSD.FSDGameInstance.SetSteamSearchRegion // (Final|Native|Public|BlueprintCallable) // @ game+0x110c3c0
	void SetServerSearchOptions(struct FFSDServerSearchOptions options); // Function FSD.FSDGameInstance.SetServerSearchOptions // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x110c2e0
	void SetServerSearchActive(bool Active); // Function FSD.FSDGameInstance.SetServerSearchActive // (Final|Native|Public|BlueprintCallable) // @ game+0x110c260
	void SetSelectedMission(struct UGeneratedMission* mission, bool updateSessionSettings); // Function FSD.FSDGameInstance.SetSelectedMission // (Final|Native|Public|BlueprintCallable) // @ game+0x110c190
	void SetProceduralMap(struct AProceduralSetup* procedural); // Function FSD.FSDGameInstance.SetProceduralMap // (Final|Native|Public|BlueprintCallable) // @ game+0x110c110
	void SetPendingInviteJoinModding(struct FBlueprintSessionResult Result); // Function FSD.FSDGameInstance.SetPendingInviteJoinModding // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x110c040
	void SetMinersManualNotification(enum class EMinersManualSection Section, struct UObject* IdentifyingObject, struct FText Text); // Function FSD.FSDGameInstance.SetMinersManualNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x110bed0
	void SetLoaderWorldVisible(bool V, bool resetHud); // Function FSD.FSDGameInstance.SetLoaderWorldVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x110be00
	void SetIsUsingOnlineFeatures(bool bIsOnlineFeatureUsed); // Function FSD.FSDGameInstance.SetIsUsingOnlineFeatures // (Final|Native|Public|BlueprintCallable) // @ game+0x110bd70
	void SetHasSeenInfoScreen(); // Function FSD.FSDGameInstance.SetHasSeenInfoScreen // (Final|Native|Public|BlueprintCallable) // @ game+0x110bd50
	void SetFSDPassword(struct FString pw); // Function FSD.FSDGameInstance.SetFSDPassword // (Final|Native|Public|BlueprintCallable) // @ game+0x110bcb0
	void SetEligableForRetirementAssignment(bool eligable); // Function FSD.FSDGameInstance.SetEligableForRetirementAssignment // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void SetCharacterSelectionWorldVisible(bool V, enum class ECharselectionCameraLocation cameraLocation, bool resetHud, enum class ECharacterSelectorItemStatus itemStatus); // Function FSD.FSDGameInstance.SetCharacterSelectionWorldVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x110bb50
	void SetCharacterSelectionSwitcher(struct ACharacterSelectionSwitcher* switcher); // Function FSD.FSDGameInstance.SetCharacterSelectionSwitcher // (Final|Native|Public|BlueprintCallable) // @ game+0x110bad0
	void SendSteamInfo(); // Function FSD.FSDGameInstance.SendSteamInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x110bab0
	void ScheduleResetOfWorldsAndGameDataThenOpenLevel(struct FName LevelName); // Function FSD.FSDGameInstance.ScheduleResetOfWorldsAndGameDataThenOpenLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x110ba30
	void RestoreCursors(); // Function FSD.FSDGameInstance.RestoreCursors // (Final|Native|Public|BlueprintCallable) // @ game+0x110ba10
	void ResetViewer3DClass(); // Function FSD.FSDGameInstance.ResetViewer3DClass // (Final|Native|Public|BlueprintCallable) // @ game+0x110b9f0
	void ResetSaveGame(); // Function FSD.FSDGameInstance.ResetSaveGame // (Final|Native|Public|BlueprintCallable) // @ game+0x110b9d0
	void ResetAlwaysLoadedWorldsAndGameData(); // Function FSD.FSDGameInstance.ResetAlwaysLoadedWorldsAndGameData // (Final|Native|Public|BlueprintCallable) // @ game+0x110b9b0
	void RemoveRemporaryBuff(); // Function FSD.FSDGameInstance.RemoveRemporaryBuff // (Final|Native|Public|BlueprintCallable) // @ game+0x110b990
	void RemoveBosco(); // Function FSD.FSDGameInstance.RemoveBosco // (Final|Native|Public|BlueprintCallable) // @ game+0x110b970
	void RefreshIsGameModded(); // Function FSD.FSDGameInstance.RefreshIsGameModded // (Final|Native|Public|BlueprintCallable) // @ game+0x110b950
	void PostInit(bool reload); // Function FSD.FSDGameInstance.PostInit // (Final|Native|Private|BlueprintCallable) // @ game+0x110b710
	void PairingUsePreviousProfile(); // Function FSD.FSDGameInstance.PairingUsePreviousProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x8dc380
	void PairingUseNewProfile(); // Function FSD.FSDGameInstance.PairingUseNewProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x110b6f0
	void OnStartSearchForFriendsComplete__DelegateSignature(bool bWasSuccessful, struct FString ErrorStr); // DelegateFunction FSD.FSDGameInstance.OnStartSearchForFriendsComplete__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnNewFSDSessionID(struct FString sessionId); // Function FSD.FSDGameInstance.OnNewFSDSessionID // (Final|Native|Private) // @ game+0x110b650
	void OnNetworkFailure(struct UWorld* World, struct UNetDriver* NetDriver, enum class ENetworkFailure failType, struct FString errorMessage); // Function FSD.FSDGameInstance.OnNetworkFailure // (Final|Native|Protected) // @ game+0x110b4f0
	void OnLoadComplete(struct FString MapName); // Function FSD.FSDGameInstance.OnLoadComplete // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void NewHUDWarningDelegate__DelegateSignature(struct UHUDWarningWidget* newWidget); // DelegateFunction FSD.FSDGameInstance.NewHUDWarningDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void LoadSaveGame(struct UFSDSaveGame* toLoad); // Function FSD.FSDGameInstance.LoadSaveGame // (Final|Native|Public|BlueprintCallable) // @ game+0x110b290
	bool IsScreenFadingToBlack(struct UObject* WorldContext); // Function FSD.FSDGameInstance.IsScreenFadingToBlack // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x110b210
	bool IsScreenFadingFromBlack(struct UObject* WorldContext); // Function FSD.FSDGameInstance.IsScreenFadingFromBlack // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x110b190
	bool IsScreenFading(struct UObject* WorldContext); // Function FSD.FSDGameInstance.IsScreenFading // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x110b110
	bool IsPendingInvitePasswordProtected(); // Function FSD.FSDGameInstance.IsPendingInvitePasswordProtected // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x110b0e0
	bool IsPendingInviteModded(); // Function FSD.FSDGameInstance.IsPendingInviteModded // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x110b0b0
	bool IsMutatorActive(struct UMutator* mutatorClass); // Function FSD.FSDGameInstance.IsMutatorActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110b020
	bool IsGameModded(); // Function FSD.FSDGameInstance.IsGameModded // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x110b000
	bool IsFreeBeerRewardActive(); // Function FSD.FSDGameInstance.IsFreeBeerRewardActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110af10
	bool IsCampaignMission(); // Function FSD.FSDGameInstance.IsCampaignMission // (Final|Native|Public|BlueprintCallable) // @ game+0x110ae50
	bool HasTooManyModsEnabled(); // Function FSD.FSDGameInstance.HasTooManyModsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110ad90
	bool HasSignedIn(); // Function FSD.FSDGameInstance.HasSignedIn // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x110ad60
	bool HasPendingInvite(); // Function FSD.FSDGameInstance.HasPendingInvite // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110ad40
	bool HasPendingActivity(); // Function FSD.FSDGameInstance.HasPendingActivity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110ad20
	bool HasAnalytics(); // Function FSD.FSDGameInstance.HasAnalytics // (Final|Native|Public|BlueprintCallable) // @ game+0x110acf0
	void GraphicsUserSettingsChanged(); // Function FSD.FSDGameInstance.GraphicsUserSettingsChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x110acd0
	void GiveTemporaryBuff(struct UTemporaryBuff* buff, struct APlayerCharacter* Player); // Function FSD.FSDGameInstance.GiveTemporaryBuff // (Final|Native|Public|BlueprintCallable) // @ game+0x110ac10
	struct FVector2D GetViewportSize(); // Function FSD.FSDGameInstance.GetViewportSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x110aa90
	SoftClassProperty GetSoftReferenceToPLS(); // Function FSD.FSDGameInstance.GetSoftReferenceToPLS // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x110aa30
	struct TArray<struct FBlueprintSessionResult> GetServersFriendsArePlaying(struct TArray<struct FBlueprintSessionResult> servers); // Function FSD.FSDGameInstance.GetServersFriendsArePlaying // (Final|Native|Public|BlueprintCallable) // @ game+0x110a8b0
	bool GetPendingRewards(struct FPendingRewardsStats OutStats, struct FPendingRewards OutRewards); // Function FSD.FSDGameInstance.GetPendingRewards // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x110a560
	bool GetNextSpaceRigNotification(struct FSpaceRigNotification NextNotification); // Function FSD.FSDGameInstance.GetNextSpaceRigNotification // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x110a450
	struct TArray<struct UMutator*> GetMutators(struct UMutator* mutatorClass); // Function FSD.FSDGameInstance.GetMutators // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110a370
	int32_t GetMaxPublicConnections(); // Function FSD.FSDGameInstance.GetMaxPublicConnections // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110a340
	int32_t GetMaxAllowedMods(); // Function FSD.FSDGameInstance.GetMaxAllowedMods // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110a320
	struct AFSDPlayerController* GetLocalFSDPlayerController(); // Function FSD.FSDGameInstance.GetLocalFSDPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110a2f0
	struct UIconGenerationManager* GetIconGenerationManager(); // Function FSD.FSDGameInstance.GetIconGenerationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110a240
	bool GetHasSeenInfoScreen(); // Function FSD.FSDGameInstance.GetHasSeenInfoScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x110a220
	int32_t GetGlobalMissionSeed(); // Function FSD.FSDGameInstance.GetGlobalMissionSeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110a1f0
	struct UGeneratedMission* GetGeneratedMission(); // Function FSD.FSDGameInstance.GetGeneratedMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110a1d0
	struct UMutator* GetFirstMutator(struct UMutator* mutatorClass); // Function FSD.FSDGameInstance.GetFirstMutator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110a140
	struct FString GetDisconnectErrorCode(); // Function FSD.FSDGameInstance.GetDisconnectErrorCode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110a080
	float GetCurrentFadeAmount(); // Function FSD.FSDGameInstance.GetCurrentFadeAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110a060
	struct TArray<struct FNetworkConnectionInfo> GetConnectionInfo(); // Function FSD.FSDGameInstance.GetConnectionInfo // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1109fd0
	struct APlayerCharacter* GetCharacterSelectorCharacter(); // Function FSD.FSDGameInstance.GetCharacterSelectorCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1109fa0
	void GameUserSettingsChanged(); // Function FSD.FSDGameInstance.GameUserSettingsChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1109f00
	void FadeScreenToBlack(struct UObject* WorldContext, float FadeTime, float Delay, bool ResetExistingFades, bool CapFramerate, bool FadeWorldOnly, bool ToSpaceRig, struct UTexture* loadingImage); // Function FSD.FSDGameInstance.FadeScreenToBlack // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1109b30
	void FadeScreenFromBlack(struct UObject* WorldContext, float FadeTime, float Delay, bool ResetExistingFades, bool CapFramerate, bool FadeWorldOnly, bool ToSpaceRig); // Function FSD.FSDGameInstance.FadeScreenFromBlack // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1109930
	void DonkeyCharacterDelegate__DelegateSignature(struct AMolly* InDonkey); // DelegateFunction FSD.FSDGameInstance.DonkeyCharacterDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void CloseSessionLobby(); // Function FSD.FSDGameInstance.CloseSessionLobby // (Final|Native|Public|BlueprintCallable) // @ game+0x11094b0
	void ClearPendingRewards(); // Function FSD.FSDGameInstance.ClearPendingRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x1109490
	void ClearGameStateSeamlessTravelStorage(); // Function FSD.FSDGameInstance.ClearGameStateSeamlessTravelStorage // (Final|Native|Public|BlueprintCallable) // @ game+0x1109470
	void ClearDisconnectError(); // Function FSD.FSDGameInstance.ClearDisconnectError // (Final|Native|Public|BlueprintCallable) // @ game+0x1109450
	void ClearCampaignNotifications(); // Function FSD.FSDGameInstance.ClearCampaignNotifications // (Final|Native|Public|BlueprintCallable) // @ game+0x1109430
	void ChangeSkinPreview(struct UItemSkin* PreviewSkin); // Function FSD.FSDGameInstance.ChangeSkinPreview // (Final|Native|Public|BlueprintCallable) // @ game+0x11093b0
	void CancelJoin(); // Function FSD.FSDGameInstance.CancelJoin // (Final|Native|Public|BlueprintCallable) // @ game+0x1109390
	void BlackoutScreen(struct UObject* WorldContext, bool FadeWorldOnly); // Function FSD.FSDGameInstance.BlackoutScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11092d0
	struct UHUDWarningWidget* AddWarningToHUD(struct UHUDWarningWidget* WidgetClass, struct UTexture2D* Texture, struct USoundBase* PingSound); // Function FSD.FSDGameInstance.AddWarningToHUD // (Final|Native|Public|BlueprintCallable) // @ game+0x11091d0
	void AddToFriendSessions(struct FString friendSessionId, struct FString friendName); // Function FSD.FSDGameInstance.AddToFriendSessions // (Final|Native|Public|BlueprintCallable) // @ game+0x1109060
	void AddStatValue(struct FString Key, float Value); // Function FSD.FSDGameInstance.AddStatValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1108f80
	void AddStatCount(struct FString Key, int32_t count); // Function FSD.FSDGameInstance.AddStatCount // (Final|Native|Public|BlueprintCallable) // @ game+0x1108ea0
	void AddSpaceRigNotification(struct FSpaceRigNotification NewNotification, struct FString ID, bool TriggerEvent); // Function FSD.FSDGameInstance.AddSpaceRigNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x1108ca0
};

// Class FSD.FSDGameMode
// Size: 0x4f0 (Inherited: 0x308)
struct AFSDGameMode : AGameMode {
	struct FMulticastInlineDelegate OnMatchStarted; // 0x308(0x10)
	struct FMulticastInlineDelegate OnAllControllersReady; // 0x318(0x10)
	struct FMulticastInlineDelegate OnPlayerLoggedIn; // 0x328(0x10)
	struct FMulticastInlineDelegate OnDonkeyCalled; // 0x338(0x10)
	bool GenerationStarted; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)
	struct UPheromoneSpawnerComponent* PheromoneComponent; // 0x350(0x08)
	struct UEnemySpawnManager* EnemySpawnManager; // 0x358(0x08)
	struct UObjectivesManager* ObjectivesManager; // 0x360(0x08)
	struct UKeepInsideWorld* KeepInsideWorld; // 0x368(0x08)
	struct UMissionManager* MissionManager; // 0x370(0x08)
	struct UEncounterManager* EncounterManagerComponent; // 0x378(0x08)
	struct UCritterManager* CritterManager; // 0x380(0x08)
	struct TArray<struct AFSDPlayerController*> PlayerControllers; // 0x388(0x10)
	struct UFormationsManagerComponent* FormationsManager; // 0x398(0x08)
	char pad_3A0[0x20]; // 0x3a0(0x20)
	SoftClassProperty DropPodClass; // 0x3c0(0x28)
	SoftClassProperty MuleClass; // 0x3e8(0x28)
	SoftClassProperty DropodEscapeClass; // 0x410(0x28)
	SoftClassProperty droneClass; // 0x438(0x28)
	SoftClassProperty CheatUI; // 0x460(0x28)
	float ContinueCountdown; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)
	bool PreventAllLatejoin; // 0x490(0x01)
	bool PreventLateJoinOnMissionStart; // 0x491(0x01)
	char pad_492[0x2]; // 0x492(0x02)
	float PlayerSpawnHeightOffset; // 0x494(0x04)
	float FriendlyFireGracePeriod; // 0x498(0x04)
	char pad_49C[0x4]; // 0x49c(0x04)
	struct TArray<struct UEnemyDescriptor*> ForcedEnemyPool; // 0x4a0(0x10)
	bool UseNormalEncounters; // 0x4b0(0x01)
	bool UseStationaryEncounter; // 0x4b1(0x01)
	bool AllowSpecialEncounters; // 0x4b2(0x01)
	char pad_4B3[0x5]; // 0x4b3(0x05)
	struct UEnemyWaveManager* CachedWaveManager; // 0x4b8(0x08)
	char pad_4C0[0x30]; // 0x4c0(0x30)

	void StartGame(); // Function FSD.FSDGameMode.StartGame // (Final|Native|Public|BlueprintCallable) // @ game+0x1112710
	void SpawnMissionCriticalItems(); // Function FSD.FSDGameMode.SpawnMissionCriticalItems // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void SignalEndLevelToClients(); // Function FSD.FSDGameMode.SignalEndLevelToClients // (Final|Native|Protected|BlueprintCallable) // @ game+0x1111f10
	void ResetDeaths(); // Function FSD.FSDGameMode.ResetDeaths // (Final|Native|Public|BlueprintCallable) // @ game+0x11119e0
	void RecieveEndLevel(); // Function FSD.FSDGameMode.RecieveEndLevel // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void RecieveAllDwarvesDown(); // Function FSD.FSDGameMode.RecieveAllDwarvesDown // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void Recieve_ContinueTimerEnded(); // Function FSD.FSDGameMode.Recieve_ContinueTimerEnded // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceivePostSeamlessTravel(); // Function FSD.FSDGameMode.ReceivePostSeamlessTravel // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnObjectivesInitialized(); // Function FSD.FSDGameMode.OnObjectivesInitialized // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnLevelGenerationComplete(int32_t pass); // Function FSD.FSDGameMode.OnLevelGenerationComplete // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void OnControllerDestroyed(struct AActor* Controller); // Function FSD.FSDGameMode.OnControllerDestroyed // (Final|Native|Protected) // @ game+0x11113d0
	void LoadSpaceRig(); // Function FSD.FSDGameMode.LoadSpaceRig // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void LoadMission(struct FString MapName, SoftClassProperty optionalGameMode); // Function FSD.FSDGameMode.LoadMission // (Final|Native|Public|BlueprintCallable) // @ game+0x1111210
	void HostAbortMission(); // Function FSD.FSDGameMode.HostAbortMission // (Final|Native|Public|BlueprintCallable) // @ game+0x1111150
	struct UEnemyWaveManager* GetWaveManager(); // Function FSD.FSDGameMode.GetWaveManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11110d0
	struct AActor* GetPlayerStart(struct AFSDPlayerController* Controller); // Function FSD.FSDGameMode.GetPlayerStart // (Native|Public|BlueprintCallable) // @ game+0x1110f30
	struct AMolly* GetMuleClass(); // Function FSD.FSDGameMode.GetMuleClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110e40
	struct UEncounterManager* GetEncounterManager(); // Function FSD.FSDGameMode.GetEncounterManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11108f0
	struct FSoftObjectPath GetDropPodPath(); // Function FSD.FSDGameMode.GetDropPodPath // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110860
	struct FSoftObjectPath GetDropPodEscapePath(); // Function FSD.FSDGameMode.GetDropPodEscapePath // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11107d0
	struct AMiningPod* GetDropPodEscapeClass(); // Function FSD.FSDGameMode.GetDropPodEscapeClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110790
	struct AMiningPod* GetDropPodClass(); // Function FSD.FSDGameMode.GetDropPodClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110750
	struct FSoftObjectPath GetDronePath(); // Function FSD.FSDGameMode.GetDronePath // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11106c0
	struct ABosco* GetDroneClass(); // Function FSD.FSDGameMode.GetDroneClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110680
	struct UDifficultyManager* GetDifficultyManager(); // Function FSD.FSDGameMode.GetDifficultyManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110620
	int32_t GetCurrentLevel(); // Function FSD.FSDGameMode.GetCurrentLevel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11105f0
	bool FSDSetPause(struct APlayerController* PC, enum class EPauseReason pauseReason); // Function FSD.FSDGameMode.FSDSetPause // (Final|Native|Public|BlueprintCallable) // @ game+0x1110400
	bool FSDKickPlayer(struct APlayerController* KickedPlayer, struct FText KickReason); // Function FSD.FSDGameMode.FSDKickPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11102e0
	bool FSDClearPause(enum class EPauseReason pauseReason); // Function FSD.FSDGameMode.FSDClearPause // (Final|Native|Public|BlueprintCallable) // @ game+0x1110250
	void EndLevel(); // Function FSD.FSDGameMode.EndLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x1110230
	void DonkeyButtonPressed(); // Function FSD.FSDGameMode.DonkeyButtonPressed // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void DestroyNonLocalPlayers(); // Function FSD.FSDGameMode.DestroyNonLocalPlayers // (Final|Native|Public|BlueprintCallable) // @ game+0x1110210
	void Debug_ShowPlayerSpheres(); // Function FSD.FSDGameMode.Debug_ShowPlayerSpheres // (Final|Exec|Native|Public) // @ game+0x11101f0
	bool AllPlayersHaveSelectedCharacter(); // Function FSD.FSDGameMode.AllPlayersHaveSelectedCharacter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110fd00
	bool AllPlayersHaveGeneratedLevel(); // Function FSD.FSDGameMode.AllPlayersHaveGeneratedLevel // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110fcd0
	void AddControllerForGracePeriod(struct APlayerCharacter* APlayerCharacter); // Function FSD.FSDGameMode.AddControllerForGracePeriod // (Final|Native|Protected) // @ game+0x110fc20
	void AboutMission(); // Function FSD.FSDGameMode.AboutMission // (Final|Native|Public|BlueprintCallable) // @ game+0x110fc00
};

// Class FSD.FSDGameModeSpaceRig
// Size: 0x508 (Inherited: 0x4f0)
struct AFSDGameModeSpaceRig : AFSDGameMode {
	char AmountOfPlayersSpawnedInMedbay; // 0x4f0(0x01)
	bool StartedSession; // 0x4f1(0x01)
	char pad_4F2[0x16]; // 0x4f2(0x16)

	struct AActor* GetFreeSpawnOfType(enum class ESpacerigStartType aType, struct AFSDPlayerController* AController); // Function FSD.FSDGameModeSpaceRig.GetFreeSpawnOfType // (Native|Public|BlueprintCallable) // @ game+0x1110a10
};

// Class FSD.FSDGameplayStatics
// Size: 0x28 (Inherited: 0x28)
struct UFSDGameplayStatics : UBlueprintFunctionLibrary {

	struct UFXSystemComponent* SpawnScaledEmitterAtLocation(struct UObject* WorldContextObject, struct FScaledEffect ScaledEffect, struct FVector Location, struct FRotator Rotation, bool bAutoDestroy); // Function FSD.FSDGameplayStatics.SpawnScaledEmitterAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1112450
	struct UDecalComponent* SpawnDecalData(struct UObject* WorldContextObject, struct FVector Location, struct FVector upVector, struct FDecalData DecalData); // Function FSD.FSDGameplayStatics.SpawnDecalData // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11122d0
	struct UDecalComponent* SpawnDecalAtActor(struct AActor* Actor, struct UMaterialInterface* DecalMaterial, float Size, float Duration, float FadeDuration); // Function FSD.FSDGameplayStatics.SpawnDecalAtActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1112150
	struct UDecalComponent* SpawnDecal(struct UObject* WorldContextObject, struct UMaterialInterface* DecalMaterial, struct FVector Location, struct FVector upVector, float Size, float Duration, float FadeDuration); // Function FSD.FSDGameplayStatics.SpawnDecal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1111f30
	void SetControllerVibrationSubmixSend(struct UObject* WorldContextObject, struct UAudioComponent* AudioComponent, float SendLevel); // Function FSD.FSDGameplayStatics.SetControllerVibrationSubmixSend // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1111bc0
	void SetControllerSpeakerSubmixSend(struct UObject* WorldContextObject, struct UAudioComponent* AudioComponent, float SendLevel); // Function FSD.FSDGameplayStatics.SetControllerSpeakerSubmixSend // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1111ac0
};

// Class FSD.FSDTagSettings
// Size: 0x120 (Inherited: 0x30)
struct UFSDTagSettings : UDataAsset {
	struct FGameplayTagQuery IsFriendlyQuery; // 0x30(0x48)
	struct FGameplayTagQuery IsNeutralQuery; // 0x78(0x48)
	struct FGameplayTagQuery IsHostileQuery; // 0xc0(0x48)
	struct FFSDTagsRoot Root; // 0x108(0x18)
};

// Class FSD.FSDGameSession
// Size: 0x248 (Inherited: 0x238)
struct AFSDGameSession : AGameSession {
	struct TArray<struct FUniqueNetIdRepl> BannedPlayers; // 0x238(0x10)
};

// Class FSD.GameStats
// Size: 0x230 (Inherited: 0x220)
struct AGameStats : AInfo {
	int32_t NumberOfPlayersEscapedInPod; // 0x220(0x04)
	float TotalGoldMined; // 0x224(0x04)
	int32_t TotalEnemiesKilled; // 0x228(0x04)
	int32_t MissionHaz; // 0x22c(0x04)

	void OnPlayerMinedGold(struct UCappedResource* Resource, float Amount); // Function FSD.GameStats.OnPlayerMinedGold // (Final|Native|Public) // @ game+0x1111450
};

// Class FSD.FSDGameState
// Size: 0x698 (Inherited: 0x290)
struct AFSDGameState : AGameState {
	struct FMulticastInlineDelegate OnMissionTimeUpdated; // 0x290(0x10)
	struct FMulticastInlineDelegate OnTerrainGenerated; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnTerrainGenerationStarting; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnMatchStarted; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnMatchEnded; // 0x2d0(0x10)
	struct FMulticastInlineDelegate OnGameEventCompletedEvent; // 0x2e0(0x10)
	struct FMulticastInlineDelegate OnPlayerJoined; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnPlayerLeave; // 0x300(0x10)
	struct FMulticastInlineDelegate OnContinueActive; // 0x310(0x10)
	struct FMulticastInlineDelegate OnContinueCountdownChanged; // 0x320(0x10)
	struct FMulticastInlineDelegate OnAllDwarvesDown; // 0x330(0x10)
	struct FMulticastInlineDelegate OnTeamMemberCampaignMissionChanged; // 0x340(0x10)
	struct FMulticastInlineDelegate OnEnemyKilledEvent; // 0x350(0x10)
	struct FMulticastInlineDelegate OnPlayerCharacterRegistered; // 0x360(0x10)
	int32_t CurrentLevel; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct AMiningPod* EscapePod; // 0x378(0x08)
	struct FString FSDSessionID; // 0x380(0x10)
	struct FMulticastInlineDelegate OnBoscoReviveCounterChanged; // 0x390(0x10)
	bool bTeamDown; // 0x3a0(0x01)
	char pad_3A1[0x7]; // 0x3a1(0x07)
	struct FMulticastInlineDelegate OnTeamDown; // 0x3a8(0x10)
	char pad_3B8[0x8]; // 0x3b8(0x08)
	struct FMulticastInlineDelegate OnObjectivesCompleted; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnObjectiveAdded; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnDifficultyChanged; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnCountdownStarted; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnCountdownTimeChanged; // 0x400(0x10)
	struct FMulticastInlineDelegate OnCountdownFinished; // 0x410(0x10)
	struct ADeepCSGWorld* CSGWorld; // 0x420(0x08)
	int32_t LastSupplyPodTimeStamp; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)
	struct AProceduralSetup* ProceduralSetup; // 0x430(0x08)
	bool DelayLateJoin; // 0x438(0x01)
	char pad_439[0x7]; // 0x439(0x07)
	struct UPrimitiveComponent* FakeMovementBase; // 0x440(0x08)
	int32_t PlayerSurvivalCreditBonus; // 0x448(0x04)
	float ResourceAmountPenalty; // 0x44c(0x04)
	float ObjectivesCreditPenalty; // 0x450(0x04)
	float ObjectivesXPPenaltyNormal; // 0x454(0x04)
	float ObjectivesXPPenaltyDeepDives; // 0x458(0x04)
	char pad_45C[0x4]; // 0x45c(0x04)
	struct FText TextMissionCompleted; // 0x460(0x18)
	struct FText TextSecondaryObjective; // 0x478(0x18)
	struct FText TextSurvivalBonus; // 0x490(0x18)
	struct FText TextMined; // 0x4a8(0x18)
	struct FText TextCollected; // 0x4c0(0x18)
	struct FText TextBonus; // 0x4d8(0x18)
	int32_t BoscoReviveCounter; // 0x4f0(0x04)
	char pad_4F4[0x4]; // 0x4f4(0x04)
	struct USpawnEffectsComponent* SpawnEffects; // 0x4f8(0x08)
	struct UDynamicMeshScaler* MeshScaler; // 0x500(0x08)
	struct UFlareController* FlareController; // 0x508(0x08)
	struct UGemProximityTracker* GemProximityTracker; // 0x510(0x08)
	struct UAttackerManagerComponent* AttackerManager; // 0x518(0x08)
	struct UDifficultyManager* DifficultyManagerComponent; // 0x520(0x08)
	struct USoundMixManagerComponent* SoundMixManager; // 0x528(0x08)
	struct USeasonReplicatorComponent* SeasonReplicatorComponent; // 0x530(0x08)
	struct UTeamResourcesComponent* TeamResources; // 0x538(0x08)
	bool IsOnSpaceRig; // 0x540(0x01)
	bool PlayerMadeItToDropPod; // 0x541(0x01)
	char pad_542[0x6]; // 0x542(0x06)
	struct TArray<struct APlayerCharacter*> ActivePlayerCharacters; // 0x548(0x10)
	struct FReplicatedObjectives Objectives; // 0x558(0x18)
	struct FText CompletedGameEventName; // 0x570(0x18)
	struct FGeneratedMissionSeed GeneratedMissionSeed; // 0x588(0x58)
	bool objectivesCompleted; // 0x5e0(0x01)
	char pad_5E1[0x7]; // 0x5e1(0x07)
	struct UDifficultySetting* CurrentDifficultySetting; // 0x5e8(0x08)
	bool RememberDifficulty; // 0x5f0(0x01)
	char pad_5F1[0x7]; // 0x5f1(0x07)
	struct UPlayerProximityTracker* ProximityTracker; // 0x5f8(0x08)
	struct UShowroomManager* ShowroomManager; // 0x600(0x08)
	struct AGameStats* GameStats; // 0x608(0x08)
	uint32_t MissionTime; // 0x610(0x04)
	char pad_614[0x4]; // 0x614(0x04)
	uint32_t MissionStartTime; // 0x618(0x04)
	uint32_t MissionHaz; // 0x61c(0x04)
	bool PreventLatejoinCharacterDuplication; // 0x620(0x01)
	bool StartPressed; // 0x621(0x01)
	bool ContinuePressed; // 0x622(0x01)
	char pad_623[0x1]; // 0x623(0x01)
	int32_t ContinuesCountdown; // 0x624(0x04)
	bool AllDwarvesDown; // 0x628(0x01)
	bool MissionAborted; // 0x629(0x01)
	char pad_62A[0x2]; // 0x62a(0x02)
	int32_t CountdownRemaining; // 0x62c(0x04)
	struct FText countdownText; // 0x630(0x18)
	bool CanCarryOverResources; // 0x648(0x01)
	char pad_649[0x1f]; // 0x649(0x1f)
	struct FMulticastInlineDelegate SessionLeaderChanged; // 0x668(0x10)
	char pad_678[0x8]; // 0x678(0x08)
	struct APlayerState* CurrentPlayerSessionLeader; // 0x680(0x08)
	char pad_688[0x10]; // 0x688(0x10)

	void StartCountdown(int32_t Duration, struct FText countdownName); // Function FSD.FSDGameState.StartCountdown // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1112600
	void SetPreventLatejoinCharacterDuplication(bool prevent); // Function FSD.FSDGameState.SetPreventLatejoinCharacterDuplication // (Final|Native|Public|BlueprintCallable) // @ game+0x1111e90
	void SetPlayersHaveReachedDroppod(bool newHasPlayerReached); // Function FSD.FSDGameState.SetPlayersHaveReachedDroppod // (Final|Native|Public|BlueprintCallable) // @ game+0x1111e10
	void SetGeneratedMissionParameters(struct UGeneratedMission* mission); // Function FSD.FSDGameState.SetGeneratedMissionParameters // (Final|Native|Public|BlueprintCallable) // @ game+0x1111d90
	void SetCurrentDifficulty(struct UDifficultySetting* Setting, bool updateSessionSettings); // Function FSD.FSDGameState.SetCurrentDifficulty // (Final|Native|Public|BlueprintCallable) // @ game+0x1111cc0
	void SetCompletionData(bool objectivesCompleted, int32_t playersInPod); // Function FSD.FSDGameState.SetCompletionData // (Final|Native|Public|BlueprintCallable) // @ game+0x1111a00
	void ReceiveGeneratedMissionReplicated(); // Function FSD.FSDGameState.ReceiveGeneratedMissionReplicated // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void PostLocalizedGameMessage(struct FText Msg, struct TArray<struct FText> Arguments); // Function FSD.FSDGameState.PostLocalizedGameMessage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1111850
	void PostGameMessage(struct FString Msg); // Function FSD.FSDGameState.PostGameMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x11117b0
	void OnRep_StartPressed(bool oldStartPressed); // Function FSD.FSDGameState.OnRep_StartPressed // (Final|Native|Public) // @ game+0x1111720
	void OnRep_ObjectivesCompleted(); // Function FSD.FSDGameState.OnRep_ObjectivesCompleted // (Final|Native|Protected) // @ game+0x1111700
	void OnRep_MissionTime(); // Function FSD.FSDGameState.OnRep_MissionTime // (Final|Native|Protected) // @ game+0x11116c0
	void OnRep_GeneratedMissionSeed(); // Function FSD.FSDGameState.OnRep_GeneratedMissionSeed // (Final|Native|Protected) // @ game+0x11116a0
	void OnRep_FSDSessionID(); // Function FSD.FSDGameState.OnRep_FSDSessionID // (Final|Native|Protected) // @ game+0x1111680
	void OnRep_CurrentDifficultySetting(); // Function FSD.FSDGameState.OnRep_CurrentDifficultySetting // (Final|Native|Protected) // @ game+0x1111660
	void OnRep_CountdownText(); // Function FSD.FSDGameState.OnRep_CountdownText // (Final|Native|Protected) // @ game+0x1111640
	void OnRep_CountdownRemaining(int32_t prevTime); // Function FSD.FSDGameState.OnRep_CountdownRemaining // (Final|Native|Protected) // @ game+0x11115c0
	void OnRep_ContinuePressed(); // Function FSD.FSDGameState.OnRep_ContinuePressed // (Final|Native|Protected) // @ game+0x11115a0
	void OnRep_ContinueCountdown(); // Function FSD.FSDGameState.OnRep_ContinueCountdown // (Final|Native|Protected) // @ game+0x1111580
	void OnRep_CompletedGameEvent(); // Function FSD.FSDGameState.OnRep_CompletedGameEvent // (Final|Native|Protected) // @ game+0x1111560
	void OnRep_BoscoReviveCounter(); // Function FSD.FSDGameState.OnRep_BoscoReviveCounter // (Final|Native|Protected) // @ game+0x1111540
	void OnRep_AllDwarvesDown(); // Function FSD.FSDGameState.OnRep_AllDwarvesDown // (Final|Native|Protected) // @ game+0x1111520
	int32_t MissionEndscreenSeed(); // Function FSD.FSDGameState.MissionEndscreenSeed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11113a0
	bool IsTutorialMission(); // Function FSD.FSDGameState.IsTutorialMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11111e0
	bool IsCountingDown(); // Function FSD.FSDGameState.IsCountingDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11111b0
	void InitObjectives(); // Function FSD.FSDGameState.InitObjectives // (Final|Native|Public|BlueprintCallable) // @ game+0x1111190
	void HostDisbandedTeam(); // Function FSD.FSDGameState.HostDisbandedTeam // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x1111170
	bool HasObjectivesReplicated(); // Function FSD.FSDGameState.HasObjectivesReplicated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1111100
	void HandleSeamlessTravelEvent(); // Function FSD.FSDGameState.HandleSeamlessTravelEvent // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct AFSDPlayerState* GetServerPlayerState(); // Function FSD.FSDGameState.GetServerPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11110a0
	struct UObjective* GetSecondaryObjective(); // Function FSD.FSDGameState.GetSecondaryObjective // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1111070
	struct AProceduralSetup* GetProceduralSetup(); // Function FSD.FSDGameState.GetProceduralSetup // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1111040
	struct UObjective* GetPrimaryObjective(); // Function FSD.FSDGameState.GetPrimaryObjective // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1111010
	bool GetPreventLatejoinCharacterDuplication(); // Function FSD.FSDGameState.GetPreventLatejoinCharacterDuplication // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110ff0
	bool GetPlayersHaveReachedDroppod(); // Function FSD.FSDGameState.GetPlayersHaveReachedDroppod // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110fd0
	struct TArray<struct APlayerCharacter*> GetPlayableCharacters(); // Function FSD.FSDGameState.GetPlayableCharacters // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x158ca90
	struct TArray<struct UPlayerCharacterID*> GetPlayableCharacterIDs(); // Function FSD.FSDGameState.GetPlayableCharacterIDs // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x158ca90
	struct TArray<struct UObjective*> GetObjectives(); // Function FSD.FSDGameState.GetObjectives // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110f00
	struct TArray<struct AFSDPlayerState*> GetNetworkSortedPlayerArray(); // Function FSD.FSDGameState.GetNetworkSortedPlayerArray // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1110e80
	int32_t GetMissionTime(); // Function FSD.FSDGameState.GetMissionTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110e20
	bool GetMissionSuccessful(); // Function FSD.FSDGameState.GetMissionSuccessful // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110df0
	int32_t GetMissionStartTime(); // Function FSD.FSDGameState.GetMissionStartTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110dd0
	int32_t GetMissionRewardCreditSum(); // Function FSD.FSDGameState.GetMissionRewardCreditSum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110c10
	struct TArray<struct FCreditsReward> GetMissionRewardCredits(); // Function FSD.FSDGameState.GetMissionRewardCredits // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110c40
	bool GetMissionCompletedCreditReward(bool primary, int32_t OutReward); // Function FSD.FSDGameState.GetMissionCompletedCreditReward // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110b30
	int32_t GetGlobalMissionSeed(); // Function FSD.FSDGameState.GetGlobalMissionSeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110b10
	struct AGameStats* GetGameStats(); // Function FSD.FSDGameState.GetGameStats // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110ae0
	struct TMap<struct UResourceData*, float> GetEndscreenResources(); // Function FSD.FSDGameState.GetEndscreenResources // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110910
	struct UDifficultyManager* GetDifficultyManager(); // Function FSD.FSDGameState.GetDifficultyManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1110650
	struct TMap<struct UResourceData*, float> GetCollectedResources(); // Function FSD.FSDGameState.GetCollectedResources // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11104f0
	struct TArray<struct UFSDEvent*> GetActiveEventsFromMission(); // Function FSD.FSDGameState.GetActiveEventsFromMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11104c0
	void ClientNewMessage(struct FFSDChatMessage Msg); // Function FSD.FSDGameState.ClientNewMessage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x110ff50
	void Client_StartPressed(); // Function FSD.FSDGameState.Client_StartPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x11101d0
	void Client_NewLocalizedMessage(struct FFSDLocalizedChatMessage Msg); // Function FSD.FSDGameState.Client_NewLocalizedMessage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1110070
	bool AllMissionEndResultsReceived(); // Function FSD.FSDGameState.AllMissionEndResultsReceived // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x110fca0
	void All_SpawnScaledEffectAt(struct FScaledEffect effect, struct FVector_NetQuantize Location); // Function FSD.FSDGameState.All_SpawnScaledEffectAt // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x110fe60
	void All_SpawnScaledEffectAndCueAt(struct FScaledEffect effect, struct USoundCue* Audio, struct FVector_NetQuantize Location); // Function FSD.FSDGameState.All_SpawnScaledEffectAndCueAt // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x110fd30
};

// Class FSD.FSDGameUserSettings
// Size: 0x500 (Inherited: 0x120)
struct UFSDGameUserSettings : UGameUserSettings {
	char pad_120[0x8]; // 0x120(0x08)
	struct FMulticastInlineDelegate OnUseHoldToRunChanged; // 0x128(0x10)
	struct FMulticastInlineDelegate OnFOVChanged; // 0x138(0x10)
	struct FMulticastInlineDelegate OnLanguageChanged; // 0x148(0x10)
	struct FMulticastInlineDelegate OnGameServerNameChanged; // 0x158(0x10)
	struct FMulticastInlineDelegate OnFontSizeChanged; // 0x168(0x10)
	struct FMulticastInlineDelegate OnJukeboxStreamerModeChanged; // 0x178(0x10)
	bool bJukeboxStreamerMode; // 0x188(0x01)
	bool bGraphicSettingsChanged; // 0x189(0x01)
	char pad_18A[0x6]; // 0x18a(0x06)
	struct FString CurrentUserSetSaveSlotName; // 0x190(0x10)
	struct FMulticastInlineDelegate OnCanShowBloodChanged; // 0x1a0(0x10)
	struct TMap<struct FName, bool> NamedBoolSettings; // 0x1b0(0x50)
	struct FModdingUISettings ModdingUISettings; // 0x200(0x60)
	int32_t ServerSearchRegion; // 0x260(0x04)
	bool ServerSearchPasswordRequired; // 0x264(0x01)
	char pad_265[0x3]; // 0x265(0x03)
	struct FMulticastInlineDelegate OnModdingSettingsChanged; // 0x268(0x10)
	float volumeCharacterVoice; // 0x278(0x04)
	float volumeMissionControl; // 0x27c(0x04)
	float volumeMaster; // 0x280(0x04)
	float volumeSFX; // 0x284(0x04)
	float volumeMusic; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct FString CurrentAudioOutputDeviceId; // 0x290(0x10)
	char pad_2A0[0x10]; // 0x2a0(0x10)
	bool UseDefaultAudioOutputDevice; // 0x2b0(0x01)
	char pad_2B1[0x3]; // 0x2b1(0x03)
	float Sharpening; // 0x2b4(0x04)
	int32_t AntiAliasingType; // 0x2b8(0x04)
	bool TemporalAAUpsamplingEnabled; // 0x2bc(0x01)
	char pad_2BD[0x3]; // 0x2bd(0x03)
	float volumeVoice; // 0x2c0(0x04)
	char pad_2C4[0x4]; // 0x2c4(0x04)
	struct USoundClass* soundClassCharacterVoices; // 0x2c8(0x08)
	struct USoundClass* soundClassMissionControl; // 0x2d0(0x08)
	struct USoundClass* soundClassMaster; // 0x2d8(0x08)
	struct USoundClass* soundClassSFX; // 0x2e0(0x08)
	struct USoundClass* soundClassUI; // 0x2e8(0x08)
	struct USoundClass* soundClassMusic; // 0x2f0(0x08)
	struct USoundClass* soundClassVoice; // 0x2f8(0x08)
	int32_t ChatFontSize; // 0x300(0x04)
	bool bUseVoiceChat; // 0x304(0x01)
	bool bUsePushToTalk; // 0x305(0x01)
	char pad_306[0x2]; // 0x306(0x02)
	struct FString LocalGameServerName; // 0x308(0x10)
	struct FString LocalGameServerNameFiltered; // 0x318(0x10)
	bool AppearOffline; // 0x328(0x01)
	bool AutoRefreshServerlist; // 0x329(0x01)
	char pad_32A[0x2]; // 0x32a(0x02)
	float MouseXSensitivity; // 0x32c(0x04)
	float MouseYSensitivity; // 0x330(0x04)
	bool UseSeperateSensetivity; // 0x334(0x01)
	bool InvertMouse; // 0x335(0x01)
	bool InvertScroolWheel; // 0x336(0x01)
	bool UseHoldToRun; // 0x337(0x01)
	bool UseToggleLaserpointer; // 0x338(0x01)
	char pad_339[0x3]; // 0x339(0x03)
	float FOV; // 0x33c(0x04)
	float HeadbobbingScale; // 0x340(0x04)
	float CameraShakeScale; // 0x344(0x04)
	float ChatFadeTime; // 0x348(0x04)
	bool UseStreamerProgram; // 0x34c(0x01)
	bool SoundOnChatMessage; // 0x34d(0x01)
	bool PhotosensitiveMode; // 0x34e(0x01)
	bool ShowUIAnimations; // 0x34f(0x01)
	bool UseProfanityFilter; // 0x350(0x01)
	char pad_351[0x3]; // 0x351(0x03)
	float ForceFeedbackScale; // 0x354(0x04)
	bool InvertFlightControls; // 0x358(0x01)
	bool EnableDx12ByDefault; // 0x359(0x01)
	char pad_35A[0x2]; // 0x35a(0x02)
	float HDRColorGamma; // 0x35c(0x04)
	enum class EConsoleGraphicsMode ConsoleGraphicsMode; // 0x360(0x01)
	char pad_361[0x3]; // 0x361(0x03)
	struct FHUDElements HUDElements; // 0x364(0x78)
	struct FCharacterOptions CharacterOptions; // 0x3dc(0x02)
	char pad_3DE[0x2]; // 0x3de(0x02)
	float DownedTurnDirection_Controller; // 0x3e0(0x04)
	float DownedTurnDirection_Mouse; // 0x3e4(0x04)
	float UIDPIScale; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	bool EnableCustomUIScale; // 0x3f0(0x01)
	char pad_3F1[0x7]; // 0x3f1(0x07)
	struct FMulticastInlineDelegate OnInputSourceChanged; // 0x3f8(0x10)
	bool CheckCursorOutOfBounds; // 0x408(0x01)
	char pad_409[0x7]; // 0x409(0x07)
	struct FMulticastInlineDelegate OnEnableTutorialHintsChanged; // 0x410(0x10)
	struct FMulticastInlineDelegate OnShowFPSChanged; // 0x420(0x10)
	struct FMulticastInlineDelegate OnShowNetInfoLevelChanged; // 0x430(0x10)
	struct FMulticastInlineDelegate OnDx12Enabled; // 0x440(0x10)
	struct FIntPoint ResolutionToBeApplied; // 0x450(0x08)
	bool VSyncToBeApplied; // 0x458(0x01)
	bool Dx12ToBeApplied; // 0x459(0x01)
	enum class EWindowMode InFullscreenModeToBeApplied; // 0x45a(0x01)
	bool InFullscreenModeToBeAppliedValid; // 0x45b(0x01)
	bool VSyncToBeAppliedValid; // 0x45c(0x01)
	bool Dx12ToBeAppliedValid; // 0x45d(0x01)
	bool ResolutionToBeAppliedValid; // 0x45e(0x01)
	bool EscMenuActive; // 0x45f(0x01)
	bool bShowUpgradeExtraDetails; // 0x460(0x01)
	char pad_461[0x7]; // 0x461(0x07)
	struct FMulticastInlineDelegate OnShowUpgradeExtraDetailsChanged; // 0x468(0x10)
	struct FMulticastInlineDelegate OnCustomKeyBindingsChanged; // 0x478(0x10)
	int32_t LastNiagaraShaderVerions; // 0x488(0x04)
	enum class EFSDInputSource CurrentInputSource; // 0x48c(0x01)
	enum class EFSDInputSource RequestedInputSource; // 0x48d(0x01)
	char pad_48E[0x2]; // 0x48e(0x02)
	struct TArray<struct FCustomKeyBinding> CustomKeyBindings; // 0x490(0x10)
	struct TArray<struct FCustomKeyBinding> CustomControllerBindings; // 0x4a0(0x10)
	bool SwapControllerThumbsticks; // 0x4b0(0x01)
	bool bTutorialHintsEnabled; // 0x4b1(0x01)
	bool bShowSubtitles; // 0x4b2(0x01)
	bool bShowFPS; // 0x4b3(0x01)
	int32_t ShowNetInfoLevel; // 0x4b4(0x04)
	bool bCanShowBlood; // 0x4b8(0x01)
	bool PreventLatejoinCharacterDuplication; // 0x4b9(0x01)
	bool TranslatorDebugModeEnabled; // 0x4ba(0x01)
	char pad_4BB[0x5]; // 0x4bb(0x05)
	struct FString PreviousCulture; // 0x4c0(0x10)
	struct FControllerSettings ControllerSettings; // 0x4d0(0x10)
	struct TArray<struct FGuid> SelectedDifficultyLevels; // 0x4e0(0x10)
	struct TArray<struct FGuid> DifficultyLevelsAddedByDefault; // 0x4f0(0x10)

	void UpdateVolumeSettings(struct USoundClass* CharacterVoices, struct USoundClass* MissionControl, struct USoundClass* Master, struct USoundClass* Music, struct USoundClass* SFX, struct USoundClass* UI, struct USoundClass* Voice); // Function FSD.FSDGameUserSettings.UpdateVolumeSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x1118fc0
	void UpdateForceFeedbackScaleOnController(struct APlayerController* Controller); // Function FSD.FSDGameUserSettings.UpdateForceFeedbackScaleOnController // (Final|Native|Public|BlueprintCallable) // @ game+0x1118f40
	bool ToggleTranslatorDebugMode(); // Function FSD.FSDGameUserSettings.ToggleTranslatorDebugMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1118f10
	bool ToggleShowUpgradeExtraDetails(); // Function FSD.FSDGameUserSettings.ToggleShowUpgradeExtraDetails // (Final|Native|Public|BlueprintCallable) // @ game+0x1118eb0
	void ToggleModdingServerFilter(char ServerFilter, bool Enable); // Function FSD.FSDGameUserSettings.ToggleModdingServerFilter // (Final|Native|Public|BlueprintCallable) // @ game+0x1118d30
	void SetZiplineGunAutoSwitch(bool shouldAutoSwitch); // Function FSD.FSDGameUserSettings.SetZiplineGunAutoSwitch // (Final|Native|Public|BlueprintCallable) // @ game+0x1118ca0
	void SetVSyncEnabledToBeApplied(bool bEnable); // Function FSD.FSDGameUserSettings.SetVSyncEnabledToBeApplied // (Final|Native|Public|BlueprintCallable) // @ game+0x1118ac0
	void SetVolume(enum class EVolumeType volumeType, float Volume); // Function FSD.FSDGameUserSettings.SetVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x1118be0
	void SetVoiceChatEnabled(bool bEnable); // Function FSD.FSDGameUserSettings.SetVoiceChatEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1118b50
	void SetUseToggleTerrainScanner(bool useToggleTerrainScanner); // Function FSD.FSDGameUserSettings.SetUseToggleTerrainScanner // (Final|Native|Public|BlueprintCallable) // @ game+0x1118a30
	void SetUseToggleLaserpointer(bool UseToggleLaserpointer); // Function FSD.FSDGameUserSettings.SetUseToggleLaserpointer // (Final|Native|Public|BlueprintCallable) // @ game+0x11189a0
	void SetUseStreamerProgram(bool UseStreamerProgram); // Function FSD.FSDGameUserSettings.SetUseStreamerProgram // (Final|Native|Public|BlueprintCallable) // @ game+0x1118920
	void SetUseSeparateSensitivity(bool newSetting); // Function FSD.FSDGameUserSettings.SetUseSeparateSensitivity // (Final|Native|Public|BlueprintCallable) // @ game+0x11188a0
	void SetUseProfanityFilter(bool shouldUse); // Function FSD.FSDGameUserSettings.SetUseProfanityFilter // (Final|Native|Public|BlueprintCallable) // @ game+0x1118810
	void SetUseHoldToRun(bool UseHoldToRun); // Function FSD.FSDGameUserSettings.SetUseHoldToRun // (Final|Native|Public|BlueprintCallable) // @ game+0x1118780
	void SetUseDefaultAudioOutputDevice(struct UObject* WorldContextObject, bool UseDefault); // Function FSD.FSDGameUserSettings.SetUseDefaultAudioOutputDevice // (Final|Native|Public|BlueprintCallable) // @ game+0x11186b0
	void SetUseCustomUIScale(bool UseCustomScale); // Function FSD.FSDGameUserSettings.SetUseCustomUIScale // (Final|Native|Public|BlueprintCallable) // @ game+0x1118620
	void SetUIDPIScale(float uiscale); // Function FSD.FSDGameUserSettings.SetUIDPIScale // (Final|Native|Public|BlueprintCallable) // @ game+0x11185a0
	void SetTutorialHintsEnabled(bool Enabled); // Function FSD.FSDGameUserSettings.SetTutorialHintsEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1118510
	void SetTurn180Mode(enum class ETurn180Mode InMode); // Function FSD.FSDGameUserSettings.SetTurn180Mode // (Final|Native|Public|BlueprintCallable) // @ game+0x1118490
	void SetTemporalAAUpscalingEnabled(bool bEnable); // Function FSD.FSDGameUserSettings.SetTemporalAAUpscalingEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1118400
	void SetSwapControllerThumbsticks(bool InSwapThumbsticks); // Function FSD.FSDGameUserSettings.SetSwapControllerThumbsticks // (Final|Native|Public|BlueprintCallable) // @ game+0x1118370
	void SetSteamSearchRegion(enum class ESteamSearchRegion InRegion); // Function FSD.FSDGameUserSettings.SetSteamSearchRegion // (Final|Native|Public|BlueprintCallable) // @ game+0x11182f0
	void SetShowUIAnimations(bool shouldShow); // Function FSD.FSDGameUserSettings.SetShowUIAnimations // (Final|Native|Public|BlueprintCallable) // @ game+0x1118260
	void SetShowSubtitles(bool Show); // Function FSD.FSDGameUserSettings.SetShowSubtitles // (Final|Native|Public|BlueprintCallable) // @ game+0x11181e0
	void SetShowSandboxLabel(bool InShowLabel); // Function FSD.FSDGameUserSettings.SetShowSandboxLabel // (Final|Native|Public|BlueprintCallable) // @ game+0x1118150
	void SetShowNetInfoLevel(int32_t Level); // Function FSD.FSDGameUserSettings.SetShowNetInfoLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x11180d0
	void SetShowFPS(bool Visible); // Function FSD.FSDGameUserSettings.SetShowFPS // (Final|Native|Public|BlueprintCallable) // @ game+0x1118040
	void SetSharpening(float Sharpening); // Function FSD.FSDGameUserSettings.SetSharpening // (Final|Native|Public|BlueprintCallable) // @ game+0x1117fc0
	void SetServerSearchPasswordRequired(bool InPasswordRequired); // Function FSD.FSDGameUserSettings.SetServerSearchPasswordRequired // (Final|Native|Public|BlueprintCallable) // @ game+0x1117f30
	void SetScreenResolutionToBeApplied(struct FIntPoint Resolution); // Function FSD.FSDGameUserSettings.SetScreenResolutionToBeApplied // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1117eb0
	void SetPushToTalk(bool bEnable); // Function FSD.FSDGameUserSettings.SetPushToTalk // (Final|Native|Public|BlueprintCallable) // @ game+0x1117e20
	void SetPreviousItemEnabledOnController(bool InEnabled); // Function FSD.FSDGameUserSettings.SetPreviousItemEnabledOnController // (Final|Native|Public|BlueprintCallable) // @ game+0x1117d90
	void SetPreventLatejoinCharacterDuplication(bool prevent); // Function FSD.FSDGameUserSettings.SetPreventLatejoinCharacterDuplication // (Final|Native|Public|BlueprintCallable) // @ game+0x1117d10
	void SetPlaySoundOnChatMessage(bool playSoundOnMessage); // Function FSD.FSDGameUserSettings.SetPlaySoundOnChatMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x1117c90
	void SetPhotosensitiveMode(bool modeOn); // Function FSD.FSDGameUserSettings.SetPhotosensitiveMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1117c00
	void SetMouseYSensitivity(float newSensitivity); // Function FSD.FSDGameUserSettings.SetMouseYSensitivity // (Final|Native|Public|BlueprintCallable) // @ game+0x1117b80
	void SetMouseXSensitivity(float newSensitivity); // Function FSD.FSDGameUserSettings.SetMouseXSensitivity // (Final|Native|Public|BlueprintCallable) // @ game+0x1117b00
	void SetModdingSortBy(char SortField, bool SortAscending); // Function FSD.FSDGameUserSettings.SetModdingSortBy // (Final|Native|Public|BlueprintCallable) // @ game+0x1117a30
	void SetJukeboxStreamerMode(bool InStreamerMode); // Function FSD.FSDGameUserSettings.SetJukeboxStreamerMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1117990
	void SetInvertMouseWheel(bool invertMouseWheel); // Function FSD.FSDGameUserSettings.SetInvertMouseWheel // (Final|Native|Public|BlueprintCallable) // @ game+0x1117900
	void SetInvertMouse(bool InvertMouse); // Function FSD.FSDGameUserSettings.SetInvertMouse // (Final|Native|Public|BlueprintCallable) // @ game+0x1117870
	void SetInvertFlightControls(bool Invert); // Function FSD.FSDGameUserSettings.SetInvertFlightControls // (Final|Native|Public|BlueprintCallable) // @ game+0x11177e0
	void SetInputSource(enum class EFSDInputSource NewSource); // Function FSD.FSDGameUserSettings.SetInputSource // (Final|Native|Public|BlueprintCallable) // @ game+0x1117760
	void SetHeadBobbingScale(float HeadbobbingScale); // Function FSD.FSDGameUserSettings.SetHeadBobbingScale // (Final|Native|Public|BlueprintCallable) // @ game+0x11176e0
	void SetHDRColorGamma(float Gamma); // Function FSD.FSDGameUserSettings.SetHDRColorGamma // (Final|Native|Public|BlueprintCallable) // @ game+0x1117660
	void SetGrapplingHookAutoSwitch(bool shouldAutoSwitch); // Function FSD.FSDGameUserSettings.SetGrapplingHookAutoSwitch // (Final|Native|Public|BlueprintCallable) // @ game+0x11175d0
	void SetGamma(float gamme); // Function FSD.FSDGameUserSettings.SetGamma // (Final|Native|Public|BlueprintCallable) // @ game+0x1117550
	void SetGameServerName(int32_t localUserNum, struct FString Name); // Function FSD.FSDGameUserSettings.SetGameServerName // (Final|Native|Public|BlueprintCallable) // @ game+0x1117470
	void SetFullscreenModeToBeApplied(enum class EWindowMode InFullscreenMode); // Function FSD.FSDGameUserSettings.SetFullscreenModeToBeApplied // (Final|Native|Public|BlueprintCallable) // @ game+0x11173f0
	void SetFOV(float FOV); // Function FSD.FSDGameUserSettings.SetFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x11172f0
	void SetForceFeedbackScale(float Scale); // Function FSD.FSDGameUserSettings.SetForceFeedbackScale // (Final|Native|Public|BlueprintCallable) // @ game+0x1117370
	void SetDx12EnabledToBeApplied(bool bEnable); // Function FSD.FSDGameUserSettings.SetDx12EnabledToBeApplied // (Final|Native|Public|BlueprintCallable) // @ game+0x1117260
	void SetDownCameraTurnDirection(enum class EFSDInputSource InputSource, float InDirection); // Function FSD.FSDGameUserSettings.SetDownCameraTurnDirection // (Final|Native|Public|BlueprintCallable) // @ game+0x11171a0
	void SetDisableMasterEQ(bool B); // Function FSD.FSDGameUserSettings.SetDisableMasterEQ // (Final|Native|Public|BlueprintCallable) // @ game+0x1117110
	void SetDifficultySelected(struct UDifficultySetting* Difficulty, bool IsSelected); // Function FSD.FSDGameUserSettings.SetDifficultySelected // (Final|Native|Protected|BlueprintCallable) // @ game+0x1117040
	void SetDebugLocalizerMode(bool bEnable); // Function FSD.FSDGameUserSettings.SetDebugLocalizerMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1116fb0
	void SetCurrentUserSaveSlotName(struct UObject* WorldContextObject, struct FString saveSlotName, enum class ESaveSlotChangeProcedure changeProcedure); // Function FSD.FSDGameUserSettings.SetCurrentUserSaveSlotName // (Final|Native|Public|BlueprintCallable) // @ game+0x1116e60
	void SetConsoleGraphicsMode(enum class EConsoleGraphicsMode Mode); // Function FSD.FSDGameUserSettings.SetConsoleGraphicsMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1116de0
	void SetCheckForOutOfBoundsEnabled(bool Enabled); // Function FSD.FSDGameUserSettings.SetCheckForOutOfBoundsEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1116d50
	void SetChatFontSize(int32_t inFontSize); // Function FSD.FSDGameUserSettings.SetChatFontSize // (Final|Native|Public|BlueprintCallable) // @ game+0x1116cd0
	void SetChatFadeTime(float FadeTime); // Function FSD.FSDGameUserSettings.SetChatFadeTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1116c50
	void SetCanShowBlood(bool bloodAllowed); // Function FSD.FSDGameUserSettings.SetCanShowBlood // (Final|Native|Public|BlueprintCallable) // @ game+0x1116bc0
	void SetCameraShakeScale(float CameraShakeScale); // Function FSD.FSDGameUserSettings.SetCameraShakeScale // (Final|Native|Public|BlueprintCallable) // @ game+0x1116b40
	void SetAutoRefreshServerlist(bool Value); // Function FSD.FSDGameUserSettings.SetAutoRefreshServerlist // (Final|Native|Public|BlueprintCallable) // @ game+0x1116ac0
	bool SetAudioOutputDevice(struct UObject* WorldContextObject, struct FString DeviceID); // Function FSD.FSDGameUserSettings.SetAudioOutputDevice // (Final|Native|Public|BlueprintCallable) // @ game+0x1116990
	bool SetAudioInputDevice(struct FString DeviceName); // Function FSD.FSDGameUserSettings.SetAudioInputDevice // (Final|Native|Public|BlueprintCallable) // @ game+0x11168a0
	void SetAppearOffline(bool bEnable); // Function FSD.FSDGameUserSettings.SetAppearOffline // (Final|Native|Public|BlueprintCallable) // @ game+0x1116810
	void SetAntiAliasingType(int32_t AntiAliasingType); // Function FSD.FSDGameUserSettings.SetAntiAliasingType // (Final|Native|Public|BlueprintCallable) // @ game+0x1116790
	void SetAimSensitivity(float NewValue); // Function FSD.FSDGameUserSettings.SetAimSensitivity // (Final|Native|Public|BlueprintCallable) // @ game+0x1116710
	void SetAimOuterAcceleration(float NewValue); // Function FSD.FSDGameUserSettings.SetAimOuterAcceleration // (Final|Native|Public|BlueprintCallable) // @ game+0x1116690
	void SetAimDeadZone(float NewValue); // Function FSD.FSDGameUserSettings.SetAimDeadZone // (Final|Native|Public|BlueprintCallable) // @ game+0x1116610
	void ResetGraphicsChanges(); // Function FSD.FSDGameUserSettings.ResetGraphicsChanges // (Final|Native|Public|BlueprintCallable) // @ game+0x11165f0
	void ResetControllerSettings(); // Function FSD.FSDGameUserSettings.ResetControllerSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x11165d0
	void PostInitFSDUserSettings(struct UObject* WorldContextObject); // Function FSD.FSDGameUserSettings.PostInitFSDUserSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x1116550
	bool IsVoiceChatEnabled(); // Function FSD.FSDGameUserSettings.IsVoiceChatEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1116520
	bool IsDx12Enabled(); // Function FSD.FSDGameUserSettings.IsDx12Enabled // (Final|Native|Protected|BlueprintCallable) // @ game+0x11164f0
	bool IsDebugLocalizerModeEnabled(); // Function FSD.FSDGameUserSettings.IsDebugLocalizerModeEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11164c0
	bool IsCurrentInputSource(enum class EFSDInputSource InputSource); // Function FSD.FSDGameUserSettings.IsCurrentInputSource // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1116440
	void InitializeDifficultySelection(struct UObject* WorldContext, struct TArray<struct UDifficultySetting*> StartSelection); // Function FSD.FSDGameUserSettings.InitializeDifficultySelection // (Final|Native|Protected|BlueprintCallable) // @ game+0x1116320
	bool HasAudioOutputDeviceChanged(struct FString AudioDeviceChangedTo); // Function FSD.FSDGameUserSettings.HasAudioOutputDeviceChanged // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1116260
	bool GetZiplineGunAutoSwitch(); // Function FSD.FSDGameUserSettings.GetZiplineGunAutoSwitch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1116230
	bool GetVSyncEnabledToBeApplied(); // Function FSD.FSDGameUserSettings.GetVSyncEnabledToBeApplied // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1116170
	float GetVolume(enum class EVolumeType volumeType); // Function FSD.FSDGameUserSettings.GetVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11161a0
	bool GetUseToggleTerrainScanner(); // Function FSD.FSDGameUserSettings.GetUseToggleTerrainScanner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1116140
	bool GetUseToggleLaserpointer(); // Function FSD.FSDGameUserSettings.GetUseToggleLaserpointer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1116120
	bool GetUseStreamerProgram(); // Function FSD.FSDGameUserSettings.GetUseStreamerProgram // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1116100
	bool GetUseSeparateSensitivity(); // Function FSD.FSDGameUserSettings.GetUseSeparateSensitivity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11160e0
	bool GetUseProfanityFilter(); // Function FSD.FSDGameUserSettings.GetUseProfanityFilter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11160c0
	bool GetUseHoldToRun(); // Function FSD.FSDGameUserSettings.GetUseHoldToRun // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11160a0
	bool GetUseDefaultAudioOutputDevice(); // Function FSD.FSDGameUserSettings.GetUseDefaultAudioOutputDevice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1116070
	bool GetUseCustomUIScale(); // Function FSD.FSDGameUserSettings.GetUseCustomUIScale // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1116050
	float GetUIDPIScale(); // Function FSD.FSDGameUserSettings.GetUIDPIScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1116030
	bool GetTutorialHintsEnabled(); // Function FSD.FSDGameUserSettings.GetTutorialHintsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1116010
	enum class ETurn180Mode GetTurn180Mode(); // Function FSD.FSDGameUserSettings.GetTurn180Mode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115ff0
	bool GetTemporalAAUpscalingEnabled(); // Function FSD.FSDGameUserSettings.GetTemporalAAUpscalingEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115fc0
	enum class ESteamSearchRegion GetSteamSearchRegion(); // Function FSD.FSDGameUserSettings.GetSteamSearchRegion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115f90
	bool GetShowUIAnimations(); // Function FSD.FSDGameUserSettings.GetShowUIAnimations // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115f70
	bool GetShowSubtitles(); // Function FSD.FSDGameUserSettings.GetShowSubtitles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115f50
	bool GetShowSandboxLabel(); // Function FSD.FSDGameUserSettings.GetShowSandboxLabel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115f30
	int32_t GetShowNetInfoLevel(); // Function FSD.FSDGameUserSettings.GetShowNetInfoLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115f10
	bool GetShowFPS(); // Function FSD.FSDGameUserSettings.GetShowFPS // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115ef0
	float GetSharpening(); // Function FSD.FSDGameUserSettings.GetSharpening // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115ec0
	struct FIntPoint GetScreenResolutionToBeApplied(); // Function FSD.FSDGameUserSettings.GetScreenResolutionToBeApplied // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1115e80
	bool GetPushToTalk(); // Function FSD.FSDGameUserSettings.GetPushToTalk // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115e50
	bool GetPreviousItemEnabledOnController(); // Function FSD.FSDGameUserSettings.GetPreviousItemEnabledOnController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115e30
	bool GetPreventLatejoinCharacterDuplication(); // Function FSD.FSDGameUserSettings.GetPreventLatejoinCharacterDuplication // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115e10
	bool GetPlaySoundOnChatMessage(); // Function FSD.FSDGameUserSettings.GetPlaySoundOnChatMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115df0
	bool GetPhotosensitiveMode(); // Function FSD.FSDGameUserSettings.GetPhotosensitiveMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115dd0
	float GetMouseYSensitivity(); // Function FSD.FSDGameUserSettings.GetMouseYSensitivity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115da0
	float GetMouseXSensitivity(); // Function FSD.FSDGameUserSettings.GetMouseXSensitivity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115d70
	bool GetModdingServerFilterEnabled(char ServerFilter); // Function FSD.FSDGameUserSettings.GetModdingServerFilterEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115c80
	bool GetIsDifficultySelected(struct UDifficultySetting* Difficulty); // Function FSD.FSDGameUserSettings.GetIsDifficultySelected // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115bf0
	bool GetInvertMouseWheel(); // Function FSD.FSDGameUserSettings.GetInvertMouseWheel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115bd0
	bool GetInvertMouse(); // Function FSD.FSDGameUserSettings.GetInvertMouse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115bb0
	bool GetInvertFlightControls(); // Function FSD.FSDGameUserSettings.GetInvertFlightControls // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115b90
	enum class EFSDInputSource GetInputSource(); // Function FSD.FSDGameUserSettings.GetInputSource // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115b60
	float GetHeadBobbingScale(); // Function FSD.FSDGameUserSettings.GetHeadBobbingScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115b40
	float GetHDRColorGamma(); // Function FSD.FSDGameUserSettings.GetHDRColorGamma // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115b10
	bool GetGrapplingHookAutoSwitch(); // Function FSD.FSDGameUserSettings.GetGrapplingHookAutoSwitch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115ae0
	float GetGamma(); // Function FSD.FSDGameUserSettings.GetGamma // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115ab0
	enum class EWindowMode GetFullscreenModeToBeApplied(); // Function FSD.FSDGameUserSettings.GetFullscreenModeToBeApplied // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115a80
	struct UFSDGameUserSettings* GetFSDGameUserSettings(); // Function FSD.FSDGameUserSettings.GetFSDGameUserSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115a30
	float GetFOV(); // Function FSD.FSDGameUserSettings.GetFOV // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c44e0
	float GetForceFeedbackScale(); // Function FSD.FSDGameUserSettings.GetForceFeedbackScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115a60
	bool GetDx12EnabledToBeApplied(); // Function FSD.FSDGameUserSettings.GetDx12EnabledToBeApplied // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115a00
	float GetDownCameraTurnDirection(enum class EFSDInputSource InputSource); // Function FSD.FSDGameUserSettings.GetDownCameraTurnDirection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115970
	bool GetDisableMasterEQ(); // Function FSD.FSDGameUserSettings.GetDisableMasterEQ // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115940
	struct FString GetCurrentUserSaveSlotName(); // Function FSD.FSDGameUserSettings.GetCurrentUserSaveSlotName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115880
	enum class EFSDInputSource GetCurrentInputSource(); // Function FSD.FSDGameUserSettings.GetCurrentInputSource // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115850
	bool GetCurrentAudioOutputDevice(struct UObject* WorldContextObject, struct FString AudioDevice); // Function FSD.FSDGameUserSettings.GetCurrentAudioOutputDevice // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1115750
	struct FString GetCurrentAudioInputDeviceName(); // Function FSD.FSDGameUserSettings.GetCurrentAudioInputDeviceName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11156d0
	float GetCurrentAudioInputDeviceAmplitude(int32_t localUserId); // Function FSD.FSDGameUserSettings.GetCurrentAudioInputDeviceAmplitude // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115640
	enum class EConsoleGraphicsMode GetConsoleGraphicsMode(); // Function FSD.FSDGameUserSettings.GetConsoleGraphicsMode // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115610
	bool GetCheckForOutOfBounds(); // Function FSD.FSDGameUserSettings.GetCheckForOutOfBounds // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11155f0
	int32_t GetChatFontSize(); // Function FSD.FSDGameUserSettings.GetChatFontSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11155d0
	float GetChatFadeTime(); // Function FSD.FSDGameUserSettings.GetChatFadeTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11155b0
	float GetCameraShakeScale(); // Function FSD.FSDGameUserSettings.GetCameraShakeScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115590
	bool GetAvaliableAudioOutputDevices(struct UObject* WorldContextObject, struct TArray<struct FString> AudioDevices); // Function FSD.FSDGameUserSettings.GetAvaliableAudioOutputDevices // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1115470
	bool GetAvaliableAudioInputDevices(struct TArray<struct FString> AudioDevices); // Function FSD.FSDGameUserSettings.GetAvaliableAudioInputDevices // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1115390
	bool GetAvailableScreenResolutionsForNonPrimaryMonitors(struct TArray<struct FIntPoint> Resolutions); // Function FSD.FSDGameUserSettings.GetAvailableScreenResolutionsForNonPrimaryMonitors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11152d0
	bool GetAutoRefreshServerlist(); // Function FSD.FSDGameUserSettings.GetAutoRefreshServerlist // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11152b0
	struct FString GetAudioOutputDeviceName(struct UObject* WorldContextObject, struct FString DeviceID); // Function FSD.FSDGameUserSettings.GetAudioOutputDeviceName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115140
	bool GetAppearOffline(); // Function FSD.FSDGameUserSettings.GetAppearOffline // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1115110
	int32_t GetAntiAliasingType(); // Function FSD.FSDGameUserSettings.GetAntiAliasingType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11150e0
	float GetAimSensitivity(); // Function FSD.FSDGameUserSettings.GetAimSensitivity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11150b0
	float GetAimOuterAcceleration(); // Function FSD.FSDGameUserSettings.GetAimOuterAcceleration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115080
	float GetAimDeadZone(); // Function FSD.FSDGameUserSettings.GetAimDeadZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1115050
	struct FString GameServerNameFiltered(); // Function FSD.FSDGameUserSettings.GameServerNameFiltered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1114fd0
	struct FString GameServerName(); // Function FSD.FSDGameUserSettings.GameServerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1114f50
	bool FSDSetCurrentLanguage(struct UObject* WorldContextObject, struct FString Culture); // Function FSD.FSDGameUserSettings.FSDSetCurrentLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1114e70
	struct UFSDGameUserSettings* FSDGameUserSettings(); // Function FSD.FSDGameUserSettings.FSDGameUserSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1114e40
	bool ConsoleGraphicsModeAvailable(enum class EConsoleGraphicsMode Mode); // Function FSD.FSDGameUserSettings.ConsoleGraphicsModeAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1114db0
	void ClearCustomKeyBindings(bool InGamepadKeys); // Function FSD.FSDGameUserSettings.ClearCustomKeyBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x1114d20
	bool CanShowBlood(); // Function FSD.FSDGameUserSettings.CanShowBlood // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1114cf0
	void ApplyGraphicsChanges(); // Function FSD.FSDGameUserSettings.ApplyGraphicsChanges // (Final|Native|Public|BlueprintCallable) // @ game+0x1114cd0
	void ApplyConsoleGraphicsMode(); // Function FSD.FSDGameUserSettings.ApplyConsoleGraphicsMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1114cb0
};

// Class FSD.FSDHUD
// Size: 0x338 (Inherited: 0x310)
struct AFSDHUD : AHUD {
	struct FMulticastInlineDelegate SetObjectivesVisible; // 0x310(0x10)
	struct FMulticastInlineDelegate OnHUDVisibilityChanged; // 0x320(0x10)
	char IsVisibleFlags; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)

	bool ToggleHUDVisibility(enum class EHUDVisibilityReason reason); // Function FSD.FSDHUD.ToggleHUDVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x111d510
	void ShowObjectives(bool InVisibility); // Function FSD.FSDHUD.ShowObjectives // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void SetObjectivesVisible__DelegateSignature(bool InVisible, bool animate); // DelegateFunction FSD.FSDHUD.SetObjectivesVisible__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void SetHUDVisible(bool IsVisible, enum class EHUDVisibilityReason reason); // Function FSD.FSDHUD.SetHUDVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x111d2a0
	void RadarPointAdded(struct URadarPointComponent* radarPoint); // Function FSD.FSDHUD.RadarPointAdded // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void PlayerSpawned(struct APlayerCharacter* Player); // Function FSD.FSDHUD.PlayerSpawned // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnVisibilityChanged(); // Function FSD.FSDHUD.OnVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	bool IsHUDVisibleFlagSet(enum class EHUDVisibilityReason reason); // Function FSD.FSDHUD.IsHUDVisibleFlagSet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x111ce50
	void HudVisibilityChanged__DelegateSignature(bool InHudVisible); // DelegateFunction FSD.FSDHUD.HudVisibilityChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void HandleSeamlessTravel(); // Function FSD.FSDHUD.HandleSeamlessTravel // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	bool GetHUDVisible(); // Function FSD.FSDHUD.GetHUDVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x111ce20
	struct AFSDHUD* GetFSDHUD(struct APlayerController* InPlayerController); // Function FSD.FSDHUD.GetFSDHUD // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x111cda0
	void CameraDroneSpawned(struct APlayerCameraDrone* Drone); // Function FSD.FSDHUD.CameraDroneSpawned // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.SpaceRigHUD
// Size: 0x350 (Inherited: 0x338)
struct ASpaceRigHUD : AFSDHUD {
	struct TArray<struct UObject*> NotificationQueue; // 0x338(0x10)
	bool bNotificationQueueActive; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)

	void SetNotificationQueueActive(bool Inactive); // Function FSD.SpaceRigHUD.SetNotificationQueueActive // (Final|Native|Public|BlueprintCallable) // @ game+0x111d360
	void ReceiveNotificationQueueActivated(); // Function FSD.SpaceRigHUD.ReceiveNotificationQueueActivated // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveNotificationAdded(struct UObject* InNotification); // Function FSD.SpaceRigHUD.ReceiveNotificationAdded // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct UWindowWidget* QueueWindowClass(SoftClassProperty InWindowType); // Function FSD.SpaceRigHUD.QueueWindowClass // (Final|Native|Public|BlueprintCallable) // @ game+0x111d190
	void QueueWindow(struct UWindowWidget* InWindow); // Function FSD.SpaceRigHUD.QueueWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x111d110
	void QueueNotificationObject(struct UObject* InObject); // Function FSD.SpaceRigHUD.QueueNotificationObject // (Final|Native|Public|BlueprintCallable) // @ game+0x111d090
	void QueueMissionShout(struct TSoftObjectPtr<struct UDialogDataAsset> InShout); // Function FSD.SpaceRigHUD.QueueMissionShout // (Final|Native|Public|BlueprintCallable) // @ game+0x111cf90
	bool IsNotificationQueueEmpty(); // Function FSD.SpaceRigHUD.IsNotificationQueueEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x111cee0
	struct UObject* DequeueNotificationObject(); // Function FSD.SpaceRigHUD.DequeueNotificationObject // (Final|Native|Public|BlueprintCallable) // @ game+0x111c700
};

// Class FSD.FSDMainHUDWidget
// Size: 0x230 (Inherited: 0x230)
struct UFSDMainHUDWidget : UUserWidget {

	void OnRadarPointAdded(struct URadarPointComponent* Point); // Function FSD.FSDMainHUDWidget.OnRadarPointAdded // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void AddRadarPoint(struct URadarPointComponent* Point); // Function FSD.FSDMainHUDWidget.AddRadarPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x111bf20
};

// Class FSD.FSDInWorldWidget
// Size: 0x238 (Inherited: 0x230)
struct UFSDInWorldWidget : UUserWidget {
	bool bHUDVisibile; // 0x230(0x01)
	char pad_231[0x7]; // 0x231(0x07)

	void ReceiveHUDVisibilityChanged(bool InHudVisible); // Function FSD.FSDInWorldWidget.ReceiveHUDVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void CallbackHUDVisibilityChanged(bool InHudVisible); // Function FSD.FSDInWorldWidget.CallbackHUDVisibilityChanged // (Final|Native|Protected) // @ game+0x111c180
};

// Class FSD.FSDJoinSessionCallbackProxy
// Size: 0x198 (Inherited: 0x30)
struct UFSDJoinSessionCallbackProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	char pad_50[0x128]; // 0x50(0x128)
	struct UObject* WorldContextObject; // 0x178(0x08)
	char pad_180[0x18]; // 0x180(0x18)

	struct UFSDJoinSessionCallbackProxy* FSDJoinSession(struct UObject* WorldContextObject, struct APlayerController* PlayerController, struct FBlueprintSessionResult SearchResult, struct FString FSDPassword, bool fromInvite); // Function FSD.FSDJoinSessionCallbackProxy.FSDJoinSession // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x111c730
};

// Class FSD.FSDKismetArrayExtensionFunctions
// Size: 0x28 (Inherited: 0x28)
struct UFSDKismetArrayExtensionFunctions : UKismetArrayLibrary {

	void Array_GetRandom(struct TArray<int32_t> TargetArray, int32_t Item); // Function FSD.FSDKismetArrayExtensionFunctions.Array_GetRandom // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x111bfc0
};

// Class FSD.FSDLookupSessionId
// Size: 0x188 (Inherited: 0x30)
struct UFSDLookupSessionId : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	char pad_50[0x138]; // 0x50(0x138)

	struct UFSDLookupSessionId* FSDLookupSessionId(struct UObject* WorldContextObject, struct FString SessionKey); // Function FSD.FSDLookupSessionId.FSDLookupSessionId // (Final|Native|Static|Private|BlueprintCallable) // @ game+0x111c920
};

// Class FSD.FSDMatchmakingCallbackProxy
// Size: 0x130 (Inherited: 0x30)
struct UFSDMatchmakingCallbackProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0x50(0x10)
	struct FDelegate FailDelegateHandle; // 0x60(0x10)
	char pad_70[0x28]; // 0x70(0x28)
	struct UMissionTemplate* mission; // 0x98(0x08)
	struct UBiome* Biome; // 0xa0(0x08)
	struct UDifficultySetting* Difficulty; // 0xa8(0x08)
	char pad_B0[0x80]; // 0xb0(0x80)

	struct UFSDMatchmakingCallbackProxy* FSDMatchmaking(struct UObject* WorldContextObject, struct APlayerController* PlayerController, struct FDelegate FailDelegate, struct UDifficultySetting* DesiredDifficulty, struct UBiome* desiredBiome, struct UMissionTemplate* desiredMission); // Function FSD.FSDMatchmakingCallbackProxy.FSDMatchmaking // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x111ca00
	void CancelMatchmaking(); // Function FSD.FSDMatchmakingCallbackProxy.CancelMatchmaking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x111c210
};

// Class FSD.FSDMath
// Size: 0x28 (Inherited: 0x28)
struct UFSDMath : UBlueprintFunctionLibrary {

	struct FVector SphericalToCartesian(float Radius, float azimuth, float elecation); // Function FSD.FSDMath.SphericalToCartesian // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x111d3f0
	bool PercentageCheck(float percentage); // Function FSD.FSDMath.PercentageCheck // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x111cf10
	void GetAzimuthAndElevation(struct FVector Direction, struct FTransform coordinateSystem, float azimuth, float elevation); // Function FSD.FSDMath.GetAzimuthAndElevation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x111cbd0
	float CubicSegmentLength(struct FVector p0, struct FVector tangent1, struct FVector p1, struct FVector tangent2); // Function FSD.FSDMath.CubicSegmentLength // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x111c590
	struct FVector CubicInterpBlueprint(struct FVector p0, struct FVector tangent1, struct FVector p1, struct FVector tangent2, float alpha); // Function FSD.FSDMath.CubicInterpBlueprint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x111c3c0
	void CartesianToSpherical(struct FVector Location, float outAzimuth, float outElevation, float outRadius); // Function FSD.FSDMath.CartesianToSpherical // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x111c230
};

// Class FSD.FSDOnlineSessionClient
// Size: 0x1e0 (Inherited: 0x1e0)
struct UFSDOnlineSessionClient : UOnlineSessionClient {
};

// Class FSD.FSDOnlineSystemUtils
// Size: 0x28 (Inherited: 0x28)
struct UFSDOnlineSystemUtils : UBlueprintFunctionLibrary {

	void TryToResolvePrivilege(struct APlayerState* PlayerState, enum class EBlueprintableUserPrivileges Privilege, enum class EBlueprintablePrivilegeResults reason); // Function FSD.FSDOnlineSystemUtils.TryToResolvePrivilege // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1123d00
	void ShowUpgradeAccountUI(); // Function FSD.FSDOnlineSystemUtils.ShowUpgradeAccountUI // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1123880
	void ShowAccountPicker(struct UFSDGameInstance* gInstance, int32_t GamePlayerID); // Function FSD.FSDOnlineSystemUtils.ShowAccountPicker // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1123460
	void OpenURLInOverlay(struct FString URL, struct FDelegate OnOverlayClosed); // Function FSD.FSDOnlineSystemUtils.OpenURLInOverlay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11228b0
	void OpenProfileByUserId(struct APlayerState* Requestor, struct FString RequesteeUserID); // Function FSD.FSDOnlineSystemUtils.OpenProfileByUserId // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11227e0
	void OpenProfile(struct APlayerState* Requestor, struct APlayerState* Requestee); // Function FSD.FSDOnlineSystemUtils.OpenProfile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1122730
	struct FText OnlinePlayBlockReasonToString(enum class EBlueprintablePrivilegeResults reason); // Function FSD.FSDOnlineSystemUtils.OnlinePlayBlockReasonToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1122650
	void GetOnlinePlayBlockReasons(struct TArray<enum class EBlueprintablePrivilegeResults> reasons); // Function FSD.FSDOnlineSystemUtils.GetOnlinePlayBlockReasons // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1121b00
	void GetIsPrivilegeAllowed(struct APlayerState* PlayerState, enum class EBlueprintableUserPrivileges Privilege, struct FDelegate Delegate); // Function FSD.FSDOnlineSystemUtils.GetIsPrivilegeAllowed // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11219e0
	struct FText GetInviteFeatureBlockReason(struct UObject* WorldContextObject, enum class EInviteBlockReason reason); // Function FSD.FSDOnlineSystemUtils.GetInviteFeatureBlockReason // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1121890
	enum class EInviteBlockReason CanPlayerInvite(struct UObject* WorldContextObject); // Function FSD.FSDOnlineSystemUtils.CanPlayerInvite // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11209f0
};

// Class FSD.FSDPhysicalMaterial
// Size: 0x170 (Inherited: 0x80)
struct UFSDPhysicalMaterial : UPhysicalMaterial {
	float BreakingDecelerationScale; // 0x80(0x04)
	float BreakingFrictionScale; // 0x84(0x04)
	float MaxAccelerationScale; // 0x88(0x04)
	bool RepulsePlayer; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
	struct FFloatInterval RepulsePlayerVelocity; // 0x90(0x08)
	float RepulsePlayerRandomDegreeOffset; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct USoundCue* RepulsePlayerSound; // 0xa0(0x08)
	struct UFXSystemAsset* RepulsePlayerParticle; // 0xa8(0x08)
	struct UFXSystemAsset* ImpactParticles; // 0xb0(0x08)
	struct UNiagaraSystem* ImpactNParticles; // 0xb8(0x08)
	struct UMaterialInstance* ImpactMaterialOverride; // 0xc0(0x08)
	struct USoundCue* ImpactSound; // 0xc8(0x08)
	struct USoundCue* MeleeImpactSound; // 0xd0(0x08)
	bool UseImpactDecalOverrides; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
	struct TArray<struct FDecalData> ImpactDecals; // 0xe0(0x10)
	struct USoundCue* FirstPersonDamageIndicatorSound; // 0xf0(0x08)
	bool IsWeakPoint; // 0xf8(0x01)
	bool IsSubhealthCollider; // 0xf9(0x01)
	char pad_FA[0x2]; // 0xfa(0x02)
	float DamageMultiplier; // 0xfc(0x04)
	struct UFXSystemAsset* FootstepParticle; // 0x100(0x08)
	struct UMaterialInstance* FootstepMaterialOverride; // 0x108(0x08)
	struct FDecalData LeftFootprintDecal; // 0x110(0x18)
	struct FDecalData RightFootprintDecal; // 0x128(0x18)
	struct USoundCue* FootstepSound; // 0x140(0x08)
	float ExtraFallVelocity; // 0x148(0x04)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct UFXSystemAsset* FallImpactEffect; // 0x150(0x08)
	struct USoundCue* FallImpactSound; // 0x158(0x08)
	bool AlwaysPenetrate; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)
	struct UReactiveTerrain* ReactiveTerrain; // 0x168(0x08)

	struct UFXSystemComponent* SpawnImpactParticlesFromHit(struct UObject* WorldContextObject, struct FHitResult HitResult); // Function FSD.FSDPhysicalMaterial.SpawnImpactParticlesFromHit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11239d0
	struct UFXSystemComponent* SpawnImpactParticles(struct UObject* WorldContextObject, struct FVector Location, struct FVector Normal); // Function FSD.FSDPhysicalMaterial.SpawnImpactParticles // (Final|Native|Public|HasDefaults|BlueprintCallable|Const) // @ game+0x11238a0
	struct UFSDPhysicalMaterial* GetPhysicalMaterialFromPrimitive(struct UPrimitiveComponent* Component); // Function FSD.FSDPhysicalMaterial.GetPhysicalMaterialFromPrimitive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1121ef0
};

// Class FSD.OptionalBloodPhysicalMaterial
// Size: 0x178 (Inherited: 0x170)
struct UOptionalBloodPhysicalMaterial : UFSDPhysicalMaterial {
	struct UParticleSystem* BloodlessImpactParticles; // 0x170(0x08)
};

// Class FSD.FSDPlayerCameraManager
// Size: 0x2740 (Inherited: 0x2740)
struct AFSDPlayerCameraManager : APlayerCameraManager {
};

// Class FSD.FSDPlayerControllerBase
// Size: 0x5c8 (Inherited: 0x570)
struct AFSDPlayerControllerBase : APlayerController {
	struct UMaterialParameterCollection* GlobalMaterialParameterCollection; // 0x570(0x08)
	struct FMulticastInlineDelegate OnPlayerVoiceStatusChanged; // 0x578(0x10)
	char pad_588[0x3]; // 0x588(0x03)
	bool bStartWithBlackScreen; // 0x58b(0x01)
	char pad_58C[0x4]; // 0x58c(0x04)
	struct UWindowManager* WindowManager; // 0x590(0x08)
	struct TArray<struct FPlatformComponent> PlatformComponentClasses; // 0x598(0x10)
	char pad_5A8[0x20]; // 0x5a8(0x20)

	void ToggleAnalogCursor(bool Visible); // Function FSD.FSDPlayerControllerBase.ToggleAnalogCursor // (Final|Native|Protected|BlueprintCallable) // @ game+0x1123be0
	void StopAspectRatioAxisConstraint(); // Function FSD.FSDPlayerControllerBase.StopAspectRatioAxisConstraint // (Final|Native|Public|BlueprintCallable) // @ game+0x1123ba0
	void StartAspectRatioAxisConstraint(); // Function FSD.FSDPlayerControllerBase.StartAspectRatioAxisConstraint // (Final|Native|Public|BlueprintCallable) // @ game+0x1123af0
	void SetHUDVisible(bool IsVisible, enum class EHUDVisibilityReason reason); // Function FSD.FSDPlayerControllerBase.SetHUDVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x1123320
	void Server_Cheat_SwitchCharacter(struct UPlayerCharacterID* NewCharacter); // Function FSD.FSDPlayerControllerBase.Server_Cheat_SwitchCharacter // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1122b80
	void RecievePreClientTravel(); // Function FSD.FSDPlayerControllerBase.RecievePreClientTravel // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void RecieveHUDVisibilityChanged(bool IsVisible); // Function FSD.FSDPlayerControllerBase.RecieveHUDVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnClientStartUsingMultiplayerFeatures(); // Function FSD.FSDPlayerControllerBase.OnClientStartUsingMultiplayerFeatures // (Final|Native|Public) // @ game+0x11222b0
	bool IsHUDVisibleFlagSet(enum class EHUDVisibilityReason reason); // Function FSD.FSDPlayerControllerBase.IsHUDVisibleFlagSet // (Final|Native|Public|BlueprintCallable) // @ game+0x11220f0
	void Client_WasKicked(enum class EDisconnectReason reason); // Function FSD.FSDPlayerControllerBase.Client_WasKicked // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x11215d0
};

// Class FSD.FSDPlayerController
// Size: 0x7a0 (Inherited: 0x5c8)
struct AFSDPlayerController : AFSDPlayerControllerBase {
	struct FMulticastInlineDelegate OnEndLevelReceived; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnReceiveVoiceChanged; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnTransmitVoiceChanged; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnLevelFinished; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnShowTutorialHint; // 0x608(0x10)
	struct FMulticastInlineDelegate OnShowTutorialWidget; // 0x618(0x10)
	struct FMulticastInlineDelegate OnChangeTutorialHintDuration; // 0x628(0x10)
	struct FMulticastInlineDelegate OnHideCurrentTutorialHint; // 0x638(0x10)
	struct FMulticastInlineDelegate OnPlayerCharacterPossesed; // 0x648(0x10)
	char pad_658[0x10]; // 0x658(0x10)
	struct UPerkUsageComponent* PerkUsageComponent; // 0x668(0x08)
	bool IsOnSpaceRig; // 0x670(0x01)
	bool bReceivedEndLevel; // 0x671(0x01)
	char pad_672[0x6]; // 0x672(0x06)
	struct TArray<struct USoundMix*> InitialSoundMixes; // 0x678(0x10)
	bool ServerTravelDone; // 0x688(0x01)
	char pad_689[0x7]; // 0x689(0x07)
	struct FMulticastInlineDelegate OnChatOpened; // 0x690(0x10)
	struct UFSDWidgetEffectsComponent* WidgetEffects; // 0x6a0(0x08)
	enum class ESpacerigStartType SpacerigSpawnType; // 0x6a8(0x01)
	char pad_6A9[0x13]; // 0x6a9(0x13)
	bool bDetectGravityChanges; // 0x6bc(0x01)
	char pad_6BD[0xe3]; // 0x6bd(0xe3)

	void ToggleVoiceOn(bool Enabled); // Function FSD.FSDPlayerController.ToggleVoiceOn // (Final|Native|Public|BlueprintCallable) // @ game+0x1123c70
	void ShowTutorialWidget(struct UTutorialContentWidget* TutorialWidget, bool ignoreQueue); // Function FSD.FSDPlayerController.ShowTutorialWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x11237b0
	void ShowTutorialHint(struct FText Text, struct FText Title, struct FText TaskText, struct UTexture2D* Image, float Duration); // Function FSD.FSDPlayerController.ShowTutorialHint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1123510
	void SetPlayerStart(struct AActor* Start); // Function FSD.FSDPlayerController.SetPlayerStart // (Final|Native|Public|BlueprintCallable) // @ game+0x11233e0
	void SetAchievementProgressFromServer(struct UFSDAchievement* AchievementToSet, float Progress); // Function FSD.FSDPlayerController.SetAchievementProgressFromServer // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x11231c0
	void ServerSetUserHoldToRun(bool Value); // Function FSD.FSDPlayerController.ServerSetUserHoldToRun // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1122a00
	void Server_TravelDone(); // Function FSD.FSDPlayerController.Server_TravelDone // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x11231a0
	void Server_TerrainLateJoinPartReceived(); // Function FSD.FSDPlayerController.Server_TerrainLateJoinPartReceived // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1123150
	void Server_SetLateJoinDone(); // Function FSD.FSDPlayerController.Server_SetLateJoinDone // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1123100
	void Server_SetGenerationStatus(struct FString Status, float Fraction); // Function FSD.FSDPlayerController.Server_SetGenerationStatus // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1122ff0
	void Server_SetGenerationFraction(float Fraction); // Function FSD.FSDPlayerController.Server_SetGenerationFraction // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1122f40
	void Server_SetGenerationDone(); // Function FSD.FSDPlayerController.Server_SetGenerationDone // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1122ef0
	void Server_SetExtraEndScreenTime(float extraTime); // Function FSD.FSDPlayerController.Server_SetExtraEndScreenTime // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1122e70
	void Server_SetControllerReady(); // Function FSD.FSDPlayerController.Server_SetControllerReady // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1122e50
	void Server_ResetHUD(); // Function FSD.FSDPlayerController.Server_ResetHUD // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1122e00
	void Server_NewMessage(struct FString Sender, struct FString Text, enum class EChatSenderType SenderType); // Function FSD.FSDPlayerController.Server_NewMessage // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1122ca0
	void Server_DrawProjectileDebugPath(bool bDraw); // Function FSD.FSDPlayerController.Server_DrawProjectileDebugPath // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1122c10
	void Server_ActivateTemporaryBuff(struct UTemporaryBuff* buff); // Function FSD.FSDPlayerController.Server_ActivateTemporaryBuff // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1122ac0
	void SendLevelUpStatistics(int32_t currentRank); // Function FSD.FSDPlayerController.SendLevelUpStatistics // (Final|Native|Protected) // @ game+0x10c5380
	void RecievePawnDestroyed(); // Function FSD.FSDPlayerController.RecievePawnDestroyed // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void RecieveOnControllerReady(); // Function FSD.FSDPlayerController.RecieveOnControllerReady // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void RecieveClientTravelDone(); // Function FSD.FSDPlayerController.RecieveClientTravelDone // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void ReceivingVoiceSignature__DelegateSignature(bool isRecieving); // DelegateFunction FSD.FSDPlayerController.ReceivingVoiceSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ReceiveEndLevel(); // Function FSD.FSDPlayerController.ReceiveEndLevel // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceivedEndLevelDelegate__DelegateSignature(); // DelegateFunction FSD.FSDPlayerController.ReceivedEndLevelDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void Receive_EndLevel_WaitForData(bool areObjectivesCompleted, int32_t numberOfPlayersInPod); // Function FSD.FSDPlayerController.Receive_EndLevel_WaitForData // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReadyToContinueFromEndScreen(); // Function FSD.FSDPlayerController.ReadyToContinueFromEndScreen // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x11229e0
	void OnShowTutorialHint__DelegateSignature(struct FText Text, struct FText Title, struct FText TaskText, struct UTexture2D* Image, float Duration); // DelegateFunction FSD.FSDPlayerController.OnShowTutorialHint__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x158ca90
	void OnSaveGamePlayerProgressChanged(int32_t Rank, int32_t Stars); // Function FSD.FSDPlayerController.OnSaveGamePlayerProgressChanged // (Final|Native|Protected) // @ game+0x1122570
	void OnSaveGameCreditsChanged(int32_t Credits); // Function FSD.FSDPlayerController.OnSaveGameCreditsChanged // (Final|Native|Protected) // @ game+0x11224f0
	void OnSaveGameCharacterProgressChanged(struct APlayerCharacter* CharacterClass, int32_t Level, float Progress); // Function FSD.FSDPlayerController.OnSaveGameCharacterProgressChanged // (Final|Native|Protected) // @ game+0x1122400
	void OnPlayerStateSelectedCharacterChanged(struct APlayerCharacter* CharacterClass); // Function FSD.FSDPlayerController.OnPlayerStateSelectedCharacterChanged // (Final|Native|Protected) // @ game+0x1122360
	void OnPlayerSpawnBegin(int32_t PlayerId); // Function FSD.FSDPlayerController.OnPlayerSpawnBegin // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnHideTutorialHint__DelegateSignature(bool wasWatched); // DelegateFunction FSD.FSDPlayerController.OnHideTutorialHint__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnGenerationDone(); // Function FSD.FSDPlayerController.OnGenerationDone // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnChangeTutorialWidget__DelegateSignature(struct UTutorialContentWidget* TutorialWidget, bool bIgnoreQueue); // DelegateFunction FSD.FSDPlayerController.OnChangeTutorialWidget__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnChangeTutorialHintDuration__DelegateSignature(float NewDuration); // DelegateFunction FSD.FSDPlayerController.OnChangeTutorialHintDuration__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void LevelFinishedSignature__DelegateSignature(); // DelegateFunction FSD.FSDPlayerController.LevelFinishedSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void HideTutorialHint(bool watched); // Function FSD.FSDPlayerController.HideTutorialHint // (Final|Native|Public|BlueprintCallable) // @ game+0x1122060
	bool HasPendingRewards(); // Function FSD.FSDPlayerController.HasPendingRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1122030
	bool GetUseToggleTerrainScanner(); // Function FSD.FSDPlayerController.GetUseToggleTerrainScanner // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1122000
	bool GetUseToggleLaserpointer(); // Function FSD.FSDPlayerController.GetUseToggleLaserpointer // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1121fd0
	bool GetUseHoldToRun(); // Function FSD.FSDPlayerController.GetUseHoldToRun // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1121fa0
	struct AActor* GetPlayerStart(); // Function FSD.FSDPlayerController.GetPlayerStart // (Final|Native|Public|BlueprintCallable) // @ game+0x1121f70
	bool GetPendingRewards(struct FPendingRewardsStats OutStats, struct FPendingRewards OutRewards); // Function FSD.FSDPlayerController.GetPendingRewards // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1121ba0
	struct AFSDPlayerState* GetFSDPlayerState(); // Function FSD.FSDPlayerController.GetFSDPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1121830
	void FlushRender(); // Function FSD.FSDPlayerController.FlushRender // (Final|Native|Protected|BlueprintCallable) // @ game+0x8dc380
	struct AActor* FindPlayerStart(struct UPlayerCharacterID* characterID); // Function FSD.FSDPlayerController.FindPlayerStart // (Final|Native|Public|BlueprintCallable) // @ game+0x1121690
	void EndLevel(); // Function FSD.FSDPlayerController.EndLevel // (Final|Native|Protected|BlueprintCallable) // @ game+0x1121650
	void Client_TerrainLateJoinVisibleChunks(struct TArray<uint32_t> visibleChunks); // Function FSD.FSDPlayerController.Client_TerrainLateJoinVisibleChunks // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1121530
	void Client_TerrainLateJoinPart(struct TArray<struct FGrenadeExplodeOperationData> explosions, struct TArray<struct FCarveWithColliderOperationData> colliderCarves, struct TArray<struct FCarveWithSTLMeshOperationData> meshCarves, struct TArray<struct FPickaxeDigOperationData> pickAxe, struct TArray<struct FRemoveFloatingIslandOperationData> floating, struct TArray<struct FDrillOperationData> drills, struct TArray<struct FMeltOperationData> melts, struct TArray<struct FSplineSegmentCarveOperationData> splines); // Function FSD.FSDPlayerController.Client_TerrainLateJoinPart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1121200
	void Client_TerrainLateJoinDone(); // Function FSD.FSDPlayerController.Client_TerrainLateJoinDone // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x11211e0
	void Client_TerrainLateJoinDebris(struct TArray<int32_t> instanceComponentPairs); // Function FSD.FSDPlayerController.Client_TerrainLateJoinDebris // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1121140
	void Client_PlayCue(struct USoundCue* SoundCue); // Function FSD.FSDPlayerController.Client_PlayCue // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x11210b0
	void Client_EndLevel_WaitForData(bool areObjectivesCompleted, int32_t numberOfPlayersInPod); // Function FSD.FSDPlayerController.Client_EndLevel_WaitForData // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1120fe0
	void Client_DeductResource(struct UResourceData* Resource, int32_t Amount); // Function FSD.FSDPlayerController.Client_DeductResource // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x1120f10
	void Client_CollectVanityItem(struct UTreasureRewarder* rewarder, struct UVanityItem* targetItem, struct UPlayerCharacterID* targetCharacter); // Function FSD.FSDPlayerController.Client_CollectVanityItem // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1120e10
	void Client_CollectTreasureVictoryPose(struct UTreasureRewarder* rewarder, struct UVictoryPose* targetPose, struct UPlayerCharacterID* targetCharacter); // Function FSD.FSDPlayerController.Client_CollectTreasureVictoryPose // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1120d10
	void Client_CollectTreasureSkin(struct UTreasureRewarder* rewarder, struct UItemSkin* targetSkin, struct UItemID* targetItem); // Function FSD.FSDPlayerController.Client_CollectTreasureSkin // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1120c10
	void Client_CollectTreasureDrink(struct UTreasureRewarder* rewarder, struct UDrinkableDataAsset* Drinkable); // Function FSD.FSDPlayerController.Client_CollectTreasureDrink // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1120b40
	void Client_CollectPickaxePart(struct UTreasureRewarder* rewarder, struct UPickaxePart* targetPart); // Function FSD.FSDPlayerController.Client_CollectPickaxePart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1120a70
	void ApplyPendingRewards(); // Function FSD.FSDPlayerController.ApplyPendingRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x1120940
};

// Class FSD.FSDPlayerStart
// Size: 0x230 (Inherited: 0x220)
struct AFSDPlayerStart : AActor {
	struct UPlayerCharacterID* PrefferedClassID; // 0x220(0x08)
	struct AFSDPlayerController* usedBy; // 0x228(0x08)
};

// Class FSD.SpacerigStart
// Size: 0x280 (Inherited: 0x250)
struct ASpacerigStart : APlayerStart {
	struct FMulticastInlineDelegate OnPlayerSpawn; // 0x250(0x10)
	struct FMulticastInlineDelegate OnPlayerLeave; // 0x260(0x10)
	struct AFSDPlayerController* usedBy; // 0x270(0x08)
	enum class ESpacerigStartType StartType; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
};

// Class FSD.FSDPlayerState
// Size: 0x4a8 (Inherited: 0x320)
struct AFSDPlayerState : APlayerState {
	struct FMulticastInlineDelegate OnPlayerCharacterSpawned; // 0x320(0x10)
	struct FMulticastInlineDelegate OnPlayerTalkingChanged; // 0x330(0x10)
	struct FMulticastInlineDelegate OnSelectedCharacterChanged; // 0x340(0x10)
	float FractionLevelGenerated; // 0x350(0x04)
	char pad_354[0x4]; // 0x354(0x04)
	struct FString LevelGenerationState; // 0x358(0x10)
	struct FMulticastInlineDelegate OnSupplyStatusChangedEvent; // 0x368(0x10)
	struct FMulticastInlineDelegate OnEnemyKilledEvent; // 0x378(0x10)
	struct TArray<struct UVanityItem*> LatestEquipedVanity; // 0x388(0x10)
	struct APlayerCharacter* SelectedCharacter; // 0x398(0x08)
	bool bIsServer; // 0x3a0(0x01)
	bool ShouldCopyProperties; // 0x3a1(0x01)
	char gameOwnerStatus; // 0x3a2(0x01)
	bool IsOnSpaceRig; // 0x3a3(0x01)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct UPlayerStatsComponent* PlayerStatsComponent; // 0x3a8(0x08)
	struct UPlayerRejoinState* RejoinState; // 0x3b0(0x08)
	struct USaveGameStateComponent* SaveGameStateComponent; // 0x3b8(0x08)
	struct APlayerCharacter* PlayerCharacter; // 0x3c0(0x08)
	bool IsInMission; // 0x3c8(0x01)
	bool IsTalking; // 0x3c9(0x01)
	bool HasGeneratedLevel; // 0x3ca(0x01)
	bool HasSelectedCharacter; // 0x3cb(0x01)
	int32_t PlayerSortId; // 0x3cc(0x04)
	struct FMulticastInlineDelegate OnPlayerNameChanged; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnFractionLevelGenerated; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnLevelGenerationStateChanged; // 0x3f0(0x10)
	struct UPlayerResourceComponent* PlayerResources; // 0x400(0x08)
	char SupplyAmmoStatus; // 0x408(0x01)
	char SupplyHealthStatus; // 0x409(0x01)
	char pad_40A[0x6]; // 0x40a(0x06)
	struct FRewardTexts RewardTexts; // 0x410(0x90)
	char pad_4A0[0x8]; // 0x4a0(0x08)

	void SetSelectedCharacterID(struct UPlayerCharacterID* characterID); // Function FSD.FSDPlayerState.SetSelectedCharacterID // (Final|Native|Public|BlueprintCallable) // @ game+0x112c830
	void SetSelectedCharacter(struct APlayerCharacter* NewCharacter); // Function FSD.FSDPlayerState.SetSelectedCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x112c7b0
	void SetHasGeneratedLevel(bool hasgenerated); // Function FSD.FSDPlayerState.SetHasGeneratedLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x112c3a0
	void SetCanOnlySpectate(bool canOnlySpectate); // Function FSD.FSDPlayerState.SetCanOnlySpectate // (Final|Native|Public|BlueprintCallable) // @ game+0x112bfd0
	void ServerSetSelectedCharacter(struct APlayerCharacter* NewCharacter); // Function FSD.FSDPlayerState.ServerSetSelectedCharacter // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x112bc50
	void Server_SetSupplyStatus(char StatusHealth, char StatusAmmo); // Function FSD.FSDPlayerState.Server_SetSupplyStatus // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x112bdd0
	void Server_SetGameOwnerStatus(int32_t gameOwnerStatus); // Function FSD.FSDPlayerState.Server_SetGameOwnerStatus // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x112bd10
	void OnRep_SupplyHealthStatus(); // Function FSD.FSDPlayerState.OnRep_SupplyHealthStatus // (Final|Native|Protected) // @ game+0x8dc380
	void OnRep_SupplyAmmoStatus(); // Function FSD.FSDPlayerState.OnRep_SupplyAmmoStatus // (Final|Native|Protected) // @ game+0x112b790
	void OnRep_SelectedCharacter(); // Function FSD.FSDPlayerState.OnRep_SelectedCharacter // (Final|Native|Protected) // @ game+0x112b770
	void OnRep_PlayerCharacter(); // Function FSD.FSDPlayerState.OnRep_PlayerCharacter // (Final|Native|Protected) // @ game+0x112b6d0
	void OnRep_LevelGenerationState(); // Function FSD.FSDPlayerState.OnRep_LevelGenerationState // (Final|Native|Protected) // @ game+0x112b6b0
	void OnRep_GameOwnerStatus(); // Function FSD.FSDPlayerState.OnRep_GameOwnerStatus // (Final|Native|Protected) // @ game+0x112b690
	void OnRep_FractionLevelGenerated(); // Function FSD.FSDPlayerState.OnRep_FractionLevelGenerated // (Final|Native|Protected) // @ game+0x112b670
	void OnLateJoinFinished(); // Function FSD.FSDPlayerState.OnLateJoinFinished // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	bool HasNormalOwnerStatus(); // Function FSD.FSDPlayerState.HasNormalOwnerStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112b140
	int32_t GetXPRewardsSum(); // Function FSD.FSDPlayerState.GetXPRewardsSum // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x112af40
	struct TArray<struct FXPReward> GetXPRewards(); // Function FSD.FSDPlayerState.GetXPRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x112aef0
	struct TArray<struct FXPReward> GetXPRewardDeepDive(int32_t StagesCompleted); // Function FSD.FSDPlayerState.GetXPRewardDeepDive // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x112ae40
	int32_t GetUIPing(); // Function FSD.FSDPlayerState.GetUIPing // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x112ae10
	float GetSupplyHealthStatus(); // Function FSD.FSDPlayerState.GetSupplyHealthStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112ad90
	float GetSupplyAmmoStatus(); // Function FSD.FSDPlayerState.GetSupplyAmmoStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112ad60
	int32_t GetSelectedCharacterLevel(); // Function FSD.FSDPlayerState.GetSelectedCharacterLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112aa40
	struct UPlayerCharacterID* GetSelectedCharacterID(); // Function FSD.FSDPlayerState.GetSelectedCharacterID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112aa10
	struct APlayerCharacter* GetSelectedCharacter(); // Function FSD.FSDPlayerState.GetSelectedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a9f0
	struct FCharacterProgress GetSelectCharacterProgress(); // Function FSD.FSDPlayerState.GetSelectCharacterProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x112a9b0
	struct UPlayerResourceComponent* GetPlayerResourceComponent(); // Function FSD.FSDPlayerState.GetPlayerResourceComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a4b0
	int32_t GetPlayerRank(); // Function FSD.FSDPlayerState.GetPlayerRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a450
	struct AFSDPlayerController* GetPlayerController(); // Function FSD.FSDPlayerState.GetPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a420
	bool GetHasGeneratedLevel(); // Function FSD.FSDPlayerState.GetHasGeneratedLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a1b0
	bool GetGameOwnerStatus(enum class EGameOwnerStatus Status); // Function FSD.FSDPlayerState.GetGameOwnerStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a100
	struct TArray<struct FCreditsReward> GetDeepDiveCreditsReward(int32_t StagesCompleted, int32_t goldCollected); // Function FSD.FSDPlayerState.GetDeepDiveCreditsReward // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x158ca90
	enum class EChatSenderType GetChatSenderType(); // Function FSD.FSDPlayerState.GetChatSenderType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1129de0
	struct FCharacterProgress GetCharacterProgress(struct UPlayerCharacterID* characterID); // Function FSD.FSDPlayerState.GetCharacterProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1129c90
	int32_t GetCharacterLevel(struct UPlayerCharacterID* characterID); // Function FSD.FSDPlayerState.GetCharacterLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1129c00
	void CharacterSelected(); // Function FSD.FSDPlayerState.CharacterSelected // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.FSDPostProcessingActor
// Size: 0x240 (Inherited: 0x220)
struct AFSDPostProcessingActor : AActor {
	enum class EPostProcessingType PostProcessingType; // 0x220(0x01)
	char pad_221[0x7]; // 0x221(0x07)
	struct UPostProcessComponent* PostProcessComponent; // 0x228(0x08)
	struct FWeightedBlendables InitialBlendables; // 0x230(0x10)

	void UnapplyPostProcessingBlendablesByType(struct UObject* WorldContext, enum class EPostProcessingType Type); // Function FSD.FSDPostProcessingActor.UnapplyPostProcessingBlendablesByType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x112d250
	void UnapplyPostProcessingBlendablesByID(struct UObject* WorldContext, struct FName InID); // Function FSD.FSDPostProcessingActor.UnapplyPostProcessingBlendablesByID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x112d1a0
	void UnapplyPostProcessingBlendable(struct UObject* WorldContext, enum class EPostProcessingType Type, struct TScriptInterface<None> InBlendableObject); // Function FSD.FSDPostProcessingActor.UnapplyPostProcessingBlendable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x112d090
	void UnapplyAllPostProcessingBlendables(struct UObject* WorldContext); // Function FSD.FSDPostProcessingActor.UnapplyAllPostProcessingBlendables // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x112d020
	void SetupHDRColorGamma(); // Function FSD.FSDPostProcessingActor.SetupHDRColorGamma // (Final|Native|Protected) // @ game+0x112cb90
	void SetPostProcessManager(struct APostProcessingManager* InManager); // Function FSD.FSDPostProcessingActor.SetPostProcessManager // (Final|Native|Protected) // @ game+0x112c6b0
	struct UMaterialInstanceDynamic* GetPostProcessingMaterialInstance(struct UObject* WorldContext, struct UMaterialInterface* Material); // Function FSD.FSDPostProcessingActor.GetPostProcessingMaterialInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x112a500
	struct UMaterialInstanceDynamic* ApplyPostProcessingMaterial(struct UObject* WorldContext, enum class EPostProcessingType Type, struct UMaterialInterface* Material, float InWeight, struct FName InID); // Function FSD.FSDPostProcessingActor.ApplyPostProcessingMaterial // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11293d0
	void ApplyPostProcessingBlendable(struct UObject* WorldContext, enum class EPostProcessingType Type, struct TScriptInterface<None> InBlendableObject, float InWeight, struct FName InID); // Function FSD.FSDPostProcessingActor.ApplyPostProcessingBlendable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1129240
};

// Class FSD.FSDProjectileMovementComponent
// Size: 0x240 (Inherited: 0x1d0)
struct UFSDProjectileMovementComponent : UProjectileMovementComponent {
	struct FMulticastInlineDelegate OnProjectilePenetrate; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnProjectileOutOfPropulsion; // 0x1e0(0x10)
	char bShouldPenetrate : 1; // 0x1f0(0x01)
	char pad_1F0_1 : 7; // 0x1f0(0x01)
	char pad_1F1[0x7]; // 0x1f1(0x07)
	struct TArray<struct AActor*> IgnoreCollisionAgainst; // 0x1f8(0x10)
	bool InvertIgnoreCollisionAgainst; // 0x208(0x01)
	char pad_209[0x7]; // 0x209(0x07)
	struct UCurveFloat* AccelerationCurve; // 0x210(0x08)
	float AccelerationMultiplier; // 0x218(0x04)
	float MaxPropulsionTime; // 0x21c(0x04)
	char bCancelPenetration : 1; // 0x220(0x01)
	char pad_220_1 : 7; // 0x220(0x01)
	char pad_221[0x1f]; // 0x221(0x1f)
};

// Class FSD.FSDRefinery
// Size: 0x398 (Inherited: 0x290)
struct AFSDRefinery : ADropPod {
	struct FMulticastInlineDelegate OnRefineryStateChanged; // 0x290(0x10)
	struct FMulticastInlineDelegate OnRefineryProgressChanged; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnPipelineRegistered; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnPipelineSegmentPlaced; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnExtractorPodSpawned; // 0x2d0(0x10)
	struct USingleUsableComponent* UsableStartRefining; // 0x2e0(0x08)
	struct USingleUsableComponent* UsableLaunchRocket; // 0x2e8(0x08)
	struct TMap<float, struct UDialogDataAsset*> ProgressMissionShouts; // 0x2f0(0x50)
	struct UDialogDataAsset* LaunchRocketButtonPressedShout; // 0x340(0x08)
	struct ATrackBuilderItem* BuilderItem; // 0x348(0x08)
	float RefiningTotalDuration; // 0x350(0x04)
	struct FFloatRange PipelineBreakCoolDown; // 0x354(0x10)
	float PipelineBreakTimePenaltyPerAdditionalPlayers; // 0x364(0x04)
	struct FInt32Range MaxSegmentBreakDowns; // 0x368(0x10)
	int32_t SegmentBreakDownPenaltyPerAdditionalPlayers; // 0x378(0x04)
	char pad_37C[0x8]; // 0x37c(0x08)
	enum class ERefineryState RefineryState; // 0x384(0x01)
	enum class ERefineryState PreviousRefineryState; // 0x385(0x01)
	char RefiningProgressReplicated; // 0x386(0x01)
	char pad_387[0x1]; // 0x387(0x01)
	struct TArray<struct APipelineStart*> PipelineStarts; // 0x388(0x10)

	void SetRefineryState(enum class ERefineryState InState); // Function FSD.FSDRefinery.SetRefineryState // (Final|Native|Protected|BlueprintCallable) // @ game+0x112c730
	void RefineryStateDelegate__DelegateSignature(enum class ERefineryState InRefineryState); // DelegateFunction FSD.FSDRefinery.RefineryStateDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void RefineryProgressDelegate__DelegateSignature(float InProgress01); // DelegateFunction FSD.FSDRefinery.RefineryProgressDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void RefineryPipelineSegmentDelegate__DelegateSignature(struct APipelineSegment* InSegment); // DelegateFunction FSD.FSDRefinery.RefineryPipelineSegmentDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void RefineryPipelineDelegate__DelegateSignature(struct APipelineStart* InPipelineStart); // DelegateFunction FSD.FSDRefinery.RefineryPipelineDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void RefineryExtractPodDelegate__DelegateSignature(struct APipelineExtractorPod* InExtractorPod); // DelegateFunction FSD.FSDRefinery.RefineryExtractPodDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ReceiveRefineryStateChanged(enum class ERefineryState InState); // Function FSD.FSDRefinery.ReceiveRefineryStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceivePipelineStateChanged(struct APipelineStart* InPipeline, enum class EPipelineBuildState InState); // Function FSD.FSDRefinery.ReceivePipelineStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceivePipelineStartReady(struct APipelineStart* InPipelineStart); // Function FSD.FSDRefinery.ReceivePipelineStartReady // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnStartRefiningPressed(struct APlayerCharacter* InCharacter, enum class EInputKeys Key); // Function FSD.FSDRefinery.OnStartRefiningPressed // (Final|Native|Protected) // @ game+0x112b7b0
	void OnRep_RefineryState(enum class ERefineryState InOldState); // Function FSD.FSDRefinery.OnRep_RefineryState // (Final|Native|Protected) // @ game+0x112b6f0
	void OnPlayerCharacterRegistered(struct APlayerCharacter* InCharacter); // Function FSD.FSDRefinery.OnPlayerCharacterRegistered // (Final|Native|Protected) // @ game+0x112b570
	void OnPipelineStateChanged(struct APipelineStart* InPipelineStart, enum class EPipelineBuildState InPipelineState); // Function FSD.FSDRefinery.OnPipelineStateChanged // (Final|Native|Protected) // @ game+0x112b4b0
	void OnObjectivesChanged(); // Function FSD.FSDRefinery.OnObjectivesChanged // (Final|Native|Protected) // @ game+0x112b490
	void OnLaunchRocketPressed(struct APlayerCharacter* InCharacter, enum class EInputKeys Key); // Function FSD.FSDRefinery.OnLaunchRocketPressed // (Final|Native|Protected) // @ game+0x112b3d0
	float GetRefiningProgress(); // Function FSD.FSDRefinery.GetRefiningProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a5f0
};

// Class FSD.FSDRefineryAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UFSDRefineryAnimInstance : UAnimInstance {
	enum class ERefineryState RefineryState; // 0x268(0x01)
};

// Class FSD.TutorialComponent
// Size: 0x100 (Inherited: 0xb0)
struct UTutorialComponent : UActorComponent {
	bool bTutorialEnabled; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	int32_t Priority; // 0xb4(0x04)
	float MaxDuration; // 0xb8(0x04)
	int32_t MaxViewCount; // 0xbc(0x04)
	bool ShowInTutorialLevel; // 0xc0(0x01)
	bool bAutoRegisterWithManager; // 0xc1(0x01)
	bool bDebugAlwaysShow; // 0xc2(0x01)
	bool ManuallyMarkViews; // 0xc3(0x01)
	struct TWeakObjectPtr<struct APlayerCharacter> PlayerCharacter; // 0xc4(0x08)
	struct TWeakObjectPtr<struct AFSDPlayerState> PlayerState; // 0xcc(0x08)
	struct TWeakObjectPtr<struct AFSDPlayerController> PlayerController; // 0xd4(0x08)
	struct TWeakObjectPtr<struct UFSDSaveGame> SaveGame; // 0xdc(0x08)
	struct TWeakObjectPtr<struct ATutorialManager> TutorialManager; // 0xe4(0x08)
	bool bTutorialInitialized; // 0xec(0x01)
	bool bTutorialReady; // 0xed(0x01)
	bool bTutorialVisible; // 0xee(0x01)
	bool bTutorialActive; // 0xef(0x01)
	char pad_F0[0x10]; // 0xf0(0x10)

	void RegisterTutorial(); // Function FSD.TutorialComponent.RegisterTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x1228580
	void ReceiveOnShown(); // Function FSD.TutorialComponent.ReceiveOnShown // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveOnInitialized(); // Function FSD.TutorialComponent.ReceiveOnInitialized // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveOnHidden(); // Function FSD.TutorialComponent.ReceiveOnHidden // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnTutorialsReset(); // Function FSD.TutorialComponent.OnTutorialsReset // (Final|Native|Protected) // @ game+0x12283e0
	void OnManagerReady(struct ATutorialManager* Manager); // Function FSD.TutorialComponent.OnManagerReady // (Final|Native|Protected) // @ game+0x1227f80
	void MarkTutorialWatched(); // Function FSD.TutorialComponent.MarkTutorialWatched // (Final|Native|Protected|BlueprintCallable) // @ game+0x1227e00
	void MarkTutorialReadyNow(); // Function FSD.TutorialComponent.MarkTutorialReadyNow // (Final|Native|Protected|BlueprintCallable) // @ game+0x1227de0
	void MarkTutorialReadyInSeconds(float Delay); // Function FSD.TutorialComponent.MarkTutorialReadyInSeconds // (Final|Native|Protected|BlueprintCallable) // @ game+0x1227d60
	bool HasTutorialBeenShown(); // Function FSD.TutorialComponent.HasTutorialBeenShown // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x12274c0
	struct FString GetTutorialName(); // Function FSD.TutorialComponent.GetTutorialName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1227350
	void CancelTutorial(bool CountAsViewed); // Function FSD.TutorialComponent.CancelTutorial // (Final|Native|Protected|BlueprintCallable) // @ game+0x1225200
};

// Class FSD.TutorialHintComponent
// Size: 0x170 (Inherited: 0x100)
struct UTutorialHintComponent : UTutorialComponent {
	struct FTutorialHint Hint; // 0x100(0x70)

	void SetRemainingVisibleTime(float remainingTime); // Function FSD.TutorialHintComponent.SetRemainingVisibleTime // (Final|Native|Protected|BlueprintCallable) // @ game+0x1228d20
	bool IsSingleplayer(struct UObject* WorldContext); // Function FSD.TutorialHintComponent.IsSingleplayer // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1227ab0
	void ChangeHint(struct FTutorialHint NewHint); // Function FSD.TutorialHintComponent.ChangeHint // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1225290
};

// Class FSD.RefineryHintComponent
// Size: 0x178 (Inherited: 0x170)
struct URefineryHintComponent : UTutorialHintComponent {
	struct TWeakObjectPtr<struct AFSDRefinery> Refinery; // 0x170(0x08)

	void ReceiveRefinerySpawned(struct AFSDRefinery* InRefinery); // Function FSD.RefineryHintComponent.ReceiveRefinerySpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceivePipelineSegmentPlaced(struct APipelineSegment* InSegment); // Function FSD.RefineryHintComponent.ReceivePipelineSegmentPlaced // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveExtractorPodSpawned(struct APipelineExtractorPod* InExtractorPod); // Function FSD.RefineryHintComponent.ReceiveExtractorPodSpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRefinerySpawned(struct AFSDRefinery* InRefinery); // Function FSD.RefineryHintComponent.OnRefinerySpawned // (Final|Native|Protected) // @ game+0x112b5f0
};

// Class FSD.FSDSaveGame
// Size: 0xb78 (Inherited: 0x28)
struct UFSDSaveGame : USaveGame {
	struct FMulticastInlineDelegate OnCreditsChanged; // 0x28(0x10)
	struct FMulticastInlineDelegate OnCharacterSaveChanged; // 0x38(0x10)
	struct FMulticastInlineDelegate OnCharacterCanRetire; // 0x48(0x10)
	struct FMulticastInlineDelegate OnCharacterRetired; // 0x58(0x10)
	struct FMulticastInlineDelegate OnPlayerProgressChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnTutorialsReset; // 0x78(0x10)
	struct FMulticastInlineDelegate OnPersonalMetricsChanged; // 0x88(0x10)
	struct FMulticastInlineDelegate OnAnonymousMetricsChanged; // 0x98(0x10)
	struct FMulticastInlineDelegate OnItemUnlocked; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnItemPurchased; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnItemUINotificationChange; // 0xc8(0x10)
	int32_t VersionNumber; // 0xd8(0x04)
	bool bMilestoneResetShown; // 0xdc(0x01)
	bool bYearTwoGiftClaimed; // 0xdd(0x01)
	char pad_DE[0x2]; // 0xde(0x02)
	struct FMulticastInlineDelegate OnForgingXPChanged; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnResourceAmountChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnSkinUnlocked; // 0x100(0x10)
	char pad_110[0x10]; // 0x110(0x10)
	struct FDateTime SaveSlotTimeStamp; // 0x120(0x08)
	struct FMulticastInlineDelegate OnPerkPointsChanged; // 0x128(0x10)
	struct FMissionStatSave MissionStatsSave; // 0x138(0x18)
	struct FMilestoneSave Milestones; // 0x150(0x10)
	struct FPerkClaimsSave OwnedPerks; // 0x160(0x18)
	struct FCharacterPerksSave EquippedPerks; // 0x178(0x10)
	struct FAchievementSave AchievementSave; // 0x188(0x20)
	struct TArray<struct FCharacterPerksSave> EquippedPerkLoadouts; // 0x1a8(0x10)
	char pad_1B8[0x8]; // 0x1b8(0x08)
	struct FSchematicSave SchematicSave; // 0x1c0(0x38)
	struct FPromotionRewardsSave PromotionRewardsSave; // 0x1f8(0x50)
	struct FFSDEventRewardsSave FSDEventRewardsSave; // 0x248(0x50)
	struct FSeasonSave SeasonSave; // 0x298(0x50)
	struct FGameDLCSave GameDLCSave; // 0x2e8(0x50)
	int32_t SaveCreatedInPatch; // 0x338(0x04)
	char pad_33C[0x4]; // 0x33c(0x04)
	struct FString AnonymousID; // 0x340(0x10)
	int32_t PerkPoints; // 0x350(0x04)
	bool HasRecievedDiscordReward; // 0x354(0x01)
	enum class EFSDFaction Faction; // 0x355(0x01)
	char pad_356[0x2]; // 0x356(0x02)
	struct TArray<struct FGuid> UnLockedMissions; // 0x358(0x10)
	struct TMap<struct FGuid, struct FUnLockedMissionParameters> UnLockedMissionParameters; // 0x368(0x50)
	struct TArray<struct FGuid> UnLockedPlanetZones; // 0x3b8(0x10)
	struct FCampaignSave CampaignSave; // 0x3c8(0x48)
	struct FDeepDiveSave DeepDiveSave; // 0x410(0x70)
	struct TArray<struct FCharacterSave> CharacterSaves; // 0x480(0x10)
	int32_t Credits; // 0x490(0x04)
	int32_t LastBoughtDailyDealSeed; // 0x494(0x04)
	struct FForgingSave Forging; // 0x498(0x08)
	struct FDrinkSave Drinks; // 0x4a0(0x58)
	struct TMap<struct FGuid, struct FItemUpgradeSelection> ItemUpgradeSelections; // 0x4f8(0x50)
	struct TArray<struct FUpgradeLoadout> ItemUpgradeLoadouts; // 0x548(0x10)
	struct TArray<struct FGuid> PurchasedItemUpgrades; // 0x558(0x10)
	struct TArray<struct FGuid> UnLockedItemUpgrades; // 0x568(0x10)
	struct TArray<struct FGuid> UnlockedItems; // 0x578(0x10)
	struct TArray<struct FGuid> OwnedItems; // 0x588(0x10)
	struct TMap<struct FGuid, int32_t> EnemiesKilled; // 0x598(0x50)
	struct TMap<struct FGuid, struct FItemNotificationInfo> ItemsWithNotification; // 0x5e8(0x50)
	struct TMap<struct FGuid, struct FSkinList> UnlockedItemSkins; // 0x638(0x50)
	struct TSet<struct FGuid> UnlockedPickaxeParts; // 0x688(0x50)
	struct TArray<struct UVanityItem*> UnLockedVanityItems; // 0x6d8(0x10)
	struct TArray<struct FGuid> UnLockedVanityItemIDs; // 0x6e8(0x10)
	struct TArray<struct FGuid> HiddenUICategories; // 0x6f8(0x10)
	int32_t LastCollectedCommunityRewardPeriodID; // 0x708(0x04)
	char pad_70C[0x4]; // 0x70c(0x04)
	struct TSet<struct FGuid> MinersManualKnownObjects; // 0x710(0x50)
	struct FEventRewardSave EventRewardSave; // 0x760(0x50)
	struct FItemUINotifications ItemUINotifications; // 0x7b0(0x68)
	struct FString RejoinSessionId; // 0x818(0x10)
	bool FirstRejoinAttempt; // 0x828(0x01)
	bool HaveSkinsBeenReset; // 0x829(0x01)
	bool bHasOpenedDeepDiveTerminal; // 0x82a(0x01)
	char pad_82B[0x5]; // 0x82b(0x05)
	struct FResourcesSave Resources; // 0x830(0xa0)
	bool FirstSession; // 0x8d0(0x01)
	char pad_8D1[0x7]; // 0x8d1(0x07)
	struct TArray<struct FWatchedTutorial> WatchedTutorials; // 0x8d8(0x10)
	struct FConsoleOptionsInSaveGame ConsoleOptions; // 0x8e8(0x120)
	struct FGDKWinOptionsInSaveGame WinGDKOptions; // 0xa08(0x70)
	struct FOptionsInSaveGame WindowsOptions; // 0xa78(0x08)
	bool HasCompletedTutorial; // 0xa80(0x01)
	bool HasPlayedTutorial; // 0xa81(0x01)
	bool ShowHowToRestartTutorialPrompt; // 0xa82(0x01)
	bool HasPlayedIntroMessage; // 0xa83(0x01)
	bool HasSentSteamInfo; // 0xa84(0x01)
	bool HasClaimedSteamGroupLoot; // 0xa85(0x01)
	bool IsBoscoAllowed; // 0xa86(0x01)
	bool HasRefundedUpgradeCostDifference; // 0xa87(0x01)
	bool HasJoinedXboxClub; // 0xa88(0x01)
	bool HasSeenAnalyticsPopUp; // 0xa89(0x01)
	bool AllowAnalyticsTracking; // 0xa8a(0x01)
	bool AllowPersonalAnalyticsTracking; // 0xa8b(0x01)
	bool IsModded; // 0xa8c(0x01)
	char pad_A8D[0x3]; // 0xa8d(0x03)
	int32_t Index; // 0xa90(0x04)
	char pad_A94[0x4]; // 0xa94(0x04)
	struct FString Name; // 0xa98(0x10)
	float TotalPlayTimeSeconds; // 0xaa8(0x04)
	char pad_AAC[0x4]; // 0xaac(0x04)
	struct TMap<struct FGuid, int32_t> SelectedLoadout; // 0xab0(0x50)
	uint32_t userIdx; // 0xb00(0x04)
	uint32_t CurrLoadoutIdx; // 0xb04(0x04)
	uint32_t SaveToDiskCounter; // 0xb08(0x04)
	uint32_t BackupSaveIndex; // 0xb0c(0x04)
	uint32_t ExternalBackupSaveIndex; // 0xb10(0x04)
	int32_t NumberOfGamesPlayed; // 0xb14(0x04)
	struct UPlayerCharacterID* LastPlayedCharacter; // 0xb18(0x08)
	bool ShowInfoScreen; // 0xb20(0x01)
	char pad_B21[0x7]; // 0xb21(0x07)
	struct FString LastShownVersion; // 0xb28(0x10)
	struct FSonyInputSettings SonyInputSettings; // 0xb38(0x30)
	struct UFSDGameInstance* FSDGameInstance; // 0xb68(0x08)
	char pad_B70[0x8]; // 0xb70(0x08)

	void TutorialsResetDelegate__DelegateSignature(); // DelegateFunction FSD.FSDSaveGame.TutorialsResetDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool TrySellResource(struct UResourceData* Resource, int32_t Amount, int32_t Price); // Function FSD.FSDSaveGame.TrySellResource // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x112cf10
	bool TryDeductResources(struct TMap<struct UResourceData*, int32_t> Resources); // Function FSD.FSDSaveGame.TryDeductResources // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x112cd80
	bool TryDeductCredits(int32_t Amount); // Function FSD.FSDSaveGame.TryDeductCredits // (Final|Native|Public|BlueprintCallable) // @ game+0x112ccf0
	bool TryBuyResource(struct UResourceData* Resource, int32_t Amount, int32_t Price); // Function FSD.FSDSaveGame.TryBuyResource // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x112cbe0
	void SkinSignature__DelegateSignature(struct UItemSkin* Skin, struct UItemID* ItemID); // DelegateFunction FSD.FSDSaveGame.SkinSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool ShouldDisplayFirstSchematicMessage(); // Function FSD.FSDSaveGame.ShouldDisplayFirstSchematicMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112cbb0
	void SetSonyInputSettingMotionXMapping(enum class ESonyControllerMotionMapping NewValue); // Function FSD.FSDSaveGame.SetSonyInputSettingMotionXMapping // (Final|Native|Public|BlueprintCallable) // @ game+0x112cb10
	void SetSonyInputSettingLightMode(enum class ESonyControllerLightMode NewValue); // Function FSD.FSDSaveGame.SetSonyInputSettingLightMode // (Final|Native|Public|BlueprintCallable) // @ game+0x112ca90
	void SetSonyInputSettingFloat(struct UObject* WorldContext, enum class ESonyInputSettingsFloats Setting, float NewValue); // Function FSD.FSDSaveGame.SetSonyInputSettingFloat // (Final|Native|Public|BlueprintCallable) // @ game+0x112c980
	void SetSonyInputSettingBool(enum class ESonyInputSettingsBools Setting, bool NewValue); // Function FSD.FSDSaveGame.SetSonyInputSettingBool // (Final|Native|Public|BlueprintCallable) // @ game+0x112c8b0
	bool SetPersonalAnalytics(bool State); // Function FSD.FSDSaveGame.SetPersonalAnalytics // (Final|Native|Public|BlueprintCallable) // @ game+0x112c620
	void SetIsModded(bool modded); // Function FSD.FSDSaveGame.SetIsModded // (Final|Native|Public|BlueprintCallable) // @ game+0x112c590
	void SetIndexAndName(int32_t Index, struct FString Name); // Function FSD.FSDSaveGame.SetIndexAndName // (Final|Native|Public|BlueprintCallable) // @ game+0x112c470
	void SetHasSentSteamInfo(); // Function FSD.FSDSaveGame.SetHasSentSteamInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x112c450
	void SetHasJoinedXboxClub(); // Function FSD.FSDSaveGame.SetHasJoinedXboxClub // (Final|Native|Public|BlueprintCallable) // @ game+0x112c420
	void SetHasClaimSteamGroupLoot(); // Function FSD.FSDSaveGame.SetHasClaimSteamGroupLoot // (Final|Native|Public|BlueprintCallable) // @ game+0x112c370
	void SetFaction(enum class EFSDFaction newFaction, bool Reasign); // Function FSD.FSDSaveGame.SetFaction // (Final|Native|Public|BlueprintCallable) // @ game+0x112c2a0
	void SetEquippedItem(enum class EItemCategory Category, struct UPlayerCharacterID* PlayerId, struct AActor* Item); // Function FSD.FSDSaveGame.SetEquippedItem // (Final|Native|Public|BlueprintCallable) // @ game+0x112c1a0
	void SetDiscordReward(bool State); // Function FSD.FSDSaveGame.SetDiscordReward // (Final|Native|Public|BlueprintCallable) // @ game+0x112c120
	void SetCharacterLoadout(struct UPlayerCharacterID* characterID, int32_t loadoutNumber); // Function FSD.FSDSaveGame.SetCharacterLoadout // (Final|Native|Public|BlueprintCallable) // @ game+0x112c060
	void SetBoscoAllowed(bool aIsBoscoAllowed); // Function FSD.FSDSaveGame.SetBoscoAllowed // (Final|Native|Public|BlueprintCallable) // @ game+0x112bf50
	bool SetAnonymousAnalytics(bool State); // Function FSD.FSDSaveGame.SetAnonymousAnalytics // (Final|Native|Public|BlueprintCallable) // @ game+0x112bec0
	void SaveToDisk(); // Function FSD.FSDSaveGame.SaveToDisk // (Final|Native|Public|BlueprintCallable) // @ game+0x112bc30
	bool SaveSlotToDisk(struct UFSDSaveGame* SaveSlot, struct FString slotName, int32_t userIdx); // Function FSD.FSDSaveGame.SaveSlotToDisk // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x112bae0
	void RetirementSignature__DelegateSignature(struct APlayerCharacter* CharacterClass, int32_t RetirementCount); // DelegateFunction FSD.FSDSaveGame.RetirementSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	int32_t RetireCharacter(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.RetireCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x112ba50
	void ResourceAmountChangedDelegate__DelegateSignature(struct UResourceData* Resource, float currentAmount); // DelegateFunction FSD.FSDSaveGame.ResourceAmountChangedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ResetTutorials(); // Function FSD.FSDSaveGame.ResetTutorials // (Final|Native|Public|BlueprintCallable) // @ game+0x112ba30
	void ResetSonyTouchSettings(); // Function FSD.FSDSaveGame.ResetSonyTouchSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x112ba10
	void ResetSonyMotionSettings(); // Function FSD.FSDSaveGame.ResetSonyMotionSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x112b9f0
	void ResetSonyDualSenseSettings(); // Function FSD.FSDSaveGame.ResetSonyDualSenseSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x112b9d0
	void ResetRejoinSessionId(); // Function FSD.FSDSaveGame.ResetRejoinSessionId // (Final|Native|Public|BlueprintCallable) // @ game+0x112b9b0
	void RejoinAttempted(); // Function FSD.FSDSaveGame.RejoinAttempted // (Final|Native|Public|BlueprintCallable) // @ game+0x112b990
	void RefreshLoadoutFromCharacter(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.RefreshLoadoutFromCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x112b910
	bool RecievedDiscordReward(); // Function FSD.FSDSaveGame.RecievedDiscordReward // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x112b8f0
	struct FString PromotedClassesString(); // Function FSD.FSDSaveGame.PromotedClassesString // (Final|Native|Public|BlueprintCallable) // @ game+0x112b870
	void PlayerProgressChangedSignature__DelegateSignature(int32_t Rank, int32_t Stars); // DelegateFunction FSD.FSDSaveGame.PlayerProgressChangedSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void PersonalMatricsChangedSignature__DelegateSignature(bool AllowPersonalMetrics); // DelegateFunction FSD.FSDSaveGame.PersonalMatricsChangedSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void PerkPointsChangedSignature__DelegateSignature(int32_t PerkPoints, int32_t Change); // DelegateFunction FSD.FSDSaveGame.PerkPointsChangedSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void MarkRetirementRewardScreenSeen(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.MarkRetirementRewardScreenSeen // (Final|Native|Public|BlueprintCallable) // @ game+0x112b350
	void MarkFirstSchematicMessageSeen(); // Function FSD.FSDSaveGame.MarkFirstSchematicMessageSeen // (Final|Native|Public|BlueprintCallable) // @ game+0x112b330
	void ItemUnlockedDelegate__DelegateSignature(); // DelegateFunction FSD.FSDSaveGame.ItemUnlockedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ItemUINotificationDelegate__DelegateSignature(); // DelegateFunction FSD.FSDSaveGame.ItemUINotificationDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool IsObsolete(); // Function FSD.FSDSaveGame.IsObsolete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112b300
	bool IsInMinersManual(struct FGuid ObjectID); // Function FSD.FSDSaveGame.IsInMinersManual // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x112b1c0
	bool IsFirstRejoinAttempt(); // Function FSD.FSDSaveGame.IsFirstRejoinAttempt // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x112b1a0
	bool HasSeenRetirementRewardScreen(); // Function FSD.FSDSaveGame.HasSeenRetirementRewardScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112b170
	bool HasCharacterRetired(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.HasCharacterRetired // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112b0b0
	bool HasCharacterCompletedRetirementCampaign(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.HasCharacterCompletedRetirementCampaign // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112b020
	bool HasBackupWithMoreProgress(struct UFSDGameInstance* GameInstance); // Function FSD.FSDSaveGame.HasBackupWithMoreProgress // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x112afa0
	bool HasAnyCharacterRetired(); // Function FSD.FSDSaveGame.HasAnyCharacterRetired // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112af70
	int32_t GetTotalGamesPlayed(); // Function FSD.FSDSaveGame.GetTotalGamesPlayed // (Final|Native|Public|BlueprintCallable) // @ game+0x112adf0
	int32_t GetTotalCharacterXP(); // Function FSD.FSDSaveGame.GetTotalCharacterXP // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x112adc0
	enum class ESonyControllerMotionMapping GetSonyInputSettingMotionXMapping(); // Function FSD.FSDSaveGame.GetSonyInputSettingMotionXMapping // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112ad30
	enum class ESonyControllerLightMode GetSonyInputSettingLightMode(); // Function FSD.FSDSaveGame.GetSonyInputSettingLightMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112ad00
	float GetSonyInputSettingFloat(enum class ESonyInputSettingsFloats Setting); // Function FSD.FSDSaveGame.GetSonyInputSettingFloat // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112ac70
	bool GetSonyInputSettingBool(enum class ESonyInputSettingsBools Setting); // Function FSD.FSDSaveGame.GetSonyInputSettingBool // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112abe0
	struct FDateTime GetSlotTimeStamp(); // Function FSD.FSDSaveGame.GetSlotTimeStamp // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x112abc0
	struct FString GetSlotLoadedFrom(); // Function FSD.FSDSaveGame.GetSlotLoadedFrom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112ab00
	int32_t GetSelectedLoadoutIndex(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.GetSelectedLoadoutIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112aa70
	struct FString GetSaveSlotName(int32_t userIdx); // Function FSD.FSDSaveGame.GetSaveSlotName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x112a8f0
	int32_t GetResourceSellingPrice(struct UResourceData* Resource, int32_t Amount); // Function FSD.FSDSaveGame.GetResourceSellingPrice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a830
	int32_t GetResourceBuyingPrice(struct UResourceData* Resource, int32_t Amount); // Function FSD.FSDSaveGame.GetResourceBuyingPrice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a770
	float GetResourceAmount(struct UResourceData* Resource); // Function FSD.FSDSaveGame.GetResourceAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a6d0
	int32_t GetRequiredXPForLevel(int32_t Level); // Function FSD.FSDSaveGame.GetRequiredXPForLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a640
	struct FString GetRejoinSessionId(); // Function FSD.FSDSaveGame.GetRejoinSessionId // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x112a610
	int32_t GetPurchasableItemCount(); // Function FSD.FSDSaveGame.GetPurchasableItemCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a5c0
	int32_t GetPlayerRetirementRank(); // Function FSD.FSDSaveGame.GetPlayerRetirementRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a4d0
	int32_t GetPlayerRank(); // Function FSD.FSDSaveGame.GetPlayerRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a480
	int32_t GetPerkPoints(); // Function FSD.FSDSaveGame.GetPerkPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a400
	struct FString GetName(); // Function FSD.FSDSaveGame.GetName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x112a340
	int32_t GetMaxSaveSlots(); // Function FSD.FSDSaveGame.GetMaxSaveSlots // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x112a320
	int32_t GetMainSaves(struct UFSDGameInstance* GameInstance, struct TArray<struct UFSDSaveGame*> outMainSaves); // Function FSD.FSDSaveGame.GetMainSaves // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x112a230
	bool GetIsModded(); // Function FSD.FSDSaveGame.GetIsModded // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x112a210
	int32_t GetIndex(); // Function FSD.FSDSaveGame.GetIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x112a1f0
	bool GetHasSentSteamInfo(); // Function FSD.FSDSaveGame.GetHasSentSteamInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x112a1d0
	bool GetHasClaimedSteamGroupLoot(); // Function FSD.FSDSaveGame.GetHasClaimedSteamGroupLoot // (Final|Native|Public|BlueprintCallable) // @ game+0x112a190
	enum class EFSDFaction GetFaction(); // Function FSD.FSDSaveGame.GetFaction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x112a0e0
	struct UItemID* GetEquippedItemID(enum class EItemCategory Category, struct UPlayerCharacterID* PlayerId); // Function FSD.FSDSaveGame.GetEquippedItemID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a020
	struct AActor* GetEquippedItem(enum class EItemCategory Category, struct UPlayerCharacterID* PlayerId); // Function FSD.FSDSaveGame.GetEquippedItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1129f50
	int32_t GetCredits(); // Function FSD.FSDSaveGame.GetCredits // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1129f30
	int32_t GetClassXP(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.GetClassXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1129ea0
	int32_t GetClassLevel(struct UPlayerCharacterID* characterID); // Function FSD.FSDSaveGame.GetClassLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1129e10
	int32_t GetCharacterRetirementCount(struct FGuid PlayerId); // Function FSD.FSDSaveGame.GetCharacterRetirementCount // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1129d30
	bool GetBoscoAllowed(); // Function FSD.FSDSaveGame.GetBoscoAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1129be0
	int32_t GetAvailableUserSlotIndex(struct UFSDGameInstance* GameInstance); // Function FSD.FSDSaveGame.GetAvailableUserSlotIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1129b60
	struct TArray<struct UFSDSaveGame*> GetAllSavesFromDisk(struct UFSDGameInstance* GameInstance); // Function FSD.FSDSaveGame.GetAllSavesFromDisk // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1129a90
	void ForgingXPDelegate__DelegateSignature(float XP); // DelegateFunction FSD.FSDSaveGame.ForgingXPDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ForceSetIsModded(bool modded); // Function FSD.FSDSaveGame.ForceSetIsModded // (Final|Native|Public|BlueprintCallable) // @ game+0x1129a00
	void FixNamingOfMainSave(struct UFSDSaveGame* mainsave); // Function FSD.FSDSaveGame.FixNamingOfMainSave // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1129990
	bool DeleteFromDisk(struct UFSDGameInstance* GameInstance, struct FString slotName, int32_t userIdx); // Function FSD.FSDSaveGame.DeleteFromDisk // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1129840
	bool DeductPerkPoints(int32_t Amount); // Function FSD.FSDSaveGame.DeductPerkPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x11297b0
	void CreditsChangedSignature__DelegateSignature(int32_t Credits); // DelegateFunction FSD.FSDSaveGame.CreditsChangedSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void CheckPromotionAchievementProgress(struct UObject* WorldContext, bool IsRetroactive); // Function FSD.FSDSaveGame.CheckPromotionAchievementProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x11296e0
	void CharacterSignature__DelegateSignature(struct APlayerCharacter* CharacterClass); // DelegateFunction FSD.FSDSaveGame.CharacterSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void CharacterProgressChangedSignature__DelegateSignature(struct APlayerCharacter* CharacterClass, int32_t Level, float Progress); // DelegateFunction FSD.FSDSaveGame.CharacterProgressChangedSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool CanAfford(struct TMap<struct UResourceData*, int32_t> Resources); // Function FSD.FSDSaveGame.CanAfford // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1129550
	void AnonymousMatricsChangedSignature__DelegateSignature(bool AllowAnonymousMetrics); // DelegateFunction FSD.FSDSaveGame.AnonymousMatricsChangedSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void AddPerkPoints(int32_t Amount); // Function FSD.FSDSaveGame.AddPerkPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x11291c0
	void AddGamePlayed(); // Function FSD.FSDSaveGame.AddGamePlayed // (Final|Native|Public|BlueprintCallable) // @ game+0x11291a0
	int32_t AddCredits(int32_t Amount); // Function FSD.FSDSaveGame.AddCredits // (Final|Native|Public|BlueprintCallable) // @ game+0x1129110
};

// Class FSD.OptionalUICategory
// Size: 0x68 (Inherited: 0x30)
struct UOptionalUICategory : UDataAsset {
	struct FMulticastInlineDelegate OnVisibilityChanged; // 0x30(0x10)
	struct FGuid Guid; // 0x40(0x10)
	struct FText Description; // 0x50(0x18)

	void VisibilityChanged__DelegateSignature(struct UOptionalUICategory* Category, bool IsVisible); // DelegateFunction FSD.OptionalUICategory.VisibilityChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void SetVisible(struct UObject* WorldContext, bool IsCategoryVisible); // Function FSD.OptionalUICategory.SetVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x11334a0
	bool IsVisible(struct UObject* WorldContext); // Function FSD.OptionalUICategory.IsVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1133410
};

// Class FSD.ItemRefundList
// Size: 0x98 (Inherited: 0x30)
struct UItemRefundList : UDataAsset {
	bool ResetListOnSave; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct TSoftObjectPtr<struct UObject>> Items; // 0x38(0x10)
	struct TMap<struct FGuid, struct FItemRefundListItem> ItemsToRefund; // 0x48(0x50)
};

// Class FSD.FSDSendToURL
// Size: 0x40 (Inherited: 0x28)
struct UFSDSendToURL : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class FSD.FSDSessionUpdater
// Size: 0x178 (Inherited: 0x28)
struct UFSDSessionUpdater : UObject {
	struct FMulticastInlineDelegate OnNewFSDSessionID; // 0x28(0x10)
	char pad_38[0x140]; // 0x38(0x140)
};

// Class FSD.FSDSkeletalMeshComponent
// Size: 0xac0 (Inherited: 0xac0)
struct UFSDSkeletalMeshComponent : USkeletalMeshComponent {
};

// Class FSD.FSDSplineLibrary
// Size: 0x28 (Inherited: 0x28)
struct UFSDSplineLibrary : UBlueprintFunctionLibrary {

	bool SplineComponentSphereTrace(struct USplineComponent* SplineComponent, float Radius, enum class ETraceTypeQuery TraceType, float StepSize, struct TArray<struct AActor*> IgnoreActors, struct FHitResult OutHitResult, struct FVector Offset); // Function FSD.FSDSplineLibrary.SplineComponentSphereTrace // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1133570
	struct TArray<struct FTransform> GetSplineComponentTransforms(struct USplineComponent* SplineComponent, float StepSize, enum class ESplineCoordinateSpace Space); // Function FSD.FSDSplineLibrary.GetSplineComponentTransforms // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11332b0
	void GetLocationAndTangentsAtSplinePoint(struct USplineComponent* Spline, int32_t PointIndex, struct FVector Location, struct FVector ArriveTangent, struct FVector LeaveTangent, enum class ESplineCoordinateSpace CoordinateSpace); // Function FSD.FSDSplineLibrary.GetLocationAndTangentsAtSplinePoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11330b0
	void ConvertSplineDistanceToInputKey(struct USplineComponent* SplineComponent, struct USplineComponent* OptionalTargetSpline); // Function FSD.FSDSplineLibrary.ConvertSplineDistanceToInputKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1132fe0
	bool CarveAroundSplinePoints(struct UObject* WorldContext, struct FVector InStartLocation, struct FVector InStartTangent, struct FVector InEndLocation, struct FVector InEndTangent, float InRadius, struct UTerrainMaterial* InTerrainMaterial, enum class ECarveFilterType InCarveFilter, enum class EPreciousMaterialOptions InPrecious); // Function FSD.FSDSplineLibrary.CarveAroundSplinePoints // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1132d20
	bool CarveAroundSplineMesh(struct USplineMeshComponent* InMesh, float InRadius, struct UTerrainMaterial* InTerrainMaterial, enum class ECarveFilterType InCarveFilter, enum class EPreciousMaterialOptions InPrecious); // Function FSD.FSDSplineLibrary.CarveAroundSplineMesh // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1132ba0
	float ApproximateSplineDistanceAtWorldLocation(struct USplineComponent* Spline, struct FVector WorldLocation); // Function FSD.FSDSplineLibrary.ApproximateSplineDistanceAtWorldLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1132ad0
};

// Class FSD.FSDSteamUserStats
// Size: 0xc0 (Inherited: 0xb0)
struct UFSDSteamUserStats : UActorComponent {
	char pad_B0[0x10]; // 0xb0(0x10)
};

// Class FSD.FSDSteamUtils
// Size: 0x28 (Inherited: 0x28)
struct UFSDSteamUtils : UBlueprintFunctionLibrary {

	bool PlayerIsFollowingUsOnSteam(); // Function FSD.FSDSteamUtils.PlayerIsFollowingUsOnSteam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11390f0
	void OpenURLInSteamBrowser(struct FString URL); // Function FSD.FSDSteamUtils.OpenURLInSteamBrowser // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1139060
	bool IsTextFilteringInitialized(); // Function FSD.FSDSteamUtils.IsTextFilteringInitialized // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1138790
	bool IsSteamLoaded(); // Function FSD.FSDSteamUtils.IsSteamLoaded // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1138760
	bool IsDev(struct APlayerState* PlayerState); // Function FSD.FSDSteamUtils.IsDev // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1138640
	bool InitializeFilterText(); // Function FSD.FSDSteamUtils.InitializeFilterText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1138550
	bool HasSupporterUpgrade(); // Function FSD.FSDSteamUtils.HasSupporterUpgrade // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1138520
	bool HasDeluxeEdition(); // Function FSD.FSDSteamUtils.HasDeluxeEdition // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1138520
	bool HasContentCreatorEdition(); // Function FSD.FSDSteamUtils.HasContentCreatorEdition // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11384f0
	struct FString GetSteamRegion(); // Function FSD.FSDSteamUtils.GetSteamRegion // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1138350
	struct FString GetSteamLanguage(); // Function FSD.FSDSteamUtils.GetSteamLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11382d0
	struct FString GetSteamBranchString(); // Function FSD.FSDSteamUtils.GetSteamBranchString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1138250
	enum class ESteamBranch GetSteamBranch(); // Function FSD.FSDSteamUtils.GetSteamBranch // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1138220
	struct FString GetPlayerSteamName(); // Function FSD.FSDSteamUtils.GetPlayerSteamName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11380a0
	struct FString GetPlayerSteamID(); // Function FSD.FSDSteamUtils.GetPlayerSteamID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1138020
	struct FString FilterProfanityText(struct FString inputMessage); // Function FSD.FSDSteamUtils.FilterProfanityText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1137660
};

// Class FSD.FSDPS4Utils
// Size: 0x28 (Inherited: 0x28)
struct UFSDPS4Utils : UBlueprintFunctionLibrary {

	void SetUGCAllowed(bool bAllowed); // Function FSD.FSDPS4Utils.SetUGCAllowed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1139c40
	bool IsUGCAllowed(); // Function FSD.FSDPS4Utils.IsUGCAllowed // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11387b0
	bool IsPS4SystemLoaded(); // Function FSD.FSDPS4Utils.IsPS4SystemLoaded // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1138740
};

// Class FSD.FSDTutorialSettings
// Size: 0x50 (Inherited: 0x30)
struct UFSDTutorialSettings : UDataAsset {
	int32_t RequiredCPTreasures; // 0x30(0x04)
	int32_t RequiredCPMachineEvents; // 0x34(0x04)
	int32_t RequiredCPVeterans; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct FNewPlayerMutator> FirstMissionsMutators; // 0x40(0x10)
};

// Class FSD.FSDLevelLoadingPersistentWidget
// Size: 0x230 (Inherited: 0x230)
struct UFSDLevelLoadingPersistentWidget : UUserWidget {

	void SetFadeProgress(float Fade, bool ToSpaceRig, struct UTexture* loadingImage); // Function FSD.FSDLevelLoadingPersistentWidget.SetFadeProgress // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.FSDLabelWidget
// Size: 0x2a0 (Inherited: 0x2a0)
struct UFSDLabelWidget : UTextBlock {

	void SetWrapTextAt(float WrapAt); // Function FSD.FSDLabelWidget.SetWrapTextAt // (Final|Native|Public|BlueprintCallable) // @ game+0x1139cc0
	void SetWrappingPolicy(enum class ETextWrappingPolicy Policy); // Function FSD.FSDLabelWidget.SetWrappingPolicy // (Final|Native|Public|BlueprintCallable) // @ game+0x1139d40
	void SetMargin(struct FMargin NewMargin); // Function FSD.FSDLabelWidget.SetMargin // (Final|Native|Public|BlueprintCallable) // @ game+0x1139860
	void SetLineHeightPercentage(float percentage); // Function FSD.FSDLabelWidget.SetLineHeightPercentage // (Final|Native|Public|BlueprintCallable) // @ game+0x11397e0
	void SetFontSize(int32_t Size); // Function FSD.FSDLabelWidget.SetFontSize // (Final|Native|Public|BlueprintCallable) // @ game+0x1139760
	int32_t GetFontSize(); // Function FSD.FSDLabelWidget.GetFontSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1137d20
};

// Class FSD.FSDWidgetBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UFSDWidgetBlueprintLibrary : UBlueprintFunctionLibrary {

	void WidgetDelegate__DelegateSignature(struct UUserWidget* Widget); // DelegateFunction FSD.FSDWidgetBlueprintLibrary.WidgetDelegate__DelegateSignature // (Public|Delegate) // @ game+0x158ca90
	void WidgetCreatedOrReusedDelegate__DelegateSignature(bool WasCreated, struct UUserWidget* Widget, int32_t ActiveIndex); // DelegateFunction FSD.FSDWidgetBlueprintLibrary.WidgetCreatedOrReusedDelegate__DelegateSignature // (Public|Delegate) // @ game+0x158ca90
	void ToggleAnimationLooping(struct UObject* WorldContext, struct UWidgetAnimation* InAnimation, struct FWidgetAnimationSettings InSettings, bool InLoop, bool OutPlayingChanged, bool OutIsPlaying); // Function FSD.FSDWidgetBlueprintLibrary.ToggleAnimationLooping // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x113a360
	bool TextSmallerThan(struct FText Text1, struct FText Text2); // Function FSD.FSDWidgetBlueprintLibrary.TextSmallerThan // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x113a1f0
	bool TextGreaterThan(struct FText Text1, struct FText Text2); // Function FSD.FSDWidgetBlueprintLibrary.TextGreaterThan // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x113a080
	struct TArray<struct UWidget*> SortWidgetArray(struct TArray<struct UWidget*> InWidgets, struct FDelegate InCompareFunction); // Function FSD.FSDWidgetBlueprintLibrary.SortWidgetArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1139f20
	void SimpleBox(struct FPaintContext Context, struct FVector2D Position, struct FVector2D Size, struct FLinearColor Tint); // Function FSD.FSDWidgetBlueprintLibrary.SimpleBox // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1139dc0
	struct FTimerHandle SetTimerForNextTick(struct UObject* WorldContext, struct FDelegate TimerDelegate); // Function FSD.FSDWidgetBlueprintLibrary.SetTimerForNextTick // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1139b50
	void SetSizeBoxSettings(struct USizeBox* InSizeBox, struct FSizeBoxSettings InSettings); // Function FSD.FSDWidgetBlueprintLibrary.SetSizeBoxSettings // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1139a60
	void SetMousePosition(struct UObject* WorldContextObject, int32_t X, int32_t Y); // Function FSD.FSDWidgetBlueprintLibrary.SetMousePosition // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11398f0
	void SetChildrenVisibility(struct UPanelWidget* Panel, enum class ESlateVisibility Visibility, int32_t StartIndex, struct UUserWidget* OptionalClassFilter); // Function FSD.FSDWidgetBlueprintLibrary.SetChildrenVisibility // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1139630
	void ScrubAnimation(struct UObject* WorldContext, struct UWidgetAnimation* InAnimation, float Progress01); // Function FSD.FSDWidgetBlueprintLibrary.ScrubAnimation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1139530
	void ScaleTextBlockToHeight(struct UTextBlock* TextBlock, float TargetHeight, bool SetMinimimumWidth); // Function FSD.FSDWidgetBlueprintLibrary.ScaleTextBlockToHeight // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1139430
	void ScaleImageToHeight(struct UImage* Image, float TargetHeight); // Function FSD.FSDWidgetBlueprintLibrary.ScaleImageToHeight // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1139370
	void PrintStrings(struct UObject* WorldContextObject, struct TArray<struct FString> InStrings, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration); // Function FSD.FSDWidgetBlueprintLibrary.PrintStrings // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1139120
	struct FString MidIgnoringWhiteSpace(struct FString Source, int32_t Index, int32_t count); // Function FSD.FSDWidgetBlueprintLibrary.MidIgnoringWhiteSpace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1138f00
	struct FVector2D MeasureTextSize(struct FText Text, struct FSlateFontInfo Font); // Function FSD.FSDWidgetBlueprintLibrary.MeasureTextSize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1138d90
	struct FVector2D MeasureTextBlockSize(struct UTextBlock* TextBlock); // Function FSD.FSDWidgetBlueprintLibrary.MeasureTextBlockSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1138d00
	void Line(struct FPaintContext Context, struct FVector2D Pos1, struct FVector2D Pos2, struct FLinearColor Tint); // Function FSD.FSDWidgetBlueprintLibrary.Line // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1138ba0
	struct FLinearColor LerpColors(struct TArray<struct FLinearColor> Colors, bool Interpolate, float Progress01); // Function FSD.FSDWidgetBlueprintLibrary.LerpColors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1138a60
	int32_t LengthIgnoringWhitespace(struct FString Source); // Function FSD.FSDWidgetBlueprintLibrary.LengthIgnoringWhitespace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11389c0
	bool IsWindowsPlatform(struct UObject* WorldContextObject); // Function FSD.FSDWidgetBlueprintLibrary.IsWindowsPlatform // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1138940
	bool IsWhiteSpaceAt(struct FString Source, int32_t Index); // Function FSD.FSDWidgetBlueprintLibrary.IsWhiteSpaceAt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1138870
	bool IsWhiteSpace(struct FString Source); // Function FSD.FSDWidgetBlueprintLibrary.IsWhiteSpace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11387d0
	bool IsHUDVisible(struct UObject* WorldContextObject); // Function FSD.FSDWidgetBlueprintLibrary.IsHUDVisible // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11386c0
	struct FString IntToRomanNumeral(int32_t Value); // Function FSD.FSDWidgetBlueprintLibrary.IntToRomanNumeral // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1138580
	bool HasAnyVisibleChildren(struct UPanelWidget* Panel, int32_t StartIndex, struct UUserWidget* OptionalClassFilter); // Function FSD.FSDWidgetBlueprintLibrary.HasAnyVisibleChildren // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11383d0
	struct FString GetShortTimeString(int32_t TotalSeconds, bool BlinkDelimiter); // Function FSD.FSDWidgetBlueprintLibrary.GetShortTimeString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1138120
	struct UWindowWidget* GetParentWindowWidget(struct UUserWidget* InWidget); // Function FSD.FSDWidgetBlueprintLibrary.GetParentWindowWidget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1137fa0
	struct UUserWidget* GetParentUserWidget(struct UUserWidget* InWidget); // Function FSD.FSDWidgetBlueprintLibrary.GetParentUserWidget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1137f20
	struct AFSDPlayerState* GetOwningFSDPlayerState(struct UWidget* Target); // Function FSD.FSDWidgetBlueprintLibrary.GetOwningFSDPlayerState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1137ea0
	struct FText GetKeyName(struct FKey Key); // Function FSD.FSDWidgetBlueprintLibrary.GetKeyName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1137d50
	float GetFontMaxHeight(struct FSlateFontInfo Font); // Function FSD.FSDWidgetBlueprintLibrary.GetFontMaxHeight // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1137c50
	float GetFontBaseline(struct FSlateFontInfo Font); // Function FSD.FSDWidgetBlueprintLibrary.GetFontBaseline // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1137b80
	struct UWidget* GetFocusedWidget(struct UObject* WorldContextObject, struct APlayerController* Controller); // Function FSD.FSDWidgetBlueprintLibrary.GetFocusedWidget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1137ac0
	struct UUserWidget* GetFocusableParentUserWidget(struct UUserWidget* InWidget); // Function FSD.FSDWidgetBlueprintLibrary.GetFocusableParentUserWidget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1137a40
	struct FVector2D GetDrawSize(struct FPaintContext InContext); // Function FSD.FSDWidgetBlueprintLibrary.GetDrawSize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1137940
	struct UFSDCheatManager* GetCheatManager(struct UObject* WorldContextObject); // Function FSD.FSDWidgetBlueprintLibrary.GetCheatManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11378c0
	struct UWidget* FindChildWidget(struct UPanelWidget* ParentWidget, struct UUserWidget* WidgetClass, bool SearchChildren); // Function FSD.FSDWidgetBlueprintLibrary.FindChildWidget // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1137780
	struct UVerticalBox* CreateVerticalBox(struct UObject* WorldContext); // Function FSD.FSDWidgetBlueprintLibrary.CreateVerticalBox // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11375e0
	struct UTextBlock* CreateTextBlock(struct UObject* WorldContext, struct FText Text, struct FSlateFontInfo Font, enum class ETextJustify Justification, struct FLinearColor Color, bool WrapText); // Function FSD.FSDWidgetBlueprintLibrary.CreateTextBlock // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1137330
	struct USpacer* CreateSpacer(struct UObject* WorldContext, struct FVector2D Size); // Function FSD.FSDWidgetBlueprintLibrary.CreateSpacer // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1137270
	struct TArray<struct UUserWidget*> CreateOrReuseChildrenWithCallbackEx(struct UPanelWidget* Panel, int32_t count, struct UUserWidget* WidgetClass, struct FDelegate OnCreatedOrReused, struct FDelegate OnCollapsed); // Function FSD.FSDWidgetBlueprintLibrary.CreateOrReuseChildrenWithCallbackEx // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1137070
	struct TArray<struct UUserWidget*> CreateOrReuseChildrenWithCallback(struct UPanelWidget* Panel, int32_t count, struct UUserWidget* WidgetClass, struct FDelegate OnCreatedOrReused); // Function FSD.FSDWidgetBlueprintLibrary.CreateOrReuseChildrenWithCallback // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1136eb0
	struct TArray<struct UUserWidget*> CreateOrReuseChildren(struct UPanelWidget* Panel, int32_t count, struct UUserWidget* WidgetClass); // Function FSD.FSDWidgetBlueprintLibrary.CreateOrReuseChildren // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1136d80
	struct UImage* CreateImageSized(struct UObject* WorldContext, struct UTexture2D* Texture, struct FLinearColor Tint, struct FVector2D Size); // Function FSD.FSDWidgetBlueprintLibrary.CreateImageSized // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1136c50
	struct UImage* CreateImage(struct UObject* WorldContext, struct UTexture2D* Texture, struct FLinearColor Tint, bool AutoSize); // Function FSD.FSDWidgetBlueprintLibrary.CreateImage // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1136b10
	struct UHorizontalBox* CreateHorizontalBox(struct UObject* WorldContext); // Function FSD.FSDWidgetBlueprintLibrary.CreateHorizontalBox // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1136a90
	bool CompareWidgetsDelegate__DelegateSignature(struct UWidget* InFirstWidget, struct UWidget* InSecondWidget); // DelegateFunction FSD.FSDWidgetBlueprintLibrary.CompareWidgetsDelegate__DelegateSignature // (Public|Delegate) // @ game+0x158ca90
	struct FText ClampTextLength(struct FText Text, int32_t MaxLength, struct FText CutOffIndicator); // Function FSD.FSDWidgetBlueprintLibrary.ClampTextLength // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1136880
	void Box(struct FPaintContext Context, struct FVector2D Position, struct FVector2D Size, struct FSlateBrush Brush, struct FLinearColor Tint); // Function FSD.FSDWidgetBlueprintLibrary.Box // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1136600
	struct UWidget* AddWidgetToRow(struct UVerticalBox* VerticalBox, struct UWidget* Widget, int32_t MaxWidgetsPerRow, float WidgetSpacing, float RowSpacing, struct UHorizontalBoxSlot* OutSlot, struct UHorizontalBox* OutRow); // Function FSD.FSDWidgetBlueprintLibrary.AddWidgetToRow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11363f0
	struct UWidget* AddChildToVerticalBoxEx(struct UVerticalBox* VerticalBox, struct UWidget* Widget, enum class EHorizontalAlignment HorizontalAlignment, enum class EVerticalAlignment VerticalAlignment, float Size, struct FMargin Padding, struct UVerticalBoxSlot* OutSlot, struct UVerticalBox* OutVerticalBox); // Function FSD.FSDWidgetBlueprintLibrary.AddChildToVerticalBoxEx // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1136190
	struct UWidget* AddChildToUniformGridEx(struct UUniformGridPanel* GridPanel, struct UWidget* Widget, enum class EHorizontalAlignment HorizontalAlignment, enum class EVerticalAlignment VerticalAlignment, int32_t Column, int32_t Row, struct UUniformGridSlot* OutSlot, struct UUniformGridPanel* OutGridPanel); // Function FSD.FSDWidgetBlueprintLibrary.AddChildToUniformGridEx // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1135f40
	struct UWidget* AddChildToHorizontalBoxEx(struct UHorizontalBox* HorizontalBox, struct UWidget* Widget, enum class EHorizontalAlignment HorizontalAlignment, enum class EVerticalAlignment VerticalAlignment, float Size, struct FMargin Padding, struct UHorizontalBoxSlot* OutSlot, struct UHorizontalBox* OutHorizontalBox); // Function FSD.FSDWidgetBlueprintLibrary.AddChildToHorizontalBoxEx // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1135ce0
};

// Class FSD.FSDWidgetEffectsComponent
// Size: 0x100 (Inherited: 0xb0)
struct UFSDWidgetEffectsComponent : UActorComponent {
	struct TArray<struct FWidgetPing> WidgetPings; // 0xb0(0x10)
	struct TArray<struct FWidgetFade> WidgetFades; // 0xc0(0x10)
	struct TArray<struct FWidgetTextCounter> WidgetTextCounters; // 0xd0(0x10)
	struct TArray<struct FCustomCounter> CustomCounters; // 0xe0(0x10)
	struct TArray<struct FWidgetMover> WidgetMovers; // 0xf0(0x10)

	void StartTextCounter(struct UObject* WorldContext, struct UTextBlock* Widget, float Start, float End, float Duration, int32_t MaxDigits, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.StartTextCounter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1142070
	void StartCounter(struct UObject* WorldContext, struct UObject* Owner, float Start, float End, float Duration, struct FDelegate OnCount, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.StartCounter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1141e50
	void PingWidget(struct UObject* WorldContext, struct UWidget* Widget, float Amount, float Duration, enum class EPingType PingType, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.PingWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1141b60
	void MoveWidget(struct UObject* WorldContext, struct UUserWidget* Widget, struct FVector2D Start, struct FVector2D End, float Duration, enum class EMoveType MoveType, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.MoveWidget // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1141950
	void MoveOutWidget(struct UObject* WorldContext, struct UUserWidget* Widget, struct FVector2D MoveToOffset, float Duration, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.MoveOutWidget // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x11417e0
	void MoveInWidget(struct UObject* WorldContext, struct UUserWidget* Widget, struct FVector2D MoveFromOffset, float Duration, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.MoveInWidget // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1141670
	void FadeWidget(struct UObject* WorldContext, struct UUserWidget* Widget, float StartFade, float EndFade, float Duration, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.FadeWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11402d0
	void FadeOutWidget(struct UObject* WorldContext, struct UUserWidget* Widget, float Duration, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.FadeOutWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11401a0
	void FadeInWidget(struct UObject* WorldContext, struct UUserWidget* Widget, float Duration, float StartDelay); // Function FSD.FSDWidgetEffectsComponent.FadeInWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1140070
};

// Class FSD.FSDXboxUtils
// Size: 0x28 (Inherited: 0x28)
struct UFSDXboxUtils : UBlueprintFunctionLibrary {

	void ShowStoreUIForStoreItem(struct UObject* WorldContextObject, struct FString storeItemName); // Function FSD.FSDXboxUtils.ShowStoreUIForStoreItem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1141d80
	void ShowStoreUI(struct UObject* WorldContextObject); // Function FSD.FSDXboxUtils.ShowStoreUI // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1141d10
	bool ShowCheatTerminal(); // Function FSD.FSDXboxUtils.ShowCheatTerminal // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x107c270
	bool IsDCLCheckComplete(struct UObject* WorldContextObject); // Function FSD.FSDXboxUtils.IsDCLCheckComplete // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1141480
};

// Class FSD.FSDPFPUtils
// Size: 0x28 (Inherited: 0x28)
struct UFSDPFPUtils : UBlueprintFunctionLibrary {

	bool IsPlayfabLoaded(); // Function FSD.FSDPFPUtils.IsPlayfabLoaded // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11415c0
	struct FString GetPlayfabUserId(); // Function FSD.FSDPFPUtils.GetPlayfabUserId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11412a0
};

// Class FSD.TrackBuilderItem
// Size: 0x3e8 (Inherited: 0x390)
struct ATrackBuilderItem : AAnimatedItem {
	char pad_390[0x8]; // 0x390(0x08)
	struct UCrosshairAggregator* CrosshairAggregator; // 0x398(0x08)
	enum class EPlaceableObstructionType ObstructionType; // 0x3a0(0x01)
	char pad_3A1[0x3]; // 0x3a1(0x03)
	struct FVector ObstructionLocation; // 0x3a4(0x0c)
	struct FVector GroundNormal; // 0x3b0(0x0c)
	char pad_3BC[0x14]; // 0x3bc(0x14)
	struct ATrackBuilderSegment* DefaultSegmentType; // 0x3d0(0x08)
	struct ATrackBuilderSegment* NextSegment; // 0x3d8(0x08)
	bool bIsPlacingSegment; // 0x3e0(0x01)
	char pad_3E1[0x7]; // 0x3e1(0x07)

	void UpdatePlacement(struct FTransform InTransform, struct UTrackBuilderConnectPoint* InConnectPoint, bool bPlacementValid, bool InUpdateServer); // Function FSD.TrackBuilderItem.UpdatePlacement // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x121ca60
	void ServerUpdatePlacement(struct FTransform InTransform, bool bPlacementValid, struct UTrackBuilderConnectPoint* InConnectPoint); // Function FSD.TrackBuilderItem.ServerUpdatePlacement // (Net|Native|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x121bfd0
	void ServerFinishPlacement(struct FTransform FinalLocation, struct UTrackBuilderConnectPoint* ConnectPoint); // Function FSD.TrackBuilderItem.ServerFinishPlacement // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x121be90
	void ServerCancelPlacement(); // Function FSD.TrackBuilderItem.ServerCancelPlacement // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x121be40
	void ServerBeginPlaceSegment(struct UTrackBuilderUsable* InUsable); // Function FSD.TrackBuilderItem.ServerBeginPlaceSegment // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x121bd80
	void ReceiveBeginPlaceSegment(); // Function FSD.TrackBuilderItem.ReceiveBeginPlaceSegment // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_NextSegment(); // Function FSD.TrackBuilderItem.OnRep_NextSegment // (Native|Protected) // @ game+0x121bc20
	struct ATrackBuilderSegment* GetSegmentType(); // Function FSD.TrackBuilderItem.GetSegmentType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x121ba50
	void FinishPlacement(struct FTransform FinalLocation, struct UTrackBuilderConnectPoint* ConnectPoint); // Function FSD.TrackBuilderItem.FinishPlacement // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x121b760
	void CancelPlacement(); // Function FSD.TrackBuilderItem.CancelPlacement // (Native|Public|BlueprintCallable) // @ game+0x11596c0
	struct FVector AdjustInitialLocation(struct FVector Location); // Function FSD.TrackBuilderItem.AdjustInitialLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x121b220
};

// Class FSD.FuelLineBuilderItem
// Size: 0x3f8 (Inherited: 0x3e8)
struct AFuelLineBuilderItem : ATrackBuilderItem {
	struct UItemPlacerAggregator* SegmentPlacer; // 0x3e8(0x08)
	char pad_3F0[0x8]; // 0x3f0(0x08)

	void ReceivePlacementUpdated(bool InCanPlace, bool InConnecting, float InDistanceProgress); // Function FSD.FuelLineBuilderItem.ReceivePlacementUpdated // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.FuelLineEndPoint
// Size: 0x230 (Inherited: 0x220)
struct AFuelLineEndPoint : AActor {
	struct UFuelLineConnectPoint* ConnectPoint; // 0x220(0x08)
	struct UStaticMeshComponent* StaticMesh; // 0x228(0x08)

	void ReceivePing(bool InValidPlacement); // Function FSD.FuelLineEndPoint.ReceivePing // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void CallbackConnectedWithSegment(struct UTrackBuilderConnectPoint* InConnectPoint, struct ATrackBuilderSegment* InSegment); // Function FSD.FuelLineEndPoint.CallbackConnectedWithSegment // (Final|Native|Protected) // @ game+0x113fce0
};

// Class FSD.TrackBuilderConnectPoint
// Size: 0x450 (Inherited: 0x410)
struct UTrackBuilderConnectPoint : USphereComponent {
	struct FMulticastInlineDelegate OnConnectedWithSegment; // 0x410(0x10)
	struct ATrackBuilderSegment* ConnectType; // 0x420(0x08)
	struct TWeakObjectPtr<struct ATrackBuilderSegment> ConnectedSegment; // 0x428(0x08)
	float MaxConnectRadius; // 0x430(0x04)
	float ConnectDistance; // 0x434(0x04)
	struct FVector MaxAngles; // 0x438(0x0c)
	char pad_444[0xc]; // 0x444(0x0c)

	void OnRep_ConnectedSegment(); // Function FSD.TrackBuilderConnectPoint.OnRep_ConnectedSegment // (Native|Protected) // @ game+0x11c1b20
	struct FTransform GetConnectTransform(struct FTransform FromWorldTransform); // Function FSD.TrackBuilderConnectPoint.GetConnectTransform // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x121b880
	bool Disconnect(struct ATrackBuilderSegment* InSegment); // Function FSD.TrackBuilderConnectPoint.Disconnect // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x121b4a0
	void ConnectionDelegate__DelegateSignature(struct UTrackBuilderConnectPoint* InConnectPoint, struct ATrackBuilderSegment* InSegment); // DelegateFunction FSD.TrackBuilderConnectPoint.ConnectionDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool Connect(struct ATrackBuilderSegment* InSegment); // Function FSD.TrackBuilderConnectPoint.Connect // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x121b3f0
	bool CanConnectWith(struct ATrackBuilderSegment* InSegment, struct FTransform FromWorldTransform); // Function FSD.TrackBuilderConnectPoint.CanConnectWith // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x121b2d0
};

// Class FSD.FuelLineConnectPoint
// Size: 0x450 (Inherited: 0x450)
struct UFuelLineConnectPoint : UTrackBuilderConnectPoint {
};

// Class FSD.TrackBuilderSegment
// Size: 0x290 (Inherited: 0x220)
struct ATrackBuilderSegment : AActor {
	struct UTrackBuilderUsable* NextSegmentUsable; // 0x220(0x08)
	struct TWeakObjectPtr<struct APlayerCharacter> BuiltByCharacter; // 0x228(0x08)
	struct TWeakObjectPtr<struct UTrackBuilderUsable> BuiltFromUsable; // 0x230(0x08)
	struct FTrackBuilderPoint SegmentEndTransform; // 0x238(0x28)
	struct FTrackBuilderPoint ServerSegmentEndTransform; // 0x260(0x28)
	char pad_288[0x8]; // 0x288(0x08)

	bool UpdatePlacement(struct FTransform InTransform, struct UTrackBuilderConnectPoint* InConnectPoint, bool InPlacementValid, struct AItem* PlaceableItem); // Function FSD.TrackBuilderSegment.UpdatePlacement // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x12214b0
	void ReceivPlacementValidChanged(bool InIsValid); // Function FSD.TrackBuilderSegment.ReceivPlacementValidChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceivePlacementStateChanged(enum class ETrackBuildPlacementState NewState); // Function FSD.TrackBuilderSegment.ReceivePlacementStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceivePlacementChangedEnd(struct FTransform NewEndTransform, struct UTrackBuilderConnectPoint* InConnectPoint); // Function FSD.TrackBuilderSegment.ReceivePlacementChangedEnd // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x158ca90
	void ReceivePlacementChangedBegin(struct FTransform NewEndTransform, struct UTrackBuilderConnectPoint* InConnectPoint); // Function FSD.TrackBuilderSegment.ReceivePlacementChangedBegin // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x158ca90
	bool ReceiveCanPlaceAt(struct FTransform InCandidateTransform, struct UTrackBuilderConnectPoint* InConnectPoint); // Function FSD.TrackBuilderSegment.ReceiveCanPlaceAt // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x1221120
	void OnRep_SegmentEndTransform(); // Function FSD.TrackBuilderSegment.OnRep_SegmentEndTransform // (Final|Native|Protected) // @ game+0x1220d50
	struct UTrackBuilderUsable* GetTrackStartUsable(); // Function FSD.TrackBuilderSegment.GetTrackStartUsable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x12204b0
	struct AActor* GetTrackStartActor(); // Function FSD.TrackBuilderSegment.GetTrackStartActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1220480
	struct FTransform GetStartTransform(); // Function FSD.TrackBuilderSegment.GetStartTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x12203c0
	struct FTransform GetSegmentEndTransform(); // Function FSD.TrackBuilderSegment.GetSegmentEndTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1220350
	enum class ETrackBuildPlacementState GetPlacementState(); // Function FSD.TrackBuilderSegment.GetPlacementState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1220330
	struct ATrackBuilderSegment* GetNextSegment(bool bForward); // Function FSD.TrackBuilderSegment.GetNextSegment // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x12201e0
	bool GetIsSegmentEndTransformValid(); // Function FSD.TrackBuilderSegment.GetIsSegmentEndTransformValid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x121ffd0
	struct UTrackBuilderConnectPoint* GetConnectPoint(); // Function FSD.TrackBuilderSegment.GetConnectPoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x121ff80
	bool CanPlaceAt(struct FTransform InCandidateTransform, struct UTrackBuilderConnectPoint* InConnectPoint, struct AItem* PlaceableItem); // Function FSD.TrackBuilderSegment.CanPlaceAt // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x121fca0
};

// Class FSD.FuelLineSegment
// Size: 0x2c8 (Inherited: 0x290)
struct AFuelLineSegment : ATrackBuilderSegment {
	struct USplineMeshComponent* FuelLineSplineMesh; // 0x290(0x08)
	struct USplineComponent* FuelLineSplineComponent; // 0x298(0x08)
	struct UStaticMeshComponent* FuelLineEndPostMesh; // 0x2a0(0x08)
	struct USimpleHealthComponent* DeconstructHealthComponent; // 0x2a8(0x08)
	struct USceneComponent* PreviewEndPostLocation; // 0x2b0(0x08)
	float EndPostHeightOffset; // 0x2b8(0x04)
	float MaxLength; // 0x2bc(0x04)
	bool bHasMaxTurnAngle; // 0x2c0(0x01)
	char pad_2C1[0x3]; // 0x2c1(0x03)
	float MaxTurnAngle; // 0x2c4(0x04)

	void ClientUpdateStartTransform(struct FVector NewStartLocation); // Function FSD.FuelLineSegment.ClientUpdateStartTransform // (Net|Native|Event|Protected|HasDefaults|NetClient|NetValidate) // @ game+0x113ffc0
	void ChangeStartTransform(struct FTransform ChangedStartLocation); // Function FSD.FuelLineSegment.ChangeStartTransform // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x113fee0
	void CallbackOnDeath(struct UHealthComponentBase* InHealthComponent); // Function FSD.FuelLineSegment.CallbackOnDeath // (Final|Native|Protected) // @ game+0x113fe60
	void CallbackCanStartNextSegmentChanged(bool InCanStart); // Function FSD.FuelLineSegment.CallbackCanStartNextSegmentChanged // (Final|Native|Protected) // @ game+0x113fc50
};

// Class FSD.FuelLineStart
// Size: 0x258 (Inherited: 0x220)
struct AFuelLineStart : AActor {
	struct FMulticastInlineDelegate OnFuelLineConnected; // 0x220(0x10)
	struct UStaticMeshComponent* StaticMesh; // 0x230(0x08)
	struct UOutlineComponent* OutlineComponent; // 0x238(0x08)
	struct USimpleObjectInfoComponent* ObjectInfoComponent; // 0x240(0x08)
	struct UFuelLineStartUsable* UsableStartFuelLine; // 0x248(0x08)
	bool bFuelLineConnected; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)

	void ReceiveFuelLineConnected(); // Function FSD.FuelLineStart.ReceiveFuelLineConnected // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_FuelLineConnected(); // Function FSD.FuelLineStart.OnRep_FuelLineConnected // (Final|Native|Protected) // @ game+0x1141b40
	void FuelLineStartDelegate__DelegateSignature(struct AFuelLineStart* InFuelLineStart); // DelegateFunction FSD.FuelLineStart.FuelLineStartDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void CallbackNextSegmentChanged(struct UTrackBuilderUsable* InUsable, struct ATrackBuilderSegment* InSegment); // Function FSD.FuelLineStart.CallbackNextSegmentChanged // (Final|Native|Protected) // @ game+0x113fda0
};

// Class FSD.TrackBuilderUsable
// Size: 0x190 (Inherited: 0x150)
struct UTrackBuilderUsable : UInstantUsable {
	struct FMulticastInlineDelegate OnNextSegmentChanged; // 0x150(0x10)
	struct ATrackBuilderItem* BuilderItemType; // 0x160(0x08)
	struct FString ColliderName; // 0x168(0x10)
	struct USceneComponent* TrackStartComponent; // 0x178(0x08)
	struct ATrackBuilderSegment* NextSegment; // 0x180(0x08)
	struct TWeakObjectPtr<struct APlayerCharacter> InUseBy; // 0x188(0x08)

	void SegmentDelegate__DelegateSignature(struct UTrackBuilderUsable* InUsable, struct ATrackBuilderSegment* InSegment); // DelegateFunction FSD.TrackBuilderUsable.SegmentDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnRep_NextSegment(); // Function FSD.TrackBuilderUsable.OnRep_NextSegment // (Final|Native|Protected) // @ game+0x1220d30
	void OnNextSegmentDestroyed(struct AActor* InActor); // Function FSD.TrackBuilderUsable.OnNextSegmentDestroyed // (Final|Native|Protected) // @ game+0x1220cb0
	struct FTransform GetStartTransform(); // Function FSD.TrackBuilderUsable.GetStartTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1220420
	void FinishUse(struct APlayerCharacter* User, struct ATrackBuilderSegment* InSegment); // Function FSD.TrackBuilderUsable.FinishUse // (Final|Native|Public|BlueprintCallable) // @ game+0x121fec0
};

// Class FSD.FuelLineStartUsable
// Size: 0x190 (Inherited: 0x190)
struct UFuelLineStartUsable : UTrackBuilderUsable {
};

// Class FSD.StatusEffectSettings
// Size: 0x38 (Inherited: 0x30)
struct UStatusEffectSettings : UDataAsset {
	struct UStatusEffect* frozen; // 0x30(0x08)
};

// Class FSD.GameAnimationSettings
// Size: 0x30 (Inherited: 0x30)
struct UGameAnimationSettings : UDataAsset {
};

// Class FSD.UpgradeSettings
// Size: 0x140 (Inherited: 0x30)
struct UUpgradeSettings : UDataAsset {
	struct TArray<struct TSoftObjectPtr<struct UItemUpgrade>> UpgradesToCostRefund; // 0x30(0x10)
	struct TArray<int32_t> ClassAUpgradeCosts; // 0x40(0x10)
	struct TArray<int32_t> ClassBUpgradeCosts; // 0x50(0x10)
	struct TArray<int32_t> GearAUpgradeCosts; // 0x60(0x10)
	struct TArray<int32_t> GearBUpgradeCosts; // 0x70(0x10)
	struct TArray<int32_t> ArmorUpgradeCosts; // 0x80(0x10)
	struct TArray<int32_t> PickaxeUpgradeCosts; // 0x90(0x10)
	struct TArray<int32_t> ClassBoscoUpgradeCosts; // 0xa0(0x10)
	struct TArray<struct FUpgradeCostItem> ClassAResourceCosts; // 0xb0(0x10)
	struct TArray<struct FUpgradeCostItem> ClassBResourceCosts; // 0xc0(0x10)
	struct TArray<struct FUpgradeCostItem> GearAResourceCosts; // 0xd0(0x10)
	struct TArray<struct FUpgradeCostItem> GearBResourceCosts; // 0xe0(0x10)
	struct TArray<struct FUpgradeCostItem> ArmorResourceCosts; // 0xf0(0x10)
	struct TArray<struct FUpgradeCostItem> PickaxeResourceCosts; // 0x100(0x10)
	struct TArray<struct FUpgradeCostItem> ClassBoscoResourceCosts; // 0x110(0x10)
	struct TArray<struct FUpgradeCostItem> OldClassAResourceCosts; // 0x120(0x10)
	struct TArray<struct FUpgradeCostItem> OldClassBResourceCosts; // 0x130(0x10)

	void AddUpgradesFromItems(struct TArray<struct AActor*> Items); // Function FSD.UpgradeSettings.AddUpgradesFromItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x113fb20
};

// Class FSD.AfflictionSettings
// Size: 0xf8 (Inherited: 0x30)
struct UAfflictionSettings : UDataAsset {
	struct TArray<struct FRuntimeFloatCurve> IceScalers; // 0x30(0x10)
	struct TArray<struct UStaticMesh*> IceMeshes; // 0x40(0x10)
	struct FRandRange ScaleDelay; // 0x50(0x08)
	struct USoundCue* FreezeSound; // 0x58(0x08)
	struct USoundCue* IceBreakSound; // 0x60(0x08)
	struct USoundCue* BurningSound; // 0x68(0x08)
	struct USoundCue* EletrocutedSound; // 0x70(0x08)
	float HeavyStaggerMinTime; // 0x78(0x04)
	float MediumStaggerMinTime; // 0x7c(0x04)
	struct UPawnAffliction* HeavyStaggerAffliction; // 0x80(0x08)
	struct UPawnAffliction* MediumStaggerAffliction; // 0x88(0x08)
	struct UPawnAffliction* ShortStaggerAffliction; // 0x90(0x08)
	struct TArray<struct UParticleSystem*> FreezeParticles; // 0x98(0x10)
	struct TArray<struct UParticleSystem*> IceBreakParticles; // 0xa8(0x10)
	struct TArray<struct UParticleSystem*> BurningParticles; // 0xb8(0x10)
	struct TArray<struct UParticleSystem*> EletrocutedParticles; // 0xc8(0x10)
	struct TArray<struct UParticleSystem*> ExplodingParticles; // 0xd8(0x10)
	struct TArray<struct USoundCue*> ExplodingSounds; // 0xe8(0x10)
};

// Class FSD.CommunityGoalSettings
// Size: 0x58 (Inherited: 0x30)
struct UCommunityGoalSettings : UDataAsset {
	struct TArray<struct UCommunityGoalFaction*> ActiveCommunityFactions; // 0x30(0x10)
	struct TArray<struct UCommunityGoal*> ActiveCommunityGoals; // 0x40(0x10)
	struct UCommunityGoal* DSMUGoal; // 0x50(0x08)

	struct UCommunityGoal* GetGoal(enum class ECommunityGoalIndex Goal); // Function FSD.CommunityGoalSettings.GetGoal // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140db0
	struct UCommunityGoal* FindGoal(struct FString Goal); // Function FSD.CommunityGoalSettings.FindGoal // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140480
};

// Class FSD.GameData
// Size: 0xa70 (Inherited: 0x28)
struct UGameData : UObject {
	SoftClassProperty BarrelClass; // 0x28(0x28)
	struct FGVisibilityGroups VisibilityGroups; // 0x50(0x58)
	struct UNiagaraParameterCollection* NiagaraParameterCollection; // 0xa8(0x08)
	struct UDLCBase* AlwaysLockedDLC; // 0xb0(0x08)
	struct UPromotionRewardsSettings* PromotionRewardsSettings; // 0xb8(0x08)
	struct UFSDEventCollection* FsdEventsSettings; // 0xc0(0x08)
	struct UGameActivitySettings* GameActivitySettings; // 0xc8(0x08)
	struct UDanceSettings* DanceSettings; // 0xd0(0x08)
	struct UGameAnimationSettings* AnimationSettings; // 0xd8(0x08)
	struct UEnemySettings* EnemySettings; // 0xe0(0x08)
	struct UDamageSettings* DamageSettings; // 0xe8(0x08)
	struct UPlanetZoneSetup* ZoneSettings; // 0xf0(0x08)
	struct UTreasureSettings* TreasureSettings; // 0xf8(0x08)
	struct UDrinkSettings* DrinkSettings; // 0x100(0x08)
	struct UUpgradeSettings* UpgradeSettings; // 0x108(0x08)
	struct USpawnSettings* SpawnSettings; // 0x110(0x08)
	struct UKeyBindingSettings* KeyBindingSettings; // 0x118(0x08)
	struct UDeepDiveSettings* DeepDiveSettings; // 0x120(0x08)
	struct UEncounterSettings* EncounterSettings; // 0x128(0x08)
	struct UForginSettings* ForgingSettings; // 0x130(0x08)
	struct USchematicSettings* SchematicSettings; // 0x138(0x08)
	struct UItemSkinSettings* SkinSettings; // 0x140(0x08)
	struct USpecialEventSettings* SpecialEventSettings; // 0x148(0x08)
	struct UProceduralSettings* ProceduralSettings; // 0x150(0x08)
	struct UPickaxeSettings* PickaxeSettings; // 0x158(0x08)
	struct UFSDTagSettings* TagSettings; // 0x160(0x08)
	struct UItemSettings* ItemSettings; // 0x168(0x08)
	struct UShowroomSettings* ShowroomSettings; // 0x170(0x08)
	struct UVictoryPoseSettings* VictoryPoseSettings; // 0x178(0x08)
	struct UFSDTutorialSettings* TutorialSettings; // 0x180(0x08)
	struct ULegacySettings* LegacySettings; // 0x188(0x08)
	struct UEffectSettings* EffectSettings; // 0x190(0x08)
	struct UAfflictionSettings* AfflictionSettings; // 0x198(0x08)
	struct UCommunityGoalSettings* CommunityGoalSettings; // 0x1a0(0x08)
	struct UDailyDealSettings* DailyDealSettings; // 0x1a8(0x08)
	struct FGDMissionStats MissionStats; // 0x1b0(0x158)
	struct FGDMilestones Milestones; // 0x308(0x10)
	struct FGDPerks perks; // 0x318(0x90)
	struct FGDItemCategoryIDs ItemCategoryIDs; // 0x3a8(0x40)
	struct TArray<struct UTexture2D*> LoadoutIconList; // 0x3e8(0x10)
	struct UMinersManual* MinersManual; // 0x3f8(0x08)
	struct FGDDamageClasses DamageClasses; // 0x400(0x48)
	struct FGDStats Stats; // 0x448(0x128)
	struct FGDResources Resources; // 0x570(0xe0)
	struct FGDTerrainTypes TerrainTypes; // 0x650(0x10)
	struct FGDGameStatsTracking GameStatsTracking; // 0x660(0x20)
	struct FGDAudio Audio; // 0x680(0x50)
	struct FGDDifficulty Difficulty; // 0x6d0(0x10)
	struct UStatusEffectSettings* StatusEffects; // 0x6e0(0x08)
	struct FGDCharacterRetirement Retirement; // 0x6e8(0xc0)
	struct FGDPlayerAndCharacterProgression PlayerAndCharacterProgression; // 0x7a8(0xa0)
	struct UCharacterSettings* CharacterSettings; // 0x848(0x08)
	struct UAchievementList* Achievements; // 0x850(0x08)
	struct UDataTable* SchematicGATable; // 0x858(0x08)
	struct TArray<struct UMissionTemplate*> TestMissions; // 0x860(0x10)
	struct TSoftObjectPtr<struct UBiome> TestBiome; // 0x870(0x28)
	struct UGlobalMissionSetup* MissionSetup; // 0x898(0x08)
	SoftClassProperty CampaignManagerClass; // 0x8a0(0x28)
	struct UPlayerCharacterID* BoscoID; // 0x8c8(0x08)
	struct TMap<struct UPlayerCharacterID*, struct UInventoryList*> InventoryLists; // 0x8d0(0x50)
	struct UBiome* DefaultBiome; // 0x920(0x08)
	struct TArray<struct FText> GenericBiomeQuotes; // 0x928(0x10)
	struct UMissionTemplate* DefaultMission; // 0x938(0x08)
	struct USeasonSettings* SeasonSettings; // 0x940(0x08)
	struct AProceduralSetup* CaveGeneratorPLSClass; // 0x948(0x08)
	struct TArray<struct UItemRefundList*> ItemRefunds; // 0x950(0x10)
	struct TArray<struct USubsystem*> BlueprintSubSystems; // 0x960(0x10)
	struct UPlayerCharacterID* DefaultCharacterID; // 0x970(0x08)
	struct UPlayerCharacterID* DefaultEditorCharacterID; // 0x978(0x08)
	struct FGameplayTag XBoxExcludeRoomTag; // 0x980(0x08)
	char pad_988[0xe8]; // 0x988(0xe8)

	void UnloadPreloadedAssets(); // Function FSD.GameData.UnloadPreloadedAssets // (Final|Native|Public|BlueprintCallable) // @ game+0x8dc380
	void LoadDefaultAssetsBlocking(struct UAsyncManager* AsyncManager); // Function FSD.GameData.LoadDefaultAssetsBlocking // (Final|Native|Public|BlueprintCallable) // @ game+0x11415f0
	bool IsPerkTierUnLocked(struct UObject* WorldContext, int32_t Tier); // Function FSD.GameData.IsPerkTierUnLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1141500
	bool IsCheatConsolesEnabled(); // Function FSD.GameData.IsCheatConsolesEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x8ce770
	int32_t GetRequiredPerkClaimsForTier(int32_t Tier); // Function FSD.GameData.GetRequiredPerkClaimsForTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11413f0
	struct TArray<struct UPlayerCharacterID*> GetRankedHeroIDs(); // Function FSD.GameData.GetRankedHeroIDs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1141360
	struct TArray<struct APlayerCharacter*> GetRankedHeroClasses(); // Function FSD.GameData.GetRankedHeroClasses // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1141320
	struct FText GetPlayerRankName(int32_t Rank); // Function FSD.GameData.GetPlayerRankName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1141200
	struct APlayerCharacter* GetPlayerClassFromID(struct UPlayerCharacterID* ID); // Function FSD.GameData.GetPlayerClassFromID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1141170
	struct UPlayerCharacterID* GetPlayerCharacterID(struct FGuid ID); // Function FSD.GameData.GetPlayerCharacterID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11410c0
	void GetPerkTierState(struct UObject* WorldContext, int32_t Tier, bool TierUnLocked, int32_t NextRequiredCount, int32_t NextProgressCount); // Function FSD.GameData.GetPerkTierState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140f00
	struct UInventoryList* GetInventoryList(struct UPlayerCharacterID* characterID); // Function FSD.GameData.GetInventoryList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140e70
	int32_t GetHighestPerkTier(); // Function FSD.GameData.GetHighestPerkTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140e40
	struct UDifficultySetting* GetDifficultySetting(int32_t Index); // Function FSD.GameData.GetDifficultySetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140d20
	int32_t GetDifficultyIndex(struct UDifficultySetting* Difficulty); // Function FSD.GameData.GetDifficultyIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140c90
	struct APlayerCharacter* GetDefaultEditorCharacter(); // Function FSD.GameData.GetDefaultEditorCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140c50
	struct APlayerCharacter* GetDefaultCharacter(); // Function FSD.GameData.GetDefaultCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140c10
	struct FRetirementCostItem GetCharacterRetirementCost(struct UObject* WorldContext, struct UPlayerCharacterID* ID); // Function FSD.GameData.GetCharacterRetirementCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140b00
	struct TArray<struct UPerkAsset*> GetCharacterNonEquippedPerks(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.GameData.GetCharacterNonEquippedPerks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140a00
	struct TArray<struct UPerkAsset*> GetCharacterEquippedPerks(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.GameData.GetCharacterEquippedPerks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140900
	struct TArray<struct UPerkAsset*> GetAvailablePerks(); // Function FSD.GameData.GetAvailablePerks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11408d0
	int32_t GetAmountOfPurchasedPerks(struct UObject* WorldContext); // Function FSD.GameData.GetAmountOfPurchasedPerks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140840
	struct TArray<struct UHUDVisibilityGroup*> GetAllVisibilityGroups(); // Function FSD.GameData.GetAllVisibilityGroups // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140630
	struct TArray<struct UMissionStat*> GetAllMissionStats(); // Function FSD.GameData.GetAllMissionStats // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11405b0
	struct TArray<struct UMissionStat*> GetAllInfirmaryStats(); // Function FSD.GameData.GetAllInfirmaryStats // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1140530
	int32_t CalculateClaimablePerkPoints(struct UObject* WorldContext); // Function FSD.GameData.CalculateClaimablePerkPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x113fbc0
};

// Class FSD.DLCBase
// Size: 0x30 (Inherited: 0x30)
struct UDLCBase : UDataAsset {

	void QueryAllDLC(); // Function FSD.DLCBase.QueryAllDLC // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1146a70
	bool IsUnlocked(); // Function FSD.DLCBase.IsUnlocked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xbaf250
	bool IsDLCUnLocked(struct UDLCBase* dlc); // Function FSD.DLCBase.IsDLCUnLocked // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11463b0
};

// Class FSD.GameDLC
// Size: 0x1f0 (Inherited: 0x30)
struct UGameDLC : UDLCBase {
	char pad_30[0x8]; // 0x30(0x08)
	int32_t SteamID; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FString SteamName; // 0x40(0x10)
	struct FString OddishID; // 0x50(0x10)
	struct FString XBoxDLCName; // 0x60(0x10)
	struct TMap<struct FString, struct FString> SonyAdditionalContentLabelMap; // 0x70(0x50)
	struct FString UWPStoreID; // 0xc0(0x10)
	bool ShowOnDLCScreen; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
	struct TSoftObjectPtr<struct UTexture2D> Banner; // 0xd8(0x28)
	struct TSoftObjectPtr<struct UTexture2D> Banner_16_10; // 0x100(0x28)
	SoftClassProperty AnnouncementWidget; // 0x128(0x28)
	struct FGuid SaveGameID; // 0x150(0x10)
	struct TMap<struct UResourceData*, int32_t> Resources; // 0x160(0x50)
	int32_t PerformancePoints; // 0x1b0(0x04)
	char pad_1B4[0x4]; // 0x1b4(0x04)
	struct TSoftObjectPtr<struct UFileMediaSource> Movie; // 0x1b8(0x28)
	char pad_1E0[0x10]; // 0x1e0(0x10)

	bool ShouldBeAnnounced(struct UObject* WorldContext); // Function FSD.GameDLC.ShouldBeAnnounced // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1146f50
	bool OpenStorePage(struct UObject* WorldContext); // Function FSD.GameDLC.OpenStorePage // (Final|Native|Public|BlueprintCallable) // @ game+0x1146950
	void MarkAnnounced(struct UObject* WorldContext); // Function FSD.GameDLC.MarkAnnounced // (Final|Native|Public|BlueprintCallable) // @ game+0x1146520
	struct FString GetSonyAdditionalContentId(); // Function FSD.GameDLC.GetSonyAdditionalContentId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1146210
	struct UTexture2D* GetBanner_16_10(); // Function FSD.GameDLC.GetBanner_16_10 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1146050
	struct UTexture2D* GetBanner(); // Function FSD.GameDLC.GetBanner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1146020
};

// Class FSD.GameDLCSettings
// Size: 0x80 (Inherited: 0x30)
struct UGameDLCSettings : UDataAsset {
	struct TSet<struct UGameDLC*> StoreDLCs; // 0x30(0x50)

	struct TArray<struct UGameDLC*> GetStoreDLCs(struct UObject* WorldContext); // Function FSD.GameDLCSettings.GetStoreDLCs // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11462d0
	struct TArray<struct UGameDLC*> GetAnnouncableDLCs(struct UObject* WorldContext); // Function FSD.GameDLCSettings.GetAnnouncableDLCs // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1145f40
};

// Class FSD.TimedDLC
// Size: 0x40 (Inherited: 0x30)
struct UTimedDLC : UDLCBase {
	struct FDateTime StartDate; // 0x30(0x08)
	struct FDateTime EndDate; // 0x38(0x08)
};

// Class FSD.AlwaysLockedDLC
// Size: 0x30 (Inherited: 0x30)
struct UAlwaysLockedDLC : UDLCBase {
};

// Class FSD.PlatformExclusiveDLC
// Size: 0x38 (Inherited: 0x30)
struct UPlatformExclusiveDLC : UDLCBase {
	enum class EFSDTargetPlatform Platform; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class FSD.AndDLC
// Size: 0x40 (Inherited: 0x30)
struct UAndDLC : UDLCBase {
	struct TArray<struct UDLCBase*> DLCs; // 0x30(0x10)
};

// Class FSD.OrDLC
// Size: 0x40 (Inherited: 0x30)
struct UOrDLC : UDLCBase {
	struct TArray<struct UDLCBase*> DLCs; // 0x30(0x10)
};

// Class FSD.NotDLC
// Size: 0x38 (Inherited: 0x30)
struct UNotDLC : UDLCBase {
	struct UDLCBase* dlc; // 0x30(0x08)
};

// Class FSD.EventRewardFrame
// Size: 0x250 (Inherited: 0x220)
struct AEventRewardFrame : AActor {
	struct USpecialEventUsableComponent* EventUsable; // 0x220(0x08)
	struct TArray<struct AEventRewardDispenser*> Dispensers; // 0x228(0x10)
	bool keyInserted; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)
	struct TArray<struct FString> EventPlayerIDs; // 0x240(0x10)

	void TurnOff(); // Function FSD.EventRewardFrame.TurnOff // (Final|Native|Public|BlueprintCallable) // @ game+0x1147280
	void SetKeyInserted(bool keyInserted); // Function FSD.EventRewardFrame.SetKeyInserted // (Final|Native|Public|BlueprintCallable) // @ game+0x1146ca0
	void SetDispenseRewards(bool dispensRewards); // Function FSD.EventRewardFrame.SetDispenseRewards // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1146b90
	void RegisterDispenser(struct AEventRewardDispenser* Dispenser); // Function FSD.EventRewardFrame.RegisterDispenser // (Final|Native|Protected|BlueprintCallable) // @ game+0x1146a90
	bool GetDispensRewards(); // Function FSD.EventRewardFrame.GetDispensRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11460a0
};

// Class FSD.EventRewardDispenser
// Size: 0x260 (Inherited: 0x220)
struct AEventRewardDispenser : AActor {
	struct FUniqueNetIdRepl PlayerId; // 0x220(0x28)
	struct AEventRewardFrame* DispenserFrame; // 0x248(0x08)
	bool PoweredUp; // 0x250(0x01)
	bool IsActivated; // 0x251(0x01)
	char pad_252[0x6]; // 0x252(0x06)
	struct USchematic* SelectedReward; // 0x258(0x08)

	void SetSelectedReward(struct USchematic* InReward); // Function FSD.EventRewardDispenser.SetSelectedReward // (Final|Native|Public|BlueprintCallable) // @ game+0x1146db0
	bool PowerUp(struct APlayerCharacter* InPlayerCharacter); // Function FSD.EventRewardDispenser.PowerUp // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11469e0
	void OnRewardSelected(); // Function FSD.EventRewardDispenser.OnRewardSelected // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_SelectedReward(); // Function FSD.EventRewardDispenser.OnRep_SelectedReward // (Final|Native|Protected) // @ game+0x1146810
	void OnRep_PoweredUp(); // Function FSD.EventRewardDispenser.OnRep_PoweredUp // (Final|Native|Protected) // @ game+0x11467f0
	void OnRep_PlayerId(); // Function FSD.EventRewardDispenser.OnRep_PlayerId // (Final|Native|Protected) // @ game+0x11467d0
	void OnRep_IsActivated(); // Function FSD.EventRewardDispenser.OnRep_IsActivated // (Final|Native|Protected) // @ game+0x1146750
	void OnPoweredUp(); // Function FSD.EventRewardDispenser.OnPoweredUp // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnOwnerAssigned(); // Function FSD.EventRewardDispenser.OnOwnerAssigned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnOpenDispenser(); // Function FSD.EventRewardDispenser.OnOpenDispenser // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	bool IsOwningPlayer(struct APlayerCharacter* PlayerCharacter); // Function FSD.EventRewardDispenser.IsOwningPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1146490
	struct APlayerCharacter* GetPlayerCharacter(); // Function FSD.EventRewardDispenser.GetPlayerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11461a0
	struct AFSDPlayerState* GetPlayer(); // Function FSD.EventRewardDispenser.GetPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1146170
};

// Class FSD.EventRewardType
// Size: 0xc8 (Inherited: 0x30)
struct UEventRewardType : UDataAsset {
	struct FText Title; // 0x30(0x18)
	struct TSoftObjectPtr<struct UTexture2D> IconFront; // 0x48(0x28)
	struct TSoftObjectPtr<struct UTexture2D> IconBack; // 0x70(0x28)
	struct FLinearColor IconFrontTint; // 0x98(0x10)
	struct FLinearColor IconBackTint; // 0xa8(0x10)
	struct FLinearColor BackgroundTint; // 0xb8(0x10)
};

// Class FSD.EventStarterButton
// Size: 0x248 (Inherited: 0x220)
struct AEventStarterButton : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct USingleUsableComponent* Usable; // 0x228(0x08)
	struct FMulticastInlineDelegate OnBootupEvent; // 0x230(0x10)
	char pad_240[0x4]; // 0x240(0x04)
	bool Booted; // 0x244(0x01)
	bool IsOpenForUse; // 0x245(0x01)
	bool IsEventActive; // 0x246(0x01)
	char pad_247[0x1]; // 0x247(0x01)

	void SetIsEventActive(bool IsEventActive); // Function FSD.EventStarterButton.SetIsEventActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1146c20
	void OnUseProgress(float Progress); // Function FSD.EventStarterButton.OnUseProgress // (Final|Native|Public) // @ game+0x11468d0
	void OnRep_OpenForUse(); // Function FSD.EventStarterButton.OnRep_OpenForUse // (Final|Native|Protected) // @ game+0x11467b0
	void OnRep_Booted(); // Function FSD.EventStarterButton.OnRep_Booted // (Final|Native|Protected) // @ game+0x11466d0
	void OnOpenedForUse(bool wasOpened); // Function FSD.EventStarterButton.OnOpenedForUse // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnBooted(); // Function FSD.EventStarterButton.OnBooted // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void CloseForUse(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.EventStarterButton.CloseForUse // (Final|Native|Public) // @ game+0x1145c00
	void BootUpEvent(); // Function FSD.EventStarterButton.BootUpEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1145bc0
};

// Class FSD.GameEventAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UGameEventAnimInstance : UAnimInstance {
	float StageProgress; // 0x268(0x04)
	bool IsEventActive; // 0x26c(0x01)
	bool AreEventStartersActive; // 0x26d(0x01)
	bool EventFailed; // 0x26e(0x01)
};

// Class FSD.EventStarterAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UEventStarterAnimInstance : UAnimInstance {
	float UseProgress; // 0x268(0x04)
	bool IsOpenForUse; // 0x26c(0x01)
	bool IsBooted; // 0x26d(0x01)
	bool IsEventActive; // 0x26e(0x01)
};

// Class FSD.CoreInfuserAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UCoreInfuserAnimInstance : UAnimInstance {
	bool PoweredUp; // 0x268(0x01)
	bool IsOpen; // 0x269(0x01)
	bool IsRewardSelected; // 0x26a(0x01)

	void OnRewardSelected(); // Function FSD.CoreInfuserAnimInstance.OnRewardSelected // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.CoreInfuserPlatformAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UCoreInfuserPlatformAnimInstance : UAnimInstance {
	bool keyInserted; // 0x268(0x01)
	bool dispensRewards; // 0x269(0x01)
};

// Class FSD.EventParticipant
// Size: 0x28 (Inherited: 0x28)
struct UEventParticipant : UInterface {

	bool SetupEvent(struct AGameEvent* GameEvent); // Function FSD.EventParticipant.SetupEvent // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1146eb0
	void OnEventTriggered(); // Function FSD.EventParticipant.OnEventTriggered // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x11466b0
	void OnEventProgress(float Progress); // Function FSD.EventParticipant.OnEventProgress // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1146630
	void OnEventOpened(); // Function FSD.EventParticipant.OnEventOpened // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void OnEventFinished(bool eventSuccess); // Function FSD.EventParticipant.OnEventFinished // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x11465a0
	bool AdvanceOneObjective(); // Function FSD.EventParticipant.AdvanceOneObjective // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1145b90
	bool AddEventProgress(float Progress); // Function FSD.EventParticipant.AddEventProgress // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1145a80
};

// Class FSD.GameFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UGameFunctionLibrary : UBlueprintFunctionLibrary {

	void SpawnOrUpdateAudio2D(struct UObject* WorldContext, struct UAudioComponent* AudioComponent, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, struct FName FloatParamName, float FloatParam); // Function FSD.GameFunctionLibrary.SpawnOrUpdateAudio2D // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x114c270
	void SetUsePushToTalk(bool Enable); // Function FSD.GameFunctionLibrary.SetUsePushToTalk // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x114c1f0
	void SetGlobalGravityZ(struct UObject* WorldContextObject, float GravityZ); // Function FSD.GameFunctionLibrary.SetGlobalGravityZ // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x114c0b0
	void SetGlobalGravityScale(struct UObject* WorldContextObject, float GravityScale); // Function FSD.GameFunctionLibrary.SetGlobalGravityScale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x114bff0
	bool IsWorldTickEnabled(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.IsWorldTickEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114ba50
	void IsTearingDown(struct UObject* caller, bool IsTearingDown); // Function FSD.GameFunctionLibrary.IsTearingDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x114b970
	bool IsPlayingOffline(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.IsPlayingOffline // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b8c0
	bool IsPlayInEditor(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.IsPlayInEditor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b840
	struct UWindowManager* GetWindowManager(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetWindowManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b700
	bool GetUsePushToTalk(); // Function FSD.GameFunctionLibrary.GetUsePushToTalk // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b6d0
	struct UWindowWidget* GetTopWindow(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetTopWindow // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b650
	struct FString GetProjectVersion(); // Function FSD.GameFunctionLibrary.GetProjectVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b590
	int32_t GetNumPlayers(struct UObject* WorldContext); // Function FSD.GameFunctionLibrary.GetNumPlayers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b4d0
	int32_t GetNumAdditionalPlayers(struct UObject* WorldContext); // Function FSD.GameFunctionLibrary.GetNumAdditionalPlayers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b450
	struct FString GetMajorProjectVersion(); // Function FSD.GameFunctionLibrary.GetMajorProjectVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b2c0
	struct APlayerCharacter* GetLocalPlayerCharacter(struct UObject* WorldContext); // Function FSD.GameFunctionLibrary.GetLocalPlayerCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b240
	struct UGoogleAnalyticsWrapper* GetGoogleAnalyticsWrapper(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetGoogleAnalyticsWrapper // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b1a0
	float GetGlobalGravityZ(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetGlobalGravityZ // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b110
	struct AFSDGameModeSpaceRig* GetFSDSRGameMode(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetFSDSRGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b010
	struct UFSDSaveGame* GetFSDSaveGame(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetFSDSaveGame // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114b090
	struct AFSDGameState* GetFSDGameState(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetFSDGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114af90
	struct AFSDGameMode* GetFSDGameMode(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetFSDGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114af10
	struct UFSDGameInstance* GetFSDGameInstance(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetFSDGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114ae90
	struct UGameData* GetFSDGameData(); // Function FSD.GameFunctionLibrary.GetFSDGameData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114ae60
	struct UDeepDiveManager* GetDeepDiveManager(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetDeepDiveManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114ade0
	struct ADeepCSGWorld* GetCSGWorld(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetCSGWorld // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114abb0
	int32_t GetChangelist(); // Function FSD.GameFunctionLibrary.GetChangelist // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114acb0
	struct UCampaignManager* GetCampaingManager(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetCampaingManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114ac30
	struct UAsyncManager* GetAsyncManager(struct UObject* WorldContextObject); // Function FSD.GameFunctionLibrary.GetAsyncManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114ab30
};

// Class FSD.GameModeFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UGameModeFunctionLibrary : UBlueprintFunctionLibrary {

	struct FTransform FindRandomEscapePodLocation(struct UObject* WorldContextObject); // Function FSD.GameModeFunctionLibrary.FindRandomEscapePodLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x114aa70
	struct FTransform FindEscapePodLocationAtDistance(struct UObject* WorldContextObject, float Distance, float aboveDistanceBias, struct AActor* optionalFrom); // Function FSD.GameModeFunctionLibrary.FindEscapePodLocationAtDistance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x114a8e0
};

// Class FSD.ResourceBasedObjective
// Size: 0x178 (Inherited: 0x178)
struct UResourceBasedObjective : UObjective {
};

// Class FSD.GatherGemsObjective
// Size: 0x190 (Inherited: 0x178)
struct UGatherGemsObjective : UResourceBasedObjective {
	int32_t GemsRequired; // 0x178(0x04)
	float GemsSpawnedModifier; // 0x17c(0x04)
	int32_t GemsCollected; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct UGemResourceData* GemResource; // 0x188(0x08)

	void OnResourceChanged(struct UCappedResource* CappedResource, float Amount); // Function FSD.GatherGemsObjective.OnResourceChanged // (Final|Native|Protected) // @ game+0x114bdb0
	void OnRep_GemsCollected(int32_t prevAmount); // Function FSD.GatherGemsObjective.OnRep_GemsCollected // (Final|Native|Protected) // @ game+0x107ea10
};

// Class FSD.GatheItemsObjective
// Size: 0x190 (Inherited: 0x178)
struct UGatheItemsObjective : UResourceBasedObjective {
	int32_t ItemsRequired; // 0x178(0x04)
	float ItemsSpawnedModifier; // 0x17c(0x04)
	int32_t ItemsCollected; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct UCollectableResourceData* ItemResource; // 0x188(0x08)

	void OnResourceChanged(struct UCappedResource* CappedResource, float Amount); // Function FSD.GatheItemsObjective.OnResourceChanged // (Final|Native|Protected) // @ game+0x114bce0
	void OnRep_ItemsCollected(int32_t prevAmount); // Function FSD.GatheItemsObjective.OnRep_ItemsCollected // (Final|Native|Protected) // @ game+0x107ea10
};

// Class FSD.BasicThrowableItem
// Size: 0x2b8 (Inherited: 0x260)
struct ABasicThrowableItem : ACarriableItem {
	struct UBoxComponent* BoxComp; // 0x260(0x08)
	struct USphereComponent* UseSphere; // 0x268(0x08)
	struct UCarriableComponent* CarriableComp; // 0x270(0x08)
	struct UInstantUsable* UsableComp; // 0x278(0x08)
	struct UStaticMeshComponent* WorldMeshComp; // 0x280(0x08)
	struct UFirstPersonStaticMeshComponent* ViewMeshComp; // 0x288(0x08)
	char pad_290[0x10]; // 0x290(0x10)
	struct USoundCue* ImpactSound; // 0x2a0(0x08)
	float SquaredMinImpactForce; // 0x2a8(0x04)
	float ImpactAudioResetTime; // 0x2ac(0x04)
	float SquaredMinThrowforce; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)

	void ThrowItem(struct FVector throwForce); // Function FSD.BasicThrowableItem.ThrowItem // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x114c470
	void ResetImpactSound(); // Function FSD.BasicThrowableItem.ResetImpactSound // (Final|Native|Private) // @ game+0x114bfd0
	void OnUsed(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.BasicThrowableItem.OnUsed // (Final|Native|Public) // @ game+0x114bf10
	void OnUsableChanged(bool CanUse); // Function FSD.BasicThrowableItem.OnUsableChanged // (Final|Native|Public) // @ game+0x114be80
	void OnPickedUp(); // Function FSD.BasicThrowableItem.OnPickedUp // (Final|Native|Public) // @ game+0x114bcc0
	void OnDropped(); // Function FSD.BasicThrowableItem.OnDropped // (Final|Native|Public) // @ game+0x114bca0
	void OnComponentHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.BasicThrowableItem.OnComponentHit // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x114bad0
};

// Class FSD.Gem
// Size: 0x278 (Inherited: 0x260)
struct AGem : ACarriableItem {
	struct UCarriableInstantUsable* Usable; // 0x260(0x08)
	struct UResourceData* ResourceType; // 0x268(0x08)
	float ResourceAmount; // 0x270(0x04)
	bool hasBeenReleased; // 0x274(0x01)
	char pad_275[0x3]; // 0x275(0x03)

	void SetHasBeenReleased(bool hasBeenReleased); // Function FSD.Gem.SetHasBeenReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x114c170
	bool GetHasBeenReleased(); // Function FSD.Gem.GetHasBeenReleased // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114b220
};

// Class FSD.ResourcePouch
// Size: 0x288 (Inherited: 0x260)
struct AResourcePouch : ACarriableItem {
	struct UCarriableInstantUsable* Usable; // 0x260(0x08)
	struct USoundCue* ImpactGroundSound; // 0x268(0x08)
	char pad_270[0x18]; // 0x270(0x18)

	void ActorWasHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.ResourcePouch.ActorWasHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x114a630
};

// Class FSD.GemTracker
// Size: 0xb8 (Inherited: 0xb0)
struct UGemTracker : UActorComponent {
	struct FName TrackName; // 0xb0(0x08)
};

// Class FSD.GemProximityTracker
// Size: 0xd0 (Inherited: 0xb0)
struct UGemProximityTracker : UActorComponent {
	struct TArray<struct TWeakObjectPtr<struct UGemTracker>> Trackers; // 0xb0(0x10)
	struct TArray<struct FTrackPositionList> TrackerLists; // 0xc0(0x10)
};

// Class FSD.GemResourceData
// Size: 0x158 (Inherited: 0xf0)
struct UGemResourceData : UResourceData {
	struct UDebrisPositioning* DebrisPositioning; // 0xf0(0x08)
	bool CheckIfCompletelyCoveredByTerrain; // 0xf8(0x01)
	char pad_F9[0x3]; // 0xf9(0x03)
	struct FIRandRange GemValue; // 0xfc(0x08)
	char pad_104[0x4]; // 0x104(0x04)
	struct UGemResourceCreator* ResourceCreator; // 0x108(0x08)
	float InfluencerRange; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct TArray<struct TSoftObjectPtr<struct UDebrisBase>> Debris; // 0x118(0x10)
	struct TArray<SoftClassProperty> GemClasses; // 0x128(0x10)
	struct TArray<struct AGem*> GemClassesLoaded; // 0x138(0x10)
	struct TArray<struct UDebrisBase*> DebrisLoaded; // 0x148(0x10)

	int32_t GetCollectedGemsCreditValue(struct AFSDGameState* GameState); // Function FSD.GemResourceData.GetCollectedGemsCreditValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114ad60
	int32_t GetCollectedGemsAmount(struct AFSDGameState* GameState); // Function FSD.GemResourceData.GetCollectedGemsAmount // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x114ace0
};

// Class FSD.GemResourceCreator
// Size: 0x40 (Inherited: 0x30)
struct UGemResourceCreator : UDataAsset {
	struct UGemResourceData* ResourceData; // 0x30(0x08)
	bool CheckIfFreeSpaceAbove; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t SearchSize; // 0x3c(0x04)
};

// Class FSD.RandomGemResourceCreator
// Size: 0x48 (Inherited: 0x40)
struct URandomGemResourceCreator : UGemResourceCreator {
	struct UCurveFloat* PlacementDistanceProbabilityCurve; // 0x40(0x08)
};

// Class FSD.DistributedGemResourceCreator
// Size: 0x48 (Inherited: 0x40)
struct UDistributedGemResourceCreator : UGemResourceCreator {
	struct UCurveFloat* PlacementDistanceProbabilityCurve; // 0x40(0x08)
};

// Class FSD.GeneratedMission
// Size: 0x118 (Inherited: 0x28)
struct UGeneratedMission : UObject {
	struct UBiome* Biome; // 0x28(0x08)
	int32_t Seed; // 0x30(0x04)
	int32_t GlobalSeed; // 0x34(0x04)
	struct UMissionTemplate* Template; // 0x38(0x08)
	struct FText MissionName; // 0x40(0x18)
	struct UObjective* PrimaryObjective; // 0x58(0x08)
	struct UObjective* SecondaryObjective; // 0x60(0x08)
	struct TMap<struct UMutator*, struct FGMMutatorItem> Mutators; // 0x68(0x50)
	struct TArray<struct UMissionWarning*> MissionWarnings; // 0xb8(0x10)
	struct UMissionMutator* MissionMutator; // 0xc8(0x08)
	struct UMissionComplexity* ComplexityLimit; // 0xd0(0x08)
	struct UMissionDuration* DurationLimit; // 0xd8(0x08)
	struct UMissionDNA* MissionDNA; // 0xe0(0x08)
	enum class EMissionStructure MissionStructure; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct TSoftObjectPtr<struct ULevelSequence> LoaderLevelSequence; // 0xf0(0x28)

	void Recieve_SetupPLS(struct AProceduralSetup* pls); // Function FSD.GeneratedMission.Recieve_SetupPLS // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	bool IsSingleMission(); // Function FSD.GeneratedMission.IsSingleMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114b940
	bool IsLocked(struct AFSDPlayerController* Player); // Function FSD.GeneratedMission.IsLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114b7b0
	bool IsDeepDive(); // Function FSD.GeneratedMission.IsDeepDive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114b780
	struct FObjectiveMissionIcon GetSecondaryObjectiveIcon(); // Function FSD.GeneratedMission.GetSecondaryObjectiveIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114b610
	struct AProceduralSetup* GetPLS(); // Function FSD.GeneratedMission.GetPLS // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114b550
	struct TArray<struct UMutator*> GetMutators(struct UMutator* mutatorClass); // Function FSD.GeneratedMission.GetMutators // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114b3b0
	float GetMissionScale(); // Function FSD.GeneratedMission.GetMissionScale // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114b370
	struct UMissionDNA* GetMissionDNA(); // Function FSD.GeneratedMission.GetMissionDNA // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114b340
	struct AProceduralSetup* CreatePLS(int32_t Seed); // Function FSD.GeneratedMission.CreatePLS // (Final|Native|Public|BlueprintCallable) // @ game+0x114a850
	bool AreMissionsEqual(struct UGeneratedMission* Other); // Function FSD.GeneratedMission.AreMissionsEqual // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114a7c0
};

// Class FSD.RoomGenerationItem
// Size: 0x228 (Inherited: 0x228)
struct ARoomGenerationItem : AGenerationItem {
};

// Class FSD.GetFriendsListBlueprintCallProxy
// Size: 0x78 (Inherited: 0x30)
struct UGetFriendsListBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char pad_58[0x20]; // 0x58(0x20)

	struct UGetFriendsListBlueprintCallProxy* GetFriendsList(struct UObject* WorldContextObject, struct FString ListName); // Function FSD.GetFriendsListBlueprintCallProxy.GetFriendsList // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x114f150
};

// Class FSD.GlobalMissionSetup
// Size: 0x128 (Inherited: 0x30)
struct UGlobalMissionSetup : UDataAsset {
	struct FIRandRange ExtraBiomes; // 0x30(0x08)
	struct FIRandRange AdditionalMissionsForExtraBiomes; // 0x38(0x08)
	struct FIRandRange MissionsPerZone; // 0x40(0x08)
	struct TArray<struct FMissionBiomeItem> Biomes; // 0x48(0x10)
	struct TArray<struct FMissionTemplateItem> AvailableMissions; // 0x58(0x10)
	struct FMissionTemplateItem FacilityMission; // 0x68(0x10)
	float FacilityMutatorChance; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct UMissionNameBank* MissionNames; // 0x80(0x08)
	struct FIRandRange MutatorWarningCount; // 0x88(0x08)
	float DoubleWarningChance; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
	struct TArray<struct UMissionMutator*> Mutators; // 0x98(0x10)
	struct TArray<struct UMissionWarning*> Warnings; // 0xa8(0x10)
	struct TMap<struct UMissionWarning*, struct UMissionWarning*> IncompatibleWarnings; // 0xb8(0x50)
	struct TArray<struct UPlanetZone*> PlanetZones; // 0x108(0x10)
	struct TArray<struct FRequiredMissionItem> GlobalRequiredMissions; // 0x118(0x10)

	struct TArray<struct FMissionTemplateItem> GetAllPossibleMissions(); // Function FSD.GlobalMissionSetup.GetAllPossibleMissions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114eef0
};

// Class FSD.GlowPlant
// Size: 0x290 (Inherited: 0x220)
struct AGlowPlant : AActor {
	struct UStaticMeshComponent* TrunkMesh; // 0x220(0x08)
	char pad_228[0x20]; // 0x228(0x20)
	struct UPointLightComponent* MainLight; // 0x248(0x08)
	char pad_250[0x4]; // 0x250(0x04)
	float IntensityBase; // 0x254(0x04)
	float RadiusBase; // 0x258(0x04)
	float IntensityPerPart; // 0x25c(0x04)
	float RadiusPerPart; // 0x260(0x04)
	float IntensityAllParts; // 0x264(0x04)
	float RadiusAllParts; // 0x268(0x04)
	float MaxIntensity; // 0x26c(0x04)
	float MinIntensity; // 0x270(0x04)
	float TimeOnMaxLight; // 0x274(0x04)
	float IntensityFadeInTime; // 0x278(0x04)
	float IntensityFadeOutTime; // 0x27c(0x04)
	float MaxEmissive; // 0x280(0x04)
	float MinEmissive; // 0x284(0x04)
	float EmissiveFadeInTime; // 0x288(0x04)
	float EmissiveFadeOutTime; // 0x28c(0x04)

	void OnDeath(); // Function FSD.GlowPlant.OnDeath // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x10aad30
	void OnDamage(struct UPrimitiveComponent* hitSphere); // Function FSD.GlowPlant.OnDamage // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x114f640
};

// Class FSD.GoogleAnalyticsWrapper
// Size: 0x150 (Inherited: 0x28)
struct UGoogleAnalyticsWrapper : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FString LastUnlockedWeapons; // 0x30(0x10)
	struct FString LastKnownClass; // 0x40(0x10)
	struct FString BoscoLoadOut; // 0x50(0x10)
	bool WasCampaign; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct FString LastCampaignName; // 0x68(0x10)
	int32_t LastCampaignProgress; // 0x78(0x04)
	bool WasLastCampaignMission; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
	int32_t LastCampaignSize; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct FString LastWeaponsLoadout; // 0x88(0x10)
	struct FString LastUpgradesLoadout; // 0x98(0x10)
	struct FString SchematicInformation; // 0xa8(0x10)
	struct FPartyAnalyticsInformation PartyInfo; // 0xb8(0x14)
	struct FDeepDiveAnalyticsInformation DeepDiveInfo; // 0xcc(0x0c)
	struct FString DiscordCommunityTrackingID; // 0xd8(0x10)
	struct FString CommunityGoalsTrackingID; // 0xe8(0x10)
	char pad_F8[0x54]; // 0xf8(0x54)
	bool ShouldUpdateSchematicTrackingInformation; // 0x14c(0x01)
	char pad_14D[0x3]; // 0x14d(0x03)

	void StartMissionPartyInfo(struct AFSDGameState* GameState); // Function FSD.GoogleAnalyticsWrapper.StartMissionPartyInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x1151500
	void SetShouldUpdateSchematicInformation(); // Function FSD.GoogleAnalyticsWrapper.SetShouldUpdateSchematicInformation // (Final|Native|Public|BlueprintCallable) // @ game+0x11512a0
	void ResetBoscoLoadout(); // Function FSD.GoogleAnalyticsWrapper.ResetBoscoLoadout // (Final|Native|Public|BlueprintCallable) // @ game+0x1151110
	void RecordTotalTimeHit(struct FString Key, struct FString Campaign, bool Rank, int32_t Time); // Function FSD.GoogleAnalyticsWrapper.RecordTotalTimeHit // (Final|Native|Public|BlueprintCallable) // @ game+0x1150f90
	void RecordOpenScreen(struct FString Key, bool Rank); // Function FSD.GoogleAnalyticsWrapper.RecordOpenScreen // (Final|Native|Public|BlueprintCallable) // @ game+0x1150eb0
	void RecordMachineEventEnd(struct FString EventName, bool WasCompleted, float completionTime); // Function FSD.GoogleAnalyticsWrapper.RecordMachineEventEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x1150d90
	void RecordKickPlayer(struct FString reason, struct APlayerController* KickedPlayer); // Function FSD.GoogleAnalyticsWrapper.RecordKickPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1150cb0
	void RecordGAUserTiming(struct FString TimingCategory, int32_t TimingValue, struct FString TimingName); // Function FSD.GoogleAnalyticsWrapper.RecordGAUserTiming // (Final|Native|Public|BlueprintCallable) // @ game+0x1150a40
	void RecordGaTreeOfVanityClaim(int32_t NodeID); // Function FSD.GoogleAnalyticsWrapper.RecordGaTreeOfVanityClaim // (Final|Native|Public) // @ game+0x1150c30
	void RecordGASeasonLevelUp(); // Function FSD.GoogleAnalyticsWrapper.RecordGASeasonLevelUp // (Final|Native|Public) // @ game+0x1150a20
	void RecordGAMissionTotalTimeHit(struct FString Key, struct FString Campaign, bool Rank, int32_t totalTime, int32_t Progress, int32_t XP, int32_t Credits); // Function FSD.GoogleAnalyticsWrapper.RecordGAMissionTotalTimeHit // (Final|Native|Public|BlueprintCallable) // @ game+0x1150800
	void RecordGAMissionTimeEvent(int32_t Time); // Function FSD.GoogleAnalyticsWrapper.RecordGAMissionTimeEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1150780
	void RecordGAEvent(struct FString EventCategory, struct FString EventAction, struct FString EventLabel, int32_t EventValue, enum class EFSDGoogleAnalyticsProperties Property); // Function FSD.GoogleAnalyticsWrapper.RecordGAEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x11505d0
	void RecordGADeepDiveStageHit(struct FString Key, bool Rank, int32_t stageTime, int32_t timeSinceStartOfDive, int32_t totalTime, int32_t nitraLeft); // Function FSD.GoogleAnalyticsWrapper.RecordGADeepDiveStageHit // (Final|Native|Public|BlueprintCallable) // @ game+0x1150400
	void RecordGaChallengeReroll(int32_t challengeIndex, struct USeasonChallenge* challenge); // Function FSD.GoogleAnalyticsWrapper.RecordGaChallengeReroll // (Final|Native|Public) // @ game+0x1150b70
	void RecordExtraFailInfo(struct FString MissionName, struct FString Stage, struct FString ExtraText); // Function FSD.GoogleAnalyticsWrapper.RecordExtraFailInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x11502c0
	void RecordCustomGAEvent(struct FString EventCategory, struct FString EventAction, struct FString EventLabel, int32_t EventValue, struct FString TrackingId); // Function FSD.GoogleAnalyticsWrapper.RecordCustomGAEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x11500b0
	void RecordContinuousDamage(struct AActor* DamageCauser); // Function FSD.GoogleAnalyticsWrapper.RecordContinuousDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x1150030
	void RecordBossFightEnd(struct FString BossName, bool WasBossKilled, int32_t BossKills); // Function FSD.GoogleAnalyticsWrapper.RecordBossFightEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x114ff10
	struct FString ProcessCampaignName(struct UObject* Campaign); // Function FSD.GoogleAnalyticsWrapper.ProcessCampaignName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x114fe30
	void PlayerLatejoin(); // Function FSD.GoogleAnalyticsWrapper.PlayerLatejoin // (Final|Native|Public|BlueprintCallable) // @ game+0x114fe00
	void PlayerDropout(); // Function FSD.GoogleAnalyticsWrapper.PlayerDropout // (Final|Native|Public|BlueprintCallable) // @ game+0x114fdd0
	void OnPlayerLeaveBind(struct AFSDPlayerState* PlayerState); // Function FSD.GoogleAnalyticsWrapper.OnPlayerLeaveBind // (Final|Native|Public) // @ game+0x114f8a0
	void OnPlayerJoinBind(struct AFSDPlayerState* PlayerState); // Function FSD.GoogleAnalyticsWrapper.OnPlayerJoinBind // (Final|Native|Public) // @ game+0x114f820
	void HandleMatchStarted(); // Function FSD.GoogleAnalyticsWrapper.HandleMatchStarted // (Final|Native|Public) // @ game+0x114f2e0
	struct FString GetAnalyticsFText(struct FText Text); // Function FSD.GoogleAnalyticsWrapper.GetAnalyticsFText // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x114ef70
	void EndMissionPartyInfo(); // Function FSD.GoogleAnalyticsWrapper.EndMissionPartyInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x114eed0
};

// Class FSD.GooGun
// Size: 0x790 (Inherited: 0x6e0)
struct AGooGun : AAmmoDrivenWeapon {
	struct FMulticastInlineDelegate OnStartCharging; // 0x6e0(0x10)
	struct FMulticastInlineDelegate OnEndCharging; // 0x6f0(0x10)
	struct FMulticastInlineDelegate OnChargingFailed; // 0x700(0x10)
	struct FMulticastInlineDelegate OnChargeChanged; // 0x710(0x10)
	float ChargeTime; // 0x720(0x04)
	int32_t ShotCostCharged; // 0x724(0x04)
	float ChargeThreshold; // 0x728(0x04)
	float AutoStopCharingAfterSeconds; // 0x72c(0x04)
	int32_t ShotCostCycle; // 0x730(0x04)
	enum class EGooGunFireMode FireMode; // 0x734(0x01)
	char pad_735[0x3]; // 0x735(0x03)
	struct USoundCue* FullyChargedFireSound; // 0x738(0x08)
	int32_t ChargedShotCount; // 0x740(0x04)
	float BuckShotSpreadV; // 0x744(0x04)
	float BuckShotSpreadH; // 0x748(0x04)
	float BuckshotArcCompensation; // 0x74c(0x04)
	struct UFXSystemAsset* ChargeupParticles; // 0x750(0x08)
	struct UFXSystemAsset* ChargeupFireMuzzleFlash; // 0x758(0x08)
	struct UFXSystemComponent* ChargeupParticleInstance; // 0x760(0x08)
	struct UAnimMontage* FP_ChargeupMontage; // 0x768(0x08)
	struct UAnimMontage* TP_ChargeupMontage; // 0x770(0x08)
	char pad_778[0x18]; // 0x778(0x18)

	float GetOverChargeProgress(); // Function FSD.GooGun.GetOverChargeProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114f2b0
	bool GetIsCharging(); // Function FSD.GooGun.GetIsCharging // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x114f270
	float GetChargeProgress(); // Function FSD.GooGun.GetChargeProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114f120
	void ChargingDelegate__DelegateSignature(); // DelegateFunction FSD.GooGun.ChargingDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ChargeChangedDelegate__DelegateSignature(float charge); // DelegateFunction FSD.GooGun.ChargeChangedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
};

// Class FSD.GooGunProjectile
// Size: 0x348 (Inherited: 0x340)
struct AGooGunProjectile : AProjectile {
	float PuddleLifeTime; // 0x340(0x04)
	int32_t FragmentCount; // 0x344(0x04)

	struct AGooGunPuddle* SpawnPuddle(struct FTransform Transform, struct AGooGunPuddle* PuddleClass); // Function FSD.GooGunProjectile.SpawnPuddle // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x11513c0
};

// Class FSD.GooGunPuddle
// Size: 0x268 (Inherited: 0x220)
struct AGooGunPuddle : AActor {
	struct USphereComponent* SphereTrigger; // 0x220(0x08)
	struct USimpleHealthComponent* SimpleHealth; // 0x228(0x08)
	struct USoundBase* SpawnSound; // 0x230(0x08)
	struct TArray<struct FGooPuddleStatusEffectTrigger> StatusEffectTriggers; // 0x238(0x10)
	struct TArray<struct UStatusEffect*> InflictedStatusEffects; // 0x248(0x10)
	int32_t ActiveStatusEffectTriggersMask; // 0x258(0x04)
	float LifeTime; // 0x25c(0x04)
	char pad_260[0x8]; // 0x260(0x08)

	void SetStatusEffect(struct UStatusEffect* NewStatusEffect); // Function FSD.GooGunPuddle.SetStatusEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x11512c0
	void OnStatusEffectAdded(struct FGooPuddleStatusEffectTrigger Trigger); // Function FSD.GooGunPuddle.OnStatusEffectAdded // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	void OnRep_ActiveStatusEffectTriggersMask(int32_t PreviousMask); // Function FSD.GooGunPuddle.OnRep_ActiveStatusEffectTriggersMask // (Final|Native|Protected) // @ game+0x114fc70
	void OnPuddleEndOverLap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.GooGunPuddle.OnPuddleEndOverLap // (Final|Native|Protected) // @ game+0x114fb30
	void OnPuddleBeginOverLap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.GooGunPuddle.OnPuddleBeginOverLap // (Final|Native|Protected|HasOutParms) // @ game+0x114f920
	void OnHit(float Damage, struct UDamageClass* DamageClass, struct AActor* DamageCauser, bool anyHealthLost); // Function FSD.GooGunPuddle.OnHit // (Final|Native|Protected) // @ game+0x114f6d0
	void AddStatusEffect(struct UStatusEffect* NewStatusEffect); // Function FSD.GooGunPuddle.AddStatusEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x114edb0
};

// Class FSD.GooGunAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UGooGunAnimInstance : UAnimInstance {
	bool isCharging; // 0x268(0x01)
	float ChargePercentVisual; // 0x26c(0x04)
	float ChargePercent; // 0x270(0x04)
	float OverChargePercent; // 0x274(0x04)
	float BarrelRotationRate; // 0x278(0x04)

	void SetTargetBarrelRotationRate(float RotationRate); // Function FSD.GooGunAnimInstance.SetTargetBarrelRotationRate // (Final|Native|Public|BlueprintCallable) // @ game+0x1151340
};

// Class FSD.GrabbedStateComponent
// Size: 0x120 (Inherited: 0x100)
struct UGrabbedStateComponent : UCharacterStateComponent {
	char pad_100[0xc]; // 0x100(0x0c)
	struct TWeakObjectPtr<struct UGrabberComponent> CurrentGrabber; // 0x10c(0x08)
	char pad_114[0xc]; // 0x114(0x0c)

	void OnRep_Grabber(); // Function FSD.GrabbedStateComponent.OnRep_Grabber // (Final|Native|Protected) // @ game+0x114fcf0
};

// Class FSD.FlyingLifter
// Size: 0x508 (Inherited: 0x448)
struct AFlyingLifter : AAFlyingBug {
	struct UGrabberComponent* GrabberComp; // 0x448(0x08)
	struct UCapsuleComponent* GrabCapsule; // 0x450(0x08)
	struct UAudioComponent* GrabStart; // 0x458(0x08)
	struct UAudioComponent* GrabEnd; // 0x460(0x08)
	struct UAudioComponent* GrabbedIdleLoop; // 0x468(0x08)
	struct UInDangerComponent* InDanger; // 0x470(0x08)
	struct UAudioComponent* ScreamComponent; // 0x478(0x08)
	char pad_480[0x8]; // 0x480(0x08)
	struct FMulticastInlineDelegate OnGrabSuccess; // 0x488(0x10)
	float PreventGrabAfterSpawn; // 0x498(0x04)
	char pad_49C[0x5]; // 0x49c(0x05)
	bool ShouldScream; // 0x4a1(0x01)
	enum class EGrabberState GrabberState; // 0x4a2(0x01)
	char pad_4A3[0x1]; // 0x4a3(0x01)
	float WanderingSpeed; // 0x4a4(0x04)
	float WanderingAcceleration; // 0x4a8(0x04)
	float ChaseSpeed; // 0x4ac(0x04)
	float ChaseAcceleration; // 0x4b0(0x04)
	float CarrySpeed; // 0x4b4(0x04)
	float CarryAcceleration; // 0x4b8(0x04)
	float FleeSpeed; // 0x4bc(0x04)
	float FleeAcceleration; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
	float CarryCooldown; // 0x4c8(0x04)
	char pad_4CC[0x4]; // 0x4cc(0x04)
	struct USoundBase* ScreamSound; // 0x4d0(0x08)
	struct USoundBase* FleeSound; // 0x4d8(0x08)
	struct UAnimSequenceBase* FleeAnimation; // 0x4e0(0x08)
	struct UCapsuleComponent* GrabberCollider; // 0x4e8(0x08)
	bool ParalyzeOnGrab; // 0x4f0(0x01)
	char pad_4F1[0x3]; // 0x4f1(0x03)
	float ExtraUpForce; // 0x4f4(0x04)
	float ScreamDistance; // 0x4f8(0x04)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct UPointLightComponent* GrabLight; // 0x500(0x08)

	void SetLight(struct UPointLightComponent* ALight); // Function FSD.FlyingLifter.SetLight // (Final|Native|Protected|BlueprintCallable) // @ game+0x1151220
	bool SelectAnotherTarget(); // Function FSD.FlyingLifter.SelectAnotherTarget // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x11511f0
	void OnStateBroke(struct AActor* aReleasedPlayer); // Function FSD.FlyingLifter.OnStateBroke // (Final|Native|Public) // @ game+0x114fd50
	void OnRep_State(); // Function FSD.FlyingLifter.OnRep_State // (Final|Native|Public) // @ game+0x114fd30
	void OnRep_ShouldScream(); // Function FSD.FlyingLifter.OnRep_ShouldScream // (Final|Native|Public) // @ game+0x114fd10
	void OnInDanger(); // Function FSD.FlyingLifter.OnInDanger // (Native|Public|BlueprintCallable) // @ game+0x1088530
	void OnActorLeftGrabZone(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.FlyingLifter.OnActorLeftGrabZone // (Native|Protected) // @ game+0x114f500
	void OnActorEnterGrabZone(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.FlyingLifter.OnActorEnterGrabZone // (Native|Protected|HasOutParms) // @ game+0x114f300
	bool GetJustGrabbed(); // Function FSD.FlyingLifter.GetJustGrabbed // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x114f290
	void DropTarget(); // Function FSD.FlyingLifter.DropTarget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x114eeb0
	void ChangeState(enum class EGrabberState aGrabberState); // Function FSD.FlyingLifter.ChangeState // (Final|Native|Public|BlueprintCallable) // @ game+0x114ee30
};

// Class FSD.FlyingLifterAnimInstance
// Size: 0x2f0 (Inherited: 0x2f0)
struct UFlyingLifterAnimInstance : USimpleMovingEnemyAnimInstance {
	bool HasGrabbedPlayer; // 0x2e8(0x01)
	bool ToChaseLock; // 0x2e9(0x01)
	bool ChaseToWanderLock; // 0x2ea(0x01)
	bool ToCarryLock; // 0x2eb(0x01)
	enum class EGrabberState GrabberState; // 0x2ec(0x01)
};

// Class FSD.GrabberComponent
// Size: 0x1b0 (Inherited: 0xb0)
struct UGrabberComponent : UActorComponent {
	struct FMulticastInlineDelegate OnGrabbedActor; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnReleasedActor; // 0xc0(0x10)
	struct FGameplayTagQuery TagFilter; // 0xd0(0x48)
	char pad_118[0x18]; // 0x118(0x18)
	struct TWeakObjectPtr<struct AActor> GrabbedActor; // 0x130(0x08)
	struct TWeakObjectPtr<struct ADeepPathfinderCharacter> PathfinderOwner; // 0x138(0x08)
	struct TWeakObjectPtr<struct USkeletalMeshComponent> OwnerMesh; // 0x140(0x08)
	struct TArray<struct UPrimitiveComponent*> TargetClippingWith; // 0x148(0x10)
	struct USoundCue* BeginGrabedSound; // 0x158(0x08)
	struct USoundCue* GrabedLoopSound; // 0x160(0x08)
	struct USoundCue* EndGrabedSound; // 0x168(0x08)
	struct UDialogDataAsset* BeginGrabbedShout; // 0x170(0x08)
	struct UDialogDataAsset* EndGrabbedShout; // 0x178(0x08)
	struct UDialogDataAsset* AttentionGrabbedShout; // 0x180(0x08)
	struct AActor* CurrentlyGrabbed; // 0x188(0x08)
	enum class EUseRestriction UseRestriction; // 0x190(0x01)
	char pad_191[0x3]; // 0x191(0x03)
	struct FName GrabAttachName; // 0x194(0x08)
	float GrabTime; // 0x19c(0x04)
	float CarryCooldown; // 0x1a0(0x04)
	enum class EOutline PlayerOutlineOnGrab; // 0x1a4(0x01)
	enum class EGrabbedStateCameraMode CameraMode; // 0x1a5(0x01)
	bool TrackPlayerCollision; // 0x1a6(0x01)
	bool ManualGrabTime; // 0x1a7(0x01)
	bool CanPlayerShoot; // 0x1a8(0x01)
	char pad_1A9[0x2]; // 0x1a9(0x02)
	bool NeedsPathToTarget; // 0x1ab(0x01)
	char pad_1AC[0x4]; // 0x1ac(0x04)

	void SetPlayerReleased(); // Function FSD.GrabberComponent.SetPlayerReleased // (Final|Native|Protected) // @ game+0x11550f0
	bool SetPlayerGrabbed(); // Function FSD.GrabberComponent.SetPlayerGrabbed // (Final|Native|Protected) // @ game+0x11550c0
	void ReleaseTarget(); // Function FSD.GrabberComponent.ReleaseTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1154e80
	void OnRep_CurrentlyGrabbed(); // Function FSD.GrabberComponent.OnRep_CurrentlyGrabbed // (Final|Native|Protected) // @ game+0x1154ce0
	void OnPrimWake(struct UPrimitiveComponent* WakingComponent, struct FName BoneName); // Function FSD.GrabberComponent.OnPrimWake // (Final|Native|Protected) // @ game+0x1154c00
	void OnParentDestroyed(struct AActor* Actor); // Function FSD.GrabberComponent.OnParentDestroyed // (Final|Native|Public) // @ game+0x1154b80
	bool IsGrabbedTargetValid(); // Function FSD.GrabberComponent.IsGrabbedTargetValid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11546e0
	bool HasGrabbed(); // Function FSD.GrabberComponent.HasGrabbed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11546b0
	bool GrabTarget(struct AActor* aGrabTarget); // Function FSD.GrabberComponent.GrabTarget // (Native|Public|BlueprintCallable) // @ game+0x1154610
	bool CanGrabTarget(struct AActor* aTarget); // Function FSD.GrabberComponent.CanGrabTarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11541e0
};

// Class FSD.FakePhysGrabberComponent
// Size: 0x1d8 (Inherited: 0x1b0)
struct UFakePhysGrabberComponent : UGrabberComponent {
	struct TArray<struct FGrabAvoidClassEntry> ActorTypesToAvoid; // 0x1b0(0x10)
	char pad_1C0[0x8]; // 0x1c0(0x08)
	struct TArray<struct FAvoidActorEntry> ActorsToAvoid; // 0x1c8(0x10)
};

// Class FSD.GrapplingHookGun
// Size: 0x400 (Inherited: 0x390)
struct AGrapplingHookGun : AAnimatedItem {
	char pad_390[0x8]; // 0x390(0x08)
	struct UCoolDownItemAggregator* CoolDownAggregator; // 0x398(0x08)
	float MaxDistance; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct UAnimMontage* FPReloadAnim; // 0x3a8(0x08)
	struct UAnimMontage* TPReloadAnim; // 0x3b0(0x08)
	struct UAnimMontage* FPGunslingAnim; // 0x3b8(0x08)
	struct UAnimMontage* TPGunslingAnim; // 0x3c0(0x08)
	char pad_3C8[0x10]; // 0x3c8(0x10)
	float MaxSpeed; // 0x3d8(0x04)
	float MaxSpeedReleaseModifier; // 0x3dc(0x04)
	float WindUpTime; // 0x3e0(0x04)
	bool AutoFire; // 0x3e4(0x01)
	char pad_3E5[0x3]; // 0x3e5(0x03)
	struct FGraplingGunState State; // 0x3e8(0x10)
	float GrapleStartTime; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)

	void StopGrapple(); // Function FSD.GrapplingHookGun.StopGrapple // (Final|Native|Protected|BlueprintCallable) // @ game+0x1155420
	bool StartGrapple(); // Function FSD.GrapplingHookGun.StartGrapple // (Final|Native|Protected|BlueprintCallable) // @ game+0x1155290
	void Server_SetState(struct FGraplingGunState NewState); // Function FSD.GrapplingHookGun.Server_SetState // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1154ea0
	void OnRep_State(struct FGraplingGunState prevState); // Function FSD.GrapplingHookGun.OnRep_State // (Native|Protected|HasOutParms) // @ game+0x1154da0
	void OnReleaseHook(); // Function FSD.GrapplingHookGun.OnReleaseHook // (Final|Native|Public|BlueprintCallable) // @ game+0x1154cc0
	void OnGrappleUpdate(float DeltaSeconds); // Function FSD.GrapplingHookGun.OnGrappleUpdate // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnGrappleStart(); // Function FSD.GrapplingHookGun.OnGrappleStart // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnGrappleFailed(bool TooFar); // Function FSD.GrapplingHookGun.OnGrappleFailed // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnGrappleEnd(); // Function FSD.GrapplingHookGun.OnGrappleEnd // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	float GetWindUpProgress(); // Function FSD.GrapplingHookGun.GetWindUpProgress // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11545e0
	float GetCooldownDuration(struct AGrapplingHookGun* GrapplingHookGun); // Function FSD.GrapplingHookGun.GetCooldownDuration // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1154440
};

// Class FSD.GravityChangedComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UGravityChangedComponent : UActorComponent {
	bool bAwakeOnGravityChanged; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct TArray<struct UPrimitiveComponent*> PrimitiveComponents; // 0xb8(0x10)

	void OnGravityChanged(float Gravity, float Change); // Function FSD.GravityChangedComponent.OnGravityChanged // (Final|Native|Protected) // @ game+0x11548b0
};

// Class FSD.GrenadeAnimationSet
// Size: 0x50 (Inherited: 0x30)
struct UGrenadeAnimationSet : UDataAsset {
	struct UAnimMontage* FP_EquipAnimation; // 0x30(0x08)
	struct UAnimMontage* TP_EquipAnimation; // 0x38(0x08)
	struct UAnimMontage* FP_ThrowAnimation; // 0x40(0x08)
	struct UAnimMontage* TP_ThrowAnimation; // 0x48(0x08)
};

// Class FSD.Grenade
// Size: 0x2a8 (Inherited: 0x220)
struct AGrenade : AActor {
	char pad_220[0x18]; // 0x220(0x18)
	struct UProjectileMovementComponent* Movement; // 0x238(0x08)
	float Duration; // 0x240(0x04)
	float ExplosionDelay; // 0x244(0x04)
	bool ExplodeOnImpact; // 0x248(0x01)
	char pad_249[0x3]; // 0x249(0x03)
	int32_t MaxGrenades; // 0x24c(0x04)
	bool HasExploded; // 0x250(0x01)
	bool EnableDangerousSaveGameIDEditing; // 0x251(0x01)
	char pad_252[0x2]; // 0x252(0x02)
	struct FGuid SaveGameID; // 0x254(0x10)
	char pad_264[0x4]; // 0x264(0x04)
	struct UItemID* ItemID; // 0x268(0x08)
	struct AActor* WeaponPreviewClass; // 0x270(0x08)
	struct ALoadoutItemProxy* LoadoutProxy; // 0x278(0x08)
	struct UStaticMesh* HandAttachMesh; // 0x280(0x08)
	struct USoundCue* ImpactGroundSound; // 0x288(0x08)
	struct UParticleSystem* ImpactGroundParticles; // 0x290(0x08)
	struct UGrenadeAnimationSet* GrenadeAnimationSetOverride; // 0x298(0x08)
	char pad_2A0[0x8]; // 0x2a0(0x08)

	void OnRep_HasExploded(); // Function FSD.Grenade.OnRep_HasExploded // (Final|Native|Protected) // @ game+0x1154d20
	void OnExploded(); // Function FSD.Grenade.OnExploded // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	bool IsNonFriendlyPawn(struct AActor* Actor); // Function FSD.Grenade.IsNonFriendlyPawn // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11547a0
	bool IsNonFriendly(struct AActor* Actor); // Function FSD.Grenade.IsNonFriendly // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1154710
	struct AActor* GetWeaponViewClass(); // Function FSD.Grenade.GetWeaponViewClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11545a0
	struct AGrenade* GetGrenadeDefaultObject(struct AGrenade* GrenadeClass); // Function FSD.Grenade.GetGrenadeDefaultObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11544d0
	void ActorWasHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.Grenade.ActorWasHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1153fd0
};

// Class FSD.MolotovComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UMolotovComponent : UActorComponent {
	struct UDebrisPositioning* Positioning; // 0xb0(0x08)
	struct AActor* BurningFlamesClass; // 0xb8(0x08)
	float Radius; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)

	void Trigger(); // Function FSD.MolotovComponent.Trigger // (Final|Native|Public|BlueprintCallable) // @ game+0x1155460
};

// Class FSD.AreaSpawnerComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UAreaSpawnerComponent : UActorComponent {
	struct AActor* ActorToSpawn; // 0xb0(0x08)
	enum class DeepPathFinderSize PathfinderSize; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float ChanceToSpawn; // 0xbc(0x04)

	void SpawnInArea(struct FVector Origin, float Radius, float maxVerticalDistance, struct APawn* Instigator); // Function FSD.AreaSpawnerComponent.SpawnInArea // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1155130
};

// Class FSD.HugeExplosionComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UHugeExplosionComponent : UActorComponent {
	struct UParticleSystem* ExplosionEffect; // 0xb0(0x08)
	float ExplosionSpeed; // 0xb8(0x04)
	float ExplosionSize; // 0xbc(0x04)
	char pad_C0[0x18]; // 0xc0(0x18)

	void TriggerExplosion(struct FVector Location); // Function FSD.HugeExplosionComponent.TriggerExplosion // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1155480
};

// Class FSD.GroundToAirComponent
// Size: 0x128 (Inherited: 0xb0)
struct UGroundToAirComponent : UActorComponent {
	struct FMulticastInlineDelegate OnChangedPathfinderState; // 0xb0(0x10)
	struct UDeepPathfinderMovement* CurrentMove; // 0xc0(0x08)
	float WalkTime; // 0xc8(0x04)
	float WalkTimeMaxRandomOffset; // 0xcc(0x04)
	float WalkTimeMinRandomOffset; // 0xd0(0x04)
	bool WalkUseTimer; // 0xd4(0x01)
	char pad_D5[0x3]; // 0xd5(0x03)
	struct FStateStats WalkStats; // 0xd8(0x14)
	float FlyTime; // 0xec(0x04)
	float FlyTimeMaxRandomOffset; // 0xf0(0x04)
	float FlyTimeMinRandomOffset; // 0xf4(0x04)
	bool FlyUseTimer; // 0xf8(0x01)
	char pad_F9[0x3]; // 0xf9(0x03)
	struct FStateStats FlyStats; // 0xfc(0x14)
	bool IsFlying; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	struct TWeakObjectPtr<struct ADeepPathfinderCharacter> OwningPathfinder; // 0x114(0x08)
	char pad_11C[0xc]; // 0x11c(0x0c)

	void SetIsFlying(bool aIsFlying); // Function FSD.GroundToAirComponent.SetIsFlying // (Final|Native|Public|BlueprintCallable) // @ game+0x1154fa0
	void SetAllowedToChangeState(bool aIsAllowed); // Function FSD.GroundToAirComponent.SetAllowedToChangeState // (Final|Native|Public|BlueprintCallable) // @ game+0x1154f20
	void OnRep_StateChange(); // Function FSD.GroundToAirComponent.OnRep_StateChange // (Final|Native|Protected) // @ game+0x1154e40
	bool GetIsWalking(); // Function FSD.GroundToAirComponent.GetIsWalking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1154570
	bool GetIsFlying(); // Function FSD.GroundToAirComponent.GetIsFlying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1154550
	void Engage(); // Function FSD.GroundToAirComponent.Engage // (Final|Native|Public|BlueprintCallable) // @ game+0x1154400
};

// Class FSD.GrowthComponent
// Size: 0x148 (Inherited: 0xb0)
struct UGrowthComponent : UActorComponent {
	struct USceneComponent* ScaleComponent; // 0xb0(0x08)
	struct FRuntimeFloatCurve CurrentGrowthCurve; // 0xb8(0x88)
	char pad_140[0x8]; // 0x140(0x08)

	void StopGrow(); // Function FSD.GrowthComponent.StopGrow // (Final|Native|Public|BlueprintCallable) // @ game+0x1155440
	void StartGrow(struct USceneComponent* aComponentToScale, struct FRuntimeFloatCurve aCurve); // Function FSD.GrowthComponent.StartGrow // (Final|Native|Public|BlueprintCallable) // @ game+0x11552c0
};

// Class FSD.GuntowerActivationPlatform
// Size: 0x290 (Inherited: 0x220)
struct AGuntowerActivationPlatform : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct USkeletalMeshComponent* SKMesh; // 0x228(0x08)
	struct UCapsuleComponent* Trigger; // 0x230(0x08)
	struct FMulticastInlineDelegate OnProgressUpdatedDelegate; // 0x238(0x10)
	struct FMulticastInlineDelegate OnPlayersInsideChangedDelegate; // 0x248(0x10)
	struct FMulticastInlineDelegate OnProgressFilled; // 0x258(0x10)
	char pad_268[0x8]; // 0x268(0x08)
	struct AGuntowerModule* AssignedModule; // 0x270(0x08)
	float DoneAt; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
	float DisabledTime; // 0x280(0x04)
	int32_t PlayersInside; // 0x284(0x04)
	bool Disabled; // 0x288(0x01)
	bool IsShutDown; // 0x289(0x01)
	char pad_28A[0x6]; // 0x28a(0x06)

	void UpdatePlayersInside(struct APlayerCharacter* Character); // Function FSD.GuntowerActivationPlatform.UpdatePlayersInside // (Final|Native|Protected) // @ game+0x1155510
	void ShutDown(); // Function FSD.GuntowerActivationPlatform.ShutDown // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1155110
	void SetPlatformActive(bool IsActive); // Function FSD.GuntowerActivationPlatform.SetPlatformActive // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1155030
	void ReEnable(); // Function FSD.GuntowerActivationPlatform.ReEnable // (Final|Native|Protected) // @ game+0x1154e60
	void OnShutDown(); // Function FSD.GuntowerActivationPlatform.OnShutDown // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_PlayersInside(); // Function FSD.GuntowerActivationPlatform.OnRep_PlayersInside // (Final|Native|Protected) // @ game+0x1154d80
	void OnRep_IsShutDown(); // Function FSD.GuntowerActivationPlatform.OnRep_IsShutDown // (Final|Native|Protected) // @ game+0x1154d40
	void OnRep_Disabled(); // Function FSD.GuntowerActivationPlatform.OnRep_Disabled // (Final|Native|Protected) // @ game+0x1154d00
	void OnPlayersInsideChanged(int32_t PlayersInside); // Function FSD.GuntowerActivationPlatform.OnPlayersInsideChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.GuntowerActivationPlatform.OnOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1154970
	void OnFinished(); // Function FSD.GuntowerActivationPlatform.OnFinished // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDisabledChanged(bool IsDisabled); // Function FSD.GuntowerActivationPlatform.OnDisabledChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ModuleDestroyed(struct UHealthComponentBase* Health); // Function FSD.GuntowerActivationPlatform.ModuleDestroyed // (Final|Native|Protected|BlueprintCallable) // @ game+0x1154830
	struct AGuntowerModule* GetAssignedModule(); // Function FSD.GuntowerActivationPlatform.GetAssignedModule // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1154420
	void EndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.GuntowerActivationPlatform.EndOverlap // (Final|Native|Protected) // @ game+0x11542c0
	bool CanWidgetAppear(); // Function FSD.GuntowerActivationPlatform.CanWidgetAppear // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1154280
	void AssignModule(struct AGuntowerModule* towerModule); // Function FSD.GuntowerActivationPlatform.AssignModule // (Final|Native|Public|BlueprintCallable) // @ game+0x1154160
};

// Class FSD.GuntowerEvent
// Size: 0x3b8 (Inherited: 0x358)
struct AGuntowerEvent : AGameEvent {
	struct USceneComponent* Root; // 0x358(0x08)
	struct USkeletalMeshComponent* BaseMesh; // 0x360(0x08)
	struct UDamageComponent* EndExplosionDamage; // 0x368(0x08)
	struct TArray<struct FGuntowerModuleLevel> GuntowerLevels; // 0x370(0x10)
	struct FName ModuleAttachBone; // 0x380(0x08)
	char pad_388[0x10]; // 0x388(0x10)
	float TowerExplodeDelay; // 0x398(0x04)
	float DelayBetweenExplosions; // 0x39c(0x04)
	struct TArray<struct AGuntowerModule*> TowerModules; // 0x3a0(0x10)
	int32_t ActiveHostileModules; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)

	void OnRep_ModuleActive(); // Function FSD.GuntowerEvent.OnRep_ModuleActive // (Native|Public) // @ game+0x1154d60
	void OnModulesSpawned(); // Function FSD.GuntowerEvent.OnModulesSpawned // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnModuleExploded(struct AGuntowerModule* explodedModule); // Function FSD.GuntowerEvent.OnModuleExploded // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.TowerModuleBase
// Size: 0x360 (Inherited: 0x2f0)
struct ATowerModuleBase : AFSDPawn {
	char pad_2F0[0x8]; // 0x2f0(0x08)
	struct USceneComponent* Root; // 0x2f8(0x08)
	struct USkeletalMeshComponent* ModuleMesh; // 0x300(0x08)
	struct TArray<struct UStaticMeshComponent*> ArmorPlates; // 0x308(0x10)
	struct UEnemyHealthComponent* Health; // 0x318(0x08)
	struct FRotator ModuleRotation; // 0x320(0x0c)
	char pad_32C[0xc]; // 0x32c(0x0c)
	struct USkeletalMesh* DestroyedMesh; // 0x338(0x08)
	struct USoundCue* deathSound; // 0x340(0x08)
	struct UParticleSystem* deathParticles; // 0x348(0x08)
	float ArmorLaunchPower; // 0x350(0x04)
	float HideArmorTime; // 0x354(0x04)
	float ModuleRotationSpeed; // 0x358(0x04)
	bool ConstantRotation; // 0x35c(0x01)
	enum class EGuntowerModuleState State; // 0x35d(0x01)
	char pad_35E[0x2]; // 0x35e(0x02)

	void SetState(enum class EGuntowerModuleState State); // Function FSD.TowerModuleBase.SetState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1159b30
	void OnRep_State(enum class EGuntowerModuleState prevState); // Function FSD.TowerModuleBase.OnRep_State // (Final|Native|Protected) // @ game+0x11598c0
	void HideArmorPlates(); // Function FSD.TowerModuleBase.HideArmorPlates // (Final|Native|Private) // @ game+0x11593c0
	void DoAttack(); // Function FSD.TowerModuleBase.DoAttack // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.AimingTowerModule
// Size: 0x390 (Inherited: 0x360)
struct AAimingTowerModule : ATowerModuleBase {
	struct AActor* Target; // 0x360(0x08)
	struct FRotator AimRotation; // 0x368(0x0c)
	float BurstTime; // 0x374(0x04)
	char pad_378[0x4]; // 0x378(0x04)
	float AttackTime; // 0x37c(0x04)
	char pad_380[0x4]; // 0x380(0x04)
	int32_t BurstSize; // 0x384(0x04)
	char pad_388[0x8]; // 0x388(0x08)
};

// Class FSD.GuntowerModule
// Size: 0x3b0 (Inherited: 0x2f0)
struct AGuntowerModule : AFSDPawn {
	char pad_2F0[0x8]; // 0x2f0(0x08)
	struct USoundCue* ExposeWeakpointSound; // 0x2f8(0x08)
	struct USoundCue* deathSound; // 0x300(0x08)
	struct UParticleSystem* deathParticles; // 0x308(0x08)
	struct TArray<struct AActor*> WeakpointActors; // 0x310(0x10)
	struct FName BodyBone; // 0x320(0x08)
	struct FName TopConnectionPointName; // 0x328(0x08)
	struct FRotator CurrentTurretRotation; // 0x330(0x0c)
	char pad_33C[0x4]; // 0x33c(0x04)
	struct UAnimSequenceBase* IntroductionAnimation; // 0x340(0x08)
	struct UStaticMeshComponent* ArmorPiece1; // 0x348(0x08)
	struct UStaticMeshComponent* ArmorPiece2; // 0x350(0x08)
	struct UStaticMeshComponent* ArmorPiece3; // 0x358(0x08)
	struct USkeletalMeshComponent* ModuleMesh; // 0x360(0x08)
	struct UGunTowerHealthComponent* GuntowerModuleHealth; // 0x368(0x08)
	struct AGuntowerEvent* OwningEvent; // 0x370(0x08)
	struct AGuntowerModule* ChildModule; // 0x378(0x08)
	float WeakpointsExposedTime; // 0x380(0x04)
	float WeakpointsExposedTimeSolo; // 0x384(0x04)
	char pad_388[0x4]; // 0x388(0x04)
	float HideArmorTime; // 0x38c(0x04)
	float ArmorShootoutDelay; // 0x390(0x04)
	float ArmorLaunchPower; // 0x394(0x04)
	int32_t ModuleID; // 0x398(0x04)
	char pad_39C[0x4]; // 0x39c(0x04)
	bool IsPassiveModule; // 0x3a0(0x01)
	bool ModuleIsActive; // 0x3a1(0x01)
	bool AreWeakpointsExposed; // 0x3a2(0x01)
	bool AreWeaponsExposed; // 0x3a3(0x01)
	bool ConstantRotation; // 0x3a4(0x01)
	bool IsArmorOff; // 0x3a5(0x01)
	bool Exploded; // 0x3a6(0x01)
	char pad_3A7[0x9]; // 0x3a7(0x09)

	void ShootOutArmor(); // Function FSD.GuntowerModule.ShootOutArmor // (Final|Native|Public|BlueprintCallable) // @ game+0x1159bb0
	void SetModuleActive(); // Function FSD.GuntowerModule.SetModuleActive // (Final|Native|Protected) // @ game+0x1159b10
	void OnTearArmor(); // Function FSD.GuntowerModule.OnTearArmor // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRep_IsModuleActive(); // Function FSD.GuntowerModule.OnRep_IsModuleActive // (Native|Protected) // @ game+0x1088530
	void OnRep_IsArmorOff(); // Function FSD.GuntowerModule.OnRep_IsArmorOff // (Native|Protected) // @ game+0x1159860
	void OnRep_Exploded(); // Function FSD.GuntowerModule.OnRep_Exploded // (Native|Protected) // @ game+0x1159760
	void OnRep_AreWeakpointExposed(); // Function FSD.GuntowerModule.OnRep_AreWeakpointExposed // (Native|Protected) // @ game+0x11596c0
	void OnActivationChanged(bool IsActivated); // Function FSD.GuntowerModule.OnActivationChanged // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void Introduce(); // Function FSD.GuntowerModule.Introduce // (Final|Native|Public) // @ game+0x1159410
	void HideWeakpoints(); // Function FSD.GuntowerModule.HideWeakpoints // (Final|Native|Protected) // @ game+0x11593e0
	void HideArmor(); // Function FSD.GuntowerModule.HideArmor // (Final|Native|Protected) // @ game+0x11593a0
	int32_t GetModuleID(); // Function FSD.GuntowerModule.GetModuleID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11590f0
	void DoExplosion(); // Function FSD.GuntowerModule.DoExplosion // (Native|Protected) // @ game+0x1088620
	void DeactivateTowerModule(); // Function FSD.GuntowerModule.DeactivateTowerModule // (Native|Public) // @ game+0x1090b80
	void All_PlayIntroductionAnim(); // Function FSD.GuntowerModule.All_PlayIntroductionAnim // (Net|Native|Event|NetMulticast|Public) // @ game+0x10c9c60
	void ActivateTowerModule(); // Function FSD.GuntowerModule.ActivateTowerModule // (Native|Public) // @ game+0x10926c0
};

// Class FSD.HostileGuntowerModule
// Size: 0x3e0 (Inherited: 0x3b0)
struct AHostileGuntowerModule : AGuntowerModule {
	char pad_3B0[0x8]; // 0x3b0(0x08)
	struct USkeletalMeshComponent* DestroyedMesh; // 0x3b8(0x08)
	struct UParticleSystemComponent* DestroyedSmoke; // 0x3c0(0x08)
	struct UEnemyComponent* EnemyComponent; // 0x3c8(0x08)
	float ModuleMaxHealth; // 0x3d0(0x04)
	struct FRotator CurrentAimRotation; // 0x3d4(0x0c)

	void OnWeakpointDied(struct UHealthComponentBase* Health); // Function FSD.HostileGuntowerModule.OnWeakpointDied // (Final|Native|Protected) // @ game+0x1159940
	void OnRep_ModuleMaxHealth(); // Function FSD.HostileGuntowerModule.OnRep_ModuleMaxHealth // (Final|Native|Protected) // @ game+0x11598a0
	void OnModuleDied(struct UHealthComponentBase* Health); // Function FSD.HostileGuntowerModule.OnModuleDied // (Native|Protected) // @ game+0x11594b0
};

// Class FSD.HostileTargetingGuntowerModule
// Size: 0x420 (Inherited: 0x3e0)
struct AHostileTargetingGuntowerModule : AHostileGuntowerModule {
	struct TArray<struct AActor*> SensedTargets; // 0x3e0(0x10)
	char pad_3F0[0xc]; // 0x3f0(0x0c)
	float TurretRotationSpeed; // 0x3fc(0x04)
	struct AActor* TargetedActor; // 0x400(0x08)
	float TargetingRotationSpeed; // 0x408(0x04)
	struct FName TargetingFromBone; // 0x40c(0x08)
	float TimeUntilForgetTarget; // 0x414(0x04)
	char pad_418[0x4]; // 0x418(0x04)
	bool AlwaysUpdateAimRotation; // 0x41c(0x01)
	char pad_41D[0x3]; // 0x41d(0x03)

	void OnPerceptionUpdated(struct AActor* sensedActor, struct FAIStimulus Stimulus); // Function FSD.HostileTargetingGuntowerModule.OnPerceptionUpdated // (Native|Public) // @ game+0x1159540
};

// Class FSD.LMGGuntoweModule
// Size: 0x4a8 (Inherited: 0x420)
struct ALMGGuntoweModule : AHostileTargetingGuntowerModule {
	struct UHitscanComponent* HitScanComp; // 0x420(0x08)
	struct UDamageComponent* DamageComp; // 0x428(0x08)
	struct USceneComponent* AimAtWhenNoTarget; // 0x430(0x08)
	struct UAudioComponent* FireAudio; // 0x438(0x08)
	char pad_440[0x10]; // 0x440(0x10)
	struct UParticleSystem* TracerEffect; // 0x450(0x08)
	struct UParticleSystem* MuzzleEffect; // 0x458(0x08)
	struct USoundCue* ShootTailSound; // 0x460(0x08)
	char pad_468[0x8]; // 0x468(0x08)
	int32_t BurstSize; // 0x470(0x04)
	char pad_474[0xc]; // 0x474(0x0c)
	float MaxAimOffset; // 0x480(0x04)
	float IdleAimRotationSpeed; // 0x484(0x04)
	char pad_488[0x10]; // 0x488(0x10)
	float TimeBetweenShots; // 0x498(0x04)
	float TimeBetweenBursts; // 0x49c(0x04)
	float AimSpeed; // 0x4a0(0x04)
	char pad_4A4[0x1]; // 0x4a4(0x01)
	bool IsFiresoundPlaying; // 0x4a5(0x01)
	char pad_4A6[0x2]; // 0x4a6(0x02)

	void ShowShot(struct FVector Location); // Function FSD.LMGGuntoweModule.ShowShot // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1159bd0
	void OnRep_IsFiresoundPlaying(); // Function FSD.LMGGuntoweModule.OnRep_IsFiresoundPlaying // (Final|Native|Protected) // @ game+0x1159880
};

// Class FSD.RandomFiringGuntowerModule
// Size: 0x560 (Inherited: 0x3e0)
struct ARandomFiringGuntowerModule : AHostileGuntowerModule {
	struct UStaticMeshComponent* LaserFrontTop; // 0x3e0(0x08)
	struct UStaticMeshComponent* LaserFrontBottom; // 0x3e8(0x08)
	struct UStaticMeshComponent* LaserBackTop; // 0x3f0(0x08)
	struct UStaticMeshComponent* LaserBackBottom; // 0x3f8(0x08)
	struct UParticleSystemComponent* FrontTopLaserMuzzle; // 0x400(0x08)
	struct UParticleSystemComponent* FrontBottomLaserMuzzle; // 0x408(0x08)
	struct UParticleSystemComponent* BackTopLaserMuzzle; // 0x410(0x08)
	struct UParticleSystemComponent* BackBottomLaserMuzzle; // 0x418(0x08)
	char pad_420[0xc4]; // 0x420(0xc4)
	struct FRotator OtherCurrentRotation; // 0x4e4(0x0c)
	char pad_4F0[0x10]; // 0x4f0(0x10)
	struct UParticleSystem* LaserImpact; // 0x500(0x08)
	struct UAudioComponent* LaserSound; // 0x508(0x08)
	struct UDamageComponent* Damage; // 0x510(0x08)
	float BoneSpaceTurretMaxYaw; // 0x518(0x04)
	float BoneSpaceTurretMaxPitch; // 0x51c(0x04)
	float TimeBetweenAttacks; // 0x520(0x04)
	float TimeUntilNextAttack; // 0x524(0x04)
	float ModuleRotationSpeed; // 0x528(0x04)
	float TurretAimSpeed; // 0x52c(0x04)
	float LaserLeghtRatio; // 0x530(0x04)
	float TimeBetweenHits; // 0x534(0x04)
	char pad_538[0x4]; // 0x538(0x04)
	float ChanceToInvert; // 0x53c(0x04)
	float PlatformDissolveRadius; // 0x540(0x04)
	float PlatformDissolveSqueeze; // 0x544(0x04)
	char pad_548[0x10]; // 0x548(0x10)
	bool IsAttacking; // 0x558(0x01)
	char pad_559[0x7]; // 0x559(0x07)
};

// Class FSD.RadialFireModule
// Size: 0x428 (Inherited: 0x3e0)
struct ARadialFireModule : AHostileGuntowerModule {
	struct AProjectile* projectileClass; // 0x3e0(0x08)
	struct FRotator AttackEndRotation; // 0x3e8(0x0c)
	float RotationSpeedTurret; // 0x3f4(0x04)
	char pad_3F8[0x4]; // 0x3f8(0x04)
	float DelayBetweenShots; // 0x3fc(0x04)
	char pad_400[0x4]; // 0x400(0x04)
	bool IsAttacking; // 0x404(0x01)
	char pad_405[0x3]; // 0x405(0x03)
	struct FName LeftFireSocket; // 0x408(0x08)
	struct FName RightFireSocket; // 0x410(0x08)
	struct FName FrontFireSocket; // 0x418(0x08)
	struct FName BackFireSocket; // 0x420(0x08)

	void OnFire(); // Function FSD.RadialFireModule.OnFire // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.HomingFireModule
// Size: 0x438 (Inherited: 0x420)
struct AHomingFireModule : AHostileTargetingGuntowerModule {
	struct FName ShootDroneSocket; // 0x420(0x08)
	struct AProjectile* HomingProjectileClass; // 0x428(0x08)
	float TimeBetweenShots; // 0x430(0x04)
	char pad_434[0x4]; // 0x434(0x04)
};

// Class FSD.HomingDroneBomb
// Size: 0x390 (Inherited: 0x340)
struct AHomingDroneBomb : AProjectile {
	char pad_340[0x8]; // 0x340(0x08)
	struct UEnemyHealthComponent* Health; // 0x348(0x08)
	struct USoundCue* ArmingSound; // 0x350(0x08)
	float HomingUpdateInterval; // 0x358(0x04)
	float TargetSearchInterval; // 0x35c(0x04)
	float ArmTime; // 0x360(0x04)
	char pad_364[0x4]; // 0x364(0x04)
	struct FGameplayTagContainer GameplayTags; // 0x368(0x20)
	float HomingAccelerationMagnitude; // 0x388(0x04)
	char pad_38C[0x4]; // 0x38c(0x04)

	void UpdateHomingSpeed(); // Function FSD.HomingDroneBomb.UpdateHomingSpeed // (Final|Native|Public) // @ game+0x1159d70
	void SearchForTarget(); // Function FSD.HomingDroneBomb.SearchForTarget // (Final|Native|Public) // @ game+0x1159a60
	void OnRep_HomingAccelerationMagnitude(); // Function FSD.HomingDroneBomb.OnRep_HomingAccelerationMagnitude // (Final|Native|Protected) // @ game+0x1159840
};

// Class FSD.GunTowerModuleAnimInstance
// Size: 0x290 (Inherited: 0x270)
struct UGunTowerModuleAnimInstance : UAnimInstance {
	struct FRotator CurrentModuleRotation; // 0x268(0x0c)
	struct FRotator CurrentLookAtRotation; // 0x274(0x0c)
	bool IsModuleActive; // 0x280(0x01)
	bool AreWeakpointsExposed; // 0x281(0x01)
	char pad_28A[0x6]; // 0x28a(0x06)
};

// Class FSD.RandomFireModuleAnimInstance
// Size: 0x2a0 (Inherited: 0x290)
struct URandomFireModuleAnimInstance : UGunTowerModuleAnimInstance {
	struct FRotator OtherLookatRotation; // 0x288(0x0c)
	char pad_29C[0x4]; // 0x29c(0x04)
};

// Class FSD.GuntowerWeakPoint
// Size: 0x338 (Inherited: 0x2f0)
struct AGuntowerWeakPoint : AFSDPawn {
	struct USceneComponent* Root; // 0x2f0(0x08)
	struct UEnemyHealthComponent* Health; // 0x2f8(0x08)
	struct UStaticMeshComponent* Mesh; // 0x300(0x08)
	struct UWeakpointGlowComponent* HitGlow; // 0x308(0x08)
	struct TWeakObjectPtr<struct UEnemyHealthComponent> ParentHealth; // 0x310(0x08)
	struct UDamageClass* DamageToParent; // 0x318(0x08)
	struct UParticleSystem* deathParticles; // 0x320(0x08)
	struct USoundCue* deathSound; // 0x328(0x08)
	char pad_330[0x8]; // 0x330(0x08)

	void OnExposedChanged(bool isExposed); // Function FSD.GuntowerWeakPoint.OnExposedChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.GuntowerWeakPoint.OnDeath // (Final|Native|Protected) // @ game+0x1159430
	void DamageParent(float ammount); // Function FSD.GuntowerWeakPoint.DamageParent // (Final|Native|Protected) // @ game+0x1158d40
};

// Class FSD.GunTowerHealthComponent
// Size: 0x280 (Inherited: 0x280)
struct UGunTowerHealthComponent : UEnemyHealthComponent {
};

// Class FSD.HackingToolItem
// Size: 0x3a0 (Inherited: 0x390)
struct AHackingToolItem : AAnimatedItem {
	struct TWeakObjectPtr<struct UHackingUsableComponent> HackingUsable; // 0x390(0x08)
	char pad_398[0x8]; // 0x398(0x08)

	void Server_HackingCompleted(bool InHackingSuccessful); // Function FSD.HackingToolItem.Server_HackingCompleted // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1159a80
	void ReceiveHackingStarted(); // Function FSD.HackingToolItem.ReceiveHackingStarted // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveClick(); // Function FSD.HackingToolItem.ReceiveClick // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_HackingUsable(); // Function FSD.HackingToolItem.OnRep_HackingUsable // (Final|Native|Protected) // @ game+0x1159820
	void HackingCompleted(bool InHackingSuccessful); // Function FSD.HackingToolItem.HackingCompleted // (Final|Native|Public|BlueprintCallable) // @ game+0x11591a0
};

// Class FSD.HackingUsableComponent
// Size: 0x1c8 (Inherited: 0x150)
struct UHackingUsableComponent : UInstantUsable {
	struct FMulticastInlineDelegate OnHacked; // 0x150(0x10)
	SoftClassProperty ItemType; // 0x160(0x28)
	SoftClassProperty HackingWidgetType; // 0x188(0x28)
	struct FHackingUsableState HackingState; // 0x1b0(0x14)
	char pad_1C4[0x4]; // 0x1c4(0x04)

	void OnRep_HackingState(struct FHackingUsableState oldState); // Function FSD.HackingUsableComponent.OnRep_HackingState // (Final|Native|Protected|HasOutParms|Const) // @ game+0x1159780
	void HackedDelegate__DelegateSignature(struct APlayerCharacter* InHackedBy); // DelegateFunction FSD.HackingUsableComponent.HackedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool GetIsHacked(); // Function FSD.HackingUsableComponent.GetIsHacked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1159090
	bool GetIsBeingHacked(); // Function FSD.HackingUsableComponent.GetIsBeingHacked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1159050
	SoftClassProperty GetHackingWidgetType(); // Function FSD.HackingUsableComponent.GetHackingWidgetType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1158fb0
	struct APlayerCharacter* GetHackedBy(); // Function FSD.HackingUsableComponent.GetHackedBy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1158f70
};

// Class FSD.HackingToolWidget
// Size: 0x280 (Inherited: 0x230)
struct UHackingToolWidget : UUserWidget {
	struct FMulticastInlineDelegate OnHackingFail; // 0x230(0x10)
	struct FMulticastInlineDelegate OnHackingStageCompleted; // 0x240(0x10)
	struct FMulticastInlineDelegate OnHackingCompleted; // 0x250(0x10)
	struct FMulticastInlineDelegate OnRequestUnequipHackingTool; // 0x260(0x10)
	struct TWeakObjectPtr<struct UHackingUsableComponent> HackingUsable; // 0x270(0x08)
	struct TWeakObjectPtr<struct AHackingToolItem> HackingTool; // 0x278(0x08)

	void StartHacking(struct UHackingUsableComponent* InHackingUsable, struct AHackingToolItem* InHackingTool); // Function FSD.HackingToolWidget.StartHacking // (Final|Native|Public|BlueprintCallable) // @ game+0x1159c60
	void RequestUnequipHackingTool(); // Function FSD.HackingToolWidget.RequestUnequipHackingTool // (Final|Native|Protected|BlueprintCallable) // @ game+0x11599c0
	void ReceiveHackingToolUnequipped(); // Function FSD.HackingToolWidget.ReceiveHackingToolUnequipped // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void ReceiveHackingStarted(); // Function FSD.HackingToolWidget.ReceiveHackingStarted // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveClick(); // Function FSD.HackingToolWidget.ReceiveClick // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void HackingUnequipDelegate__DelegateSignature(); // DelegateFunction FSD.HackingToolWidget.HackingUnequipDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void HackingStageCompletedDelegate__DelegateSignature(int32_t InNextStage, int32_t InTotalStages); // DelegateFunction FSD.HackingToolWidget.HackingStageCompletedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void HackingStageComplete(int32_t InNextStage, int32_t InTotalStages); // Function FSD.HackingToolWidget.HackingStageComplete // (Final|Native|Protected|BlueprintCallable) // @ game+0x1159230
	void HackingFailDelegate__DelegateSignature(struct USoundCue* InFailCue, struct UDialogDataAsset* InShout); // DelegateFunction FSD.HackingToolWidget.HackingFailDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void HackingCompleteDelegate__DelegateSignature(bool InSuccess); // DelegateFunction FSD.HackingToolWidget.HackingCompleteDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void HackingComplete(bool InSuccess); // Function FSD.HackingToolWidget.HackingComplete // (Final|Native|Protected|BlueprintCallable) // @ game+0x1159110
};

// Class FSD.WidgetComponentCustomMaterial
// Size: 0x540 (Inherited: 0x540)
struct UWidgetComponentCustomMaterial : UWidgetComponent {
	struct UMaterialInterface* CustomMaterial; // 0x538(0x08)
};

// Class FSD.HealthBarComponent
// Size: 0x540 (Inherited: 0x540)
struct UHealthBarComponent : UWidgetComponentCustomMaterial {
};

// Class FSD.HealthDamageTracker
// Size: 0xd0 (Inherited: 0xb0)
struct UHealthDamageTracker : UActorComponent {
	struct FMulticastInlineDelegate OnTrackedPercentageReachedEvent; // 0xb0(0x10)
	float TiggerOnPercentage; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct UHealthComponentBase* Health; // 0xc8(0x08)

	void ResetTrackedDamage(); // Function FSD.HealthDamageTracker.ResetTrackedDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x115d550
	void OnDamageTaken(float Amount); // Function FSD.HealthDamageTracker.OnDamageTaken // (Final|Native|Protected) // @ game+0x115d350
};

// Class FSD.PlayerCharacterData
// Size: 0xb8 (Inherited: 0x30)
struct UPlayerCharacterData : UDataAsset {
	struct FHeroInfo HeroInfo; // 0x30(0x88)

	struct FText GetSwitchToMessage(); // Function FSD.PlayerCharacterData.GetSwitchToMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115d180
	struct UTexture2D* GetSmallIcon(); // Function FSD.PlayerCharacterData.GetSmallIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115d160
	struct FText GetShortDescription(); // Function FSD.PlayerCharacterData.GetShortDescription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115d100
	struct FText GetName(); // Function FSD.PlayerCharacterData.GetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115d0d0
	struct FText GetLongDescription(); // Function FSD.PlayerCharacterData.GetLongDescription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115d0a0
	struct UTexture2D* GetIcon(); // Function FSD.PlayerCharacterData.GetIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10c4210
	struct UTexture2D* GetFullSizeImage(); // Function FSD.PlayerCharacterData.GetFullSizeImage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115cec0
	struct FLinearColor GetColor(); // Function FSD.PlayerCharacterData.GetColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x115ce10
};

// Class FSD.HitscanBaseComponent
// Size: 0x238 (Inherited: 0x110)
struct UHitscanBaseComponent : UWeaponFireComponent {
	struct FMulticastInlineDelegate OnSpreadChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnFireComplete; // 0x120(0x10)
	float SpreadPerShot; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
	struct UDamageComponent* DamageComponent; // 0x138(0x08)
	char pad_140[0x4]; // 0x140(0x04)
	float Damage; // 0x144(0x04)
	float ArmorDamageMultiplier; // 0x148(0x04)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct UDamageClass* DamageClass; // 0x150(0x08)
	float WeakpointDamageMultiplier; // 0x158(0x04)
	int32_t MaxPenetrations; // 0x15c(0x04)
	enum class EImpactDecalSize ImpactDecalSize; // 0x160(0x01)
	char pad_161[0x3]; // 0x161(0x03)
	float friendlyFireModifier; // 0x164(0x04)
	bool UseDynamicSpread; // 0x168(0x01)
	char pad_169[0x3]; // 0x169(0x03)
	float MinSpread; // 0x16c(0x04)
	float MinSpreadWhenMoving; // 0x170(0x04)
	float MinSpreadWhenSprinting; // 0x174(0x04)
	float MaxSpread; // 0x178(0x04)
	char pad_17C[0x4]; // 0x17c(0x04)
	struct FRuntimeFloatCurve SpreadCurve; // 0x180(0x88)
	float SpreadRecoveryPerSecond; // 0x208(0x04)
	char pad_20C[0x8]; // 0x20c(0x08)
	float VerticalSpreadMultiplier; // 0x214(0x04)
	float HorizontalSpredMultiplier; // 0x218(0x04)
	float MaxVerticalSpread; // 0x21c(0x04)
	float MaxHorizontalSpread; // 0x220(0x04)
	char pad_224[0x4]; // 0x224(0x04)
	enum class ERicochetBehavior RicochetBehavior; // 0x228(0x01)
	char pad_229[0x3]; // 0x229(0x03)
	float RicochetChance; // 0x22c(0x04)
	bool RicochetOnWeakspotOnly; // 0x230(0x01)
	char pad_231[0x3]; // 0x231(0x03)
	float RicochetMaxRange; // 0x234(0x04)

	void Server_StopFire(); // Function FSD.HitscanBaseComponent.Server_StopFire // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x108ba50
	void Server_RemoveDebris(int32_t instance, int32_t Component); // Function FSD.HitscanBaseComponent.Server_RemoveDebris // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x115df90
	float GetCurrentVerticalSpread(); // Function FSD.HitscanBaseComponent.GetCurrentVerticalSpread // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115ce90
	float GetCurrentHorizontalSpread(); // Function FSD.HitscanBaseComponent.GetCurrentHorizontalSpread // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115ce60
};

// Class FSD.HitscanComponent
// Size: 0x2f0 (Inherited: 0x238)
struct UHitscanComponent : UHitscanBaseComponent {
	struct FMulticastInlineDelegate OnHit; // 0x238(0x10)
	bool BulletsCanCarve; // 0x248(0x01)
	char pad_249[0x3]; // 0x249(0x03)
	struct FIRandRange NormalBulletsPerCarvingOne; // 0x24c(0x08)
	char pad_254[0x4]; // 0x254(0x04)
	float CarveDiameter; // 0x258(0x04)
	float CarveNoise; // 0x25c(0x04)
	float CarveDebrisSize; // 0x260(0x04)
	float GeneralImpactAudioVolume; // 0x264(0x04)
	float ImpactDelay; // 0x268(0x04)
	bool OnlyUseImpactEffects; // 0x26c(0x01)
	char pad_26D[0x3]; // 0x26d(0x03)
	struct UFXSystemAsset* ImpactParticles; // 0x270(0x08)
	struct USoundCue* ImpactSound; // 0x278(0x08)
	bool IgnoreAlwaysPenetrate; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
	struct TArray<struct AActor*> DamagedActorCache; // 0x288(0x10)
	char pad_298[0x58]; // 0x298(0x58)

	void Server_RegisterRicochetHit_Terrain(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.Server_RegisterRicochetHit_Terrain // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x115ddb0
	void Server_RegisterRicochetHit_Destructable(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UPrimitiveComponent* Target, struct UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // Function FSD.HitscanComponent.Server_RegisterRicochetHit_Destructable // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x115dbc0
	void Server_RegisterRicochetHit(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UPrimitiveComponent* Target, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.Server_RegisterRicochetHit // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x115da10
	void Server_RegisterHit_Terrain(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.Server_RegisterHit_Terrain // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x115d8a0
	void Server_RegisterHit_Destructable(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UPrimitiveComponent* Target, struct UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // Function FSD.HitscanComponent.Server_RegisterHit_Destructable // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x115d700
	void Server_RegisterHit(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UPrimitiveComponent* Target, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.Server_RegisterHit // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x115d570
	void All_ShowRicochetHit_Terrain(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, char MaterialID, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.All_ShowRicochetHit_Terrain // (Net|Native|Event|NetMulticast|Protected) // @ game+0x115cba0
	void All_ShowRicochetHit_Destructable(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UPrimitiveComponent* Target, struct UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // Function FSD.HitscanComponent.All_ShowRicochetHit_Destructable // (Net|Native|Event|NetMulticast|Protected) // @ game+0x115c9b0
	void All_ShowRicochetHit(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, bool SpawnDecal, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.All_ShowRicochetHit // (Net|Native|Event|NetMulticast|Protected) // @ game+0x115c7f0
	void All_ShowHit_Terrain(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, char MaterialID, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.All_ShowHit_Terrain // (Net|Native|Event|NetMulticast|Protected) // @ game+0x115c660
	void All_ShowHit_Destructable(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, struct UPrimitiveComponent* Target, struct UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // Function FSD.HitscanComponent.All_ShowHit_Destructable // (Net|Native|Event|NetMulticast|Protected) // @ game+0x115c4d0
	void All_ShowHit(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal, bool SpawnDecal, struct UFSDPhysicalMaterial* PhysMaterial); // Function FSD.HitscanComponent.All_ShowHit // (Net|Native|Event|NetMulticast|Protected) // @ game+0x115c340
};

// Class FSD.HostileGuntowerModuleController
// Size: 0x368 (Inherited: 0x358)
struct AHostileGuntowerModuleController : AFSDAIController {
	struct UAIPerceptionComponent* Perception; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)

	void OnPerceptionUpdated(struct AActor* sensedActor, struct FAIStimulus Stimulus); // Function FSD.HostileGuntowerModuleController.OnPerceptionUpdated // (Native|Public) // @ game+0x115d3d0
};

// Class FSD.HttpUtilityLibrary
// Size: 0x28 (Inherited: 0x28)
struct UHttpUtilityLibrary : UBlueprintFunctionLibrary {
};

// Class FSD.HUDHealthBar
// Size: 0x320 (Inherited: 0x250)
struct UHUDHealthBar : UFSDUserWidget {
	struct FMulticastInlineDelegate OnOwnerDead; // 0x250(0x10)
	struct FLinearColor BackgroundColor; // 0x260(0x10)
	struct FLinearColor HealthColor; // 0x270(0x10)
	struct FLinearColor DamageColor; // 0x280(0x10)
	struct TMap<enum class EHealthbarType, struct FHealthBarLooks> HealthBarLooks; // 0x290(0x50)
	struct FLinearColor OutlineColor; // 0x2e0(0x10)
	int32_t OutlineThickness; // 0x2f0(0x04)
	float HealthAnimationFactor; // 0x2f4(0x04)
	float HealthPerCell; // 0x2f8(0x04)
	int32_t MinHealthCells; // 0x2fc(0x04)
	int32_t MaxHealthCells; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
	struct TScriptInterface<None> TargetHealth; // 0x308(0x10)
	float AnimatedHealth; // 0x318(0x04)
	float MaxHealth; // 0x31c(0x04)

	void SetHealthComponent(struct TScriptInterface<None> Health, float Damage); // Function FSD.HUDHealthBar.SetHealthComponent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x115e0e0
	float GetCurrentHealth(); // Function FSD.HUDHealthBar.GetCurrentHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115ce30
};

// Class FSD.HUDVisibilityGroup
// Size: 0x98 (Inherited: 0x30)
struct UHUDVisibilityGroup : UDataAsset {
	struct FMulticastInlineDelegate OnModeChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnVisibilityChanged; // 0x40(0x10)
	enum class EHUDVisibilityGroups GroupID; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct FText Title; // 0x58(0x18)
	bool AllowDynamicMode; // 0x70(0x01)
	bool AllowHiddenMode; // 0x71(0x01)
	char pad_72[0x6]; // 0x72(0x06)
	bool bDynamicallyVisible; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct TArray<struct FHUDVisibilityRegisteredWidget> RegisteredWidgets; // 0x80(0x10)
	enum class EHUDVisibilityMode RecommendedMode; // 0x90(0x01)
	enum class EHUDVisibilityMode MinimalMode; // 0x91(0x01)
	char pad_92[0x6]; // 0x92(0x06)

	void VisibilityDelegate__DelegateSignature(struct UHUDVisibilityGroup* Group, bool IsVisible); // DelegateFunction FSD.HUDVisibilityGroup.VisibilityDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void SetModeFromPreset(enum class EHUDVisibilityPresets Preset); // Function FSD.HUDVisibilityGroup.SetModeFromPreset // (Final|Native|Public|BlueprintCallable) // @ game+0x1163040
	void SetMode(enum class EHUDVisibilityMode InMode); // Function FSD.HUDVisibilityGroup.SetMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1162fc0
	void SetHudGroupDynamicallyVisible(struct UHUDVisibilityGroup* Group, bool IsVisible); // Function FSD.HUDVisibilityGroup.SetHudGroupDynamicallyVisible // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x1162e70
	void SetGroupDynamicallyVisible(bool IsVisible); // Function FSD.HUDVisibilityGroup.SetGroupDynamicallyVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x1162de0
	void RegisterWidgetWithVisibilityGroup(struct UWidget* Widget, struct UHUDVisibilityGroup* Group, enum class ESlateVisibility VisibleMode, enum class ESlateVisibility HiddenMode); // Function FSD.HUDVisibilityGroup.RegisterWidgetWithVisibilityGroup // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x1162bb0
	void RegisterMultipleWidgetsWithVisibilityGroup(struct TArray<struct UWidget*> Widgets, struct UHUDVisibilityGroup* Group, enum class ESlateVisibility VisibleMode, enum class ESlateVisibility HiddenMode); // Function FSD.HUDVisibilityGroup.RegisterMultipleWidgetsWithVisibilityGroup // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x1162a30
	void ModeDelegate__DelegateSignature(struct UHUDVisibilityGroup* Group, enum class EHUDVisibilityMode Mode); // DelegateFunction FSD.HUDVisibilityGroup.ModeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool IsModeAllowed(enum class EHUDVisibilityMode InMode); // Function FSD.HUDVisibilityGroup.IsModeAllowed // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11625e0
	bool IsInDynamicMode(); // Function FSD.HUDVisibilityGroup.IsInDynamicMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11625b0
	bool IsHudGroupVisible(struct UHUDVisibilityGroup* Group); // Function FSD.HUDVisibilityGroup.IsHudGroupVisible // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1162530
	bool IsGroupVisible(); // Function FSD.HUDVisibilityGroup.IsGroupVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1162500
	enum class EHUDVisibilityMode GetMode(); // Function FSD.HUDVisibilityGroup.GetMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1162390
	struct TArray<enum class EHUDVisibilityMode> GetAllowedModes(); // Function FSD.HUDVisibilityGroup.GetAllowedModes // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1162150
};

// Class FSD.HUDWarningWidget
// Size: 0x250 (Inherited: 0x250)
struct UHUDWarningWidget : UFSDUserWidget {

	void SetData(struct UTexture2D* Texture, struct USoundBase* PingSound); // Function FSD.HUDWarningWidget.SetData // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void Ping(bool DestroyAfterPing); // Function FSD.HUDWarningWidget.Ping // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.HydraWeedCore
// Size: 0x340 (Inherited: 0x340)
struct AHydraWeedCore : AEnemyPawn {

	void WakupCore(); // Function FSD.HydraWeedCore.WakupCore // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void OnShooterKilled(struct AHydraWeedShooter* shooter); // Function FSD.HydraWeedCore.OnShooterKilled // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void OnHealerKilled(struct AHydraWeedHealer* healer); // Function FSD.HydraWeedCore.OnHealerKilled // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ShootingPlant
// Size: 0x350 (Inherited: 0x340)
struct AShootingPlant : AEnemyPawn {
	bool IsVisible; // 0x340(0x01)
	char pad_341[0x7]; // 0x341(0x07)
	struct AActor* Target; // 0x348(0x08)

	void SetTarget(struct AActor* Target); // Function FSD.ShootingPlant.SetTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x12057c0
	void OnRep_Target(); // Function FSD.ShootingPlant.OnRep_Target // (Native|Event|Protected|BlueprintEvent) // @ game+0x10926c0
};

// Class FSD.HydraWeedShooter
// Size: 0x358 (Inherited: 0x350)
struct AHydraWeedShooter : AShootingPlant {
	struct AHydraWeedCore* Core; // 0x350(0x08)
};

// Class FSD.HydraWeedHealer
// Size: 0x348 (Inherited: 0x340)
struct AHydraWeedHealer : AEnemyPawn {
	struct AHydraWeedCore* Core; // 0x340(0x08)
};

// Class FSD.HydraWeedSpawnProjectile
// Size: 0x350 (Inherited: 0x340)
struct AHydraWeedSpawnProjectile : AProjectile {
	struct FVector TargetLocation; // 0x340(0x0c)
	char pad_34C[0x4]; // 0x34c(0x04)
};

// Class FSD.TriggerAI
// Size: 0x28 (Inherited: 0x28)
struct UTriggerAI : UInterface {

	bool OnTriggerAI(struct FName TriggerName); // Function FSD.TriggerAI.OnTriggerAI // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x10fbab0
	void OnMessageAI(struct FName TriggerName); // Function FSD.TriggerAI.OnMessageAI // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x11627c0
};

// Class FSD.IconGenerationManager
// Size: 0x1c8 (Inherited: 0x28)
struct UIconGenerationManager : UObject {
	struct AIconGenerationCharacter* GeneratorInst; // 0x28(0x08)
	struct AIconGenerationPickaxe* PickaxeGeneratorInst; // 0x30(0x08)
	struct AIconGenerationWeapon* WeaponGeneratorInst; // 0x38(0x08)
	char pad_40[0x50]; // 0x40(0x50)
	struct TArray<struct FGenerateIconInfo> ItemGenerationQueue; // 0x90(0x10)
	char pad_A0[0x28]; // 0xa0(0x28)
	struct TArray<enum class EVanitySlot> VanitySlots; // 0xc8(0x10)
	struct TArray<struct UVanityItem*> HairColorHairItems; // 0xd8(0x10)
	SoftClassProperty IconCharacter; // 0xe8(0x28)
	SoftClassProperty IconPickaxe; // 0x110(0x28)
	SoftClassProperty IconWeapon; // 0x138(0x28)
	struct UTextureRenderTarget2D* LatestGeneratedTexture; // 0x160(0x08)
	struct AIconGenerationBase* ActiveIconGenerator; // 0x168(0x08)
	char pad_170[0x58]; // 0x170(0x58)

	void GenerateWeaponIcon_Async(struct UIconGenerationManager* Manager, struct UItemSkin* Item, bool inShowCloseUp, struct UPlayerCharacterID* Character, struct UTextureRenderTarget2D* Icon, struct FLatentActionInfo LatentInfo); // Function FSD.IconGenerationManager.GenerateWeaponIcon_Async // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1161f60
	void GenerateVanityIcon_Async(struct UIconGenerationManager* Manager, struct UVanityItem* Item, struct UPlayerCharacterID* Character, struct UTextureRenderTarget2D* Icon, struct FLatentActionInfo LatentInfo); // Function FSD.IconGenerationManager.GenerateVanityIcon_Async // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1161dc0
	void GeneratePickaxeSetIcon_Async(struct UIconGenerationManager* Manager, struct FPickaxeSet PickaxeSet, struct UPlayerCharacterID* Character, struct UTextureRenderTarget2D* Icon, struct FLatentActionInfo LatentInfo); // Function FSD.IconGenerationManager.GeneratePickaxeSetIcon_Async // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1161be0
	void GeneratePickaxePartIcon_Async(struct UIconGenerationManager* Manager, struct UPickaxePart* part, enum class EPickaxePartLocation PickaxePartLocation, struct UPlayerCharacterID* Character, struct UTextureRenderTarget2D* Icon, struct FLatentActionInfo LatentInfo); // Function FSD.IconGenerationManager.GeneratePickaxePartIcon_Async // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1161a00
};

// Class FSD.IconGeneratable
// Size: 0x28 (Inherited: 0x28)
struct UIconGeneratable : UInterface {
};

// Class FSD.Craftable
// Size: 0x28 (Inherited: 0x28)
struct UCraftable : UInterface {

	void PreviewItem(struct AFSDPlayerState* PlayerState, bool Show); // Function FSD.Craftable.PreviewItem // (Native|Public|BlueprintCallable|Const) // @ game+0x11628c0
	bool IsOwned(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.Craftable.IsOwned // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1162670
	struct TArray<struct FCraftingCost> GetResourceCost(); // Function FSD.Craftable.GetResourceCost // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1162420
	int32_t GetRequiredPlayerRank(); // Function FSD.Craftable.GetRequiredPlayerRank // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11623f0
	int32_t GetCraftingCreditsCost(); // Function FSD.Craftable.GetCraftingCreditsCost // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11622b0
	struct FText GetCraftableName(); // Function FSD.Craftable.GetCraftableName // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1162270
	struct UTexture2D* GetCraftableIcon(); // Function FSD.Craftable.GetCraftableIcon // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1162240
	struct FText GetCraftableDescription(); // Function FSD.Craftable.GetCraftableDescription // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1162200
	void CraftItem(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.Craftable.CraftItem // (Native|Public|BlueprintCallable|Const) // @ game+0x1161800
	bool CanCraft(struct UObject* WorldContextObject); // Function FSD.Craftable.CanCraft // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1161760
};

// Class FSD.FootStepNotifyTarget
// Size: 0x28 (Inherited: 0x28)
struct UFootStepNotifyTarget : UInterface {
};

// Class FSD.Health
// Size: 0x28 (Inherited: 0x28)
struct UHealth : UInterface {

	bool IsDead(); // Function FSD.Health.IsDead // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1145b90
	bool IsAlive(); // Function FSD.Health.IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11624d0
	struct AActor* GetOwner(); // Function FSD.Health.GetOwner // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11623c0
	float GetMaxHealth(); // Function FSD.Health.GetMaxHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1162360
	enum class EHealthbarType GetHealthbarType(); // Function FSD.Health.GetHealthbarType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1162310
	float GetHealth(); // Function FSD.Health.GetHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11622e0
};

// Class FSD.InputCompatible
// Size: 0x28 (Inherited: 0x28)
struct UInputCompatible : UInterface {
};

// Class FSD.ImpactComponent
// Size: 0x120 (Inherited: 0xb0)
struct UImpactComponent : UActorComponent {
	struct FMulticastInlineDelegate OnImpactedEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnHighAcceleration; // 0xc0(0x10)
	bool DebugText; // 0xd0(0x01)
	char pad_D1[0x2b]; // 0xd1(0x2b)
	bool TrackAcceleration; // 0xfc(0x01)
	bool TrackVelocity; // 0xfd(0x01)
	char pad_FE[0x6]; // 0xfe(0x06)
	float TriggerHighAccelAt; // 0x104(0x04)
	char pad_108[0x8]; // 0x108(0x08)
	float TriggerAtVelocityDifference; // 0x110(0x04)
	char pad_114[0xc]; // 0x114(0x0c)

	void SetCheckVelocity(bool aCheckVelocity); // Function FSD.ImpactComponent.SetCheckVelocity // (Final|Native|Public|BlueprintCallable) // @ game+0x1162d60
	void SetCheckAcceleration(bool aCheckAcceleration); // Function FSD.ImpactComponent.SetCheckAcceleration // (Final|Native|Public|BlueprintCallable) // @ game+0x1162ce0
	void EnableImpactCheckhing(struct USceneComponent* cmp); // Function FSD.ImpactComponent.EnableImpactCheckhing // (Final|Native|Public|BlueprintCallable) // @ game+0x1161900
	void DisableImpactChecking(); // Function FSD.ImpactComponent.DisableImpactChecking // (Final|Native|Public|BlueprintCallable) // @ game+0x11618c0
};

// Class FSD.WeaponImpactComponent
// Size: 0x128 (Inherited: 0xb0)
struct UWeaponImpactComponent : UActorComponent {
	struct FMulticastInlineDelegate OnImpactedEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnHighAcceleration; // 0xc0(0x10)
	bool DebugText; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	struct FName ImpactSocketName; // 0xd4(0x08)
	char pad_DC[0x4]; // 0xdc(0x04)
	struct USkeletalMeshComponent* ActiveMesh; // 0xe0(0x08)
	char pad_E8[0x28]; // 0xe8(0x28)
	bool TrackAcceleration; // 0x110(0x01)
	bool TrackVelocity; // 0x111(0x01)
	char pad_112[0x6]; // 0x112(0x06)
	float TriggerHighAccelAt; // 0x118(0x04)
	char pad_11C[0x8]; // 0x11c(0x08)
	float TriggerAtVelocityDifference; // 0x124(0x04)

	void EnableImpactCheckhing(struct USkeletalMeshComponent* cmp); // Function FSD.WeaponImpactComponent.EnableImpactCheckhing // (Final|Native|Public|BlueprintCallable) // @ game+0x1161980
	void DisableImpactChecking(); // Function FSD.WeaponImpactComponent.DisableImpactChecking // (Final|Native|Public|BlueprintCallable) // @ game+0x11618e0
};

// Class FSD.ImpactAudioComponent
// Size: 0x800 (Inherited: 0x7d0)
struct UImpactAudioComponent : UAudioComponent {
	struct FName AudioParameterSpeed; // 0x7d0(0x08)
	char pad_7D8[0x14]; // 0x7d8(0x14)
	float DecelerationThreshold; // 0x7ec(0x04)
	char pad_7F0[0x4]; // 0x7f0(0x04)
	bool ListenForDeath; // 0x7f4(0x01)
	char pad_7F5[0xb]; // 0x7f5(0x0b)

	void OnOwnerDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.ImpactAudioComponent.OnOwnerDeath // (Final|Native|Public) // @ game+0x1162840
	struct UImpactAudioComponent* AddImpactAudioToActor(struct AActor* Actor, struct USceneComponent* AttachToComponent, struct UImpactAudioComponent* ComponentClass); // Function FSD.ImpactAudioComponent.AddImpactAudioToActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1161670
};

// Class FSD.FSDReverbVolume
// Size: 0x238 (Inherited: 0x220)
struct AFSDReverbVolume : AActor {
	struct USphereComponent* Collision; // 0x220(0x08)
	struct UReverbEffect* Reverb; // 0x228(0x08)
	float Priority; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
};

// Class FSD.InDangerComponent
// Size: 0xe8 (Inherited: 0xb0)
struct UInDangerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnInDanger; // 0xb0(0x10)
	struct TWeakObjectPtr<struct UHealthComponentBase> ParentHealthComponent; // 0xc0(0x08)
	float DamageTimeLimit; // 0xc8(0x04)
	float DamageThreshold; // 0xcc(0x04)
	bool RunsOnClients; // 0xd0(0x01)
	char pad_D1[0x17]; // 0xd1(0x17)

	void SetIsActive(bool aFlag); // Function FSD.InDangerComponent.SetIsActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1162f30
	void OnDamage(float Amount); // Function FSD.InDangerComponent.OnDamage // (Native|Public) // @ game+0x1162740
	bool GetIsActive(); // Function FSD.InDangerComponent.GetIsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1162340
};

// Class FSD.NetMontageAble
// Size: 0x28 (Inherited: 0x28)
struct UNetMontageAble : UInterface {

	float QueueMontage(struct UAnimMontage* Montage); // Function FSD.NetMontageAble.QueueMontage // (Native|Public|BlueprintCallable) // @ game+0x1162990
	struct USkeletalMeshComponent* GetSkeletalMesh(); // Function FSD.NetMontageAble.GetSkeletalMesh // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11624a0
	struct UAnimInstance* GetAnimInstance(); // Function FSD.NetMontageAble.GetAnimInstance // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11621d0
};

// Class FSD.NotifyMessageReceiver
// Size: 0x28 (Inherited: 0x28)
struct UNotifyMessageReceiver : UInterface {

	bool OnNotifyMessageReceived(struct FName TriggerName); // Function FSD.NotifyMessageReceiver.OnNotifyMessageReceived // (Native|Event|Public|BlueprintEvent) // @ game+0x1167ff0
};

// Class FSD.InputCaptureWidget
// Size: 0x270 (Inherited: 0x230)
struct UInputCaptureWidget : UUserWidget {
	struct FCustomKeySetting Settings; // 0x230(0x38)
	enum class EKeyBindingSlot InputSlot; // 0x268(0x01)
	bool bIsGamepadKey; // 0x269(0x01)
	bool bCapturing; // 0x26a(0x01)
	char pad_26B[0x5]; // 0x26b(0x05)

	void SetData(struct FCustomKeySetting InSettings, enum class EKeyBindingSlot InInputSlot, bool InIsGamepadKey); // Function FSD.InputCaptureWidget.SetData // (Final|Native|Public|BlueprintCallable) // @ game+0x1168560
	void SetCurrentBinding(struct FKey InKey); // Function FSD.InputCaptureWidget.SetCurrentBinding // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1168490
	void ReceiveKeyChanged(struct FKey InKey); // Function FSD.InputCaptureWidget.ReceiveKeyChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveKeyCaptured(struct FKey InKey); // Function FSD.InputCaptureWidget.ReceiveKeyCaptured // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveCapturingChanged(bool InCapturing); // Function FSD.InputCaptureWidget.ReceiveCapturingChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct FKey GetCurrentBinding(); // Function FSD.InputCaptureWidget.GetCurrentBinding // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1166ba0
	bool FindCurrentSettingsForKey(struct FKey InKey, struct FCustomKeySetting OutSettings); // Function FSD.InputCaptureWidget.FindCurrentSettingsForKey // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1166380
	void ClearCurrentBinding(); // Function FSD.InputCaptureWidget.ClearCurrentBinding // (Final|Native|Protected|BlueprintCallable) // @ game+0x1165f90
	void BindActionToKey(struct FCustomKeySetting InAction, struct FKey InKey, enum class EKeyBindingSlot InSlot, bool SaveToDisk); // Function FSD.InputCaptureWidget.BindActionToKey // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1165d10
};

// Class FSD.InputFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UInputFunctionLibrary : UBlueprintFunctionLibrary {

	void SetMouseSmoothingOn(bool smoothingOn); // Function FSD.InputFunctionLibrary.SetMouseSmoothingOn // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1168730
	bool IsMouseSmoothingOn(); // Function FSD.InputFunctionLibrary.IsMouseSmoothingOn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1167f10
	bool IsMouseEventAction(struct FPointerEvent MouseEvent, struct FName ActionName, bool IgnoreCustomBindings); // Function FSD.InputFunctionLibrary.IsMouseEventAction // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1167d50
	bool IsKeyEventActionAny(struct FKeyEvent KeyEvent, struct TArray<struct FName> ActionNames, bool IgnoreCustomBindings); // Function FSD.InputFunctionLibrary.IsKeyEventActionAny // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1167b70
	bool IsKeyEventAction(struct FKeyEvent KeyEvent, struct FName ActionName, bool IgnoreCustomBindings); // Function FSD.InputFunctionLibrary.IsKeyEventAction // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11679d0
	bool IsAxisMappedToDirectional(struct FName InActionName, struct FKey Key, int32_t Direction, bool IgnoreCustomBindings); // Function FSD.InputFunctionLibrary.IsAxisMappedToDirectional // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1167850
	bool IsActionMappedTo(struct FName InActionName, struct FKey Key, bool IgnoreCustomBindings); // Function FSD.InputFunctionLibrary.IsActionMappedTo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11676f0
	struct TArray<struct FKey> GetInputKeysBoundToAction(struct FName ActionName, enum class EKeyBindingAxis Axis, bool IsGamePadKey); // Function FSD.InputFunctionLibrary.GetInputKeysBoundToAction // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1166c60
	bool GetAxisMapping(struct FName InActionName, int32_t Axis, bool InGamepadKeys, struct FInputAxisKeyMapping OutResult); // Function FSD.InputFunctionLibrary.GetAxisMapping // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1166970
	bool GetActionMapping(struct FName InActionName, bool InGamepadKeys, struct FInputActionKeyMapping OutResult); // Function FSD.InputFunctionLibrary.GetActionMapping // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11666e0
	bool FindInputDisplay(struct APlayerController* PlayerController, struct FName InputName, enum class EFSDInputSource InputSource, int32_t LayoutIndex, struct FInputDisplay OutInputDisplay); // Function FSD.InputFunctionLibrary.FindInputDisplay // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1166510
	struct UTexture2D* FindActionIcon(struct FName InActionName, bool InGamepadKeys); // Function FSD.InputFunctionLibrary.FindActionIcon // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11662c0
};

// Class FSD.InsectSwarmEnemy
// Size: 0x3a8 (Inherited: 0x3a0)
struct AInsectSwarmEnemy : AEnemyDeepPathfinderCharacter {
	struct UParticleSystemComponent* SwarmParticles; // 0x3a0(0x08)
};

// Class FSD.InsectSwarmSpawner
// Size: 0x360 (Inherited: 0x340)
struct AInsectSwarmSpawner : AEnemyPawn {
	struct AInsectSwarmEnemy* SwarmType; // 0x340(0x08)
	float SpawnHeightOffset; // 0x348(0x04)
	float AlertDistance; // 0x34c(0x04)
	float respawnDelay; // 0x350(0x04)
	struct TWeakObjectPtr<struct AInsectSwarmEnemy> SwarmInstance; // 0x354(0x08)
	char pad_35C[0x4]; // 0x35c(0x04)

	struct UStaticMeshComponent* Receive_GetStaticMesh(); // Function FSD.InsectSwarmSpawner.Receive_GetStaticMesh // (Event|Protected|BlueprintEvent|Const) // @ game+0x158ca90
	void OnSwarmSpawned(struct AInsectSwarmEnemy* Swarm); // Function FSD.InsectSwarmSpawner.OnSwarmSpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnSwarmDestroyed(struct AActor* DestroyedActor); // Function FSD.InsectSwarmSpawner.OnSwarmDestroyed // (Final|Native|Protected) // @ game+0x11681f0
};

// Class FSD.InstancedMeshOnSpline
// Size: 0x560 (Inherited: 0x530)
struct UInstancedMeshOnSpline : UInstancedStaticMeshComponent {
	struct USplineComponent* Spline; // 0x528(0x08)
	int32_t NumInstances; // 0x530(0x04)
	float Speed; // 0x534(0x04)
	float VerticalOffset; // 0x538(0x04)
	struct FVector Scale; // 0x53c(0x0c)
	struct TArray<struct FTransform> NewInstancesTransforms; // 0x548(0x10)
	float Phase; // 0x558(0x04)

	void SetSpeed(float newSpeed); // Function FSD.InstancedMeshOnSpline.SetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x11687b0
};

// Class FSD.InventoryComponent
// Size: 0x278 (Inherited: 0xb0)
struct UInventoryComponent : UActorComponent {
	struct FMulticastInlineDelegate OnItemsLoaded; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnItemClicked; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnItemEquipped; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnItemUnequipped; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnGrenadeCountChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnFlareCountChanged; // 0x100(0x10)
	struct FMulticastInlineDelegate OnMaxFlareCountChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnFlareProduction; // 0x120(0x10)
	struct FMulticastInlineDelegate OnResuppliedEvent; // 0x130(0x10)
	struct FMulticastInlineDelegate OnCarriableChangedEvent; // 0x140(0x10)
	bool bItemsLoaded; // 0x150(0x01)
	char pad_151[0xf]; // 0x151(0x0f)
	struct UInventoryList* InventoryList; // 0x160(0x08)
	struct AThrownGrenadeItem* ThrownGrenadeClass; // 0x168(0x08)
	struct TArray<struct AItem*> Items; // 0x170(0x10)
	struct TArray<struct AItem*> UnlistedItems; // 0x180(0x10)
	struct APickaxeItem* MiningItem; // 0x190(0x08)
	struct AThrownGrenadeItem* GrenadeItem; // 0x198(0x08)
	struct ALaserPointerItem* LaserPointerItem; // 0x1a0(0x08)
	struct ATerrainScannerItem* TerrainScannerItem; // 0x1a8(0x08)
	struct ARecallableSentryGunItem* RecallableSentryGunItem; // 0x1b0(0x08)
	struct AItem* PickedUpItem; // 0x1b8(0x08)
	struct ARessuplyPodItem* ResupplyItem; // 0x1c0(0x08)
	struct AItem* PreviousItem; // 0x1c8(0x08)
	struct TArray<struct AItem*> EquipHistory; // 0x1d0(0x10)
	char pad_1E0[0x8]; // 0x1e0(0x08)
	struct FCarriedItemState CarriedItem; // 0x1e8(0x10)
	struct FVector FlareOffset; // 0x1f8(0x0c)
	char pad_204[0x4]; // 0x204(0x04)
	struct USoundCue* OutOfFlaresSound; // 0x208(0x08)
	struct UDialogDataAsset* OutOfFlaresShout; // 0x210(0x08)
	char pad_218[0x4]; // 0x218(0x04)
	float FlareAngle; // 0x21c(0x04)
	float FlareCooldown; // 0x220(0x04)
	float FlareProductionTime; // 0x224(0x04)
	struct FLinearColor FlareChromaColor; // 0x228(0x10)
	float FlareProductionTimeLeft; // 0x238(0x04)
	int32_t MaxFlares; // 0x23c(0x04)
	int32_t Flares; // 0x240(0x04)
	float FlareCooldownRemaining; // 0x244(0x04)
	struct AFlare* flareClass; // 0x248(0x08)
	struct TArray<struct UItemUpgrade*> FlareUpgrades; // 0x250(0x10)
	struct AItem* EquippedItem; // 0x260(0x08)
	char pad_268[0x10]; // 0x268(0x10)

	void UpdateFromSaveGameInSlot(enum class EItemCategory Category); // Function FSD.InventoryComponent.UpdateFromSaveGameInSlot // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1168850
	void StartGrenadeThrow(); // Function FSD.InventoryComponent.StartGrenadeThrow // (Final|Native|Public) // @ game+0x1168830
	void Server_ThrowFlare(); // Function FSD.InventoryComponent.Server_ThrowFlare // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x109fdd0
	void Server_Equip(struct AItem* Item); // Function FSD.InventoryComponent.Server_Equip // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1168400
	void Server_DropCarriedItem(); // Function FSD.InventoryComponent.Server_DropCarriedItem // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x108ba50
	void Resupply(float percentage); // Function FSD.InventoryComponent.Resupply // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1168380
	void PickupItemInstance(struct AItem* Item); // Function FSD.InventoryComponent.PickupItemInstance // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1168300
	struct AItem* PickupItem(struct AItem* itemClass); // Function FSD.InventoryComponent.PickupItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1168270
	void OnRep_PickedUpItem(); // Function FSD.InventoryComponent.OnRep_PickedUpItem // (Final|Native|Protected) // @ game+0x11681d0
	void OnRep_Items(); // Function FSD.InventoryComponent.OnRep_Items // (Final|Native|Protected) // @ game+0x11681b0
	void OnRep_EquippedItem(struct AItem* oldItem); // Function FSD.InventoryComponent.OnRep_EquippedItem // (Final|Native|Protected) // @ game+0x1168130
	void OnRep_CarriedItem(struct FCarriedItemState LastCarriedItem); // Function FSD.InventoryComponent.OnRep_CarriedItem // (Final|Native|Protected|HasOutParms) // @ game+0x1168090
	void OnCharacterStateChanged(enum class ECharacterState NewState); // Function FSD.InventoryComponent.OnCharacterStateChanged // (Final|Native|Protected) // @ game+0x1167f70
	bool IsTerrainScannerEquipped(); // Function FSD.InventoryComponent.IsTerrainScannerEquipped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1167f40
	bool HasPickedUpItem(); // Function FSD.InventoryComponent.HasPickedUpItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11676c0
	bool HasDrink(); // Function FSD.InventoryComponent.HasDrink // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1167690
	int32_t GetTotalAmmoLeft(); // Function FSD.InventoryComponent.GetTotalAmmoLeft // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1167660
	struct ARecallableSentryGunItem* GetRecallableSentryGunItem(); // Function FSD.InventoryComponent.GetRecallableSentryGunItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1167640
	struct AItem* GetItem(enum class EItemCategory Category); // Function FSD.InventoryComponent.GetItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1166e50
	struct AActor* GetCarriedItem(); // Function FSD.InventoryComponent.GetCarriedItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1166b80
	struct TArray<struct AItem*> GetAllItems(); // Function FSD.InventoryComponent.GetAllItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11668a0
	void EquipLastItem(bool ignoreUsing); // Function FSD.InventoryComponent.EquipLastItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1166230
	bool EquipCategory(enum class EItemCategory Category); // Function FSD.InventoryComponent.EquipCategory // (Final|Native|Public|BlueprintCallable) // @ game+0x11661a0
	void EquipAtIndex(int32_t Index, bool ignoreUsing); // Function FSD.InventoryComponent.EquipAtIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x11660e0
	void Equip(struct AItem* Item, bool ignoreIsUsing); // Function FSD.InventoryComponent.Equip // (Final|Native|Public|BlueprintCallable) // @ game+0x1166010
	void EndGrenadeThrow(); // Function FSD.InventoryComponent.EndGrenadeThrow // (Final|Native|Public) // @ game+0x1165ff0
	void DropPickedupItem(); // Function FSD.InventoryComponent.DropPickedupItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1165fd0
	void CreateStartingEquipmentWhenItemsLoaded(); // Function FSD.InventoryComponent.CreateStartingEquipmentWhenItemsLoaded // (Final|Native|Protected) // @ game+0x1165fb0
	void Client_Resupply(float percentage); // Function FSD.InventoryComponent.Client_Resupply // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x1162740
	void Client_DropPickedUpItem(); // Function FSD.InventoryComponent.Client_DropPickedUpItem // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x108cac0
	void AnimationNotify2(); // Function FSD.InventoryComponent.AnimationNotify2 // (Final|Native|Public|BlueprintCallable) // @ game+0x1165cf0
	void AnimationNotify1(); // Function FSD.InventoryComponent.AnimationNotify1 // (Final|Native|Public|BlueprintCallable) // @ game+0x1165cd0
};

// Class FSD.InventoryList
// Size: 0x188 (Inherited: 0x30)
struct UInventoryList : UDataAsset {
	struct TSoftObjectPtr<struct UTexture2D> IconWeaponSetOutline; // 0x30(0x28)
	struct TSoftObjectPtr<struct UTexture2D> IconWeaponSetFill; // 0x58(0x28)
	struct TSoftObjectPtr<struct UMaterialInterface> LaserpointerMarkerMaterial; // 0x80(0x28)
	struct TSoftObjectPtr<struct UMaterialInterface> LaserpointerBeamMaterial; // 0xa8(0x28)
	struct UItemID* LaserPointerItem; // 0xd0(0x08)
	struct UItemID* TerrainScannerItem; // 0xd8(0x08)
	struct UItemID* ResupplyItem; // 0xe0(0x08)
	struct TArray<struct UItemID*> PrimaryWeapons; // 0xe8(0x10)
	struct TArray<struct UItemID*> SecondaryWeapons; // 0xf8(0x10)
	struct TArray<struct UItemID*> TraversalTools; // 0x108(0x10)
	struct TArray<struct UItemID*> ClassTools; // 0x118(0x10)
	struct TArray<struct UItemID*> Armors; // 0x128(0x10)
	struct TArray<struct UItemID*> Flares; // 0x138(0x10)
	struct TArray<struct UItemID*> Grenades; // 0x148(0x10)
	struct TArray<struct UItemID*> MiningTools; // 0x158(0x10)
	char pad_168[0x20]; // 0x168(0x20)

	struct UItemID* GetPreviousUnlockedItem(struct UObject* WorldContextObject, enum class EItemCategory Category, struct UItemID* currentItem); // Function FSD.InventoryList.GetPreviousUnlockedItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1167540
	struct UItemID* GetPreviousItem(enum class EItemCategory Category, struct UItemID* currentItem); // Function FSD.InventoryList.GetPreviousItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1167480
	int32_t GetNumberOfItems(enum class EItemCategory Category); // Function FSD.InventoryList.GetNumberOfItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11673f0
	struct UItemID* GetNextUnlockedItem(struct UObject* WorldContextObject, enum class EItemCategory Category, struct UItemID* currentItem); // Function FSD.InventoryList.GetNextUnlockedItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11672f0
	struct UItemID* GetNextItem(enum class EItemCategory Category, struct UItemID* currentItem); // Function FSD.InventoryList.GetNextItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1167230
	struct TArray<struct AActor*> GetLoadedItemListFiltered(enum class EItemCategory Category, struct FDelegate Filter); // Function FSD.InventoryList.GetLoadedItemListFiltered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1167100
	struct TArray<struct AActor*> GetLoadedItemList(enum class EItemCategory Category); // Function FSD.InventoryList.GetLoadedItemList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1167030
	struct TArray<struct UItemID*> GetItemList(enum class EItemCategory Category); // Function FSD.InventoryList.GetItemList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1166fa0
	int32_t GetItemIndex(enum class EItemCategory Category, struct UItemID* Item); // Function FSD.InventoryList.GetItemIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1166ee0
	struct TArray<struct UItemID*> GetAllItemsList(); // Function FSD.InventoryList.GetAllItemsList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1166930
	void CheckForInventoryAchievements(struct UObject* WorldContextObject); // Function FSD.InventoryList.CheckForInventoryAchievements // (Final|Native|Public|BlueprintCallable) // @ game+0x1165f10
};

// Class FSD.PlaySoundInterface
// Size: 0x28 (Inherited: 0x28)
struct UPlaySoundInterface : UInterface {
};

// Class FSD.ProjectileSpawner
// Size: 0x28 (Inherited: 0x28)
struct UProjectileSpawner : UInterface {
};

// Class FSD.RejoinListener
// Size: 0x28 (Inherited: 0x28)
struct URejoinListener : UInterface {
};

// Class FSD.Targetable
// Size: 0x28 (Inherited: 0x28)
struct UTargetable : UInterface {

	void ShowDamageEffects(struct UParticleSystem* Particles, struct FVector Location, struct FRotator Orientation); // Function FSD.Targetable.ShowDamageEffects // (BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x116c480
	struct UHealthComponentBase* GetTargetHealthComponent(); // Function FSD.Targetable.GetTargetHealthComponent // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x116bf10
	struct FVector GetTargetCenterMass(); // Function FSD.Targetable.GetTargetCenterMass // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x116bed0
	bool GetIsTargetable(); // Function FSD.Targetable.GetIsTargetable // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x11624d0
};

// Class FSD.AnimNotify_CycleItemComplete
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_CycleItemComplete : UAnimNotify {
};

// Class FSD.HeatMaterialComponent
// Size: 0xd0 (Inherited: 0xb0)
struct UHeatMaterialComponent : UActorComponent {
	struct FName ParameterName; // 0xb0(0x08)
	float MaxEffect; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct TArray<struct UMaterialInstanceDynamic*> MaterialIntances; // 0xc0(0x10)

	void OnTemperatureChanged(float Temperature, bool Overheated); // Function FSD.HeatMaterialComponent.OnTemperatureChanged // (Final|Native|Protected) // @ game+0x116c1c0
	void AddHeatMaterial(struct UMaterialInstanceDynamic* MaterialInstance); // Function FSD.HeatMaterialComponent.AddHeatMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x116b6d0
};

// Class FSD.ItemAquisitionSource
// Size: 0x58 (Inherited: 0x58)
struct UItemAquisitionSource : USavableDataAsset {
};

// Class FSD.ItemCharacterAnimationSet
// Size: 0x1a0 (Inherited: 0x30)
struct UItemCharacterAnimationSet : UDataAsset {
	struct UAnimSequence* FP_Idle; // 0x30(0x08)
	struct UAnimMontage* FP_InspectWeapon; // 0x38(0x08)
	struct UAnimSequence* FP_Walk; // 0x40(0x08)
	struct UAnimSequence* FP_Sprint; // 0x48(0x08)
	struct UAnimMontage* FP_JumpStart_Montage; // 0x50(0x08)
	struct UAnimSequence* FP_JumpStart; // 0x58(0x08)
	struct UAnimSequence* FP_JumpLoop; // 0x60(0x08)
	struct UAnimSequence* FP_JumpLand; // 0x68(0x08)
	struct UAnimSequence* FP_JumpLand_Aim; // 0x70(0x08)
	struct UAnimSequence* FP_Downed; // 0x78(0x08)
	struct UBlendSpace1D* TP_LookUpDown; // 0x80(0x08)
	struct UBlendSpace1D* TP_LookUpDown_Aim; // 0x88(0x08)
	struct UAnimSequence* TP_Sprint; // 0x90(0x08)
	struct UAnimSequence* TP_Idle; // 0x98(0x08)
	struct UAnimSequence* TP_Idle_Aim; // 0xa0(0x08)
	struct UAnimSequence* TP_LookForward; // 0xa8(0x08)
	struct UAnimSequence* TP_LookForward_Aim; // 0xb0(0x08)
	struct UAnimSequence* TP_JumpStart; // 0xb8(0x08)
	struct UAnimSequence* TP_JumpStart_Aim; // 0xc0(0x08)
	struct UAnimSequence* TP_JumpLoop; // 0xc8(0x08)
	struct UAnimSequence* TP_JumpLoop_Aim; // 0xd0(0x08)
	struct UAnimMontage* TP_JumpLand; // 0xd8(0x08)
	struct UAnimSequence* TP_Walk_Forward; // 0xe0(0x08)
	struct UAnimSequence* TP_Walk_Forward_Aim; // 0xe8(0x08)
	struct UAnimSequence* TP_Run_Forward; // 0xf0(0x08)
	struct UAnimSequence* TP_Run_Forward_Aim; // 0xf8(0x08)
	struct UAnimSequence* TP_Walk_Right; // 0x100(0x08)
	struct UAnimSequence* TP_Walk_Right_Aim; // 0x108(0x08)
	struct UAnimSequence* TP_Run_Right; // 0x110(0x08)
	struct UAnimSequence* TP_Run_Right_Aim; // 0x118(0x08)
	struct UAnimSequence* TP_Walk_Left; // 0x120(0x08)
	struct UAnimSequence* TP_Walk_Left_Aim; // 0x128(0x08)
	struct UAnimSequence* TP_Run_Left; // 0x130(0x08)
	struct UAnimSequence* TP_Run_Left_Aim; // 0x138(0x08)
	struct UAnimSequence* TP_Walk_Back; // 0x140(0x08)
	struct UAnimSequence* TP_Walk_Back_Aim; // 0x148(0x08)
	struct UAnimSequence* TP_Run_Back; // 0x150(0x08)
	struct UAnimSequence* TP_Run_Back_Aim; // 0x158(0x08)
	struct UAnimSequence* TP_Revived; // 0x160(0x08)
	struct UAnimSequence* TP_Downed; // 0x168(0x08)
	struct UAnimSequence* TP_Downed_Loop; // 0x170(0x08)
	struct FItemLoadoutAnimations LoadoutAnimations; // 0x178(0x18)
	float CameraOffset; // 0x190(0x04)
	char pad_194[0x4]; // 0x194(0x04)
	struct UItemCharacterAnimationSet* ParentSet; // 0x198(0x08)
};

// Class FSD.ItemData
// Size: 0x148 (Inherited: 0x30)
struct UItemData : UPrimaryDataAsset {
	struct UItemID* ItemID; // 0x30(0x08)
	struct UTexture2D* IconLine; // 0x38(0x08)
	struct UTexture2D* IconBG; // 0x40(0x08)
	struct UTexture2D* IconDetailed; // 0x48(0x08)
	struct TSoftObjectPtr<struct UTexture2D> PreviewImage; // 0x50(0x28)
	SoftClassProperty PreviewActor; // 0x78(0x28)
	struct FText Name; // 0xa0(0x18)
	struct FText Category; // 0xb8(0x18)
	struct FText Description; // 0xd0(0x18)
	int32_t CreditCost; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TMap<struct UResourceData*, float> ResourceCost; // 0xf0(0x50)
	int32_t RequiredCharacterLevel; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)

	struct AActor* GetPreviewActorClass(); // Function FSD.ItemData.GetPreviewActorClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116be30
	struct TArray<struct FCraftingCost> GetCraftingCost(); // Function FSD.ItemData.GetCraftingCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116b8c0
};

// Class FSD.ItemDispenser
// Size: 0x288 (Inherited: 0x220)
struct AItemDispenser : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct UInstantUsable* Usable; // 0x228(0x08)
	struct FMulticastInlineDelegate OnItemSpawned; // 0x230(0x10)
	struct FMulticastInlineDelegate OnItemTaken; // 0x240(0x10)
	struct TArray<struct AActor*> ItemHistory; // 0x250(0x10)
	char pad_260[0x8]; // 0x260(0x08)
	struct ACarriableItem* itemClass; // 0x268(0x08)
	struct AActor* spawnedItem; // 0x270(0x08)
	float ItemSpawnTime; // 0x278(0x04)
	float InitialItemSpawnTime; // 0x27c(0x04)
	bool IsOpen; // 0x280(0x01)
	bool KillItemsOnDestuction; // 0x281(0x01)
	char pad_282[0x6]; // 0x282(0x06)

	void SpawnItem(); // Function FSD.ItemDispenser.SpawnItem // (Final|Native|Protected) // @ game+0x116c5a0
	void Open(); // Function FSD.ItemDispenser.Open // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x116c350
	void OnUsed(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.ItemDispenser.OnUsed // (Final|Native|Protected) // @ game+0x116c290
	void OnRep_SpawnedItem(struct AActor* oldItem); // Function FSD.ItemDispenser.OnRep_SpawnedItem // (Final|Native|Protected) // @ game+0x116c140
	void OnRep_IsOpen(); // Function FSD.ItemDispenser.OnRep_IsOpen // (Final|Native|Protected) // @ game+0x116c090
	void OnPickedUpItem(struct AActor* Item); // Function FSD.ItemDispenser.OnPickedUpItem // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnOpenChanged(bool Open); // Function FSD.ItemDispenser.OnOpenChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnItemSpawnedEvent(struct AActor* Item); // Function FSD.ItemDispenser.OnItemSpawnedEvent // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	bool HasItem(); // Function FSD.ItemDispenser.HasItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x116bf80
	struct AActor* GetItem(); // Function FSD.ItemDispenser.GetItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1154420
	void Close(); // Function FSD.ItemDispenser.Close // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x116b770
};

// Class FSD.ItemMarker
// Size: 0x228 (Inherited: 0x220)
struct AItemMarker : AActor {
	bool bMarkerValid; // 0x220(0x01)
	bool bMarkerVisible; // 0x221(0x01)
	char pad_222[0x6]; // 0x222(0x06)

	void OnMarkerVisibilityChanged(bool Visible); // Function FSD.ItemMarker.OnMarkerVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnMarkerValidChanged(bool Valid); // Function FSD.ItemMarker.OnMarkerValidChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ItemPlacerAggregator
// Size: 0x1d0 (Inherited: 0xc8)
struct UItemPlacerAggregator : UItemAggregator {
	struct TArray<struct TWeakObjectPtr<struct AActor>> IgnoreActors; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnMarkerSpawned; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnPlacementChanged; // 0xe8(0x10)
	float PlacementDistance; // 0xf8(0x04)
	float MaxOffsetZ; // 0xfc(0x04)
	float MinOffsetZ; // 0x100(0x04)
	float ItemHeight; // 0x104(0x04)
	struct UDialogDataAsset* ShoutOnPlaced; // 0x108(0x08)
	struct AItemMarker* MarkerType; // 0x110(0x08)
	bool CanOnlyPlaceOnTerrain; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
	struct FGameplayTagQuery ExcludeTags; // 0x120(0x48)
	struct AItemMarker* PlacementMarker; // 0x168(0x08)
	struct AItem* Item; // 0x170(0x08)
	bool bIsPlacementActive; // 0x178(0x01)
	bool bIsMarkerHidden; // 0x179(0x01)
	bool bIsMarkerValid; // 0x17a(0x01)
	bool bCanPlaceMarker; // 0x17b(0x01)
	char pad_17C[0x4]; // 0x17c(0x04)
	struct FTransform LastPlacement; // 0x180(0x30)
	char pad_1B0[0x20]; // 0x1b0(0x20)

	void ToggleValid(bool Valid); // Function FSD.ItemPlacerAggregator.ToggleValid // (Final|Native|Public|BlueprintCallable) // @ game+0x116d090
	void TogglePlacement(bool Inactive); // Function FSD.ItemPlacerAggregator.TogglePlacement // (Final|Native|Public|BlueprintCallable) // @ game+0x116d000
	void ToggleMarkerHidden(bool InHidden); // Function FSD.ItemPlacerAggregator.ToggleMarkerHidden // (Final|Native|Public|BlueprintCallable) // @ game+0x116cf70
	void PlacementUpdatedDelegate__DelegateSignature(bool InPlacementValid, struct FTransform InPlacement); // DelegateFunction FSD.ItemPlacerAggregator.PlacementUpdatedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x158ca90
	void MarkerDelegate__DelegateSignature(struct AItemMarker* Marker); // DelegateFunction FSD.ItemPlacerAggregator.MarkerDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void GetPlacementEx(struct FTransform Placement, bool OutValidLocation, bool OutValidMarker); // Function FSD.ItemPlacerAggregator.GetPlacementEx // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x116bcb0
	bool GetPlacement(struct FTransform Placement); // Function FSD.ItemPlacerAggregator.GetPlacement // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x116bbd0
	void ClearIgnoredActors(); // Function FSD.ItemPlacerAggregator.ClearIgnoredActors // (Final|Native|Public|BlueprintCallable) // @ game+0x116b750
	void AddIgnoredActor(struct AActor* InActor); // Function FSD.ItemPlacerAggregator.AddIgnoredActor // (Final|Native|Public|BlueprintCallable) // @ game+0x10a2710
};

// Class FSD.ItemPreviewActor
// Size: 0x270 (Inherited: 0x220)
struct AItemPreviewActor : AActor {
	char pad_220[0x10]; // 0x220(0x10)
	struct UItemSkin* CurrentSkinColor; // 0x230(0x08)
	struct UItemSkin* CurrentSkinMesh; // 0x238(0x08)
	char pad_240[0x10]; // 0x240(0x10)
	struct AActor* itemClass; // 0x250(0x08)
	struct UIconGenerationCameraKey* CameraKey_Normal; // 0x258(0x08)
	struct UIconGenerationCameraKey* CameraKey_CloseUp; // 0x260(0x08)
	char pad_268[0x8]; // 0x268(0x08)

	void SkinItem(struct USkinEffect* Skin); // Function FSD.ItemPreviewActor.SkinItem // (Native|Public|BlueprintCallable) // @ game+0x117f0f0
	void SetItemClass(struct AActor* itemClass); // Function FSD.ItemPreviewActor.SetItemClass // (Final|Native|Public|BlueprintCallable) // @ game+0x117eff0
	void OnSkinPreviewChanged(struct UItemSkin* PreviewSkin); // Function FSD.ItemPreviewActor.OnSkinPreviewChanged // (Final|Native|Protected) // @ game+0x117eed0
	void OnSkinItem(struct USkinEffect* Skin); // Function FSD.ItemPreviewActor.OnSkinItem // (Native|Event|Protected|BlueprintEvent) // @ game+0x117ee40
	void OnSkinChanged(); // Function FSD.ItemPreviewActor.OnSkinChanged // (Final|Native|Protected) // @ game+0x117ee20
	void ChangeSkin(struct UItemSkin* skinMesh, struct UItemSkin* skinColor, bool isPreview); // Function FSD.ItemPreviewActor.ChangeSkin // (Final|Native|Protected) // @ game+0x11798c0
};

// Class FSD.ItemsBarIcon
// Size: 0x258 (Inherited: 0x230)
struct UItemsBarIcon : UUserWidget {
	bool Selected; // 0x230(0x01)
	char pad_231[0x7]; // 0x231(0x07)
	struct UItemsBar* ItemBar; // 0x238(0x08)
	struct APlayerCharacter* Character; // 0x240(0x08)
	struct AItem* Item; // 0x248(0x08)
	int32_t Index; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)

	void OnUnselect(); // Function FSD.ItemsBarIcon.OnUnselect // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnSelect(); // Function FSD.ItemsBarIcon.OnSelect // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnInit(); // Function FSD.ItemsBarIcon.OnInit // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ItemsBar
// Size: 0x288 (Inherited: 0x250)
struct UItemsBar : UFSDUserWidget {
	struct UItemsBarIcon* DefaultItemWidget; // 0x250(0x08)
	bool bShowSupplyItem; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)
	struct TArray<struct UItemsBarIcon*> ItemIcons; // 0x260(0x10)
	struct UItemsBarIcon* SupplyIcon; // 0x270(0x08)
	struct UItemsBarIcon* SelectedIcon; // 0x278(0x08)
	char pad_280[0x8]; // 0x280(0x08)

	void OnSupplyItemUnequipped(struct UItemsBarIcon* ItemIcon); // Function FSD.ItemsBar.OnSupplyItemUnequipped // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnSupplyItemEquipped(struct UItemsBarIcon* ItemIcon); // Function FSD.ItemsBar.OnSupplyItemEquipped // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnSupplyItemAdded(struct UItemsBarIcon* ItemIcon); // Function FSD.ItemsBar.OnSupplyItemAdded // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnItemUnequipped(struct UItemsBarIcon* ItemIcon); // Function FSD.ItemsBar.OnItemUnequipped // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnItemsLoaded(); // Function FSD.ItemsBar.OnItemsLoaded // (Final|Native|Protected) // @ game+0x117ee00
	void OnItemEquipped(struct UItemsBarIcon* ItemIcon); // Function FSD.ItemsBar.OnItemEquipped // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnItemClicked(); // Function FSD.ItemsBar.OnItemClicked // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnItemAdded(struct UItemsBarIcon* ItemIcon); // Function FSD.ItemsBar.OnItemAdded // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnClear(); // Function FSD.ItemsBar.OnClear // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ItemEquipped(struct AItem* NewItem); // Function FSD.ItemsBar.ItemEquipped // (Final|Native|Protected) // @ game+0x117ed80
	void ItemClicked(struct AItem* NewItem); // Function FSD.ItemsBar.ItemClicked // (Final|Native|Protected) // @ game+0x117ed00
};

// Class FSD.ItemSettings
// Size: 0x80 (Inherited: 0x30)
struct UItemSettings : UDataAsset {
	struct TMap<struct UItemID*, struct UItemData*> ItemData; // 0x30(0x50)
};

// Class FSD.ItemSkinSet
// Size: 0x38 (Inherited: 0x30)
struct UItemSkinSet : UDataAsset {
	bool ColorIsLockedToSet; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class FSD.SavablePrimaryDataAsset
// Size: 0x60 (Inherited: 0x30)
struct USavablePrimaryDataAsset : UPrimaryDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	int32_t BuildRestrictions; // 0x38(0x04)
	int32_t PlatformRestrictions; // 0x3c(0x04)
	bool EnableDangerousSaveGameIDEditing; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FGuid SaveGameID; // 0x44(0x10)
	char pad_54[0x4]; // 0x54(0x04)
	struct UBuildRestriction* BuildRestriction; // 0x58(0x08)
};

// Class FSD.ItemSkin
// Size: 0xf0 (Inherited: 0x60)
struct UItemSkin : USavablePrimaryDataAsset {
	struct FMulticastInlineDelegate OnSkinUnlocked; // 0x60(0x10)
	struct FMulticastInlineDelegate OnSkinEquipped; // 0x70(0x10)
	struct FMulticastInlineDelegate OnSkinUnequipped; // 0x80(0x10)
	bool UnlockedFromStart; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct UDLCBase* RequiredDLC; // 0x98(0x08)
	enum class EItemSkinType SkinType; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
	struct FText SkinName; // 0xa8(0x18)
	struct UItemSkinSet* SkinSet; // 0xc0(0x08)
	struct UMaterialInterface* SkinIconMaterial; // 0xc8(0x08)
	struct TArray<struct USkinEffect*> SkinEffects; // 0xd0(0x10)
	struct UItemID* OwningItem; // 0xe0(0x08)
	struct UPlayerCharacterID* OwningCharacter; // 0xe8(0x08)

	bool Unlock(struct UObject* WorldContext, struct UItemID* ItemID, bool broadcast); // Function FSD.ItemSkin.Unlock // (Final|Native|Public|BlueprintCallable) // @ game+0x117f240
	void Receive_SkinItem(struct UObject* Skinnable); // Function FSD.ItemSkin.Receive_SkinItem // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x117ef50
	void ItemSkinSignature__DelegateSignature(struct UItemSkin* Skin); // DelegateFunction FSD.ItemSkin.ItemSkinSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ItemSkinEquipSignature__DelegateSignature(struct UItemSkin* Skin); // DelegateFunction FSD.ItemSkin.ItemSkinEquipSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool IsLocked(struct UObject* WorldContext, struct UItemID* skinnableID); // Function FSD.ItemSkin.IsLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x117ec40
	bool IsEquippedOnItem(struct UItemID* ItemID, struct AFSDPlayerState* PlayerState); // Function FSD.ItemSkin.IsEquippedOnItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x117eb80
	struct UItemID* GetOwningItem(); // Function FSD.ItemSkin.GetOwningItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a2d50
	struct UPlayerCharacterID* GetOwningCharacter(); // Function FSD.ItemSkin.GetOwningCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1179d60
};

// Class FSD.ItemSkinSettings
// Size: 0x48 (Inherited: 0x30)
struct UItemSkinSettings : UDataAsset {
	struct UItemSkinSet* StockSet; // 0x30(0x08)
	struct TArray<struct UItemSkin*> LoadedSkins; // 0x38(0x10)
};

// Class FSD.ItemSkinFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UItemSkinFunctionLibrary : UBlueprintFunctionLibrary {
};

// Class FSD.ItemSkinSchematicCollection
// Size: 0x68 (Inherited: 0x30)
struct UItemSkinSchematicCollection : UDataAsset {
	struct UItemSkin* Skin; // 0x30(0x08)
	struct USchematicCategory* Category; // 0x38(0x08)
	struct USchematicPricingTier* PricingTier; // 0x40(0x08)
	struct USchematicRarity* Rarity; // 0x48(0x08)
	enum class EItemSkinCollectionType CollectionType; // 0x50(0x01)
	enum class EItemSkinCollectionType LastGeneratedCollectionType; // 0x51(0x01)
	char pad_52[0x6]; // 0x52(0x06)
	struct TArray<struct USchematic*> Schematics; // 0x58(0x10)
};

// Class FSD.ItemUpgrade
// Size: 0x150 (Inherited: 0x58)
struct UItemUpgrade : USavableDataAsset {
	char pad_58[0x8]; // 0x58(0x08)
	struct FMulticastInlineDelegate OnCrafted; // 0x60(0x10)
	struct FMulticastInlineDelegate OnEquipped; // 0x70(0x10)
	struct FMulticastInlineDelegate OnUnequipped; // 0x80(0x10)
	struct FText Name; // 0x90(0x18)
	struct FText Description; // 0xa8(0x18)
	int32_t Cost; // 0xc0(0x04)
	bool UseOldCost; // 0xc4(0x01)
	enum class EUpgradeTiers UpgradeTier; // 0xc5(0x01)
	enum class EUpgradeClass upgradeClass; // 0xc6(0x01)
	char pad_C7[0x1]; // 0xc7(0x01)
	struct UItemUpgradeCategory* Category; // 0xc8(0x08)
	struct TMap<struct UResourceData*, float> UpgradeCraftingCost; // 0xd0(0x50)
	struct TArray<struct UResourceData*> ResourceCost; // 0x120(0x10)
	struct TArray<struct UItemUpgradeElement*> Elements; // 0x130(0x10)
	struct TArray<struct FItemUpgradeStatText> StatTexts; // 0x140(0x10)

	void UnequipUpgrade(struct AActor* itemClass, struct AFSDPlayerState* PlayerState); // Function FSD.ItemUpgrade.UnequipUpgrade // (Final|Native|Public|BlueprintCallable) // @ game+0x117f180
	void ItemUpgradeSignature__DelegateSignature(struct UItemUpgrade* Upgrade); // DelegateFunction FSD.ItemUpgrade.ItemUpgradeSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	struct TArray<struct FItemUpgradeStatText> GetUpgradeStatTexts(); // Function FSD.ItemUpgrade.GetUpgradeStatTexts // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1179fb0
	struct FText GetUpgradeName(struct UItemUpgrade* Upgrade); // Function FSD.ItemUpgrade.GetUpgradeName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1179ed0
	struct TArray<struct FCraftingCost> GetUpgradeCost(); // Function FSD.ItemUpgrade.GetUpgradeCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1179e50
	struct FString GetSourceName(); // Function FSD.ItemUpgrade.GetSourceName // (Final|Native|Public|BlueprintCallable) // @ game+0x1179d80
	struct FUpgradeValues GetGenericUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UItemUpgrade* upgradeClass); // Function FSD.ItemUpgrade.GetGenericUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1179c50
	float GetCreditsCost(); // Function FSD.ItemUpgrade.GetCreditsCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1179c20
	void EquipUpgrade(struct AActor* itemClass, struct AFSDPlayerState* PlayerState); // Function FSD.ItemUpgrade.EquipUpgrade // (Final|Native|Public|BlueprintCallable) // @ game+0x1179b60
	void CraftItem(struct UItemID* ItemID, struct AFSDPlayerController* PlayerController, struct APlayerCharacter* previewedCharacter); // Function FSD.ItemUpgrade.CraftItem // (Final|Native|Public|BlueprintCallable) // @ game+0x11799d0
};

// Class FSD.CombinedUpgrade
// Size: 0x170 (Inherited: 0x150)
struct UCombinedUpgrade : UItemUpgrade {
	struct TArray<struct TSoftObjectPtr<struct UItemUpgrade>> CombinedUpgrades; // 0x150(0x10)
	struct TArray<struct UItemUpgrade*> LoadedUpgrades; // 0x160(0x10)

	struct TArray<struct UItemUpgrade*> GetUpgrades(); // Function FSD.CombinedUpgrade.GetUpgrades // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x117eaf0
};

// Class FSD.OverclockUpgrade
// Size: 0x178 (Inherited: 0x170)
struct UOverclockUpgrade : UCombinedUpgrade {
	struct USchematicCategory* SchematicCategory; // 0x170(0x08)
};

// Class FSD.ItemUpgradeCategory
// Size: 0x70 (Inherited: 0x30)
struct UItemUpgradeCategory : UDataAsset {
	struct FText CategoryName; // 0x30(0x18)
	struct FText CategoryDescription; // 0x48(0x18)
	struct UTexture2D* CategoryIcon; // 0x60(0x08)
	struct FColor CategoryTint; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.ItemUpgradeCondition
// Size: 0x28 (Inherited: 0x28)
struct UItemUpgradeCondition : UObject {
};

// Class FSD.PlayerShieldsItemUpgradeCondition
// Size: 0x30 (Inherited: 0x28)
struct UPlayerShieldsItemUpgradeCondition : UItemUpgradeCondition {
	struct FFloatInterval ShieldPercentageRequired; // 0x28(0x08)
};

// Class FSD.ProjectileClassFilterItemUpgradeCondition
// Size: 0x38 (Inherited: 0x28)
struct UProjectileClassFilterItemUpgradeCondition : UItemUpgradeCondition {
	struct TArray<struct AProjectileBase*> ProjectileClasses; // 0x28(0x10)
};

// Class FSD.ItemUpgradeElement
// Size: 0x30 (Inherited: 0x30)
struct UItemUpgradeElement : UDataAsset {

	bool ElementOf(struct UItemUpgrade* upg); // Function FSD.ItemUpgradeElement.ElementOf // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1179ad0
};

// Class FSD.MuzzleEffectUpgradeElement
// Size: 0x40 (Inherited: 0x30)
struct UMuzzleEffectUpgradeElement : UItemUpgradeElement {
	struct UFXSystemAsset* FPMuzzleFlash; // 0x30(0x08)
	struct UFXSystemAsset* TPMuzzleFlash; // 0x38(0x08)
};

// Class FSD.FireWeaponSoundUpgradeElement
// Size: 0x38 (Inherited: 0x30)
struct UFireWeaponSoundUpgradeElement : UItemUpgradeElement {
	struct USoundCue* FireSound; // 0x30(0x08)
};

// Class FSD.TracerUpgradeElement
// Size: 0x38 (Inherited: 0x30)
struct UTracerUpgradeElement : UItemUpgradeElement {
	struct UFXSystemAsset* Tracer; // 0x30(0x08)
};

// Class FSD.HitScanImpactUpgradeElement
// Size: 0x40 (Inherited: 0x30)
struct UHitScanImpactUpgradeElement : UItemUpgradeElement {
	struct UFXSystemAsset* ImpactParticle; // 0x30(0x08)
	struct USoundCue* ImpactSound; // 0x38(0x08)
};

// Class FSD.TrailUpgradeElement
// Size: 0x38 (Inherited: 0x30)
struct UTrailUpgradeElement : UItemUpgradeElement {
	struct UFXSystemAsset* Trail; // 0x30(0x08)
};

// Class FSD.ReplaceMaterialUpgradeElement
// Size: 0x40 (Inherited: 0x30)
struct UReplaceMaterialUpgradeElement : UItemUpgradeElement {
	struct UMaterialInterface* TargetMaterial; // 0x30(0x08)
	struct UMaterialInterface* ReplaceWithMaterial; // 0x38(0x08)
};

// Class FSD.ReplaceSkeletonMeshUpgradeElement
// Size: 0x48 (Inherited: 0x30)
struct UReplaceSkeletonMeshUpgradeElement : UItemUpgradeElement {
	struct USkeletalMesh* TargetMesh; // 0x30(0x08)
	struct USkeletalMesh* ReplaceWithMesh; // 0x38(0x08)
	struct UAnimInstance* ReplaceWithAnimInstance; // 0x40(0x08)
};

// Class FSD.ProjectileUpgradeElement
// Size: 0x38 (Inherited: 0x30)
struct UProjectileUpgradeElement : UItemUpgradeElement {
	struct UParticleSystem* NewTrailParticle; // 0x30(0x08)
};

// Class FSD.ItemUpgradePreviewComponent
// Size: 0xd0 (Inherited: 0xb0)
struct UItemUpgradePreviewComponent : UActorComponent {
	struct FMulticastInlineDelegate OnPreviewUpgradeChanged; // 0xb0(0x10)
	struct UItemUpgrade* PreviewUpgrade; // 0xc0(0x08)
	char pad_C8[0x8]; // 0xc8(0x08)

	void SetPreviewUpgrade(struct UItemUpgrade* InUpgrade); // Function FSD.ItemUpgradePreviewComponent.SetPreviewUpgrade // (Final|Native|Public|BlueprintCallable) // @ game+0x117f070
	void RefreshPreviewUpgrade(); // Function FSD.ItemUpgradePreviewComponent.RefreshPreviewUpgrade // (Final|Native|Public|BlueprintCallable) // @ game+0x117efd0
	void ItemUpgradeDelegate__DelegateSignature(struct UItemUpgrade* PreviewUpgrade); // DelegateFunction FSD.ItemUpgradePreviewComponent.ItemUpgradeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
};

// Class FSD.StandardItemUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UStandardItemUpgrade : UItemUpgrade {
	float Amount; // 0x150(0x04)
	bool IsPercentage; // 0x154(0x01)
	char pad_155[0x3]; // 0x155(0x03)
};

// Class FSD.AmmoDrivenWeaponUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UAmmoDrivenWeaponUpgrade : UStandardItemUpgrade {
	enum class EAmmoDrivenWeapnUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EAmmoDrivenWeapnUpgradeType upgradeType); // Function FSD.AmmoDrivenWeaponUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117a2f0
};

// Class FSD.WeaponHitCounterUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UWeaponHitCounterUpgrade : UItemUpgrade {
	struct UWeaponHitCounterComponent* ComponentClass; // 0x150(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, struct UWeaponHitCounterComponent* ComponentClass); // Function FSD.WeaponHitCounterUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117e7c0
};

// Class FSD.BeltDrivenWeaponUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UBeltDrivenWeaponUpgrade : UStandardItemUpgrade {
	enum class EBeltDrivenWeaponUpgrade upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EBeltDrivenWeaponUpgrade upgradeType); // Function FSD.BeltDrivenWeaponUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117a950
};

// Class FSD.GatlingGunUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UGatlingGunUpgrade : UStandardItemUpgrade {
	enum class EGatlingGunUpgrade upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EGatlingGunUpgrade upgradeType); // Function FSD.GatlingGunUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117c300
};

// Class FSD.AssaultRifleUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UAssaultRifleUpgrade : UStandardItemUpgrade {
	enum class EAssaultRifleUpgrade upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EAssaultRifleUpgrade upgradeType); // Function FSD.AssaultRifleUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117a510
};

// Class FSD.BoltActionRifleUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UBoltActionRifleUpgrade : UStandardItemUpgrade {
	enum class EBoltActionRifleUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EBoltActionRifleUpgrades upgradeType); // Function FSD.BoltActionRifleUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117aa60
};

// Class FSD.DualMachinePistolsUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UDualMachinePistolsUpgrade : UStandardItemUpgrade {
	enum class EDualMachinePistolsUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EDualMachinePistolsUpgrades upgradeType); // Function FSD.DualMachinePistolsUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117ba50
};

// Class FSD.ChargedWeaponUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UChargedWeaponUpgrade : UStandardItemUpgrade {
	enum class EChargedWeaponUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EChargedWeaponUpgrades upgradeType); // Function FSD.ChargedWeaponUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117b010
};

// Class FSD.AutoCannonUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UAutoCannonUpgrade : UStandardItemUpgrade {
	enum class EAutoCannonUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EAutoCannonUpgrades upgradeType); // Function FSD.AutoCannonUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117a620
};

// Class FSD.SawedOffShotgunUpgrade
// Size: 0x160 (Inherited: 0x158)
struct USawedOffShotgunUpgrade : UStandardItemUpgrade {
	enum class ESawedOffShotgunUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class ESawedOffShotgunUpgrades upgradeType); // Function FSD.SawedOffShotgunUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117dd70
};

// Class FSD.BurstWeaponUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UBurstWeaponUpgrade : UStandardItemUpgrade {
	enum class EBurstWeaponUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EBurstWeaponUpgrades upgradeType); // Function FSD.BurstWeaponUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117ac80
};

// Class FSD.AutoShotgunUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UAutoShotgunUpgrade : UStandardItemUpgrade {
	enum class EAutoShotgunUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EAutoShotgunUpgrades upgradeType); // Function FSD.AutoShotgunUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117a730
};

// Class FSD.BasicPistolUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UBasicPistolUpgrade : UStandardItemUpgrade {
	enum class EBasicPistol upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EBasicPistol upgradeType); // Function FSD.BasicPistolUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117a840
};

// Class FSD.RevolverUpgrade
// Size: 0x160 (Inherited: 0x158)
struct URevolverUpgrade : UStandardItemUpgrade {
	enum class ERevolerUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class ERevolerUpgrades upgradeType); // Function FSD.RevolverUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117dc60
};

// Class FSD.CryoSprayUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UCryoSprayUpgrade : UStandardItemUpgrade {
	enum class ECryoSprayUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class ECryoSprayUpgrades upgradeType); // Function FSD.CryoSprayUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117b3f0
};

// Class FSD.CryoSprayProjectileUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UCryoSprayProjectileUpgrade : UItemUpgrade {
	float MaxFireCost; // 0x150(0x04)
	float BaseArch; // 0x154(0x04)
	struct AProjectile* projectileClass; // 0x158(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, struct AProjectile* projectileClass); // Function FSD.CryoSprayProjectileUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117b2e0
};

// Class FSD.PickaxeUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UPickaxeUpgrade : UStandardItemUpgrade {
	enum class EPickaxeUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EPickaxeUpgradeType upgradeType); // Function FSD.PickaxeUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117d3b0
};

// Class FSD.FlameThrowerUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UFlameThrowerUpgrade : UStandardItemUpgrade {
	enum class EFlameThrowerUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EFlameThrowerUpgradeType upgradeType); // Function FSD.FlameThrowerUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117bd50
};

// Class FSD.StickyFlameStatusEffectUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UStickyFlameStatusEffectUpgrade : UItemUpgrade {
	struct UStatusEffect* StatusEffect; // 0x150(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UStatusEffect* StatusEffect); // Function FSD.StickyFlameStatusEffectUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117e320
};

// Class FSD.DoubleDrillUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UDoubleDrillUpgrade : UStandardItemUpgrade {
	enum class EDoubleDrillUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EDoubleDrillUpgradeType upgradeType); // Function FSD.DoubleDrillUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117b940
};

// Class FSD.InventoryItemUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UInventoryItemUpgrade : UStandardItemUpgrade {
	enum class EInventoryItemUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EInventoryItemUpgradeType upgradeType); // Function FSD.InventoryItemUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117cad0
};

// Class FSD.CapacityUpgrade
// Size: 0x158 (Inherited: 0x158)
struct UCapacityUpgrade : UStandardItemUpgrade {

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, int32_t componentIndex); // Function FSD.CapacityUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117ad90
};

// Class FSD.CooldownUpgrade
// Size: 0x158 (Inherited: 0x158)
struct UCooldownUpgrade : UStandardItemUpgrade {

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player); // Function FSD.CooldownUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117b200
};

// Class FSD.MultiHitscanUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UMultiHitscanUpgrade : UStandardItemUpgrade {
	enum class EMultiHitscanUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EMultiHitscanUpgradeType upgradeType); // Function FSD.MultiHitscanUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117d2a0
};

// Class FSD.HitscanBaseUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UHitscanBaseUpgrade : UStandardItemUpgrade {
	enum class EHitScanBaseUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EHitScanBaseUpgradeType upgradeType); // Function FSD.HitscanBaseUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117c9c0
};

// Class FSD.DamageUpgrade
// Size: 0x168 (Inherited: 0x158)
struct UDamageUpgrade : UStandardItemUpgrade {
	enum class EDamageUpgrade upgradeType; // 0x158(0x01)
	enum class EDamageComponentType DamageComponentType; // 0x159(0x01)
	char pad_15A[0x6]; // 0x15a(0x06)
	struct AActor* RequiredClass; // 0x160(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AActor* upgradedItem, struct AFSDPlayerState* Player, enum class EDamageUpgrade upgradeType, enum class EDamageComponentType DamageComponentType); // Function FSD.DamageUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117b670
};

// Class FSD.FlatDamageUpgrade
// Size: 0x170 (Inherited: 0x150)
struct UFlatDamageUpgrade : UItemUpgrade {
	float Damage; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	struct UDamageClass* DamageClass; // 0x158(0x08)
	struct AActor* RequiredClass; // 0x160(0x08)
	struct UDamageCondition* Condition; // 0x168(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UDamageClass* DamageClass); // Function FSD.FlatDamageUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117c1f0
};

// Class FSD.RandomDamageUpgrade
// Size: 0x158 (Inherited: 0x150)
struct URandomDamageUpgrade : UItemUpgrade {
	struct FRandRange DamageRange; // 0x150(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player); // Function FSD.RandomDamageUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117db80
};

// Class FSD.DamageConversionUpgrade
// Size: 0x170 (Inherited: 0x150)
struct UDamageConversionUpgrade : UItemUpgrade {
	struct UDamageClass* DamageClass; // 0x150(0x08)
	float ConversionPercentage; // 0x158(0x04)
	bool DamageIsAdded; // 0x15c(0x01)
	char pad_15D[0x3]; // 0x15d(0x03)
	struct AActor* RequiredClass; // 0x160(0x08)
	struct UDamageCondition* Condition; // 0x168(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AActor* upgradedItem, struct AFSDPlayerState* Player, struct UDamageClass* DamageClass); // Function FSD.DamageConversionUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117b500
};

// Class FSD.GatlingHotShellsBonusUpgrade
// Size: 0x168 (Inherited: 0x150)
struct UGatlingHotShellsBonusUpgrade : UItemUpgrade {
	struct UDamageClass* DamageClass; // 0x150(0x08)
	float ConversionPercentage; // 0x158(0x04)
	bool DamageIsAdded; // 0x15c(0x01)
	char pad_15D[0x3]; // 0x15d(0x03)
	float TemperatureRequired; // 0x160(0x04)
	char pad_164[0x4]; // 0x164(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UDamageClass* DamageClass); // Function FSD.GatlingHotShellsBonusUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117c410
};

// Class FSD.TargetSpecificDamageBonusUpgrade
// Size: 0x1a8 (Inherited: 0x150)
struct UTargetSpecificDamageBonusUpgrade : UItemUpgrade {
	float Bonus; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	struct FGameplayTagQuery tagQuery; // 0x158(0x48)
	struct FName Key; // 0x1a0(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct FName Key); // Function FSD.TargetSpecificDamageBonusUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117e430
};

// Class FSD.TargetStateDamageBonusUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UTargetStateDamageBonusUpgrade : UItemUpgrade {
	enum class ETargetStateDamageBonusType TargetState; // 0x150(0x01)
	char pad_151[0x3]; // 0x151(0x03)
	float Bonus; // 0x154(0x04)
	struct UDamageClass* DamageClass; // 0x158(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, enum class ETargetStateDamageBonusType TargetState); // Function FSD.TargetStateDamageBonusUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117e540
};

// Class FSD.StatusDamageBonusUpgrade
// Size: 0x170 (Inherited: 0x150)
struct UStatusDamageBonusUpgrade : UItemUpgrade {
	struct TArray<struct UStatusEffect*> StatusEffects; // 0x150(0x10)
	float Bonus; // 0x160(0x04)
	char pad_164[0x4]; // 0x164(0x04)
	struct UDamageClass* DamageClass; // 0x168(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UStatusEffect* StatusEffect); // Function FSD.StatusDamageBonusUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117e210
};

// Class FSD.StatusAndStateDamageBonusUpgrade
// Size: 0x180 (Inherited: 0x150)
struct UStatusAndStateDamageBonusUpgrade : UItemUpgrade {
	struct TArray<struct UStatusEffect*> StatusEffects; // 0x150(0x10)
	struct TArray<enum class ETargetStateDamageBonusType> TargetStates; // 0x160(0x10)
	float Bonus; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)
	struct UDamageClass* DamageClass; // 0x178(0x08)
};

// Class FSD.PushSatusEffectDamageBonusUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UPushSatusEffectDamageBonusUpgrade : UItemUpgrade {
	struct UStatusEffect* StatusEffect; // 0x150(0x08)
	float Chance; // 0x158(0x04)
	bool IgnoreArmorHit; // 0x15c(0x01)
	char pad_15D[0x3]; // 0x15d(0x03)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UStatusEffect* StatusEffect); // Function FSD.PushSatusEffectDamageBonusUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117da70
};

// Class FSD.PushDynamicStatusEffectDamageBonusUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UPushDynamicStatusEffectDamageBonusUpgrade : UItemUpgrade {
	struct FName Key; // 0x150(0x08)
	struct UStatusEffectItem* StatusEffectItem; // 0x158(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct FName Key); // Function FSD.PushDynamicStatusEffectDamageBonusUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117d960
};

// Class FSD.ModifyDynamicStatusEffectDamageBonusUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UModifyDynamicStatusEffectDamageBonusUpgrade : UStandardItemUpgrade {
	enum class EModifyStatusEffectDamageUpgrade upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AActor* upgradedItem, struct AFSDPlayerState* Player, enum class EModifyStatusEffectDamageUpgrade upgradeType); // Function FSD.ModifyDynamicStatusEffectDamageBonusUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117d130
};

// Class FSD.LockCountSTEBonusUpgrade
// Size: 0x160 (Inherited: 0x150)
struct ULockCountSTEBonusUpgrade : UItemUpgrade {
	struct UStatusEffect* StatusEffect; // 0x150(0x08)
	bool UseTotalLockCount; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	float Amount; // 0x15c(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, struct UStatusEffect* StatusEffect); // Function FSD.LockCountSTEBonusUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117ce00
};

// Class FSD.DamageTagBonusUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UDamageTagBonusUpgrade : UItemUpgrade {
	struct TArray<struct UDamageTag*> Tags; // 0x150(0x10)
};

// Class FSD.ConditionalDamageTagBonusUpgrade
// Size: 0x168 (Inherited: 0x150)
struct UConditionalDamageTagBonusUpgrade : UItemUpgrade {
	struct TArray<struct UDamageTag*> Tags; // 0x150(0x10)
	struct UDamageCondition* Condition; // 0x160(0x08)
};

// Class FSD.ConditionalDamageModifierUpgrade
// Size: 0x168 (Inherited: 0x150)
struct UConditionalDamageModifierUpgrade : UItemUpgrade {
	struct UDamageCondition* Condition; // 0x150(0x08)
	struct TArray<struct FDamageModifierItem> Modifiers; // 0x158(0x10)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player); // Function FSD.ConditionalDamageModifierUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117b120
};

// Class FSD.FearAoEBonusUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UFearAoEBonusUpgrade : UItemUpgrade {
	float FearFactor; // 0x150(0x04)
	float range; // 0x154(0x04)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player); // Function FSD.FearAoEBonusUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117bc70
};

// Class FSD.SingleUsableUpgrade
// Size: 0x160 (Inherited: 0x158)
struct USingleUsableUpgrade : UStandardItemUpgrade {
	enum class ESingleUsableUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AActor* subItem, struct AFSDPlayerState* Player, enum class ESingleUsableUpgradeType upgradeType); // Function FSD.SingleUsableUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117e0a0
};

// Class FSD.FlareUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UFlareUpgrade : UStandardItemUpgrade {
	enum class EFlareUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* flareClass, enum class EFlareUpgradeType upgradeType); // Function FSD.FlareUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117bf70
};

// Class FSD.GrenadeUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UGrenadeUpgrade : UStandardItemUpgrade {
	enum class EGrenadeUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AGrenade* flareClass, enum class EGrenadeUpgradeType upgradeType); // Function FSD.GrenadeUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117c8b0
};

// Class FSD.LineCutterUpgrade
// Size: 0x160 (Inherited: 0x158)
struct ULineCutterUpgrade : UStandardItemUpgrade {
	enum class ELineCutterUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class ELineCutterUpgradeType upgradeType); // Function FSD.LineCutterUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117ccf0
};

// Class FSD.LineCutterProjectileUpgrade
// Size: 0x160 (Inherited: 0x158)
struct ULineCutterProjectileUpgrade : UStandardItemUpgrade {
	enum class ELineCutterProjectileUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class ELineCutterProjectileUpgradeType upgradeType); // Function FSD.LineCutterProjectileUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117cbe0
};

// Class FSD.ProjectileUpgrade
// Size: 0x170 (Inherited: 0x158)
struct UProjectileUpgrade : UStandardItemUpgrade {
	enum class EProjectileUpgrade upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
	struct AActor* projectileClass; // 0x160(0x08)
	struct UItemUpgradeCondition* Condition; // 0x168(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AActor* upgradedItem, struct AFSDPlayerState* Player, enum class EProjectileUpgrade upgradeType); // Function FSD.ProjectileUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117d7f0
};

// Class FSD.FlareGunUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UFlareGunUpgrade : UStandardItemUpgrade {
	enum class EFlaregunUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, enum class EFlaregunUpgrades upgradeType); // Function FSD.FlareGunUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117be60
};

// Class FSD.FlaregunProjectileUpgrade
// Size: 0x168 (Inherited: 0x158)
struct UFlaregunProjectileUpgrade : UStandardItemUpgrade {
	enum class EFlaregunProjectileUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
	struct AActor* projectileClass; // 0x160(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AActor* upgradedItem, struct AFSDPlayerState* Player, enum class EFlaregunProjectileUpgrades upgradeType); // Function FSD.FlaregunProjectileUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117c080
};

// Class FSD.ChargedProjectileUpgrade
// Size: 0x168 (Inherited: 0x158)
struct UChargedProjectileUpgrade : UStandardItemUpgrade {
	enum class EChargedProjectileUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
	struct AActor* projectileClass; // 0x160(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AActor* upgradedActor, struct AFSDPlayerState* Player, enum class EChargedProjectileUpgrades upgradeType); // Function FSD.ChargedProjectileUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117aea0
};

// Class FSD.ElectricalSMGUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UElectricalSMGUpgrade : UStandardItemUpgrade {
	enum class EElectricalSMGUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class EElectricalSMGUpgrades upgradeType); // Function FSD.ElectricalSMGUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117bb60
};

// Class FSD.ZiplineGunUpgrade
// Size: 0x168 (Inherited: 0x158)
struct UZiplineGunUpgrade : UStandardItemUpgrade {
	enum class EZiplineGunUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
	struct AZipLineProjectile* projectileClass; // 0x160(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class EZiplineGunUpgrades upgradeType); // Function FSD.ZiplineGunUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117e9e0
};

// Class FSD.GrapplingHookUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UGrapplingHookUpgrade : UStandardItemUpgrade {
	enum class EGrapplingHookUpgrade upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class EGrapplingHookUpgrade upgradeType); // Function FSD.GrapplingHookUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117c7a0
};

// Class FSD.SentryGunUpgrade
// Size: 0x160 (Inherited: 0x158)
struct USentryGunUpgrade : UStandardItemUpgrade {
	enum class ESentryGunUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class ESentryGunUpgradeType upgradeType); // Function FSD.SentryGunUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117de80
};

// Class FSD.SentryGunTypeUpgrade
// Size: 0x160 (Inherited: 0x150)
struct USentryGunTypeUpgrade : UItemUpgrade {
	struct ARecallableSentryGun* SentryGunType; // 0x150(0x08)
	struct AItemMarker* MarkerType; // 0x158(0x08)
};

// Class FSD.ShieldGeneratorUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UShieldGeneratorUpgrade : UStandardItemUpgrade {
	enum class EShieldGeneratorUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EShieldGeneratorUpgrades upgradeType); // Function FSD.ShieldGeneratorUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117df90
};

// Class FSD.AddComponentUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UAddComponentUpgrade : UItemUpgrade {
	struct UActorComponent* ComponentClass; // 0x150(0x08)
	bool ServerOnly; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	bool GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, struct UActorComponent* ComponentClass, bool includePreview); // Function FSD.AddComponentUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117a1c0
};

// Class FSD.TriggeredStatusEffectUpgrade
// Size: 0x178 (Inherited: 0x150)
struct UTriggeredStatusEffectUpgrade : UItemUpgrade {
	char pad_150[0x10]; // 0x150(0x10)
	struct UStatusEffect* StatusEffect; // 0x160(0x08)
	enum class ETriggeredStatusEffectType upgradeType; // 0x168(0x01)
	char pad_169[0x3]; // 0x169(0x03)
	float AoERange; // 0x16c(0x04)
	struct UStatusEffect* OwnerEffect; // 0x170(0x08)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, struct UStatusEffect* StatusEffect, enum class ETriggeredStatusEffectType aUpgradeType); // Function FSD.TriggeredStatusEffectUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117e650
};

// Class FSD.ArmorUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UArmorUpgrade : UStandardItemUpgrade {
	enum class EArmorUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* armorClass, enum class EArmorUpgradeType aUpgradeType); // Function FSD.ArmorUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117a400
};

// Class FSD.ArmorStatUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UArmorStatUpgrade : UStandardItemUpgrade {
	struct UPawnStat* Stat; // 0x158(0x08)

	struct FUpgradeValues GetUpgradedStatValue(struct AFSDPlayerState* Player, struct AActor* armorClass, struct UPawnStat* Stat); // Function FSD.ArmorStatUpgrade.GetUpgradedStatValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117a0b0
};

// Class FSD.BoscoUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UBoscoUpgrade : UStandardItemUpgrade {
	enum class EBoscoUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class EBoscoUpgrades upgradeType); // Function FSD.BoscoUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117ab70
};

// Class FSD.PlatformGunUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UPlatformGunUpgrade : UItemUpgrade {
	enum class EPlatformGunUpgrades myUpgradeType; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, enum class EPlatformGunUpgrades aUpgradeType); // Function FSD.PlatformGunUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117d5d0
};

// Class FSD.DetPackUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UDetPackUpgrade : UStandardItemUpgrade {
	enum class EDetPackUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AActor* Item, struct AFSDPlayerState* Player, enum class EDetPackUpgrades upgradeType); // Function FSD.DetPackUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117b830
};

// Class FSD.BonusDamageUpgrade
// Size: 0x158 (Inherited: 0x150)
struct UBonusDamageUpgrade : UItemUpgrade {
	struct UDamageBonusBase* DamageBonus; // 0x150(0x08)
};

// Class FSD.ProjectileLauncherBaseUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UProjectileLauncherBaseUpgrade : UStandardItemUpgrade {
	enum class EProjectileLauncherBaseUpgradeType upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EProjectileLauncherBaseUpgradeType upgradeType); // Function FSD.ProjectileLauncherBaseUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117d6e0
};

// Class FSD.MicroMissileLauncherUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UMicroMissileLauncherUpgrade : UStandardItemUpgrade {
	enum class EMicroMissileLauncherUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EMicroMissileLauncherUpgrades upgradeType); // Function FSD.MicroMissileLauncherUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117d020
};

// Class FSD.WeaponSwitchProjectileUpgrade
// Size: 0x160 (Inherited: 0x150)
struct UWeaponSwitchProjectileUpgrade : UItemUpgrade {
	struct FProjectileSwitch Projectile; // 0x150(0x10)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, struct UWeaponHitCounterComponent* ComponentClass); // Function FSD.WeaponSwitchProjectileUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117e8d0
};

// Class FSD.GooGunUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UGooGunUpgrade : UStandardItemUpgrade {
	enum class EGooGunUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EGooGunUpgrades upgradeType); // Function FSD.GooGunUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117c690
};

// Class FSD.GooGunProjectileUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UGooGunProjectileUpgrade : UStandardItemUpgrade {
	enum class EGooGunProjectileUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AFSDPlayerState* Player, struct AActor* Item, struct AActor* upgradedItem, enum class EGooGunProjectileUpgrades upgradeType); // Function FSD.GooGunProjectileUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117c520
};

// Class FSD.LockOnWeaponUpgrade
// Size: 0x160 (Inherited: 0x158)
struct ULockOnWeaponUpgrade : UStandardItemUpgrade {
	enum class ELockOnWeaponUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class ELockOnWeaponUpgrades upgradeType); // Function FSD.LockOnWeaponUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117cf10
};

// Class FSD.PlasmaCarbineUpgrade
// Size: 0x160 (Inherited: 0x158)
struct UPlasmaCarbineUpgrade : UStandardItemUpgrade {
	enum class EPlasmaCarbineUpgrades upgradeType; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)

	struct FUpgradeValues GetUpgradedValue(struct AItem* Item, struct AFSDPlayerState* Player, enum class EPlasmaCarbineUpgrades upgradeType); // Function FSD.PlasmaCarbineUpgrade.GetUpgradedValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x117d4c0
};

// Class FSD.WeaponChargeProgressDamageBonus
// Size: 0x168 (Inherited: 0x150)
struct UWeaponChargeProgressDamageBonus : UItemUpgrade {
	struct UDamageClass* DamageClass; // 0x150(0x08)
	struct FFloatInterval ChargeRange; // 0x158(0x08)
	struct FFloatInterval DamageBonusRange; // 0x160(0x08)
};

// Class FSD.Upgradable
// Size: 0x28 (Inherited: 0x28)
struct UUpgradable : UInterface {

	void Upgraded(struct TArray<struct UItemUpgrade*> upgrades); // Function FSD.Upgradable.Upgraded // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1183bb0
};

// Class FSD.UpgradableGear
// Size: 0x28 (Inherited: 0x28)
struct UUpgradableGear : UInterface {

	void GetGearStatEntry(struct AFSDPlayerState* PlayerState, struct TArray<struct FGearStatEntry> Stats); // Function FSD.UpgradableGear.GetGearStatEntry // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x1182d00
};

// Class FSD.JellyBreeder
// Size: 0x4b0 (Inherited: 0x448)
struct AJellyBreeder : AAFlyingBug {
	struct UAnimSequenceBase* EggSpawnAnimation; // 0x448(0x08)
	struct UParticleSystem* EggParticles; // 0x450(0x08)
	struct USoundBase* EggSound; // 0x458(0x08)
	struct UEnemyDescriptor* EnemyToSpawn; // 0x460(0x08)
	struct AProjectile* EggClass; // 0x468(0x08)
	float TimeBetweenBursts; // 0x470(0x04)
	float TimeBetweenEggs; // 0x474(0x04)
	float CloseToSpawnEggTime; // 0x478(0x04)
	char pad_47C[0xc]; // 0x47c(0x0c)
	struct UPhysicalMaterial* WeakPointMaterial; // 0x488(0x08)
	struct UPhysicalMaterial* UnWeakPointMaterial; // 0x490(0x08)
	int32_t EggBurstSize; // 0x498(0x04)
	char pad_49C[0x4]; // 0x49c(0x04)
	int32_t MaxJellies; // 0x4a0(0x04)
	char pad_4A4[0x4]; // 0x4a4(0x04)
	float MultiplierOnHighPlayerCount; // 0x4a8(0x04)
	bool IsInBreedMode; // 0x4ac(0x01)
	char pad_4AD[0x3]; // 0x4ad(0x03)

	void SpawnEnemies(struct AProjectile* Egg, int32_t AmountToSpawn); // Function FSD.JellyBreeder.SpawnEnemies // (Final|Native|Public|BlueprintCallable) // @ game+0x11837c0
	void PlaySpawnEggAnim(); // Function FSD.JellyBreeder.PlaySpawnEggAnim // (Net|Native|Event|NetMulticast|Public) // @ game+0x1088530
	void OnRep_BreedMode(); // Function FSD.JellyBreeder.OnRep_BreedMode // (Final|Native|Protected) // @ game+0x11830e0
	void OnJellyDestroyed(struct AActor* AActor); // Function FSD.JellyBreeder.OnJellyDestroyed // (Final|Native|Protected) // @ game+0x1183060
	void BreedModeFlipped(bool aIsLayingEggs); // Function FSD.JellyBreeder.BreedModeFlipped // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.JellyBreederAnimInstance
// Size: 0x300 (Inherited: 0x2f0)
struct UJellyBreederAnimInstance : UFlyingBugAnimInstance {
	bool ReadyToSpawnEggs; // 0x2f0(0x01)
	char pad_2F1[0xf]; // 0x2f1(0x0f)
};

// Class FSD.JellyEggAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UJellyEggAnimInstance : UAnimInstance {
	struct FVector force; // 0x268(0x0c)
	char pad_27C[0x4]; // 0x27c(0x04)
};

// Class FSD.JetPackItem
// Size: 0x3c8 (Inherited: 0x390)
struct AJetPackItem : AAnimatedItem {
	char pad_390[0x4]; // 0x390(0x04)
	float ActiveTime; // 0x394(0x04)
	struct UCurveFloat* VerticalAccelerationCurve; // 0x398(0x08)
	float VerticalAcceleration; // 0x3a0(0x04)
	float MaxVerticalSpeed; // 0x3a4(0x04)
	float MaxHorizontalSpeed; // 0x3a8(0x04)
	float MaxHorizontalDrift; // 0x3ac(0x04)
	float BurnDuration; // 0x3b0(0x04)
	float RechargeDuration; // 0x3b4(0x04)
	float Fuel; // 0x3b8(0x04)
	bool Active; // 0x3bc(0x01)
	char pad_3BD[0x3]; // 0x3bd(0x03)
	struct UPlayerMovementComponent* CharacterMovement; // 0x3c0(0x08)

	void Server_StopThruster(); // Function FSD.JetPackItem.Server_StopThruster // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1183690
	void Server_StartThruster(); // Function FSD.JetPackItem.Server_StartThruster // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1183640
	void OnRep_Fuel(float OldFuel); // Function FSD.JetPackItem.OnRep_Fuel // (Final|Native|Protected) // @ game+0x1183100
	void OnRep_Active(); // Function FSD.JetPackItem.OnRep_Active // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnFuelChanged(float Value, float Delta); // Function FSD.JetPackItem.OnFuelChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.KeepInsideWorld
// Size: 0xc8 (Inherited: 0xb0)
struct UKeepInsideWorld : UActorComponent {
	struct TArray<struct TWeakObjectPtr<struct AActor>> ActorsToKeepInsideWorld; // 0xb0(0x10)
	int32_t IteratorIndex; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)

	void UnregisterForKeepInsideWorld(struct UObject* WorldContextObject, struct AActor* Actor); // Function FSD.KeepInsideWorld.UnregisterForKeepInsideWorld // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1183ae0
	void RegisterForKeepInsideWorld(struct UObject* WorldContextObject, struct AActor* Actor); // Function FSD.KeepInsideWorld.RegisterForKeepInsideWorld // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1183220
};

// Class FSD.KillEnemiesObjective
// Size: 0x198 (Inherited: 0x178)
struct UKillEnemiesObjective : UObjective {
	int32_t EnemyCount; // 0x178(0x04)
	int32_t ExtraEnemies; // 0x17c(0x04)
	struct UDebrisPositioning* Positioning; // 0x180(0x08)
	struct UEnemyDescriptor* EnemyTarget; // 0x188(0x08)
	int32_t EnemiesKilled; // 0x190(0x04)
	int32_t EnemiesToKill; // 0x194(0x04)

	void RegisterTargetSpawned(struct APawn* Target); // Function FSD.KillEnemiesObjective.RegisterTargetSpawned // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x11832d0
	void ReceiveTargetKilled(struct UHealthComponentBase* Health); // Function FSD.KillEnemiesObjective.ReceiveTargetKilled // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnTargetKilled(struct UHealthComponentBase* Health); // Function FSD.KillEnemiesObjective.OnTargetKilled // (Final|Native|Protected) // @ game+0x11831a0
	void OnRep_EnemiesToKill(int32_t prevAmount); // Function FSD.KillEnemiesObjective.OnRep_EnemiesToKill // (Final|Native|Protected) // @ game+0x107ea10
	void OnRep_EnemiesKilled(int32_t prevAmount); // Function FSD.KillEnemiesObjective.OnRep_EnemiesKilled // (Final|Native|Protected) // @ game+0x107ea10
};

// Class FSD.LaserPointerMarker
// Size: 0x298 (Inherited: 0x220)
struct ALaserPointerMarker : AActor {
	struct FLaserPointerData LookAtData; // 0x220(0x60)
	struct AActor* LookAtActor; // 0x280(0x08)
	struct UPrimitiveComponent* LookAtComponent; // 0x288(0x08)
	struct UTerrainMaterial* LookAtTerrainMaterial; // 0x290(0x08)

	struct APlayerCharacter* GetCharacter(); // Function FSD.LaserPointerMarker.GetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1182cd0
};

// Class FSD.LaserPointerWaypoint
// Size: 0x240 (Inherited: 0x220)
struct ALaserPointerWaypoint : AActor {
	struct TWeakObjectPtr<struct APlayerCharacter> Character; // 0x220(0x08)
	struct TWeakObjectPtr<struct ALaserPointerItem> LaserPointer; // 0x228(0x08)
	struct FVector Normal; // 0x230(0x0c)
	int32_t Index; // 0x23c(0x04)

	void OnShow(); // Function FSD.LaserPointerWaypoint.OnShow // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnHide(); // Function FSD.LaserPointerWaypoint.OnHide // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.LaserPointerItem
// Size: 0x540 (Inherited: 0x390)
struct ALaserPointerItem : AAnimatedItem {
	struct FMulticastInlineDelegate OnMarkerPlaced; // 0x390(0x10)
	struct ALaserPointerMarker* MarkerType; // 0x3a0(0x08)
	struct ALaserPointerMarker* SecondaryMarkerType; // 0x3a8(0x08)
	struct TWeakObjectPtr<struct ALaserPointerMarker> ActiveMarker; // 0x3b0(0x08)
	struct ALaserPointerWaypoint* WaypointType; // 0x3b8(0x08)
	int32_t MaxWaypoints; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct TArray<struct ALaserPointerWaypoint*> Waypoints; // 0x3c8(0x10)
	int32_t NextWaypointIndex; // 0x3d8(0x04)
	char pad_3DC[0x4]; // 0x3dc(0x04)
	float MarkerLifeTime; // 0x3e0(0x04)
	struct FLinearColor ColorMinerals; // 0x3e4(0x10)
	struct FLinearColor ColorEnemy; // 0x3f4(0x10)
	struct FLinearColor ColorOther; // 0x404(0x10)
	char pad_414[0x4]; // 0x414(0x04)
	struct UDialogDataAsset* DefaultLookAtShout; // 0x418(0x08)
	struct UDialogDataAsset* DefaultEnemyShout; // 0x420(0x08)
	struct USceneComponent* PointerComponent; // 0x428(0x08)
	struct FHitResult LookAtHit; // 0x430(0x88)
	struct TWeakObjectPtr<struct UObjectInfoComponent> LookAtInfo; // 0x4b8(0x08)
	struct TWeakObjectPtr<struct UTerrainMaterial> LookAtTerrainMaterial; // 0x4c0(0x08)
	struct FLaserPointerData LookAtData; // 0x4c8(0x60)
	float LookAtDistance; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)
	struct UDialogDataAsset* LookAtShout; // 0x530(0x08)
	struct AFSDGameState* GameState; // 0x538(0x08)

	void UnlockToMinersManual(struct UObject* WorldContextObject, struct FGuid ObjectID); // Function FSD.LaserPointerItem.UnlockToMinersManual // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x1183a10
	void ToggleLaserVisible(bool aVisible); // Function FSD.LaserPointerItem.ToggleLaserVisible // (Native|Event|Public|BlueprintEvent) // @ game+0x1183960
	void ServerPlaceMarker(struct FVector Location, struct AActor* Actor, struct UPrimitiveComponent* Cmponent, struct UTerrainMaterial* TerrainMaterial, enum class ELaserPointerMarkerType eMarkerType); // Function FSD.LaserPointerItem.ServerPlaceMarker // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x1183350
	void Server_SecondaryUse(); // Function FSD.LaserPointerItem.Server_SecondaryUse // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11835f0
	void OnPointOfInterest(struct AActor* TargetActor, struct FVector TargetLocation, struct UTexture2D* TargetIcon); // Function FSD.LaserPointerItem.OnPointOfInterest // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x158ca90
	void OnDeath(struct UHealthComponentBase* Health); // Function FSD.LaserPointerItem.OnDeath // (Final|Native|Protected) // @ game+0x1182fe0
	void GetPointTransform(struct FTransform PointTransform); // Function FSD.LaserPointerItem.GetPointTransform // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1182f00
};

// Class FSD.LegacySettings
// Size: 0x40 (Inherited: 0x30)
struct ULegacySettings : UDataAsset {
	struct TArray<struct TSoftObjectPtr<struct USkeletalMesh>> ArmorMeshes; // 0x30(0x10)
};

// Class FSD.LevelGenerationDebris
// Size: 0xc8 (Inherited: 0xb0)
struct ULevelGenerationDebris : UActorComponent {
	struct UDebrisBase* Debris; // 0xb0(0x08)
	struct UObject* Influencer; // 0xb8(0x08)
	float range; // 0xc0(0x04)
	bool SelfActivate; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
};

// Class FSD.LineSegmentCarverComponent
// Size: 0x430 (Inherited: 0x3f0)
struct ULineSegmentCarverComponent : UGenerationComponent {
	struct TArray<struct FLineSegmentCarverPoint> LinePoints; // 0x3f0(0x10)
	bool Visible; // 0x400(0x01)
	char pad_401[0x3]; // 0x401(0x03)
	int32_t Layer; // 0x404(0x04)
	float Cielingheight; // 0x408(0x04)
	float FloorDepth; // 0x40c(0x04)
	struct UFloodFillSettings* CeilingNoiseOverride; // 0x410(0x08)
	struct UFloodFillSettings* WallNoiseOverride; // 0x418(0x08)
	struct UFloodFillSettings* FloorNoiseOverride; // 0x420(0x08)
	bool UseDetailNoise; // 0x428(0x01)
	char pad_429[0x7]; // 0x429(0x07)
};

// Class FSD.LineSegmentCarver
// Size: 0x240 (Inherited: 0x228)
struct ALineSegmentCarver : AGenerationItem {
	struct ULineSegmentCarverComponent* LineComponent; // 0x228(0x08)
	char pad_230[0x10]; // 0x230(0x10)
};

// Class FSD.LineCutterProjectile
// Size: 0x530 (Inherited: 0x340)
struct ALineCutterProjectile : AProjectile {
	struct FScaledEffect EletricHitEffect; // 0x340(0x10)
	struct FScaledEffect ProjectileDisappearEffect; // 0x350(0x10)
	float SwipeRadius; // 0x360(0x04)
	float DoubleLineDistanceMultiplier; // 0x364(0x04)
	float OverlapRadius; // 0x368(0x04)
	bool DestroyOnTerrainCollision; // 0x36c(0x01)
	bool IsDead; // 0x36d(0x01)
	bool bHasReversedDirection; // 0x36e(0x01)
	char pad_36F[0x55]; // 0x36f(0x55)
	float FlyStraighTime; // 0x3c4(0x04)
	enum class EImpactDecalSize EletricDecalSize; // 0x3c8(0x01)
	enum class EImpactDecalSize ImpactDecalSize; // 0x3c9(0x01)
	char pad_3CA[0x46]; // 0x3ca(0x46)
	struct FMulticastInlineDelegate OnLineDestroy; // 0x410(0x10)
	struct FMulticastInlineDelegate OnLineLifespanEnd; // 0x420(0x10)
	struct FMulticastInlineDelegate OnPerformHit; // 0x430(0x10)
	struct FMulticastInlineDelegate OnLineEffectHide; // 0x440(0x10)
	struct FVector LeftLastPosition; // 0x450(0x0c)
	struct FVector RightLastPosition; // 0x45c(0x0c)
	struct USceneComponent* LineRoot; // 0x468(0x08)
	struct USceneComponent* LeftSphere; // 0x470(0x08)
	struct USceneComponent* RightSphere; // 0x478(0x08)
	struct USceneComponent* LeftSphere2; // 0x480(0x08)
	struct USceneComponent* RightSphere2; // 0x488(0x08)
	struct USceneComponent* LeftSphere3; // 0x490(0x08)
	struct USceneComponent* RightSphere3; // 0x498(0x08)
	struct UParticleSystemComponent* BeamParticle; // 0x4a0(0x08)
	struct UParticleSystemComponent* BeamParticle2; // 0x4a8(0x08)
	struct UParticleSystemComponent* BeamParticle3; // 0x4b0(0x08)
	struct UParticleSystemComponent* LeftHitParticles; // 0x4b8(0x08)
	struct UParticleSystemComponent* RightHitParticles; // 0x4c0(0x08)
	float RotationSpeed; // 0x4c8(0x04)
	struct FRotator LineRotation; // 0x4cc(0x0c)
	enum class ELineRotation RotationMode; // 0x4d8(0x01)
	bool ShouldExplode; // 0x4d9(0x01)
	bool OnlyOne; // 0x4da(0x01)
	bool IsDoubleLine; // 0x4db(0x01)
	bool HasPlasmaTrail; // 0x4dc(0x01)
	char pad_4DD[0x3]; // 0x4dd(0x03)
	float LineMaxSize; // 0x4e0(0x04)
	float LineExpansionDelay; // 0x4e4(0x04)
	float TimeToLineExpansion; // 0x4e8(0x04)
	float FireRate; // 0x4ec(0x04)
	struct UDamageComponent* DamageComponent; // 0x4f0(0x08)
	struct UDamageComponent* InitialDamageComponent; // 0x4f8(0x08)
	int32_t InitialHitDamageMultiplier; // 0x500(0x04)
	float InhibitImpactDecalsTime; // 0x504(0x04)
	float MinTimeBetweenImpactDecals; // 0x508(0x04)
	char pad_50C[0x24]; // 0x50c(0x24)

	void UpdateBeamLocations(); // Function FSD.LineCutterProjectile.UpdateBeamLocations // (Final|Native|Protected|BlueprintCallable) // @ game+0x1183b90
	void TerrainSweep(struct FVector Left, struct FVector Right); // Function FSD.LineCutterProjectile.TerrainSweep // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1183880
	void StartSpawningTrail(); // Function FSD.LineCutterProjectile.StartSpawningTrail // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void SpawnDecal(struct FHitResult Result); // Function FSD.LineCutterProjectile.SpawnDecal // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x11836e0
	void SetExtraBeamVisibility(bool IsVisible); // Function FSD.LineCutterProjectile.SetExtraBeamVisibility // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Server_RemoveDebris(int32_t instance, int32_t Component); // Function FSD.LineCutterProjectile.Server_RemoveDebris // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1183530
	void PerformHit__DelegateSignature(struct FHitResult Result); // DelegateFunction FSD.LineCutterProjectile.PerformHit__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x158ca90
	void OnRep_LineRotation(); // Function FSD.LineCutterProjectile.OnRep_LineRotation // (Final|Native|Protected) // @ game+0x1183180
	void LineLifeSpanDestroy__DelegateSignature(); // DelegateFunction FSD.LineCutterProjectile.LineLifeSpanDestroy__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void LineEffectHide__DelegateSignature(); // DelegateFunction FSD.LineCutterProjectile.LineEffectHide__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void LineDestroy__DelegateSignature(struct FHitResult Result); // DelegateFunction FSD.LineCutterProjectile.LineDestroy__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x158ca90
	void Fire(struct FVector Origin, struct FVector Direction, float Distance); // Function FSD.LineCutterProjectile.Fire // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1182ba0
};

// Class FSD.GuntowerLineProjectile
// Size: 0x3b0 (Inherited: 0x340)
struct AGuntowerLineProjectile : AProjectile {
	struct FMulticastInlineDelegate OnLineDestroy; // 0x340(0x10)
	struct USceneComponent* LeftLinePoint; // 0x350(0x08)
	struct USceneComponent* RightLinePoint; // 0x358(0x08)
	struct UDamageComponent* DamageComponent; // 0x360(0x08)
	struct UParticleSystemComponent* BeamParticles; // 0x368(0x08)
	float PlatformDissolveRadius; // 0x370(0x04)
	float PlatformDissolveSqueeze; // 0x374(0x04)
	struct UParticleSystemComponent* HitParticles; // 0x378(0x08)
	char pad_380[0x20]; // 0x380(0x20)
	float TimeBetweenLineChecks; // 0x3a0(0x04)
	char pad_3A4[0xc]; // 0x3a4(0x0c)

	void TurnOffParticles(); // Function FSD.GuntowerLineProjectile.TurnOffParticles // (Final|Native|Protected) // @ game+0x11839f0
	void LineDestroy__DelegateSignature(struct FHitResult Result); // DelegateFunction FSD.GuntowerLineProjectile.LineDestroy__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void Fire(struct FVector Origin, struct FVector Direction, float Distance); // Function FSD.GuntowerLineProjectile.Fire // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1182a70
};

// Class FSD.LineSegmentFillerComponent
// Size: 0x430 (Inherited: 0x3f0)
struct ULineSegmentFillerComponent : UGenerationComponent {
	struct TArray<struct FLineSegmentFillerPoint> LinePoints; // 0x3f0(0x10)
	bool Visible; // 0x400(0x01)
	char pad_401[0x7]; // 0x401(0x07)
	struct UFloodFillSettings* NoiseOverride; // 0x408(0x08)
	struct FRandRange RangeScale; // 0x410(0x08)
	struct FRandRange NoiseRangeScale; // 0x418(0x08)
	char pad_420[0x10]; // 0x420(0x10)
};

// Class FSD.LineSegmentFiller
// Size: 0x240 (Inherited: 0x228)
struct ALineSegmentFiller : AGenerationItem {
	struct ULineSegmentFillerComponent* LineComponent; // 0x228(0x08)
	char pad_230[0x10]; // 0x230(0x10)
};

// Class FSD.LoadoutItem
// Size: 0x28 (Inherited: 0x28)
struct ULoadoutItem : UInterface {

	struct AItem* GetLoadoutItemClass(); // Function FSD.LoadoutItem.GetLoadoutItemClass // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1096620
};

// Class FSD.LoadoutItemProxy
// Size: 0x358 (Inherited: 0x338)
struct ALoadoutItemProxy : AItem {
	struct UItemCharacterAnimationSet* AnimationSet; // 0x338(0x08)
	struct FItemLoadoutAnimations LoadoutAnimations; // 0x340(0x18)

	struct AItem* GetLoadoutItemFromClass(struct AActor* ActorClass); // Function FSD.LoadoutItemProxy.GetLoadoutItemFromClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1186ea0
};

// Class FSD.LocalizationFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct ULocalizationFunctionLibrary : UBlueprintFunctionLibrary {

	struct TArray<struct FLocalizedLanguageInfo> GetLocalizedLanguages(); // Function FSD.LocalizationFunctionLibrary.GetLocalizedLanguages // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1186f30
};

// Class FSD.FSDLocalizationSettings
// Size: 0x48 (Inherited: 0x38)
struct UFSDLocalizationSettings : UDeveloperSettings {
	struct TArray<struct FFSDTranslationProgress> CommunityTranslationProgress; // 0x38(0x10)
};

// Class FSD.LockOnBeam
// Size: 0x360 (Inherited: 0x220)
struct ALockOnBeam : AActor {
	struct USplineComponent* BeamSpline; // 0x220(0x08)
	struct USplineMeshComponent* BeamMeshComponent01; // 0x228(0x08)
	struct USplineMeshComponent* BeamMeshComponent02; // 0x230(0x08)
	struct USplineMeshComponent* BeamMeshComponent03; // 0x238(0x08)
	struct USceneComponent* BlockedNodeComponent; // 0x240(0x08)
	struct USceneComponent* PreviewLocationComponent; // 0x248(0x08)
	struct UMaterialInterface* BeamMaterial; // 0x250(0x08)
	struct UMaterialInterface* BlockedBeamMaterial; // 0x258(0x08)
	struct UMaterialInterface* SeekerMaterial; // 0x260(0x08)
	float BeamThicknessScale; // 0x268(0x04)
	char pad_26C[0xc]; // 0x26c(0x0c)
	struct TWeakObjectPtr<struct ALockOnWeapon> Item; // 0x278(0x08)
	struct TWeakObjectPtr<struct AActor> TargetActor; // 0x280(0x08)
	char pad_288[0x10]; // 0x288(0x10)
	struct FBeamCollision Collision; // 0x298(0xc8)

	void ReceiveItemSet(); // Function FSD.LockOnBeam.ReceiveItemSet // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.LockOnWeapon
// Size: 0x898 (Inherited: 0x6e0)
struct ALockOnWeapon : AAmmoDrivenWeapon {
	struct FMulticastInlineDelegate OnLockingStarted; // 0x6e0(0x10)
	struct FMulticastInlineDelegate OnLockingStopped; // 0x6f0(0x10)
	struct FMulticastInlineDelegate OnMaxTargetsChanged; // 0x700(0x10)
	struct FMulticastInlineDelegate OnLockOnCountChanged; // 0x710(0x10)
	struct FMulticastInlineDelegate OnLockonTargetRotationUpdated; // 0x720(0x10)
	struct AActor* AimTarget; // 0x730(0x08)
	float LockOnDamageMultiplier; // 0x738(0x04)
	int32_t ShotsPerTarget; // 0x73c(0x04)
	int32_t MaxTargets; // 0x740(0x04)
	float TimeBetweenLockedShots; // 0x744(0x04)
	float LockOnTime; // 0x748(0x04)
	float MaxLockOnDegree; // 0x74c(0x04)
	float LoseLockOnDegree; // 0x750(0x04)
	float DegreeTolerance; // 0x754(0x04)
	float MaxLockOnRange; // 0x758(0x04)
	bool bPrioritizeLowHitPoint; // 0x75c(0x01)
	bool bAlwaysHitTarget; // 0x75d(0x01)
	char pad_75E[0x2]; // 0x75e(0x02)
	float MaxLockOnDuration; // 0x760(0x04)
	bool bLockOnControlsSentryGun; // 0x764(0x01)
	bool bSentryGunShootsOnLockedShot; // 0x765(0x01)
	char pad_766[0x2]; // 0x766(0x02)
	struct UActorTrackingWidget* TrackingWidgetClass; // 0x768(0x08)
	struct ALockOnBeam* LockOnBeamClass; // 0x770(0x08)
	struct AActor* AoeActorClass; // 0x778(0x08)
	int32_t AoeHitCountThreshhold; // 0x780(0x04)
	bool UseLockOnTargetStatusEffect; // 0x784(0x01)
	char pad_785[0x3]; // 0x785(0x03)
	struct UStatusEffect* LockOnTargetStatusEffect; // 0x788(0x08)
	int32_t PushStatusEffectEveryXLock; // 0x790(0x04)
	char pad_794[0x30]; // 0x794(0x30)
	int32_t LockOnCount; // 0x7c4(0x04)
	char pad_7C8[0x30]; // 0x7c8(0x30)
	struct UDamageComponent* DamageComponent; // 0x7f8(0x08)
	struct UHitscanComponent* HitscanComponent; // 0x800(0x08)
	struct FTracerData ChargedShotTracer; // 0x808(0x30)
	float ChargeSpeed; // 0x838(0x04)
	float SlowMovementAtCharge; // 0x83c(0x04)
	bool FearEnabled; // 0x840(0x01)
	char pad_841[0x3]; // 0x841(0x03)
	float FearFactorBase; // 0x844(0x04)
	float FearFactorPerShotBonus; // 0x848(0x04)
	float FearRange; // 0x84c(0x04)
	float FearRangePerShotBonus; // 0x850(0x04)
	char pad_854[0x2]; // 0x854(0x02)
	bool IsMovementSlowed; // 0x856(0x01)
	bool Charging; // 0x857(0x01)
	float ChargeProgress; // 0x858(0x04)
	bool LastShotWasLockedOn; // 0x85c(0x01)
	char pad_85D[0x3]; // 0x85d(0x03)
	float LockOnRecoilMult; // 0x860(0x04)
	char pad_864[0x34]; // 0x864(0x34)

	void UpdateRifleEye(); // Function FSD.LockOnWeapon.UpdateRifleEye // (Final|Native|Protected) // @ game+0x1188110
	void SetMuzzleDirection(struct FVector TargetLocation); // Function FSD.LockOnWeapon.SetMuzzleDirection // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x158ca90
	void Server_TriggerAoe(struct FVector Location); // Function FSD.LockOnWeapon.Server_TriggerAoe // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x1187ce0
	void Server_SetTotalLockCount(int32_t totalLockCount); // Function FSD.LockOnWeapon.Server_SetTotalLockCount // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1187c50
	void Server_SetLockCount(struct FLockCounter LockCounter); // Function FSD.LockOnWeapon.Server_SetLockCount // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1187bc0
	void Server_SetIsMovementSlowed(bool bisMovementSlowed); // Function FSD.LockOnWeapon.Server_SetIsMovementSlowed // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1187b00
	void Server_SetIsLatestShotLockedOn(bool bisShotLockedOn); // Function FSD.LockOnWeapon.Server_SetIsLatestShotLockedOn // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1187a40
	void Server_SetIsChargingShot(bool bisCharging); // Function FSD.LockOnWeapon.Server_SetIsChargingShot // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1187980
	void Server_PushStatusEffect(struct AActor* Target); // Function FSD.LockOnWeapon.Server_PushStatusEffect // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11878f0
	void Server_PopStatusEffect(struct AActor* Target); // Function FSD.LockOnWeapon.Server_PopStatusEffect // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1187860
	void Server_FiringComplete(int32_t ShotsFired); // Function FSD.LockOnWeapon.Server_FiringComplete // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11877d0
	void RefundAmmo(); // Function FSD.LockOnWeapon.RefundAmmo // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x1187750
	void OnRep_AimTarget(); // Function FSD.LockOnWeapon.OnRep_AimTarget // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnMovementSlowed(bool isSlowed); // Function FSD.LockOnWeapon.OnMovementSlowed // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnHitDeadTarget(); // Function FSD.LockOnWeapon.OnHitDeadTarget // (Final|Native|Protected) // @ game+0x11875b0
	void OnHit(struct FHitResult Hit, bool AlwaysPenetrate); // Function FSD.LockOnWeapon.OnHit // (Final|Native|Protected|HasOutParms) // @ game+0x1187480
	void OnAsyncFireComplete(); // Function FSD.LockOnWeapon.OnAsyncFireComplete // (Final|Native|Protected) // @ game+0x1187460
	void MuzzleLerpToTarget(struct FVector TargetLocation); // Function FSD.LockOnWeapon.MuzzleLerpToTarget // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x158ca90
	void MaxTargetsDelegate__DelegateSignature(int32_t InMaxTargets); // DelegateFunction FSD.LockOnWeapon.MaxTargetsDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void LockonTargetRotationUpdated__DelegateSignature(bool hasTargetLockon, struct FRotator socketRotation); // DelegateFunction FSD.LockOnWeapon.LockonTargetRotationUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate|HasDefaults) // @ game+0x158ca90
	void LockOnRifleLockingOnState__DelegateSignature(); // DelegateFunction FSD.LockOnWeapon.LockOnRifleLockingOnState__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void LockOnCountDelegate__DelegateSignature(int32_t InCurrentCount); // DelegateFunction FSD.LockOnWeapon.LockOnCountDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
};

// Class FSD.LockOnTrackingWidget
// Size: 0x278 (Inherited: 0x278)
struct ULockOnTrackingWidget : UActorTrackingWidget {

	void OnLockOn(int32_t numberOfLockOnsOnThisTarget, int32_t totalNumberOfLockOns); // Function FSD.LockOnTrackingWidget.OnLockOn // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnFireComplete(int32_t numberOfLockOnsOnThisTarget); // Function FSD.LockOnTrackingWidget.OnFireComplete // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void CleanUpWidget(bool showFade); // Function FSD.LockOnTrackingWidget.CleanUpWidget // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.LoginBlueprintCallProxy
// Size: 0x70 (Inherited: 0x30)
struct ULoginBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char pad_58[0x18]; // 0x58(0x18)

	struct ULoginBlueprintCallProxy* Login(struct UObject* WorldContextObject); // Function FSD.LoginBlueprintCallProxy.Login // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11873e0
};

// Class FSD.LookingAtWidget
// Size: 0x278 (Inherited: 0x230)
struct ULookingAtWidget : UUserWidget {
	float TargetSelectDuration; // 0x230(0x04)
	float TargetLostDuration; // 0x234(0x04)
	struct TWeakObjectPtr<struct APlayerCharacter> Character; // 0x238(0x08)
	struct TWeakObjectPtr<struct UCharacterSightComponent> CharacterSight; // 0x240(0x08)
	struct TWeakObjectPtr<struct AActor> CurrentTarget; // 0x248(0x08)
	struct TWeakObjectPtr<struct UPawnAfflictionComponent> CurrentTargetAfflictions; // 0x250(0x08)
	struct TScriptInterface<None> CurrentTargetHealth; // 0x258(0x10)
	bool CanCurrentTargetTakeDamage; // 0x268(0x01)
	char pad_269[0x3]; // 0x269(0x03)
	float TargetLostTime; // 0x26c(0x04)
	bool bTargetSet; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)

	void SetCurrentTarget(struct AActor* NewActor, struct TScriptInterface<None> HealthComponent, float OverrideTargetLostTime); // Function FSD.LookingAtWidget.SetCurrentTarget // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1187e40
	void ResetCurrentTarget(); // Function FSD.LookingAtWidget.ResetCurrentTarget // (Final|Native|Protected|BlueprintCallable) // @ game+0x1187790
	void ReceiveUpdateTarget(struct AActor* InCurrentTarget, float DeltaTime); // Function FSD.LookingAtWidget.ReceiveUpdateTarget // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveTargetLost(); // Function FSD.LookingAtWidget.ReceiveTargetLost // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveNewTarget(struct AActor* InCurrentTarget); // Function FSD.LookingAtWidget.ReceiveNewTarget // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	bool IsValidTarget(struct AActor* TargetActor, struct TScriptInterface<None> TargetHealth); // Function FSD.LookingAtWidget.IsValidTarget // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x11872f0
	bool IsBossFight(struct TScriptInterface<None> Health); // Function FSD.LookingAtWidget.IsBossFight // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1187240
	struct UHealthComponentBase* GetLookingAtHealth(); // Function FSD.LookingAtWidget.GetLookingAtHealth // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1187080
	struct AActor* GetLookingAtActor(); // Function FSD.LookingAtWidget.GetLookingAtActor // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1187050
	bool GetCharacterTemperatureEffect(float TemperatureEffect); // Function FSD.LookingAtWidget.GetCharacterTemperatureEffect // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1186df0
};

// Class FSD.LookingAtContentWidget
// Size: 0x270 (Inherited: 0x230)
struct ULookingAtContentWidget : UUserWidget {
	struct TWeakObjectPtr<struct AActor> CurrentTarget; // 0x230(0x08)
	struct TWeakObjectPtr<struct UPawnAfflictionComponent> CurrentTargetAfflictions; // 0x238(0x08)
	struct TWeakObjectPtr<struct USimpleObjectInfoComponent> CurrentTargetInfo; // 0x240(0x08)
	struct TScriptInterface<None> CurrentTargetHealth; // 0x248(0x10)
	struct TWeakObjectPtr<struct UHackingUsableComponent> CurrentHackingComponent; // 0x258(0x08)
	struct TWeakObjectPtr<struct UPetComponent> CurrentPetComponent; // 0x260(0x08)
	bool bWeakPointHit; // 0x268(0x01)
	char pad_269[0x7]; // 0x269(0x07)

	void UpdateCurrentTarget(float DeltaSeconds, struct AActor* InTargetActor, struct TScriptInterface<None> InTargetHealthComponent); // Function FSD.LookingAtContentWidget.UpdateCurrentTarget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1187ff0
	void RegisterWeakPointHit(); // Function FSD.LookingAtContentWidget.RegisterWeakPointHit // (Final|Native|Public|BlueprintCallable) // @ game+0x1187770
	void ReceiveUpdateTarget(struct AActor* InCurrentTarget, float DeltaTime); // Function FSD.LookingAtContentWidget.ReceiveUpdateTarget // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveNewTarget(struct AActor* InCurrentTarget); // Function FSD.LookingAtContentWidget.ReceiveNewTarget // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct FText GetTargetOwnerName(); // Function FSD.LookingAtContentWidget.GetTargetOwnerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11871a0
	struct FText GetTargetName(); // Function FSD.LookingAtContentWidget.GetTargetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1187100
	float GetTargetHealthPct(); // Function FSD.LookingAtContentWidget.GetTargetHealthPct // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11870d0
};

// Class FSD.TreasureBeacon
// Size: 0x298 (Inherited: 0x220)
struct ATreasureBeacon : AActor {
	struct USceneComponent* RootComp; // 0x220(0x08)
	struct UTerrainPlacementComponent* terrainPlacement; // 0x228(0x08)
	struct UDebrisPositioning* TreasurePositioning; // 0x230(0x08)
	struct UDebrisPositioning* DebrisPartsPositioning; // 0x238(0x08)
	struct UCurveFloat* AvoidCostCurve; // 0x240(0x08)
	struct UCurveFloat* AvoidCostCurveDebris; // 0x248(0x08)
	float MaxRange; // 0x250(0x04)
	float MinRange; // 0x254(0x04)
	float DebrisSpawnRange; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct AActor* DebrisPartClass; // 0x260(0x08)
	int32_t DebrisPartsToSpawn; // 0x268(0x04)
	int32_t MaxSpawnLocationTries; // 0x26c(0x04)
	char pad_270[0x18]; // 0x270(0x18)
	struct ATreasureContainer* TreasureClass; // 0x288(0x08)
	struct ATreasureContainer* TreasureInstance; // 0x290(0x08)

	void SpawnDebreeParts(); // Function FSD.TreasureBeacon.SpawnDebreeParts // (Native|Protected|BlueprintCallable|Const) // @ game+0x10aad30
	void ActivateTreasure(); // Function FSD.TreasureBeacon.ActivateTreasure // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1186dd0
};

// Class FSD.TreasureContainer
// Size: 0x288 (Inherited: 0x220)
struct ATreasureContainer : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct UOncePerPlayerUsableComponent* CollectUsable; // 0x228(0x08)
	char pad_230[0x8]; // 0x230(0x08)
	struct UItemAquisitionSource* AquisitionSource; // 0x238(0x08)
	struct TArray<struct APlayerCharacter*> Collectors; // 0x240(0x10)
	struct APlayerCharacter* LastJoiner; // 0x250(0x08)
	struct TArray<struct FTreasureWeight> PossibleRewarders; // 0x258(0x10)
	struct UTreasureRewarder* TreasureRewarder; // 0x268(0x08)
	char pad_270[0x12]; // 0x270(0x12)
	bool PreventLatejoiners; // 0x282(0x01)
	char pad_283[0x5]; // 0x283(0x05)

	void TestAwardTreasure(); // Function FSD.TreasureContainer.TestAwardTreasure // (Final|Native|Public|BlueprintCallable) // @ game+0x8dc380
	void SetPreventFurtherLatejoiners(bool prevent); // Function FSD.TreasureContainer.SetPreventFurtherLatejoiners // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1187f60
	void SetCanCollectTreasure(bool canCollect); // Function FSD.TreasureContainer.SetCanCollectTreasure // (Final|Native|Public|BlueprintCallable) // @ game+0x1187db0
	void OnRep_LastJoiner(); // Function FSD.TreasureContainer.OnRep_LastJoiner // (Final|Native|Protected) // @ game+0x1187730
	void OnRep_Collectors(); // Function FSD.TreasureContainer.OnRep_Collectors // (Final|Native|Protected) // @ game+0x1187710
	void OnPlayerLatejoined(struct APlayerCharacter* joiner); // Function FSD.TreasureContainer.OnPlayerLatejoined // (Final|Native|Public) // @ game+0x1187690
	void OnPlayerCollectedTreasure(struct APlayerCharacter* collector, enum class EInputKeys Key); // Function FSD.TreasureContainer.OnPlayerCollectedTreasure // (Final|Native|Protected) // @ game+0x11875d0
	void OnLocalPlayerCollectedTreasure(struct APlayerCharacter* Player); // Function FSD.TreasureContainer.OnLocalPlayerCollectedTreasure // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnDisableChestLocally(); // Function FSD.TreasureContainer.OnDisableChestLocally // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnContainerActivated(); // Function FSD.TreasureContainer.OnContainerActivated // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	bool GetPreventFurtherLatejoiners(); // Function FSD.TreasureContainer.GetPreventFurtherLatejoiners // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11870b0
};

// Class FSD.LostPack
// Size: 0x220 (Inherited: 0x220)
struct ALostPack : AActor {
};

// Class FSD.MasteryIconWidget
// Size: 0x230 (Inherited: 0x230)
struct UMasteryIconWidget : UUserWidget {

	void ReceiveUnlocked(); // Function FSD.MasteryIconWidget.ReceiveUnlocked // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.MeleeAttackComponent
// Size: 0x160 (Inherited: 0xf8)
struct UMeleeAttackComponent : UDamageAttackComponent {
	struct TArray<struct UAnimMontage*> Montages; // 0xf8(0x10)
	char pad_108[0x8]; // 0x108(0x08)
	bool CenterOnTarget; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)
	struct TArray<struct UAttackEffect*> AttackEffects; // 0x118(0x10)
	char pad_128[0x8]; // 0x128(0x08)
	struct FMulticastInlineDelegate OnAttackStartedEvent; // 0x130(0x10)
	struct FMulticastInlineDelegate OnDamageAppliedEvent; // 0x140(0x10)
	struct FMulticastInlineDelegate OnAttackEndedEvent; // 0x150(0x10)

	struct UAnimMontage* SelectMontage(); // Function FSD.MeleeAttackComponent.SelectMontage // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x118eac0
	void OnPerformAttack(struct FName Name); // Function FSD.MeleeAttackComponent.OnPerformAttack // (Final|Native|Protected) // @ game+0x118ea40
	void OnMontageEnded(struct UAnimMontage* Montage, bool interrupted); // Function FSD.MeleeAttackComponent.OnMontageEnded // (Final|Native|Protected) // @ game+0x118e8a0
};

// Class FSD.MeshCarveAttackEffect
// Size: 0x60 (Inherited: 0x28)
struct UMeshCarveAttackEffect : UAttackEffect {
	float ExpensiveNoise; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct UStaticMesh* CarveMesh; // 0x30(0x08)
	float CarverOffset; // 0x38(0x04)
	struct FRotator CarverOrientation; // 0x3c(0x0c)
	struct FVector CarverScale; // 0x48(0x0c)
	struct FName Socket; // 0x54(0x08)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class FSD.MessagingSubSystem
// Size: 0x1308 (Inherited: 0x30)
struct UMessagingSubSystem : UGameInstanceSubsystem {
	struct FMulticastInlineDelegate OnNewMessage; // 0x30(0x10)
	char pad_40[0x12c8]; // 0x40(0x12c8)

	float MessageAge(struct FFSDChatMessage Msg); // Function FSD.MessagingSubSystem.MessageAge // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x118e6a0
	void LatestMessages(int32_t Num, bool resetAge, struct TArray<struct FFSDChatMessage> OutMessages); // Function FSD.MessagingSubSystem.LatestMessages // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x118e500
	void ClearMessages(); // Function FSD.MessagingSubSystem.ClearMessages // (Final|Native|Public|BlueprintCallable) // @ game+0x118c750
};

// Class FSD.MicroMissileLauncher
// Size: 0x790 (Inherited: 0x6e0)
struct AMicroMissileLauncher : AAmmoDrivenWeapon {
	struct FMulticastInlineDelegate OnStartCharging; // 0x6e0(0x10)
	struct FMulticastInlineDelegate OnEndCharging; // 0x6f0(0x10)
	struct TArray<struct FName> MuzzleNames; // 0x700(0x10)
	float ChargeTime; // 0x710(0x04)
	int32_t ChargeMaxFireCount; // 0x714(0x04)
	float BuckShotDelay; // 0x718(0x04)
	float ShotDirectionHorizontalDegreeOffset; // 0x71c(0x04)
	float ShotDirectionVerticleDegreeOffset; // 0x720(0x04)
	enum class EMicroMissileLauncherFireMode FireMode; // 0x724(0x01)
	bool DisableHomingOnRelease; // 0x725(0x01)
	char pad_726[0x2]; // 0x726(0x02)
	float MaxHomingProjectiles; // 0x728(0x04)
	char pad_72C[0x4]; // 0x72c(0x04)
	struct UAnimMontage* WPN_Fire_Empty_Mag; // 0x730(0x08)
	struct UAnimMontage* WPN_Fire_Level2; // 0x738(0x08)
	struct UAnimMontage* WPN_Fire_Level2_Empty_Mag; // 0x740(0x08)
	struct UAnimMontage* WPN_Fire_Level3; // 0x748(0x08)
	struct UAnimMontage* WPN_Fire_Level3_Empty_Mag; // 0x750(0x08)
	struct UAnimMontage* WPN_Mag_Feed; // 0x758(0x08)
	struct UAnimMontage* WPN_Mag_And_Barrel_Feed; // 0x760(0x08)
	struct USoundCue* ChargedMissileFireSound; // 0x768(0x08)
	char pad_770[0x20]; // 0x770(0x20)

	void Server_SetIsCharging(bool isCharging); // Function FSD.MicroMissileLauncher.Server_SetIsCharging // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1090bd0
	void Server_SetChargedMissile(bool isCharged); // Function FSD.MicroMissileLauncher.Server_SetChargedMissile // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x118eaf0
	bool IsNextShotBuckShot(); // Function FSD.MicroMissileLauncher.IsNextShotBuckShot // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x118e410
	int32_t GetChargeCurrentFireCount(); // Function FSD.MicroMissileLauncher.GetChargeCurrentFireCount // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x118cd20
	void ChargingDelegate__DelegateSignature(); // DelegateFunction FSD.MicroMissileLauncher.ChargingDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void All_SetChargedMissile(bool isCharged); // Function FSD.MicroMissileLauncher.All_SetChargedMissile // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x118c630
};

// Class FSD.MicroMissileLauncherAnimInstance
// Size: 0x2d0 (Inherited: 0x270)
struct UMicroMissileLauncherAnimInstance : UAnimInstance {
	char pad_270[0x50]; // 0x270(0x50)
	struct AMicroMissileLauncher* Weapon; // 0x2c0(0x08)
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void OnMontageEndedInternal(struct UAnimMontage* Montage, bool interrupted); // Function FSD.MicroMissileLauncherAnimInstance.OnMontageEndedInternal // (Final|Native|Protected) // @ game+0x118e970
};

// Class FSD.MilestoneAsset
// Size: 0xc0 (Inherited: 0x30)
struct UMilestoneAsset : UDataAsset {
	struct FMulticastInlineDelegate OnMilestoneClaimed; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMilestoneReached; // 0x40(0x10)
	struct FGuid SaveGameID; // 0x50(0x10)
	struct UTexture2D* LargeImage; // 0x60(0x08)
	struct FText FormattedTitle; // 0x68(0x18)
	int32_t FormattedValueOffset; // 0x80(0x04)
	bool CountValueAsTotal; // 0x84(0x01)
	char pad_85[0x3]; // 0x85(0x03)
	struct UMissionStat* TrackingStat; // 0x88(0x08)
	struct UPlayerCharacterID* TrackingCharacterID; // 0x90(0x08)
	struct TArray<struct FMilestoneTier> Tiers; // 0x98(0x10)
	struct UFSDGameInstance* GameInstance; // 0xa8(0x08)
	int32_t LastTierReached; // 0xb0(0x04)
	bool bPendingMilestoneReached; // 0xb4(0x01)
	char pad_B5[0xb]; // 0xb5(0x0b)

	struct TArray<struct UMilestoneAsset*> SortMilestonesByProgress(struct UObject* WorldContext, struct TArray<struct UMilestoneAsset*> Milestones); // Function FSD.MilestoneAsset.SortMilestonesByProgress // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x118eb80
	void OnMissionStatChanged(struct UMissionStat* Stat, float Value); // Function FSD.MilestoneAsset.OnMissionStatChanged // (Final|Native|Protected) // @ game+0x118e7d0
	bool IsCompleted(struct UObject* WorldContext); // Function FSD.MilestoneAsset.IsCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x118e2c0
	bool IsClaimable(struct UObject* WorldContext); // Function FSD.MilestoneAsset.IsClaimable // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x118e230
	struct FText GetTitleForTier(int32_t Tier); // Function FSD.MilestoneAsset.GetTitleForTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x118dec0
	struct FText GetTitle(struct UObject* WorldContext); // Function FSD.MilestoneAsset.GetTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x118dde0
	int32_t GetNextPerkPointsReward(struct UObject* WorldContext); // Function FSD.MilestoneAsset.GetNextPerkPointsReward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x118dbe0
	void GetCurrentProgress(struct UObject* WorldContext, int32_t Tier, float Progress, float CurrentCount, float TargetCount); // Function FSD.MilestoneAsset.GetCurrentProgress // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x118cfd0
	int32_t GetClaimedTier(struct UObject* WorldContext); // Function FSD.MilestoneAsset.GetClaimedTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x118cf40
	bool GetClaimedProgress(struct UObject* WorldContext, int32_t Tier, float Progress, float CurrentCount, float TargetCount); // Function FSD.MilestoneAsset.GetClaimedProgress // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x118cd50
	struct UTexture2D* GetCategoryIcon(); // Function FSD.MilestoneAsset.GetCategoryIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x118ccf0
	void ClearPendingMilestoneReached(); // Function FSD.MilestoneAsset.ClearPendingMilestoneReached // (Final|Native|Protected|BlueprintCallable) // @ game+0x118c770
	int32_t ClaimNextTier(struct UObject* WorldContext); // Function FSD.MilestoneAsset.ClaimNextTier // (Final|Native|Public|BlueprintCallable) // @ game+0x118c6c0
};

// Class FSD.MineralTradeData
// Size: 0x40 (Inherited: 0x30)
struct UMineralTradeData : UDataAsset {
	struct TArray<struct FText> MineralTradeTickerTexts; // 0x30(0x10)
};

// Class FSD.MinersManualData
// Size: 0xb0 (Inherited: 0x30)
struct UMinersManualData : UDataAsset {
	struct FSoftMinersManualDescription Description; // 0x30(0x80)

	void GetText(struct FText Headline, struct FText richText); // Function FSD.MinersManualData.GetText // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x118dc70
	struct UTexture2D* GetFrontImage(); // Function FSD.MinersManualData.GetFrontImage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x118d760
	struct UTexture2D* GetBackgroundImage(); // Function FSD.MinersManualData.GetBackgroundImage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x118ca40
};

// Class FSD.LoreScreenMasterWidget
// Size: 0x2a8 (Inherited: 0x230)
struct ULoreScreenMasterWidget : UUserWidget {
	struct FText PageName; // 0x230(0x18)
	struct TSoftObjectPtr<struct UTexture2D> SolidImage; // 0x248(0x28)
	struct TSoftObjectPtr<struct UTexture2D> TransparentImage; // 0x270(0x28)
	struct FLinearColor BackgroundColor; // 0x298(0x10)
};

// Class FSD.MinersManual
// Size: 0x1a0 (Inherited: 0x30)
struct UMinersManual : UDataAsset {
	struct TArray<SoftClassProperty> BasicsPages; // 0x30(0x10)
	struct TMap<int32_t, struct FText> BasicsPageHeaders; // 0x40(0x50)
	struct TArray<SoftClassProperty> CombatPages; // 0x90(0x10)
	struct TArray<SoftClassProperty> ExtraMissionPages; // 0xa0(0x10)
	struct TArray<SoftClassProperty> ResourcePages; // 0xb0(0x10)
	struct TArray<struct UEnemyMinersManualData*> Enemies; // 0xc0(0x10)
	struct TArray<struct TSoftObjectPtr<struct UBiome>> BiomeReferences; // 0xd0(0x10)
	struct TArray<struct TSoftObjectPtr<struct UMissionTemplate>> MissionReferences; // 0xe0(0x10)
	struct TArray<struct FDamageTypeDescription> DamageTypeInfo; // 0xf0(0x10)
	struct TMap<int32_t, struct FMissionTypeDescription> MissionDescriptions; // 0x100(0x50)
	struct TMap<int32_t, struct FBiomeFeatures> BiomeFeatureDescriptions; // 0x150(0x50)

	bool IsObjectInMinersManual(struct UObject* WorldContext, struct UObject* Object); // Function FSD.MinersManual.IsObjectInMinersManual // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x118e440
	bool IsMissionUnlocked(struct UObject* WorldContext, struct UMissionTemplate* mission); // Function FSD.MinersManual.IsMissionUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x118e350
	bool IsBiomeUnlocked(struct UObject* WorldContext, struct UBiome* Biome); // Function FSD.MinersManual.IsBiomeUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x118e170
	struct TArray<struct FText> GetUnlockedCreatureLore(struct UObject* WorldContext, struct UEnemyMinersManualData* enemy, float completePercentage); // Function FSD.MinersManual.GetUnlockedCreatureLore // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x118dfa0
	struct TArray<struct TSoftObjectPtr<struct UMissionTemplate>> GetMissions(); // Function FSD.MinersManual.GetMissions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x118da30
	void GetMissionInfo(int32_t MissionTypeIndex, struct FText InfoHeadline, struct FText InfoDescription, struct TArray<struct FMissionStepDescription> Steps); // Function FSD.MinersManual.GetMissionInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x118d790
	int32_t GetEnemyKillCount(struct UObject* WorldContext, struct FGuid EnemyID); // Function FSD.MinersManual.GetEnemyKillCount // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x118d680
	struct TArray<struct UEnemyMinersManualData*> GetEnemiesSorted(); // Function FSD.MinersManual.GetEnemiesSorted // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x118d600
	struct TArray<struct UEnemyMinersManualData*> GetEnemies(); // Function FSD.MinersManual.GetEnemies // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x118d540
	void GetDamageTypeDescriptions(struct TArray<enum class EDamageType> damageTypes, struct TArray<struct FDamageTypeDescription> Icon); // Function FSD.MinersManual.GetDamageTypeDescriptions // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x118d340
	void GetDamageTypeDescription(enum class EDamageType damageTypes, struct FDamageTypeDescription Icon); // Function FSD.MinersManual.GetDamageTypeDescription // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x118d1b0
	struct TArray<struct TSoftObjectPtr<struct UBiome>> GetBiomes(); // Function FSD.MinersManual.GetBiomes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x118cb40
	struct TArray<struct UMinersManualData*> GetBiomeFeatures(int32_t BiomeIndex); // Function FSD.MinersManual.GetBiomeFeatures // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x118ca70
	struct TArray<struct FDamageTypeDescription> GetAllDamageTypeDescriptions(); // Function FSD.MinersManual.GetAllDamageTypeDescriptions // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x118c790
};

// Class FSD.MiningPodCalldownLocation
// Size: 0x220 (Inherited: 0x220)
struct AMiningPodCalldownLocation : AActor {
};

// Class FSD.MiningPod
// Size: 0x368 (Inherited: 0x220)
struct AMiningPod : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	float DropHeight; // 0x228(0x04)
	struct FVector TargetLocation; // 0x22c(0x0c)
	char pad_238[0x8]; // 0x238(0x08)
	struct UAutoCarverComponent* AutoCarver; // 0x240(0x08)
	char pad_248[0x10]; // 0x248(0x10)
	struct UCurveFloat* DropCurve; // 0x258(0x08)
	struct UCurveFloat* DepartCurve; // 0x260(0x08)
	struct UCurveFloat* CarverDropCurve; // 0x268(0x08)
	float CarverRotationSpeed; // 0x270(0x04)
	struct FVector CarverScale; // 0x274(0x0c)
	struct FGameplayTagContainer GameplayTags; // 0x280(0x20)
	struct UBoxComponent* DwarfCheckerBox; // 0x2a0(0x08)
	float DepartureTime; // 0x2a8(0x04)
	char pad_2AC[0x4]; // 0x2ac(0x04)
	struct FText DepartueCountdownName; // 0x2b0(0x18)
	char pad_2C8[0x8]; // 0x2c8(0x08)
	struct FMiningPodDialogs Dialogs; // 0x2d0(0x50)
	enum class EMiningPodMission MissionType; // 0x320(0x01)
	bool HasLanded; // 0x321(0x01)
	char pad_322[0x6]; // 0x322(0x06)
	struct UOutlineComponent* PodOutline; // 0x328(0x08)
	struct FVector StartLocation; // 0x330(0x0c)
	enum class EMiningPodState State; // 0x33c(0x01)
	enum class EMiningPodRampState rampState; // 0x33d(0x01)
	char pad_33E[0x2]; // 0x33e(0x02)
	float TargetDropTime; // 0x340(0x04)
	float TargetDepartureTime; // 0x344(0x04)
	float TimeToDrop; // 0x348(0x04)
	char pad_34C[0x4]; // 0x34c(0x04)
	struct UObjectivesManager* ObjectivesManager; // 0x350(0x08)
	char pad_358[0x10]; // 0x358(0x10)

	struct AMiningPod* SpawnPodAtLocation(struct UObject* WorldContextObject, struct AMiningPod* podClass, struct FTransform Transform); // Function FSD.MiningPod.SpawnPodAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1194090
	void SetRampState(enum class EMiningPodRampState rampState); // Function FSD.MiningPod.SetRampState // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x1194010
	void SetMuleInstance(struct AMolly* Donkey); // Function FSD.MiningPod.SetMuleInstance // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void RecieveReturnTimerFifteenSecondWarning(); // Function FSD.MiningPod.RecieveReturnTimerFifteenSecondWarning // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x158ca90
	void RecieveReturnTimerExpired(); // Function FSD.MiningPod.RecieveReturnTimerExpired // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x158ca90
	void PrepForTakeOff(); // Function FSD.MiningPod.PrepForTakeOff // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1193ff0
	void PowerUp(); // Function FSD.MiningPod.PowerUp // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1193fb0
	void PoweredUp(); // Function FSD.MiningPod.PoweredUp // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1193fd0
	void OnRep_State(); // Function FSD.MiningPod.OnRep_State // (Final|Native|Protected) // @ game+0x1193f90
	void OnRep_RampState(); // Function FSD.MiningPod.OnRep_RampState // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnPrepForTakeOff(); // Function FSD.MiningPod.OnPrepForTakeOff // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnPoweringUp(); // Function FSD.MiningPod.OnPoweringUp // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnPoweredUp(); // Function FSD.MiningPod.OnPoweredUp // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnHostInsidePod(bool isInside); // Function FSD.MiningPod.OnHostInsidePod // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDropStarted(); // Function FSD.MiningPod.OnDropStarted // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDroppodImpact(); // Function FSD.MiningPod.OnDroppodImpact // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDrillingStarted(); // Function FSD.MiningPod.OnDrillingStarted // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDeparting(); // Function FSD.MiningPod.OnDeparting // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnCountdownFinished(); // Function FSD.MiningPod.OnCountdownFinished // (Final|Native|Protected) // @ game+0x1193e90
	void OnCountdownChanged(int32_t newTime); // Function FSD.MiningPod.OnCountdownChanged // (Final|Native|Protected) // @ game+0x1193e10
	void OnAllDwavesInsidePod(bool AllInside); // Function FSD.MiningPod.OnAllDwavesInsidePod // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	int32_t GetTimeToDeparture(); // Function FSD.MiningPod.GetTimeToDeparture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1193b80
	bool GetHasLanded(); // Function FSD.MiningPod.GetHasLanded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1193970
	struct FVector GetDonkeyReturnPickupLocation(); // Function FSD.MiningPod.GetDonkeyReturnPickupLocation // (Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void ForceTakeoff(); // Function FSD.MiningPod.ForceTakeoff // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void ExitSpacerig(); // Function FSD.MiningPod.ExitSpacerig // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11938e0
	void DropToTarget(struct UObject* WorldContextObject, struct AMiningPod* podClass, struct FTransform dropLocation, int32_t DropDelay); // Function FSD.MiningPod.DropToTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1193740
	struct AMiningPod* DropToMission(struct UObject* WorldContextObject, struct AMiningPod* podClass, struct FVector Location); // Function FSD.MiningPod.DropToMission // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1193630
	void DepositAllPlayersMaterials(); // Function FSD.MiningPod.DepositAllPlayersMaterials // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1193610
	void Depart(); // Function FSD.MiningPod.Depart // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11935f0
	void CorrectLocationsForSpawnedOnLocation(); // Function FSD.MiningPod.CorrectLocationsForSpawnedOnLocation // (Final|Native|Protected|BlueprintCallable) // @ game+0x11935d0
	struct FVector AdjustLandingLocationToGround(struct UObject* WorldContextObjet, struct FVector initialLocation); // Function FSD.MiningPod.AdjustLandingLocationToGround // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11934f0
};

// Class FSD.MiningPodAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UMiningPodAnimInstance : UAnimInstance {
	enum class EMiningPodRampState rampState; // 0x268(0x01)
	enum class EMiningPodState PodState; // 0x269(0x01)
};

// Class FSD.MissionChallenge
// Size: 0x30 (Inherited: 0x30)
struct UMissionChallenge : UDataAsset {
};

// Class FSD.MissionFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMissionFunctionLibrary : UBlueprintFunctionLibrary {

	int32_t GetGlobalMissionSeed(); // Function FSD.MissionFunctionLibrary.GetGlobalMissionSeed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1193940
};

// Class FSD.MissionGenerationManager
// Size: 0x88 (Inherited: 0x30)
struct UMissionGenerationManager : UGameInstanceSubsystem {
	struct TMap<int32_t, struct FGeneratedMissionGroup> AllMissionGroups; // 0x30(0x50)
	bool ResetSelectedMission; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)

	struct TArray<struct UGeneratedMission*> GetMissions(int32_t Seed); // Function FSD.MissionGenerationManager.GetMissions // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1193a50
	struct UGeneratedMission* GetMissionFromSeeds(int32_t GlobalSeed, int32_t MissionSeed); // Function FSD.MissionGenerationManager.GetMissionFromSeeds // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1193990
	struct TArray<struct UGeneratedMission*> GetAvailableMissions(); // Function FSD.MissionGenerationManager.GetAvailableMissions // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1193900
};

// Class FSD.MissionManager
// Size: 0xc0 (Inherited: 0xb0)
struct UMissionManager : UActorComponent {
	struct TArray<struct URunningMissionBP*> RunningBlueprints; // 0xb0(0x10)

	void OnMatchStarted(); // Function FSD.MissionManager.OnMatchStarted // (Final|Native|Protected) // @ game+0x1193f70
};

// Class FSD.MissionMutator
// Size: 0x90 (Inherited: 0x30)
struct UMissionMutator : UDataAsset {
	struct URunningMissionBP* MissionBP; // 0x30(0x08)
	struct TArray<SoftClassProperty> BannedObjectives; // 0x38(0x10)
	struct TArray<struct UMutator*> Mutators; // 0x48(0x10)
	struct FText Title; // 0x58(0x18)
	struct FText RichDescription; // 0x70(0x18)
	struct UTexture2D* Icon; // 0x88(0x08)
};

// Class FSD.Mutator
// Size: 0x30 (Inherited: 0x30)
struct UMutator : UDataAsset {
};

// Class FSD.VeinMutator
// Size: 0x40 (Inherited: 0x30)
struct UVeinMutator : UMutator {
	struct UVeinResourceData* VeinResource; // 0x30(0x08)
	float Modifier; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.CraftingMaterialMutator
// Size: 0x38 (Inherited: 0x30)
struct UCraftingMaterialMutator : UMutator {
	float Modifier; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class FSD.ResourceMutator
// Size: 0x48 (Inherited: 0x30)
struct UResourceMutator : UMutator {
	struct TArray<struct UResourceData*> Resources; // 0x30(0x10)
	float Modifier; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class FSD.SupplyPodMutator
// Size: 0x38 (Inherited: 0x30)
struct USupplyPodMutator : UMutator {
	float CostModifier; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class FSD.PlayerShieldsMutator
// Size: 0x38 (Inherited: 0x30)
struct UPlayerShieldsMutator : UMutator {
	float ShieldModifier; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class FSD.EnemyRarityMutator
// Size: 0x48 (Inherited: 0x30)
struct UEnemyRarityMutator : UMutator {
	float RarityMultiplier; // 0x30(0x04)
	float SpawnAmountMultiplier; // 0x34(0x04)
	float DifficultyMultiplier; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct UEnemyDescriptor* EnemyDescriptor; // 0x40(0x08)
};

// Class FSD.ForceStationaryEncounterMutator
// Size: 0x40 (Inherited: 0x30)
struct UForceStationaryEncounterMutator : UMutator {
	struct UEnemyGroupDescriptor* EnemyGroup; // 0x30(0x08)
	struct FIRandRange GroupSize; // 0x38(0x08)
};

// Class FSD.EncounterOverrideMutator
// Size: 0x38 (Inherited: 0x30)
struct UEncounterOverrideMutator : UMutator {
	float MobileEncounterScale; // 0x30(0x04)
	float StationaryEncounterScale; // 0x34(0x04)
};

// Class FSD.NoHeadlightMutator
// Size: 0x30 (Inherited: 0x30)
struct UNoHeadlightMutator : UMutator {
};

// Class FSD.DifficultyMutator
// Size: 0x68 (Inherited: 0x30)
struct UDifficultyMutator : UMutator {
	float ExtraLargeEnemyDamageResistanceMultiplier; // 0x30(0x04)
	float EnemyDamageResistanceMultiplier; // 0x34(0x04)
	float SmallEnemyDamageResistanceMultiplier; // 0x38(0x04)
	float EnemyDamageModifierMultiplier; // 0x3c(0x04)
	float EnemyCountModifierMultiplier; // 0x40(0x04)
	float WeakpointDamageMultiplier; // 0x44(0x04)
	float HazardBonus; // 0x48(0x04)
	float FriendlyFireModifierMultiplier; // 0x4c(0x04)
	float EnemyWaveIntervalModifier; // 0x50(0x04)
	float EnemyNormalWaveIntervalModifier; // 0x54(0x04)
	float EnemyNormalWaveDifficultyMultiplier; // 0x58(0x04)
	float ProjectileSpeedModifier; // 0x5c(0x04)
	float AttackCooldownModifier; // 0x60(0x04)
	float SpeedModifier; // 0x64(0x04)
};

// Class FSD.ResourceVeinMutator
// Size: 0x48 (Inherited: 0x30)
struct UResourceVeinMutator : UMutator {
	struct UResourceData* Resource; // 0x30(0x08)
	float VeinLengthMultiplier; // 0x38(0x04)
	float RangeMultiplier; // 0x3c(0x04)
	float NoiseRangeMultiplier; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class FSD.RewardMutator
// Size: 0x50 (Inherited: 0x30)
struct URewardMutator : UMutator {
	struct FText RewardText; // 0x30(0x18)
	float XPMultiplier; // 0x48(0x04)
	float CreditMultiplier; // 0x4c(0x04)
};

// Class FSD.CommunicationMutator
// Size: 0x38 (Inherited: 0x30)
struct UCommunicationMutator : UMutator {
	float PitchMultiplier; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class FSD.ExplosiveEnemiesMutator
// Size: 0x30 (Inherited: 0x30)
struct UExplosiveEnemiesMutator : UMutator {
};

// Class FSD.InfestedEnemiesMutator
// Size: 0x40 (Inherited: 0x30)
struct UInfestedEnemiesMutator : UMutator {
	struct TArray<struct UParticleSystem*> SpawnEffects; // 0x30(0x10)

	struct UParticleSystem* GetParticleSystem(struct AFSDPawn* enemy); // Function FSD.InfestedEnemiesMutator.GetParticleSystem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1193af0
};

// Class FSD.RunningMissionBP
// Size: 0x28 (Inherited: 0x28)
struct URunningMissionBP : UObject {

	void StartLogic(); // Function FSD.RunningMissionBP.StartLogic // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.StatusEffectMissionBP
// Size: 0x78 (Inherited: 0x28)
struct UStatusEffectMissionBP : URunningMissionBP {
	struct FGameplayTagQuery EnemyQuery; // 0x28(0x48)
	struct UStatusEffect* StatusEffect; // 0x70(0x08)

	void OnEnemySpawned(struct APawn* Pawn, struct UEnemyDescriptor* descriptor); // Function FSD.StatusEffectMissionBP.OnEnemySpawned // (Final|Native|Protected) // @ game+0x1193eb0
};

// Class FSD.NoOxygenMutator
// Size: 0x88 (Inherited: 0x30)
struct UNoOxygenMutator : UMutator {
	float OxygenReplenishmentRate; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	SoftClassProperty OxygenComponent; // 0x38(0x28)
	SoftClassProperty ReplenishOxygenEffect; // 0x60(0x28)
};

// Class FSD.PlayerDamageTakenMutator
// Size: 0x88 (Inherited: 0x30)
struct UPlayerDamageTakenMutator : UMutator {
	float DamageMultiplier; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TSet<struct UDamageClass*> SkipDamageClasses; // 0x38(0x50)
};

// Class FSD.CaveItemsMutator
// Size: 0x38 (Inherited: 0x30)
struct UCaveItemsMutator : UMutator {
	struct UDebrisItemComponent* Item; // 0x30(0x08)
};

// Class FSD.EliteEnemiesMutator
// Size: 0x40 (Inherited: 0x30)
struct UEliteEnemiesMutator : UMutator {
	float SpawnChanceModifier; // 0x30(0x04)
	int32_t MaxElites; // 0x34(0x04)
	float EliteCooldown; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.MissionMutatorManager
// Size: 0xb0 (Inherited: 0xb0)
struct UMissionMutatorManager : UActorComponent {
};

// Class FSD.MissionPlayerAndCharacterWidget
// Size: 0x270 (Inherited: 0x230)
struct UMissionPlayerAndCharacterWidget : UUserWidget {
	char pad_230[0x40]; // 0x230(0x40)

	void UpdateValues(int32_t PlayerRank, int32_t PlayerStars, int32_t CharacterLevel, float CharacterProgress); // Function FSD.MissionPlayerAndCharacterWidget.UpdateValues // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void StepCounter(float TimeScale, bool CounterFinished); // Function FSD.MissionPlayerAndCharacterWidget.StepCounter // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x11941f0
	void PingPlayerRank(); // Function FSD.MissionPlayerAndCharacterWidget.PingPlayerRank // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void PingCharacterLevel(int32_t Level, int32_t Stars); // Function FSD.MissionPlayerAndCharacterWidget.PingCharacterLevel // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void InitCounter(struct FPlayerProgress PlayerProgressStart, struct FCharacterProgress CharacterProgressStart, struct FPlayerProgress PlayerProgressFinish, struct FCharacterProgress CharacterProgressFinish); // Function FSD.MissionPlayerAndCharacterWidget.InitCounter // (Final|Native|Protected|BlueprintCallable) // @ game+0x1193ca0
};

// Class FSD.FSDMissionSettings
// Size: 0xf0 (Inherited: 0x38)
struct UFSDMissionSettings : UDeveloperSettings {
	struct FSoftObjectPath DefaultRoomGenerator; // 0x38(0x18)
	struct TMap<int32_t, struct FMissionHazardSetting> MissionComplexitySettings; // 0x50(0x50)
	struct TMap<int32_t, struct FMissionHazardSetting> MissionDurationSettings; // 0xa0(0x50)

	float GetTotalHazardBonus(struct UObject* WorldContextObject, struct UGeneratedMission* mission, struct UDifficultySetting* DifficultySetting); // Function FSD.FSDMissionSettings.GetTotalHazardBonus // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1193bb0
};

// Class FSD.MissionStatCategory
// Size: 0x50 (Inherited: 0x30)
struct UMissionStatCategory : UDataAsset {
	struct FText Title; // 0x30(0x18)
	struct UTexture2D* Icon; // 0x48(0x08)
};

// Class FSD.MissionStat
// Size: 0x80 (Inherited: 0x30)
struct UMissionStat : UDataAsset {
	struct FMulticastInlineDelegate OnCountChanged; // 0x30(0x10)
	struct FGuid SaveGameID; // 0x40(0x10)
	struct FText Title; // 0x50(0x18)
	struct UMissionStatCategory* Category; // 0x68(0x08)
	struct UFSDAchievement* StatAchievement; // 0x70(0x08)
	enum class EMissionStatType MissionStatType; // 0x78(0x01)
	bool DoNotShowInMissionStatView; // 0x79(0x01)
	bool ShowAllValuesCombined; // 0x7a(0x01)
	bool ShowHighestValue; // 0x7b(0x01)
	char pad_7C[0x4]; // 0x7c(0x04)

	void StatCountChanged__DelegateSignature(struct UMissionStat* MissionStat, float Value); // DelegateFunction FSD.MissionStat.StatCountChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	struct FText MissionStatToText(enum class EMissionStatType StatType, float Value); // Function FSD.MissionStat.MissionStatToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11990d0
	void Increment(struct UObject* WorldContext, struct UMissionStat* Stat, struct APlayerCharacter* CharacterClass, float Amount); // Function FSD.MissionStat.Increment // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1198f00
	float GetStatMinCount(struct UObject* WorldContext); // Function FSD.MissionStat.GetStatMinCount // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1198d60
	float GetStatMaxCount(struct UObject* WorldContext); // Function FSD.MissionStat.GetStatMaxCount // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1198cc0
	struct FText GetStatCountTotalAsText(struct UObject* WorldContext); // Function FSD.MissionStat.GetStatCountTotalAsText // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1198bd0
	float GetStatCountTotal(struct UObject* WorldContext); // Function FSD.MissionStat.GetStatCountTotal // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1198b30
	float GetStatCountPct(struct UObject* WorldContext, struct APlayerCharacter* CharacterClass); // Function FSD.MissionStat.GetStatCountPct // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1198a70
	struct FText GetStatCountAsText(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.MissionStat.GetStatCountAsText // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1198950
	float GetStatCount(struct UObject* WorldContext, struct UPlayerCharacterID* characterID); // Function FSD.MissionStat.GetStatCount // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1198890
	struct FString GetSourceTitle(); // Function FSD.MissionStat.GetSourceTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1198810
	struct FText GetLowestStatCountAsText(struct UObject* WorldContext); // Function FSD.MissionStat.GetLowestStatCountAsText // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11982b0
	struct UTexture2D* GetIcon(); // Function FSD.MissionStat.GetIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1198280
	struct FText GetHighestStatCountAsText(struct UObject* WorldContext); // Function FSD.MissionStat.GetHighestStatCountAsText // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1198190
	struct FText GetCategoryTitle(); // Function FSD.MissionStat.GetCategoryTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1197fb0
};

// Class FSD.MissionStatsCollector
// Size: 0xd8 (Inherited: 0xb0)
struct UMissionStatsCollector : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct APlayerCharacter* Character; // 0xb8(0x08)
	char pad_C0[0x18]; // 0xc0(0x18)

	void OnResourceIncremented(struct UCappedResource* Resource, float Amount); // Function FSD.MissionStatsCollector.OnResourceIncremented // (Final|Native|Protected) // @ game+0x11994a0
};

// Class FSD.GlobalMissionParameters
// Size: 0x40 (Inherited: 0x30)
struct UGlobalMissionParameters : UDataAsset {
	struct TArray<struct FResourceSpawner> DefaultResources; // 0x30(0x10)
};

// Class FSD.MissionTemplate
// Size: 0x218 (Inherited: 0x58)
struct UMissionTemplate : USavableDataAsset {
	struct TArray<struct FResourceSpawner> ResourceDistribution; // 0x58(0x10)
	struct UObjective* PrimaryObjective; // 0x68(0x08)
	struct TArray<struct UObjective*> SecondaryObjectives; // 0x70(0x10)
	struct TArray<struct UObjective*> DeepDiveObjectives; // 0x80(0x10)
	struct TArray<struct UMutator*> BaseMutators; // 0x90(0x10)
	SoftClassProperty pls; // 0xa0(0x28)
	struct TSoftObjectPtr<struct UWorld> Level; // 0xc8(0x28)
	SoftClassProperty GameMode; // 0xf0(0x28)
	struct TArray<struct UMissionComplexity*> LockedComplexities; // 0x118(0x10)
	struct TArray<struct UMissionDuration*> LockedDurations; // 0x128(0x10)
	struct FText MissionName; // 0x138(0x18)
	struct TSoftObjectPtr<struct UTexture2D> MissionImageLarge; // 0x150(0x28)
	struct TSoftObjectPtr<struct UTexture2D> MissionButtonImage; // 0x178(0x28)
	struct UTexture2D* MissionIcon; // 0x1a0(0x08)
	struct UTexture2D* MissionIconSmall; // 0x1a8(0x08)
	struct FLinearColor MissionColor; // 0x1b0(0x10)
	int32_t MissionTypeIndex; // 0x1c0(0x04)
	char pad_1C4[0x4]; // 0x1c4(0x04)
	struct FString MissionTypeAnalyticsIndex; // 0x1c8(0x10)
	struct TArray<struct UMissionDNA*> DNA; // 0x1d8(0x10)
	struct TArray<SoftClassProperty> DebrisComponents; // 0x1e8(0x10)
	bool MustBeUnlocked; // 0x1f8(0x01)
	char pad_1F9[0x3]; // 0x1f9(0x03)
	float RoomEncounerScale; // 0x1fc(0x04)
	float StationaryEnemyScale; // 0x200(0x04)
	char pad_204[0x4]; // 0x204(0x04)
	struct TArray<SoftClassProperty> Tutorials; // 0x208(0x10)

	void Receive_SetMissionParameters(struct UGeneratedMission* mission, struct FRandomStream Random); // Function FSD.MissionTemplate.Receive_SetMissionParameters // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x158ca90
	bool IsLocked(struct UFSDSaveGame* SaveGame); // Function FSD.MissionTemplate.IsLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1199040
	struct TArray<struct UMissionDuration*> GetValidDurations(); // Function FSD.MissionTemplate.GetValidDurations // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1198e80
	struct TArray<struct UMissionComplexity*> GetValidComplexities(); // Function FSD.MissionTemplate.GetValidComplexities // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1198e00
	SoftClassProperty GetSoftReferenceToPLS(); // Function FSD.MissionTemplate.GetSoftReferenceToPLS // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1198760
	struct FObjectiveMissionIcon GetPrimaryObjectiveIconFromAsset(struct UMissionTemplate* mission, bool getSmallVersion); // Function FSD.MissionTemplate.GetPrimaryObjectiveIconFromAsset // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1198510
	struct FObjectiveMissionIcon GetPrimaryObjectiveIcon(bool getSmallVersion); // Function FSD.MissionTemplate.GetPrimaryObjectiveIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1198460
	struct AProceduralSetup* GetPLS(); // Function FSD.MissionTemplate.GetPLS // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1198420
	int32_t GetMissionTypeIndex(); // Function FSD.MissionTemplate.GetMissionTypeIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1198400
	struct UTexture2D* GetMissionImageLarge(); // Function FSD.MissionTemplate.GetMissionImageLarge // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11983d0
	struct UTexture2D* GetMissionButtonImage(); // Function FSD.MissionTemplate.GetMissionButtonImage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11983a0
	struct UGeneratedMission* GenerateMission(struct UObject* WorldContextObject, struct UBiome* Biome, int32_t Seed, int32_t GlobalSeed, int32_t missionIndex, struct UMissionComplexity* limitComplexity, struct UMissionDuration* limitDuration, struct UMissionMutator* Mutator, struct TArray<struct UMissionWarning*> Warnings, struct UObjective* forceSecondary); // Function FSD.MissionTemplate.GenerateMission // (Final|Native|Public|BlueprintCallable) // @ game+0x1197c70
};

// Class FSD.MissionNameBank
// Size: 0x50 (Inherited: 0x30)
struct UMissionNameBank : UDataAsset {
	struct TArray<struct FText> FirstNames; // 0x30(0x10)
	struct TArray<struct FText> LastNames; // 0x40(0x10)

	struct TArray<struct FText> GetRandomGeneratedNames(struct FRandomStream Random, int32_t count); // Function FSD.MissionNameBank.GetRandomGeneratedNames // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11985f0
};

// Class FSD.MissionComplexity
// Size: 0x60 (Inherited: 0x30)
struct UMissionComplexity : UDataAsset {
	struct FText Title; // 0x30(0x18)
	float HazardBonus; // 0x48(0x04)
	int32_t NumberOfDots; // 0x4c(0x04)
	struct FGuid SaveGameID; // 0x50(0x10)
};

// Class FSD.MissionDuration
// Size: 0x60 (Inherited: 0x30)
struct UMissionDuration : UDataAsset {
	struct FText Title; // 0x30(0x18)
	float HazardBonus; // 0x48(0x04)
	int32_t NumberOfDots; // 0x4c(0x04)
	struct FGuid SaveGameID; // 0x50(0x10)
};

// Class FSD.MissionDNA
// Size: 0x50 (Inherited: 0x28)
struct UMissionDNA : UObject {
	float MissionScale; // 0x28(0x04)
	float Weight; // 0x2c(0x04)
	struct UMissionComplexity* Complexity; // 0x30(0x08)
	struct UMissionDuration* Duration; // 0x38(0x08)
	struct TArray<struct FGameplayTagQuery> RoomQueries; // 0x40(0x10)

	float GetDurationHazardBonus(); // Function FSD.MissionDNA.GetDurationHazardBonus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1198150
	float GetComplexityHazardBonus(); // Function FSD.MissionDNA.GetComplexityHazardBonus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1198110
};

// Class FSD.EscortMissionDNA
// Size: 0x58 (Inherited: 0x50)
struct UEscortMissionDNA : UMissionDNA {
	int32_t RefuelLocations; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class FSD.DNATester
// Size: 0x230 (Inherited: 0x220)
struct ADNATester : AActor {
	struct UMissionDNA* DNA; // 0x220(0x08)
	struct URoomGeneratorGroup* Group; // 0x228(0x08)
};

// Class FSD.MissionWarning
// Size: 0xd0 (Inherited: 0x30)
struct UMissionWarning : UDataAsset {
	SoftClassProperty MissionBP; // 0x30(0x28)
	struct TArray<SoftClassProperty> BannedObjectives; // 0x58(0x10)
	struct TArray<struct UMissionMutator*> BannedMutators; // 0x68(0x10)
	struct TArray<struct UMutator*> Mutators; // 0x78(0x10)
	struct FText Title; // 0x88(0x18)
	struct FText RichDescription; // 0xa0(0x18)
	struct UTexture2D* Icon; // 0xb8(0x08)
	float HazardBonus; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct UMissionStat* MissionCompletedStat; // 0xc8(0x08)
};

// Class FSD.StatusEffectEnemies
// Size: 0xf8 (Inherited: 0x28)
struct UStatusEffectEnemies : URunningMissionBP {
	struct TArray<struct UStatusEffect*> StatusEffects; // 0x28(0x10)
	struct FGameplayTagContainer AllowedFilter; // 0x38(0x20)
	struct FGameplayTagQuery AllowedQuery; // 0x58(0x48)
	float ChanceToApply; // 0xa0(0x04)
	bool OverrideReplacesDefault; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	struct TMap<struct UEnemyDescriptor*, struct UStatusEffect*> Overrides; // 0xa8(0x50)

	void OnEnemySpawned(struct APawn* enemy, struct UEnemyDescriptor* descriptor); // Function FSD.StatusEffectEnemies.OnEnemySpawned // (Final|Native|Protected) // @ game+0x11993c0
};

// Class FSD.HeroEnemies
// Size: 0xc0 (Inherited: 0x28)
struct UHeroEnemies : URunningMissionBP {
	struct FGameplayTagQuery AllowedQuery; // 0x28(0x48)
	struct TMap<struct UEnemyDescriptor*, struct FEliteEnemyEntry> Entries; // 0x70(0x50)

	void OnEnemySpawned(struct APawn* enemy, struct UEnemyDescriptor* descriptor); // Function FSD.HeroEnemies.OnEnemySpawned // (Final|Native|Protected) // @ game+0x1199300
};

// Class FSD.ExterminationReward
// Size: 0x58 (Inherited: 0x28)
struct UExterminationReward : URunningMissionBP {
	struct UResourceData* Resource; // 0x28(0x08)
	float AwardSize; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FGameplayTagContainer AllowedFilter; // 0x38(0x20)

	void OnEnemyKilled(struct FGameplayTagContainer GameplayTags, struct AActor* killedEnemy); // Function FSD.ExterminationReward.OnEnemyKilled // (Final|Native|Protected|HasOutParms) // @ game+0x11991f0
};

// Class FSD.MOD_MakeEliteEnemy
// Size: 0xb0 (Inherited: 0xb0)
struct UMOD_MakeEliteEnemy : UActorComponent {
};

// Class FSD.MULE
// Size: 0x398 (Inherited: 0x380)
struct AMULE : ADeepPathfinderCharacter {
	struct UHealthComponent* HealthComponent; // 0x380(0x08)
	struct USimpleObjectInfoComponent* ObjectInfo; // 0x388(0x08)
	bool IsDown; // 0x390(0x01)
	char pad_391[0x7]; // 0x391(0x07)

	void SetIsDown(bool IsDown); // Function FSD.MULE.SetIsDown // (Final|Native|Public|BlueprintCallable) // @ game+0x11995f0
	void SetControlledByDropShip(bool Control); // Function FSD.MULE.SetControlledByDropShip // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void OnRep_IsDown(); // Function FSD.MULE.OnRep_IsDown // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.Molly
// Size: 0x3d0 (Inherited: 0x398)
struct AMolly : AMULE {
	struct FMulticastInlineDelegate OnCalledByChanged; // 0x398(0x10)
	struct UResourceBank* ResourceBank; // 0x3a8(0x08)
	struct UOutlineComponent* OutlineComponent; // 0x3b0(0x08)
	struct FMulticastInlineDelegate OnReachedDropShip; // 0x3b8(0x10)
	struct TWeakObjectPtr<struct APlayerCharacter> CalledBy; // 0x3c8(0x08)

	void SetOpenForDeposit(bool Open); // Function FSD.Molly.SetOpenForDeposit // (Final|Native|Public|BlueprintCallable) // @ game+0x11996c0
	void SetGotoDropShip(struct FVector Location); // Function FSD.Molly.SetGotoDropShip // (BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void SetCalledBy(struct APlayerCharacter* InPlayer); // Function FSD.Molly.SetCalledBy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1199570
	void OnRep_CalledBy(); // Function FSD.Molly.OnRep_CalledBy // (Final|Native|Protected) // @ game+0x1199480
	struct UDialogDataAsset* GetCallingShout(); // Function FSD.Molly.GetCallingShout // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1197f80
	void EnableButton(); // Function FSD.Molly.EnableButton // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void CalledByDelegate__DelegateSignature(struct APlayerCharacter* InPlayer); // DelegateFunction FSD.Molly.CalledByDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
};

// Class FSD.MiniMule
// Size: 0x3a8 (Inherited: 0x398)
struct AMiniMule : AMULE {
	struct TArray<struct AGem*> LostLegs; // 0x398(0x10)

	void SetLegsVisibleOnScanner(); // Function FSD.MiniMule.SetLegsVisibleOnScanner // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x11996a0
	void OnLegsSetVisible(); // Function FSD.MiniMule.OnLegsSetVisible // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct TArray<struct AGem*> FindLegsInLevelSortedByDistance(); // Function FSD.MiniMule.FindLegsInLevelSortedByDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1197bf0
};

// Class FSD.MotionAudioController
// Size: 0x830 (Inherited: 0x7e0)
struct UMotionAudioController : UFSDAudioComponent {
	float MaxValue; // 0x7d8(0x04)
	float IncreseSpeed; // 0x7dc(0x04)
	float DecaySpeed; // 0x7e0(0x04)
	bool DebugText; // 0x7e4(0x01)
	bool Clamp; // 0x7e5(0x01)
	bool Interp; // 0x7e6(0x01)
	float AccelerationThreshold; // 0x7e8(0x04)
	char pad_7F3[0x5]; // 0x7f3(0x05)
	float SpeedThreshold; // 0x7f8(0x04)
	float FadeInTime; // 0x7fc(0x04)
	float FadeOutTime; // 0x800(0x04)
	bool AutoPlayOnSpeedThreshold; // 0x804(0x01)
	char pad_805[0x2b]; // 0x805(0x2b)
};

// Class FSD.MountedGun
// Size: 0x248 (Inherited: 0x220)
struct AMountedGun : AActor {
	char pad_220[0x10]; // 0x220(0x10)
	struct USkeletalMeshComponent* Mesh; // 0x230(0x08)
	struct UWeaponFireComponent* WeaponFire; // 0x238(0x08)
	struct UGunLogicComponent* GunLogic; // 0x240(0x08)

	void Server_Test(); // Function FSD.MountedGun.Server_Test // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x119dd80
};

// Class FSD.GunLogicComponent
// Size: 0xf0 (Inherited: 0xb0)
struct UGunLogicComponent : UActorComponent {
	struct UWeaponFireComponent* WeaponFire; // 0xb0(0x08)
	struct UMeshComponent* Mesh; // 0xb8(0x08)
	float RateOfFire; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct UParticleSystem* MuzzleParticles; // 0xc8(0x08)
	struct UParticleSystem* TracerParticles; // 0xd0(0x08)
	struct USoundCue* FireSound; // 0xd8(0x08)
	float MinTracerDistance; // 0xe0(0x04)
	float TracerSpeed; // 0xe4(0x04)
	char pad_E8[0x8]; // 0xe8(0x08)

	void SetMesh(struct UMeshComponent* Mesh); // Function FSD.GunLogicComponent.SetMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x119de60
	void OnWeaponFireEnded(); // Function FSD.GunLogicComponent.OnWeaponFireEnded // (Final|Native|Protected) // @ game+0x8dc380
	void OnWeaponFired(struct FVector Location); // Function FSD.GunLogicComponent.OnWeaponFired // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x119d9a0
};

// Class FSD.MouseCursorWidget
// Size: 0x258 (Inherited: 0x250)
struct UMouseCursorWidget : UFSDUserWidget {
	enum class EFSDInputSource TargetInput; // 0x250(0x01)
	bool bIsHovering; // 0x251(0x01)
	char pad_252[0x6]; // 0x252(0x06)

	void OnUnhover(); // Function FSD.MouseCursorWidget.OnUnhover // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnInputSourceChanged(enum class EFSDInputSource Source); // Function FSD.MouseCursorWidget.OnInputSourceChanged // (Final|Native|Protected) // @ game+0x119d820
	void OnHover(); // Function FSD.MouseCursorWidget.OnHover // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.MultiHitscanComponent
// Size: 0x2e8 (Inherited: 0x238)
struct UMultiHitscanComponent : UHitscanBaseComponent {
	struct FMulticastInlineDelegate OnHit; // 0x238(0x10)
	int32_t BulletsPerShot; // 0x248(0x04)
	float MuzzleRadius; // 0x24c(0x04)
	float GeneralImpactAudioVolume; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)
	struct TArray<struct AActor*> DamagedActorCache; // 0x258(0x10)
	struct FMultiHitScanHits Hits; // 0x268(0x30)
	struct TArray<struct AActor*> ActorsHit; // 0x298(0x10)
	char pad_2A8[0x40]; // 0x2a8(0x40)

	void Server_RegisterHit(struct FMultiHitScanHits hitResults); // Function FSD.MultiHitscanComponent.Server_RegisterHit // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x119dcb0
	void All_ShowHit(struct FMultiHitScanHits hitResults); // Function FSD.MultiHitscanComponent.All_ShowHit // (Net|Native|Event|NetMulticast|Protected) // @ game+0x119cf20
};

// Class FSD.MultiprojectileSpawner
// Size: 0x100 (Inherited: 0xb0)
struct UMultiprojectileSpawner : UActorComponent {
	struct TArray<struct FProjectileSpawnData> ProjectileData; // 0xb0(0x10)
	bool ProjectilesIgnoreEachOther; // 0xc0(0x01)
	char pad_C1[0x3f]; // 0xc1(0x3f)

	bool GetIsFiring(); // Function FSD.MultiprojectileSpawner.GetIsFiring // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x119d270
	void Fire(struct FVector Velocity, struct FVector Origin); // Function FSD.MultiprojectileSpawner.Fire // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x119d0b0
	struct UMultiprojectileSpawner* FindMultiProjectileSpawner(struct AActor* Actor, struct UDataAsset* RangedAttack); // Function FSD.MultiprojectileSpawner.FindMultiProjectileSpawner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x119cff0
};

// Class FSD.MusicLibrary
// Size: 0x48 (Inherited: 0x30)
struct UMusicLibrary : UDataAsset {
	struct TArray<struct USoundCue*> MusicCues; // 0x30(0x10)
	struct UMusicCategory* Category; // 0x40(0x08)
};

// Class FSD.MusicCategory
// Size: 0x38 (Inherited: 0x30)
struct UMusicCategory : UDataAsset {
	float FadeDuration; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class FSD.MusicReplicator
// Size: 0x238 (Inherited: 0x220)
struct AMusicReplicator : AActor {
	struct TArray<struct FActiveMusicItem> ActiveMusic; // 0x220(0x10)
	char pad_230[0x8]; // 0x230(0x08)

	void OnRep_ActiveMusic(); // Function FSD.MusicReplicator.OnRep_ActiveMusic // (Final|Native|Protected) // @ game+0x119d8a0
};

// Class FSD.MusicManager
// Size: 0x98 (Inherited: 0x30)
struct UMusicManager : UWorldSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
	struct TMap<struct FMusicHandle, struct FActiveAudioItem> ActiveAudio; // 0x40(0x50)
	char pad_90[0x8]; // 0x90(0x08)

	void StopHandle(struct FMusicHandle Handle); // Function FSD.MusicManager.StopHandle // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x119e2e0
	void StopCategory(struct UMusicCategory* Category); // Function FSD.MusicManager.StopCategory // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x119e260
	void SetIsPaused(bool IsPaused); // Function FSD.MusicManager.SetIsPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x119ddd0
	struct FMusicHandle PlayLibrary(struct UMusicLibrary* library); // Function FSD.MusicManager.PlayLibrary // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x119db00
	struct FMusicHandle Play(struct USoundBase* Music, struct UMusicCategory* Category); // Function FSD.MusicManager.Play // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x119da30
};

// Class FSD.NewsTextLists
// Size: 0x70 (Inherited: 0x30)
struct UNewsTextLists : UDataAsset {
	struct TArray<struct FText> Verb; // 0x30(0x10)
	struct TArray<struct FText> Person; // 0x40(0x10)
	struct TArray<struct FText> Creature; // 0x50(0x10)
	struct TArray<struct FText> Resource; // 0x60(0x10)
};

// Class FSD.NewsTextHeadlines
// Size: 0x40 (Inherited: 0x30)
struct UNewsTextHeadlines : UDataAsset {
	struct TArray<struct FText> MineralTradeTicker; // 0x30(0x10)
};

// Class FSD.NoiseCarveAttackEffect
// Size: 0x48 (Inherited: 0x28)
struct UNoiseCarveAttackEffect : UAttackEffect {
	float ExpensiveNoise; // 0x28(0x04)
	float CarveDiameterCM; // 0x2c(0x04)
	float CarveNoiseCM; // 0x30(0x04)
	float CarveBurnThicknessCM; // 0x34(0x04)
	float CarverOffset; // 0x38(0x04)
	struct FName Socket; // 0x3c(0x08)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class FSD.NoiseFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UNoiseFunctionLibrary : UBlueprintFunctionLibrary {

	void SphericalNoiseMovementComponent(struct UObject* WorldContextObject, struct USceneComponent* Component, struct FVector Center, float Radius, float Speed, float TimeOffset); // Function FSD.NoiseFunctionLibrary.SphericalNoiseMovementComponent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x119e0a0
	void SphericalNoiseMovementActor(struct UObject* WorldContextObject, struct AActor* Actor, struct FVector Center, float Radius, float Speed, float TimeOffset); // Function FSD.NoiseFunctionLibrary.SphericalNoiseMovementActor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x119dee0
	struct FVector NoiseSphere3D(struct UObject* WorldContextObject, float Time, float Radius); // Function FSD.NoiseFunctionLibrary.NoiseSphere3D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x119d6a0
	struct FVector2D NoiseSphere2D(struct UObject* WorldContextObject, float Time, float Radius); // Function FSD.NoiseFunctionLibrary.NoiseSphere2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x119d5a0
	float Noise3D(struct UObject* WorldContextObject, float X, float Y, float Z); // Function FSD.NoiseFunctionLibrary.Noise3D // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x119d3a0
	float Noise2D(struct UObject* WorldContextObject, float X, float Y); // Function FSD.NoiseFunctionLibrary.Noise2D // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x119d2b0
	float Noise(struct UObject* WorldContextObject, float X); // Function FSD.NoiseFunctionLibrary.Noise // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x119d4d0
};

// Class FSD.NoiseVisualizor
// Size: 0x260 (Inherited: 0x220)
struct ANoiseVisualizor : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct UFloodFillSettings* FloodFillSettings; // 0x228(0x08)
	float FreqMultiplier; // 0x230(0x04)
	float AmplitudeMultiplier; // 0x234(0x04)
	struct FVector NoiseSize; // 0x238(0x0c)
	float PointSize; // 0x244(0x04)
	float PostNoiseAmplitude; // 0x248(0x04)
	int32_t Octaves; // 0x24c(0x04)
	struct FVector Origin; // 0x250(0x0c)
	bool ShowNoise; // 0x25c(0x01)
	bool ShowTerrainNoise; // 0x25d(0x01)
	char pad_25E[0x2]; // 0x25e(0x02)
};

// Class FSD.NoisyPathfinderComponent
// Size: 0xb8 (Inherited: 0xb0)
struct UNoisyPathfinderComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
};

// Class FSD.NoisyPathfinderTest
// Size: 0x2b0 (Inherited: 0x220)
struct ANoisyPathfinderTest : AActor {
	struct FVector Start; // 0x220(0x0c)
	struct FVector End; // 0x22c(0x0c)
	struct FVector StartDirection; // 0x238(0x0c)
	struct FVector EndDirection; // 0x244(0x0c)
	float DirectionDistance; // 0x250(0x04)
	float DirectionPenalty; // 0x254(0x04)
	float ZPenaltyPower; // 0x258(0x04)
	float ZPenaltyScale; // 0x25c(0x04)
	float DistancePenaltyScale; // 0x260(0x04)
	float RandomPenaltyScale; // 0x264(0x04)
	struct TArray<struct FPathObstacle> obstacles; // 0x268(0x10)
	struct UTunnelSegmentSetting* TunnelSettings; // 0x278(0x08)
	struct UTunnelParameters* TunnelParameters; // 0x280(0x08)
	int32_t StepSize; // 0x288(0x04)
	bool Realtime; // 0x28c(0x01)
	bool CarvePath; // 0x28d(0x01)
	bool CanDiagonal; // 0x28e(0x01)
	char pad_28F[0x1]; // 0x28f(0x01)
	struct UFloodFillSettings* FloodFillSettings; // 0x290(0x08)
	struct ADeepCSGWorld* CSGWorld; // 0x298(0x08)
	char pad_2A0[0x10]; // 0x2a0(0x10)
};

// Class FSD.NoMovementStateComponent
// Size: 0x108 (Inherited: 0x100)
struct UNoMovementStateComponent : UCharacterStateComponent {
	bool DisableHeadLightOnEnter; // 0x100(0x01)
	bool EnableHeadLightOnExit; // 0x101(0x01)
	char pad_102[0x6]; // 0x102(0x06)
};

// Class FSD.AttachedStateComponent
// Size: 0x130 (Inherited: 0x100)
struct UAttachedStateComponent : UCharacterStateComponent {
	bool DisableHeadLightOnEnter; // 0x100(0x01)
	bool EnableHeadLightOnExit; // 0x101(0x01)
	char pad_102[0x2]; // 0x102(0x02)
	float MaxPitch; // 0x104(0x04)
	char pad_108[0x28]; // 0x108(0x28)
};

// Class FSD.OxygenComponent
// Size: 0x110 (Inherited: 0xb0)
struct UOxygenComponent : UActorComponent {
	struct FMulticastInlineDelegate OnOxygenChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnOxygenReplenishingEvent; // 0xc0(0x10)
	float OxygenGivenOnRevive; // 0xd0(0x04)
	float CurrentOxygen; // 0xd4(0x04)
	float OxygenReplinishmentRate; // 0xd8(0x04)
	int32_t NetworkedOxygen; // 0xdc(0x04)
	char pad_E0[0x4]; // 0xe0(0x04)
	bool IsReplenishingOxygen; // 0xe4(0x01)
	char pad_E5[0x3]; // 0xe5(0x03)
	float OxygenDepletionPersecond; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TArray<struct FOxygenCallback> Callbacks; // 0xf0(0x10)
	char pad_100[0x8]; // 0x100(0x08)
	struct UStatusEffect* NoOxygenStatusEffect; // 0x108(0x08)

	void RegisterOxygenEvent(struct FDelegate OxygenCallback, float oxygenLevel, bool triggerOnOxygenLoss); // Function FSD.OxygenComponent.RegisterOxygenEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x119db90
	void OnRevived(); // Function FSD.OxygenComponent.OnRevived // (Final|Native|Protected) // @ game+0x119d960
	void OnRep_NetworkedOxygen(int32_t OldValue); // Function FSD.OxygenComponent.OnRep_NetworkedOxygen // (Final|Native|Protected) // @ game+0x119d8e0
	void OnRep_IsReplenishingOxygen(); // Function FSD.OxygenComponent.OnRep_IsReplenishingOxygen // (Final|Native|Protected) // @ game+0x119d8c0
	void OnDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.OxygenComponent.OnDeath // (Final|Native|Protected) // @ game+0x119d7a0
};

// Class FSD.OxygenSourceComponent
// Size: 0xe8 (Inherited: 0xb0)
struct UOxygenSourceComponent : UActorComponent {
	float SourceRadius; // 0xb0(0x04)
	float CenterOffset; // 0xb4(0x04)
	struct FMulticastInlineDelegate OnOxygenActivationChanged; // 0xb8(0x10)
	struct UNoOxygenMutator* Mutator; // 0xc8(0x08)
	char pad_D0[0x18]; // 0xd0(0x18)

	void OnTimerTick(); // Function FSD.OxygenSourceComponent.OnTimerTick // (Final|Native|Protected) // @ game+0x119d980
	void OnSourceActivated(); // Function FSD.OxygenSourceComponent.OnSourceActivated // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.PlayerCharacterID
// Size: 0x90 (Inherited: 0x30)
struct UPlayerCharacterID : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	struct FGuid SaveGameID; // 0x38(0x10)
	struct FName AssetName; // 0x48(0x08)
	SoftClassProperty Character; // 0x50(0x28)
	struct FString AnalyticsID; // 0x78(0x10)
	struct UPlayerCharacterData* CharacterData; // 0x88(0x08)

	struct APlayerCharacter* GetCharacterClass(); // Function FSD.PlayerCharacterID.GetCharacterClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x119d230
	struct APlayerCharacter* GetCharacter(); // Function FSD.PlayerCharacterID.GetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x119d200
};

// Class FSD.ItemID
// Size: 0x90 (Inherited: 0x58)
struct UItemID : USavableDataAsset {
	SoftClassProperty Item; // 0x58(0x28)
	struct UPlayerCharacterID* ItemOwner; // 0x80(0x08)
	enum class EItemCategory ItemCategory; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)

	struct AItem* GetItemClass(); // Function FSD.ItemID.GetItemClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x119d1c0
	enum class EItemCategory GetItemCategory(); // Function FSD.ItemID.GetItemCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x119d290
	struct AItem* GetItem(); // Function FSD.ItemID.GetItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x119d190
	struct AActor* GetActorClass(); // Function FSD.ItemID.GetActorClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x119d1c0
	struct AActor* GetActor(); // Function FSD.ItemID.GetActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x119d190
};

// Class FSD.EnemyID
// Size: 0x58 (Inherited: 0x58)
struct UEnemyID : USavableDataAsset {
};

// Class FSD.CategoryID
// Size: 0x48 (Inherited: 0x30)
struct UCategoryID : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	struct FGuid SaveGameID; // 0x38(0x10)
};

// Class FSD.ActorContextWidget
// Size: 0x240 (Inherited: 0x230)
struct UActorContextWidget : UUserWidget {
	struct AActor* ContextActor; // 0x230(0x08)
	struct UPrimitiveComponent* ContextPrimitive; // 0x238(0x08)

	void Update(struct UPrimitiveComponent* InContextPrimitive); // Function FSD.ActorContextWidget.Update // (Final|Native|Public|BlueprintCallable) // @ game+0x11a2d00
	void Show(struct UPrimitiveComponent* InContextPrimitive); // Function FSD.ActorContextWidget.Show // (Final|Native|Public|BlueprintCallable) // @ game+0x11a2b50
	void ReceiveUpdate(struct UPrimitiveComponent* InContextPrimitive); // Function FSD.ActorContextWidget.ReceiveUpdate // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveShow(struct UPrimitiveComponent* InContextPrimitive); // Function FSD.ActorContextWidget.ReceiveShow // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveContextActorChanged(struct AActor* InContextActor); // Function FSD.ActorContextWidget.ReceiveContextActorChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ObjectiveWidget
// Size: 0x290 (Inherited: 0x230)
struct UObjectiveWidget : UUserWidget {
	struct FMulticastInlineDelegate OnObjectiveWidgetUpdated; // 0x230(0x10)
	struct UObjective* MissionObjective; // 0x240(0x08)
	bool bIsPrimaryObjective; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)
	struct FText ObjectiveText; // 0x250(0x18)
	struct FText ObjectiveCounterText; // 0x268(0x18)
	struct UTexture2D* ObjectiveCounterIcon; // 0x280(0x08)
	bool bObjectiveCompleted; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)

	void SetText(struct FText InText, struct FText InCounterText, struct UTexture2D* InCounterIcon, bool InObjectiveCompleted); // Function FSD.ObjectiveWidget.SetText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11a2950
	void SetSimpleText(struct FText InText, bool InObjectiveCompleted); // Function FSD.ObjectiveWidget.SetSimpleText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11a2830
	void SetObjective(struct UObjective* InObjective, bool InIsPrimaryObjective); // Function FSD.ObjectiveWidget.SetObjective // (Final|Native|Public|BlueprintCallable) // @ game+0x11a26e0
	void ReceiveObjectiveUpdated(); // Function FSD.ObjectiveWidget.ReceiveObjectiveUpdated // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveObjectiveInitialized(); // Function FSD.ObjectiveWidget.ReceiveObjectiveInitialized // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnObjectiveUpdated(struct UObjective* InObjective); // Function FSD.ObjectiveWidget.OnObjectiveUpdated // (Final|Native|Protected) // @ game+0x11a2120
	void ObjectiveWidgetDelegate__DelegateSignature(struct UObjectiveWidget* InObjectiveWidget); // DelegateFunction FSD.ObjectiveWidget.ObjectiveWidgetDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
};

// Class FSD.OptionalObjectiveWidget
// Size: 0x240 (Inherited: 0x230)
struct UOptionalObjectiveWidget : UUserWidget {
	struct FMulticastInlineDelegate OnWidgetUpdated; // 0x230(0x10)

	void SignalWidgetUpdated(); // Function FSD.OptionalObjectiveWidget.SignalWidgetUpdated // (Final|Native|Public|BlueprintCallable) // @ game+0x11a2bd0
	void SetObjective(struct UObjective* obj); // Function FSD.OptionalObjectiveWidget.SetObjective // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void OptionalObjectiveWidgetDelegate__DelegateSignature(struct UOptionalObjectiveWidget* InOptionalObjectiveWidget); // DelegateFunction FSD.OptionalObjectiveWidget.OptionalObjectiveWidgetDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
};

// Class FSD.ObjectivesManager
// Size: 0x100 (Inherited: 0xb0)
struct UObjectivesManager : UActorComponent {
	struct FMulticastInlineDelegate OnObjectivesCompleted; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnObjectivesChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnAllRequiredReturnObjectivesCompleted; // 0xd0(0x10)
	struct UObjective* Objective; // 0xe0(0x08)
	struct TArray<struct UObjective*> SecondaryObjectives; // 0xe8(0x10)
	bool ObjectivesInitialized; // 0xf8(0x01)
	bool ObjectivesStarted; // 0xf9(0x01)
	bool bCheatObjectivesCompleted; // 0xfa(0x01)
	char pad_FB[0x5]; // 0xfb(0x05)

	void OnObjectiveChanged(struct UObjective* obj); // Function FSD.ObjectivesManager.OnObjectiveChanged // (Final|Native|Protected) // @ game+0x11a20a0
	struct UObjective* GetSecondaryObjective(); // Function FSD.ObjectivesManager.GetSecondaryObjective // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a1c30
	struct UObjective* GetPrimaryObjective(); // Function FSD.ObjectivesManager.GetPrimaryObjective // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a2d50
	void ExitPodDescending(); // Function FSD.ObjectivesManager.ExitPodDescending // (Final|Native|Public|BlueprintCallable) // @ game+0x11a12d0
	void ExitPodArrived(); // Function FSD.ObjectivesManager.ExitPodArrived // (Final|Native|Public|BlueprintCallable) // @ game+0x11a12b0
	void DropPodExited(); // Function FSD.ObjectivesManager.DropPodExited // (Final|Native|Public|BlueprintCallable) // @ game+0x11a1270
};

// Class FSD.ObjectTemperatureComponent
// Size: 0x110 (Inherited: 0xc8)
struct UObjectTemperatureComponent : UTemperatureComponent {
	struct FMulticastInlineDelegate OnStartBurning; // 0xc8(0x10)
	float TemperatureChangeScale; // 0xd8(0x04)
	float BurnTemperature; // 0xdc(0x04)
	float DouseFireTemperature; // 0xe0(0x04)
	int32_t CoolingRate; // 0xe4(0x04)
	bool IsHeatsourceWhenOnFire; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float OnFireHeatRange; // 0xec(0x04)
	char pad_F0[0x20]; // 0xf0(0x20)

	void TimerCallback(); // Function FSD.ObjectTemperatureComponent.TimerCallback // (Final|Native|Protected) // @ game+0x11a2bf0
	void OnDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.ObjectTemperatureComponent.OnDeath // (Final|Native|Protected) // @ game+0x11a1e80
};

// Class FSD.ObstructionChecker
// Size: 0x240 (Inherited: 0x1f0)
struct UObstructionChecker : USceneComponent {
	struct FMulticastInlineDelegate OnObstructionChangedEvent; // 0x1f0(0x10)
	float DistanceToCheck; // 0x200(0x04)
	char pad_204[0x4]; // 0x204(0x04)
	float CheckInterval; // 0x208(0x04)
	char pad_20C[0x4]; // 0x20c(0x04)
	struct TArray<struct FVector> RayOffsets; // 0x210(0x10)
	char pad_220[0x20]; // 0x220(0x20)

	void Timer_Tick(); // Function FSD.ObstructionChecker.Timer_Tick // (Final|Native|Protected) // @ game+0x11a2c30
	void Timer_Result(); // Function FSD.ObstructionChecker.Timer_Result // (Final|Native|Protected) // @ game+0x11a2c10
	void CheckForObstructions(); // Function FSD.ObstructionChecker.CheckForObstructions // (Final|Native|Public|BlueprintCallable) // @ game+0x11a1230
};

// Class FSD.OldZiplineSalvage
// Size: 0x238 (Inherited: 0x220)
struct AOldZiplineSalvage : AActor {
	struct AZipLineProjectile* ZiplineProjectileClass; // 0x220(0x08)
	struct FVector RelativeDestinationLocation; // 0x228(0x0c)
	char pad_234[0x4]; // 0x234(0x04)

	void OnMatchStarted(); // Function FSD.OldZiplineSalvage.OnMatchStarted // (Final|Native|Protected) // @ game+0x11a2080
};

// Class FSD.OptionalUIWidget
// Size: 0x240 (Inherited: 0x230)
struct UOptionalUIWidget : UUserWidget {
	struct UOptionalUICategory* Category; // 0x230(0x08)
	enum class ESlateVisibility VisibleFlag; // 0x238(0x01)
	enum class ESlateVisibility HiddenFlag; // 0x239(0x01)
	char pad_23A[0x6]; // 0x23a(0x06)

	void OnVisibilityChanged(struct UOptionalUICategory* UICategory, bool IsVisible); // Function FSD.OptionalUIWidget.OnVisibilityChanged // (Final|Native|Protected) // @ game+0x11a22d0
};

// Class FSD.OutlineComponent
// Size: 0xf8 (Inherited: 0xb0)
struct UOutlineComponent : UActorComponent {
	struct FMulticastInlineDelegate OnOutlineChanged; // 0xb0(0x10)
	enum class EOutline DefaultOutline; // 0xc0(0x01)
	bool ActiveOnHoldTAB; // 0xc1(0x01)
	char pad_C2[0x2]; // 0xc2(0x02)
	float CustomLaserPointDuration; // 0xc4(0x04)
	int32_t LockCounter; // 0xc8(0x04)
	enum class EOutline CurrentOutline; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
	struct TArray<struct UPrimitiveComponent*> OutlinedComponents; // 0xd0(0x10)
	struct TArray<struct UPrimitiveComponent*> ExcludedComponents; // 0xe0(0x10)
	struct TWeakObjectPtr<struct APlayerCharacter> Character; // 0xf0(0x08)

	void UnlockOutline(); // Function FSD.OutlineComponent.UnlockOutline // (Final|Native|Public|BlueprintCallable) // @ game+0x11a2ce0
	void ToggleDefaultOutline(bool Visible); // Function FSD.OutlineComponent.ToggleDefaultOutline // (Final|Native|Public|BlueprintCallable) // @ game+0x11a2c50
	void SetOutline(enum class EOutline outline); // Function FSD.OutlineComponent.SetOutline // (Final|Native|Public|BlueprintCallable) // @ game+0x11a27b0
	void RemoveFromOutline(struct UPrimitiveComponent* Component); // Function FSD.OutlineComponent.RemoveFromOutline // (Final|Native|Public|BlueprintCallable) // @ game+0x11a24a0
	void OutlineChanged__DelegateSignature(enum class EOutline InOutline); // DelegateFunction FSD.OutlineComponent.OutlineChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnToggleOutline(bool Visible); // Function FSD.OutlineComponent.OnToggleOutline // (Final|Native|Protected) // @ game+0x11a2240
	void OnOwnerDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.OutlineComponent.OnOwnerDeath // (Final|Native|Protected) // @ game+0x11a21a0
	void OnLocalPlayerSet(struct APlayerCharacter* PlayerCharacter); // Function FSD.OutlineComponent.OnLocalPlayerSet // (Final|Native|Protected) // @ game+0x11a2000
	void OnItemUnequipped(struct AItem* Item); // Function FSD.OutlineComponent.OnItemUnequipped // (Final|Native|Protected) // @ game+0x11a1f80
	void OnItemEquipped(struct AItem* Item); // Function FSD.OutlineComponent.OnItemEquipped // (Final|Native|Protected) // @ game+0x11a1f00
	void LockOutline(); // Function FSD.OutlineComponent.LockOutline // (Final|Native|Public|BlueprintCallable) // @ game+0x11a1e60
	void EnableActivateOnHoldTab(); // Function FSD.OutlineComponent.EnableActivateOnHoldTab // (Final|Native|Public|BlueprintCallable) // @ game+0x11a1290
	void AddToOutline(struct UPrimitiveComponent* Component); // Function FSD.OutlineComponent.AddToOutline // (Final|Native|Public|BlueprintCallable) // @ game+0x11a11b0
	void AddActorToOutline(struct AActor* Actor); // Function FSD.OutlineComponent.AddActorToOutline // (Final|Native|Public|BlueprintCallable) // @ game+0x11a0fe0
};

// Class FSD.OverclockBank
// Size: 0x90 (Inherited: 0x30)
struct UOverclockBank : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	struct TMap<struct UOverclockUpgrade*, struct USchematic*> Overclocks; // 0x38(0x50)
	struct UItemID* OwningItem; // 0x88(0x08)
};

// Class FSD.OverheatingAggregator
// Size: 0x100 (Inherited: 0xc8)
struct UOverheatingAggregator : UItemAggregator {
	struct FMulticastInlineDelegate OnOverheatingProgressChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnOverheatedChanged; // 0xd8(0x10)
	char pad_E8[0x4]; // 0xe8(0x04)
	float HeatLossPerSecond; // 0xec(0x04)
	float OverheatedDuration; // 0xf0(0x04)
	bool bIsOverheated; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	float Temperature; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)

	void Server_SetTemperature(float NewTemperature); // Function FSD.OverheatingAggregator.Server_SetTemperature // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0x11ab600
	void Server_SetIsOverheated(bool NewOverheated); // Function FSD.OverheatingAggregator.Server_SetIsOverheated // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0x11ab540
	void OverheatingProgressChanged__DelegateSignature(float Progress); // DelegateFunction FSD.OverheatingAggregator.OverheatingProgressChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OverheatedChanged__DelegateSignature(bool Overheated); // DelegateFunction FSD.OverheatingAggregator.OverheatedChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnRep_Temperature(); // Function FSD.OverheatingAggregator.OnRep_Temperature // (Final|Native|Protected) // @ game+0x11ab2c0
	void OnRep_IsOverheated(); // Function FSD.OverheatingAggregator.OnRep_IsOverheated // (Final|Native|Protected) // @ game+0x11ab280
	float GetTemperature(); // Function FSD.OverheatingAggregator.GetTemperature // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b9310
	float GetOverheatingProgress(); // Function FSD.OverheatingAggregator.GetOverheatingProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11aac20
	bool GetIsOverheated(); // Function FSD.OverheatingAggregator.GetIsOverheated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11096f0
};

// Class FSD.ParalyzedStateComponent
// Size: 0x140 (Inherited: 0x100)
struct UParalyzedStateComponent : UCharacterStateComponent {
	char pad_100[0x8]; // 0x100(0x08)
	SoftClassProperty CaveLeechClass; // 0x108(0x28)
	char pad_130[0x4]; // 0x130(0x04)
	float CameraArmHeightOffset; // 0x134(0x04)
	float CameraArmSpeed; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)
};

// Class FSD.ParasiteEnemy
// Size: 0x398 (Inherited: 0x340)
struct AParasiteEnemy : AEnemyPawn {
	struct USceneComponent* Root; // 0x340(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x348(0x08)
	struct UStaticMeshComponent* Tentacles1; // 0x350(0x08)
	struct UStaticMeshComponent* Tentacles2; // 0x358(0x08)
	struct UOutlineComponent* outline; // 0x360(0x08)
	char pad_368[0x18]; // 0x368(0x18)
	struct UParticleSystem* deathParticles; // 0x380(0x08)
	struct USoundBase* deathSound; // 0x388(0x08)
	char pad_390[0x8]; // 0x390(0x08)

	void OnSelfDeath(struct UHealthComponentBase* aHealthComponent); // Function FSD.ParasiteEnemy.OnSelfDeath // (Final|Native|Protected) // @ game+0x11ab2e0
};

// Class FSD.PassedOutStateComponent
// Size: 0x110 (Inherited: 0x100)
struct UPassedOutStateComponent : UCharacterStateComponent {
	struct UDialogDataAsset* ReviveShout; // 0x100(0x08)
	bool bAllPlayersPassedOut; // 0x108(0x01)
	char pad_109[0x7]; // 0x109(0x07)

	void ReceiveTeamPassedOut(); // Function FSD.PassedOutStateComponent.ReceiveTeamPassedOut // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.PathfinderCollisionComponent
// Size: 0x490 (Inherited: 0x480)
struct UPathfinderCollisionComponent : UStaticMeshComponent {
	bool ActivatePFCollisionAtInit; // 0x480(0x01)
	enum class PFCollisionType PFColiType; // 0x481(0x01)
	char pad_482[0xe]; // 0x482(0x0e)

	void DisablePFCollision(); // Function FSD.PathfinderCollisionComponent.DisablePFCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x11aa760
	void ActivatePFCollision(); // Function FSD.PathfinderCollisionComponent.ActivatePFCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x11aa680
};

// Class FSD.PathfinderSplineSegmentCollisionComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UPathfinderSplineSegmentCollisionComponent : UActorComponent {
	float Radius; // 0xb0(0x04)
	enum class PFCollisionType CollisionType; // 0xb4(0x01)
	char pad_B5[0xb]; // 0xb5(0x0b)

	void UpdateFromSpline(struct USplineComponent* SplineComponent, int32_t StartIndex); // Function FSD.PathfinderSplineSegmentCollisionComponent.UpdateFromSpline // (Final|Native|Public|BlueprintCallable) // @ game+0x11abbd0
	void Update(struct FVector SplineStart, struct FVector SplineStartTangent, struct FVector SplineEnd, struct FVector SplineEndTangent); // Function FSD.PathfinderSplineSegmentCollisionComponent.Update // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11aba40
	void Clear(); // Function FSD.PathfinderSplineSegmentCollisionComponent.Clear // (Final|Native|Public|BlueprintCallable) // @ game+0x11aa720
};

// Class FSD.PathfinderDebugProbe
// Size: 0x228 (Inherited: 0x220)
struct APathfinderDebugProbe : AActor {
	struct AActor* Dest; // 0x220(0x08)
};

// Class FSD.RaycastDebugProbe
// Size: 0x228 (Inherited: 0x220)
struct ARaycastDebugProbe : AActor {
	struct UTerrainType* TerrainType; // 0x220(0x08)
};

// Class FSD.FindPointKeepingDistanceProbe
// Size: 0x238 (Inherited: 0x220)
struct AFindPointKeepingDistanceProbe : AActor {
	float MinDistance; // 0x220(0x04)
	float MaxDistance; // 0x224(0x04)
	struct AActor* Target; // 0x228(0x08)
	float IdealTargetDist; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
};

// Class FSD.PathfinderFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPathfinderFunctionLibrary : UBlueprintFunctionLibrary {

	struct FVector SnapToGrid(struct UObject* WorldContextObject, struct FVector Origin, enum class DeepPathFinderType pathType, enum class DeepPathFinderSize pathSize, float maxSnapDistance); // Function FSD.PathfinderFunctionLibrary.SnapToGrid // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11ab870
	bool IsPathfinderReady(struct UObject* WorldContextObject); // Function FSD.PathfinderFunctionLibrary.IsPathfinderReady // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11aad90
	struct FVector FindRandomPositionOnNavmeshAtDistance(struct UObject* WorldContextObject, struct FVector Origin, float atDistance); // Function FSD.PathfinderFunctionLibrary.FindRandomPositionOnNavmeshAtDistance // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11aaa70
	struct FVector FindRandomNearbyPositionOnNavmesh(struct UObject* WorldContextObject, struct FVector Origin, float Radius); // Function FSD.PathfinderFunctionLibrary.FindRandomNearbyPositionOnNavmesh // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11aa950
	struct FVector FindPointAlongPathTo(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Destination, float atDistance); // Function FSD.PathfinderFunctionLibrary.FindPointAlongPathTo // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11aa7c0
};

// Class FSD.PathfinderVehicle
// Size: 0x2b0 (Inherited: 0x280)
struct APathfinderVehicle : APawn {
	char pad_280[0x10]; // 0x280(0x10)
	struct UDeepPathfinderMovement* PathfinderMovement; // 0x290(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x298(0x08)
	struct UHealthComponent* HealthComponent; // 0x2a0(0x08)
	float Speed; // 0x2a8(0x04)
	char pad_2AC[0x4]; // 0x2ac(0x04)
};

// Class FSD.PatrolBot
// Size: 0x608 (Inherited: 0x3a0)
struct APatrolBot : AEnemyDeepPathfinderCharacter {
	char pad_3A0[0x8]; // 0x3a0(0x08)
	struct UHackingUsableComponent* HackingUsable; // 0x3a8(0x08)
	struct UPawnSensingComponent* PawnSensing; // 0x3b0(0x08)
	struct USphereComponent* CollisionSphere; // 0x3b8(0x08)
	struct USphereComponent* NearTargetSphere; // 0x3c0(0x08)
	struct UParticleSystemComponent* LaserBeam; // 0x3c8(0x08)
	struct UParticleSystemComponent* TearingGroundParticles; // 0x3d0(0x08)
	struct UEnemyComponent* EnemyComponent; // 0x3d8(0x08)
	struct UDamageComponent* Damage; // 0x3e0(0x08)
	struct UDamageComponent* BumpDamage; // 0x3e8(0x08)
	struct UPawnAlertComponent* Alert; // 0x3f0(0x08)
	struct UPlayerImpactCooldownComponent* ImpactCooldown; // 0x3f8(0x08)
	struct UAvoidCeilingComponent* CeilingAvoidance; // 0x400(0x08)
	struct UAudioComponent* RollingAudio; // 0x408(0x08)
	struct UAudioComponent* FlyingAudio; // 0x410(0x08)
	struct UProjectileAttackComponent* RollingRangedAttack; // 0x418(0x08)
	struct UProjectileAttackComponent* FlyingRangedAttack; // 0x420(0x08)
	struct UProjectileAttackComponent* MissileAttack; // 0x428(0x08)
	char pad_430[0xc]; // 0x430(0x0c)
	float MaxMotionSoundVelThresholdFlying; // 0x43c(0x04)
	float MaxMotionSoundVelThreshold; // 0x440(0x04)
	float MaxTurningMotionSoundVelThreshold; // 0x444(0x04)
	bool DebugAudio; // 0x448(0x01)
	char pad_449[0x3]; // 0x449(0x03)
	float HackedAttackMultiplier; // 0x44c(0x04)
	char pad_450[0x18]; // 0x450(0x18)
	bool IsLockedOn; // 0x468(0x01)
	char pad_469[0x3]; // 0x469(0x03)
	float DelayAfterLockOn; // 0x46c(0x04)
	struct USoundCue* ImpactCue; // 0x470(0x08)
	struct USoundCue* JumpSound; // 0x478(0x08)
	struct USoundCue* StartupAccelerationSound; // 0x480(0x08)
	float LaunchPower; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)
	float SpawnRocketsTime; // 0x490(0x04)
	char pad_494[0x1]; // 0x494(0x01)
	enum class EPatrolBotState State; // 0x495(0x01)
	char pad_496[0x1]; // 0x496(0x01)
	enum class EPatrolBotControlState ControlState; // 0x497(0x01)
	char pad_498[0x50]; // 0x498(0x50)
	float HackedAttackSpeedMultiplier; // 0x4e8(0x04)
	float LaserPenetrationDistance; // 0x4ec(0x04)
	float MinTurretAngle; // 0x4f0(0x04)
	float MaxTurretAngle; // 0x4f4(0x04)
	float SpawnRocketsChance; // 0x4f8(0x04)
	float GunRange; // 0x4fc(0x04)
	float RollingAttackCooldown; // 0x500(0x04)
	float FlyingAttackCooldown; // 0x504(0x04)
	float TurretLerpSpeed; // 0x508(0x04)
	float AimDownwardsOffset; // 0x50c(0x04)
	char pad_510[0x4]; // 0x510(0x04)
	float AccelerationThreshold; // 0x514(0x04)
	float LowSpeedThreshold; // 0x518(0x04)
	char pad_51C[0xc]; // 0x51c(0x0c)
	struct FRuntimeFloatCurve SpeedTiltCurve; // 0x528(0x88)
	struct UFakeMoverSettings* RollSettings; // 0x5b0(0x08)
	struct UFakeMoverSettings* JumpSettings; // 0x5b8(0x08)
	struct UFakeMoverSettings* SpawnRocketsSettings; // 0x5c0(0x08)
	bool CanJump; // 0x5c8(0x01)
	char pad_5C9[0x3]; // 0x5c9(0x03)
	float JumpForce; // 0x5cc(0x04)
	float StartFlyingTimer; // 0x5d0(0x04)
	float MinRollingTime; // 0x5d4(0x04)
	float MaxRollingTime; // 0x5d8(0x04)
	float MinFlyingTime; // 0x5dc(0x04)
	float MaxFlyingTime; // 0x5e0(0x04)
	char pad_5E4[0x4]; // 0x5e4(0x04)
	float SinSpeed; // 0x5e8(0x04)
	float SinSize; // 0x5ec(0x04)
	char pad_5F0[0x4]; // 0x5f0(0x04)
	float FlyingDampOmega; // 0x5f4(0x04)
	float RollingDampOmega; // 0x5f8(0x04)
	bool FiringRockets; // 0x5fc(0x01)
	bool Alerted; // 0x5fd(0x01)
	char pad_5FE[0x2]; // 0x5fe(0x02)
	struct AActor* CurrentTarget; // 0x600(0x08)

	void SetIsPatrolling(bool patroling); // Function FSD.PatrolBot.SetIsPatrolling // (Final|Native|Public|BlueprintCallable) // @ game+0x11ab760
	void SetHacked(); // Function FSD.PatrolBot.SetHacked // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11ab740
	void SetFiringRockets(bool firing); // Function FSD.PatrolBot.SetFiringRockets // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x11ab6b0
	void ReviveDrone(); // Function FSD.PatrolBot.ReviveDrone // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11ab520
	void OnStateChangedEvent(enum class EPatrolBotState CurrentState); // Function FSD.PatrolBot.OnStateChangedEvent // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnSpawnRocketsEvent(); // Function FSD.PatrolBot.OnSpawnRocketsEvent // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRocketsEnded(); // Function FSD.PatrolBot.OnRocketsEnded // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRevived(); // Function FSD.PatrolBot.OnRevived // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_State(); // Function FSD.PatrolBot.OnRep_State // (Final|Native|Protected) // @ game+0x11ab2a0
	void OnRep_IsLockedOn(); // Function FSD.PatrolBot.OnRep_IsLockedOn // (Final|Native|Protected) // @ game+0x11ab260
	void OnRep_FiringRockets(); // Function FSD.PatrolBot.OnRep_FiringRockets // (Final|Native|Protected) // @ game+0x11ab240
	void OnRep_ControlState(enum class EPatrolBotControlState oldState); // Function FSD.PatrolBot.OnRep_ControlState // (Final|Native|Protected) // @ game+0x11ab1c0
	void OnProjectileSpawned(); // Function FSD.PatrolBot.OnProjectileSpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnMovementStateChanged(enum class EDeepMovementState State); // Function FSD.PatrolBot.OnMovementStateChanged // (Final|Native|Public) // @ game+0x11ab140
	void OnLockedOn(); // Function FSD.PatrolBot.OnLockedOn // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnLandedEvent(); // Function FSD.PatrolBot.OnLandedEvent // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnJumpEvent(); // Function FSD.PatrolBot.OnJumpEvent // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnFireRockets(); // Function FSD.PatrolBot.OnFireRockets // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDroneHacked(); // Function FSD.PatrolBot.OnDroneHacked // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDroneAlerted(); // Function FSD.PatrolBot.OnDroneAlerted // (Final|Native|Public) // @ game+0x11ab120
	void OnDisabled(); // Function FSD.PatrolBot.OnDisabled // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnDeath(struct UHealthComponentBase* aHealthComponent); // Function FSD.PatrolBot.OnDeath // (Final|Native|Private) // @ game+0x11ab020
	void OnControlStateChanged(enum class EPatrolBotControlState ControlState); // Function FSD.PatrolBot.OnControlStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnCollided(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.PatrolBot.OnCollided // (Final|Native|Protected|HasOutParms) // @ game+0x11aae10
	void Jumped(); // Function FSD.PatrolBot.Jumped // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1090b80
	bool IsHacked(); // Function FSD.PatrolBot.IsHacked // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11aad60
	void ImpactSound(); // Function FSD.PatrolBot.ImpactSound // (Net|Native|Event|NetMulticast|Protected) // @ game+0x10926c0
	void EndFireRockets(); // Function FSD.PatrolBot.EndFireRockets // (Final|Native|Protected) // @ game+0x11aa780
	void DisableDrone(); // Function FSD.PatrolBot.DisableDrone // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11aa740
};

// Class FSD.SpiderAnimInstance
// Size: 0x410 (Inherited: 0x2c0)
struct USpiderAnimInstance : UEnemyAnimInstance {
	float Speed; // 0x2c0(0x04)
	struct FVector Velocity; // 0x2c4(0x0c)
	float WalkCycleSpeed; // 0x2d0(0x04)
	float StartMovingSpeed; // 0x2d4(0x04)
	float StopMovingSpeed; // 0x2d8(0x04)
	float WalkCycleMinRate; // 0x2dc(0x04)
	float WalkCyclePlayRate; // 0x2e0(0x04)
	float MeshScale; // 0x2e4(0x04)
	float Direction; // 0x2e8(0x04)
	float PathDirectionLerpSpeedIn; // 0x2ec(0x04)
	float PathDirectionLerpSpeedOut; // 0x2f0(0x04)
	float PathDirection; // 0x2f4(0x04)
	float HorizontalAngularSpeed; // 0x2f8(0x04)
	float HorizontalAngularSpeed_Abs; // 0x2fc(0x04)
	float VerticalAngularSpeed; // 0x300(0x04)
	enum class EMoveDirection MoveDirection; // 0x304(0x01)
	bool IsMoving; // 0x305(0x01)
	bool IsStrafing; // 0x306(0x01)
	bool IsMovingAndStrafing; // 0x307(0x01)
	bool IsFrozen; // 0x308(0x01)
	bool IsStaggered; // 0x309(0x01)
	char pad_30A[0x2]; // 0x30a(0x02)
	float StaggerStrength; // 0x30c(0x04)
	bool IsAirborne; // 0x310(0x01)
	char pad_311[0x7]; // 0x311(0x07)
	struct UParticleSystem* FootstepParticle; // 0x318(0x08)
	struct USoundCue* FootstepSound; // 0x320(0x08)
	struct FName FootStepLeftBoneName; // 0x328(0x08)
	struct FName FootStepRightBoneName; // 0x330(0x08)
	float FootStepParticleCullDistance; // 0x338(0x04)
	char pad_33C[0x4]; // 0x33c(0x04)
	struct TMap<struct UEnemyPlaySoundKey*, struct USoundCue*> PlaySoundByKeyMap; // 0x340(0x50)
	struct TMap<struct UEnemySpawnEffectsKey*, struct UParticleSystem*> SpawnEffectsByKeyMap; // 0x390(0x50)
	int32_t RandomWalkCycleIndex; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct TArray<struct FRandomWalkCycleEntry> RandomWalkCycles; // 0x3e8(0x10)
	bool TurnToIdle; // 0x3f8(0x01)
	bool IdleToTurnLeft; // 0x3f9(0x01)
	bool IdleToTurnRight; // 0x3fa(0x01)
	bool TurnToWalk; // 0x3fb(0x01)
	bool WalkToTurnRight; // 0x3fc(0x01)
	bool WalkToTurnLeft; // 0x3fd(0x01)
	bool IsInFakePhysics; // 0x3fe(0x01)
	char pad_3FF[0x11]; // 0x3ff(0x11)

	void SetMeshScale(float newScale); // Function FSD.SpiderAnimInstance.SetMeshScale // (Final|Native|Public|BlueprintCallable) // @ game+0x120e5c0
	void SetDeathAnimation(struct UAnimSequenceBase* Animation); // Function FSD.SpiderAnimInstance.SetDeathAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void PlayForcedCycle(float Duration); // Function FSD.SpiderAnimInstance.PlayForcedCycle // (Final|Native|Public|BlueprintCallable) // @ game+0x120e380
};

// Class FSD.PatrolBotAnimInstance
// Size: 0x440 (Inherited: 0x410)
struct UPatrolBotAnimInstance : USpiderAnimInstance {
	struct FRotator TurretRotation; // 0x408(0x0c)
	float Tilt; // 0x414(0x04)
	bool Rolling; // 0x418(0x01)
	bool Disabled; // 0x419(0x01)
	bool FlyingDisable; // 0x41a(0x01)
	struct FRotator WheelRotation; // 0x41c(0x0c)
	float CurrentTilt; // 0x428(0x04)
	float TiltSpeed; // 0x42c(0x04)
	float WheelSpeedModifier; // 0x430(0x04)
	char pad_43B[0x5]; // 0x43b(0x05)
};

// Class FSD.PawnAffliction
// Size: 0x88 (Inherited: 0x30)
struct UPawnAffliction : UDataAsset {
	struct UTexture2D* Icon; // 0x30(0x08)
	struct FColor IconColor; // 0x38(0x04)
	struct FColor IconColorBG; // 0x3c(0x04)
	bool bShowPlayerIcon; // 0x40(0x01)
	bool bShowOnEnemyHealthbar; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
	struct UPlayerAfflictionOverlay* AfflictionOverlay; // 0x48(0x08)
	struct TArray<struct UAfflictionEffect*> EnemyEffects; // 0x50(0x10)
	struct TArray<struct UAfflictionEffect*> PlayerFirstPersonEffects; // 0x60(0x10)
	struct TArray<struct UAfflictionEffect*> PlayerThirdPersonEffects; // 0x70(0x10)
	struct UDialogDataAsset* PlayerShoutOnBegin; // 0x80(0x08)
};

// Class FSD.AfflictionFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UAfflictionFunctionLibrary : UBlueprintFunctionLibrary {

	void PlayEnemyExplosionEffects(struct AFSDPawn* enemy); // Function FSD.AfflictionFunctionLibrary.PlayEnemyExplosionEffects // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11ab360
};

// Class FSD.PawnAfflictionComponent
// Size: 0x260 (Inherited: 0xb0)
struct UPawnAfflictionComponent : UActorComponent {
	struct FMulticastInlineDelegate OnAfflictionActivatedEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnAfflictionDeactivatedEvent; // 0xc0(0x10)
	struct TMap<struct UPawnAffliction*, struct FPawnAfflictionItem> ActiveAfflictions; // 0xd0(0x50)
	struct FAfflictionEntriesArray NetworkedAfflictions; // 0x120(0x120)
	struct UFrozenAfflictionEffect* FrozenEffect; // 0x240(0x08)
	struct UBurningAfflictionEffect* BurningEffect; // 0x248(0x08)
	enum class EFrozenBitsSize EffectSize; // 0x250(0x01)
	char pad_251[0x3]; // 0x251(0x03)
	float BaseEffectScale; // 0x254(0x04)
	bool UseDormancy; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)

	void PushAffliction(struct UPawnAffliction* Affliction, bool onlyIfNotActive); // Function FSD.PawnAfflictionComponent.PushAffliction // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11ab450
	void PopAffliction(struct UPawnAffliction* Affliction); // Function FSD.PawnAfflictionComponent.PopAffliction // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11ab3d0
	void OnDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.PawnAfflictionComponent.OnDeath // (Final|Native|Protected) // @ game+0x11ab0a0
	bool IsAfflictedBy(struct UPawnAffliction* Affliction); // Function FSD.PawnAfflictionComponent.IsAfflictedBy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11aacd0
	struct TArray<struct UPawnAffliction*> GetActiveAfflictions(); // Function FSD.PawnAfflictionComponent.GetActiveAfflictions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11aab90
};

// Class FSD.PlayerAfflictionOverlay
// Size: 0x80 (Inherited: 0x30)
struct UPlayerAfflictionOverlay : UDataAsset {
	struct UTexture2D* Texture; // 0x30(0x08)
	struct FLinearColor TextureTint; // 0x38(0x10)
	struct UPlayerAfflictionOverlayWidget* WidgetOverride; // 0x48(0x08)
	int32_t ZOrder; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct TSoftObjectPtr<struct USoundCue> Audio2D_OnBegin; // 0x58(0x28)
};

// Class FSD.PlayerAfflictionComponent
// Size: 0x2d8 (Inherited: 0x260)
struct UPlayerAfflictionComponent : UPawnAfflictionComponent {
	struct FMulticastInlineDelegate OnShowOverlay; // 0x260(0x10)
	struct FMulticastInlineDelegate OnHideOverlay; // 0x270(0x10)
	struct TMap<struct UPlayerAfflictionOverlay*, int32_t> ActiveOverlays; // 0x280(0x50)
	struct TWeakObjectPtr<struct APlayerCharacter> Character; // 0x2d0(0x08)

	void ShowPlayerOverlay(struct UPlayerAfflictionOverlay* Overlay); // Function FSD.PlayerAfflictionComponent.ShowPlayerOverlay // (Final|Native|Public|BlueprintCallable) // @ game+0x11ab7f0
	void OverlayDelegate__DelegateSignature(struct UPlayerAfflictionOverlay* Overlay); // DelegateFunction FSD.PlayerAfflictionComponent.OverlayDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void HidePlayerOverlay(struct UPlayerAfflictionOverlay* Overlay); // Function FSD.PlayerAfflictionComponent.HidePlayerOverlay // (Final|Native|Public|BlueprintCallable) // @ game+0x11aac50
};

// Class FSD.EnemyPawnAfflictionComponent
// Size: 0x260 (Inherited: 0x260)
struct UEnemyPawnAfflictionComponent : UPawnAfflictionComponent {
};

// Class FSD.DeepPatherFinderCharacterAfflictionComponent
// Size: 0x268 (Inherited: 0x260)
struct UDeepPatherFinderCharacterAfflictionComponent : UPawnAfflictionComponent {
	struct ADeepPathfinderCharacter* Character; // 0x260(0x08)
};

// Class FSD.StaticObjectAfflictionComponent
// Size: 0x268 (Inherited: 0x260)
struct UStaticObjectAfflictionComponent : UPawnAfflictionComponent {
	struct UStaticMeshComponent* Mesh; // 0x260(0x08)
};

// Class FSD.AnimatedObjectAfflictionComponent
// Size: 0x268 (Inherited: 0x260)
struct UAnimatedObjectAfflictionComponent : UPawnAfflictionComponent {
	struct USkeletalMeshComponent* Mesh; // 0x260(0x08)
};

// Class FSD.PlayerAfflictionOverlayWidget
// Size: 0x240 (Inherited: 0x230)
struct UPlayerAfflictionOverlayWidget : UUserWidget {
	bool bOverlayActive; // 0x230(0x01)
	char pad_231[0x7]; // 0x231(0x07)
	struct UPlayerAfflictionOverlay* Overlay; // 0x238(0x08)

	void ReceiveEndOverlay(); // Function FSD.PlayerAfflictionOverlayWidget.ReceiveEndOverlay // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveBeginOverlay(struct UTexture2D* InTexture, struct FLinearColor InTint); // Function FSD.PlayerAfflictionOverlayWidget.ReceiveBeginOverlay // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x158ca90
	void EndOverlay(); // Function FSD.PlayerAfflictionOverlayWidget.EndOverlay // (Final|Native|Public|BlueprintCallable) // @ game+0x11aa7a0
	void BeginOverlay(struct UPlayerAfflictionOverlay* InOverlay); // Function FSD.PlayerAfflictionOverlayWidget.BeginOverlay // (Final|Native|Public|BlueprintCallable) // @ game+0x11aa6a0
};

// Class FSD.PawnAlertComponent
// Size: 0xd0 (Inherited: 0xb0)
struct UPawnAlertComponent : UActorComponent {
	struct FMulticastInlineDelegate OnAlertedFromDamage; // 0xb0(0x10)
	bool AutoAlertAI; // 0xc0(0x01)
	bool ShouldAlertNearby; // 0xc1(0x01)
	char pad_C2[0x2]; // 0xc2(0x02)
	float AlertRadius; // 0xc4(0x04)
	char pad_C8[0x8]; // 0xc8(0x08)

	void StopAutoAlerting(); // Function FSD.PawnAlertComponent.StopAutoAlerting // (Final|Native|Public|BlueprintCallable) // @ game+0x11b6a80
	void OnPawnSeen(struct APawn* Pawn); // Function FSD.PawnAlertComponent.OnPawnSeen // (Final|Native|Protected) // @ game+0x11b5920
	void OnHit(float Damage, struct UDamageClass* DamageClass, struct AActor* DamageCauser, bool anyHealthLost); // Function FSD.PawnAlertComponent.OnHit // (Final|Native|Protected) // @ game+0x11b57b0
	void OnAlerted(); // Function FSD.PawnAlertComponent.OnAlerted // (Final|Native|Protected) // @ game+0x11b5790
	void AleartNearby(); // Function FSD.PawnAlertComponent.AleartNearby // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11b2fa0
};

// Class FSD.PawnStat
// Size: 0x38 (Inherited: 0x30)
struct UPawnStat : UDataAsset {
	float StartingValue; // 0x30(0x04)
	enum class EPawnStatType PawnStatType; // 0x34(0x01)
	enum class EPawnStatType ValueModificationType; // 0x35(0x01)
	char pad_36[0x2]; // 0x36(0x02)
};

// Class FSD.PawnStatsComponent
// Size: 0x1d8 (Inherited: 0xb0)
struct UPawnStatsComponent : UActorComponent {
	struct FPawnStatEntriesArray Stats; // 0xb0(0x120)
	bool UseDormancy; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)

	void RemoveModifier(struct UPawnStat* Stat, float Value); // Function FSD.PawnStatsComponent.RemoveModifier // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11b5b20
	float GetStatValue(struct UPawnStat* Stat); // Function FSD.PawnStatsComponent.GetStatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b5000
	void ChangeModifier(struct UPawnStat* Stat, float CurrentValue, float NewValue); // Function FSD.PawnStatsComponent.ChangeModifier // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11b3780
	int32_t AddModifier(struct UPawnStat* Stat, float Value); // Function FSD.PawnStatsComponent.AddModifier // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11b2ed0
};

// Class FSD.PerkLogic
// Size: 0xb0 (Inherited: 0xb0)
struct UPerkLogic : UActorComponent {

	void StartLogic(int32_t Rank); // Function FSD.PerkLogic.StartLogic // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct APlayerCharacter* GetCharacter(); // Function FSD.PerkLogic.GetCharacter // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b3f20
	struct FText GetAdditionalText(int32_t Rank); // Function FSD.PerkLogic.GetAdditionalText // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x11b3df0
};

// Class FSD.PerkDelegateItem
// Size: 0x78 (Inherited: 0x28)
struct UPerkDelegateItem : UObject {
	struct FMulticastInlineDelegate OnPerkClaimed; // 0x28(0x10)
	struct FMulticastInlineDelegate OnPerkEquipped; // 0x38(0x10)
	struct FMulticastInlineDelegate OnPerkUnequipped; // 0x48(0x10)
	struct FMulticastInlineDelegate OnPerkHighlighted; // 0x58(0x10)
	struct FMulticastInlineDelegate OnChargesUsedChanged; // 0x68(0x10)
};

// Class FSD.PerkSubsystem
// Size: 0x80 (Inherited: 0x30)
struct UPerkSubsystem : UWorldSubsystem {
	struct TMap<struct UPerkAsset*, struct UPerkDelegateItem*> PerkDelegates; // 0x30(0x50)

	struct UPerkDelegateItem* GetPerkDelegates(struct UPerkAsset* Perk); // Function FSD.PerkSubsystem.GetPerkDelegates // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11b4760
};

// Class FSD.PerkHUDWidget
// Size: 0x238 (Inherited: 0x230)
struct UPerkHUDWidget : UUserWidget {
	struct UPerkAsset* PerkAsset; // 0x230(0x08)

	void SetPerkAsset(struct UPerkAsset* InPerk); // Function FSD.PerkHUDWidget.SetPerkAsset // (Final|Native|Public|BlueprintCallable) // @ game+0x11b6700
	void ReceivePerkAssetChanged(); // Function FSD.PerkHUDWidget.ReceivePerkAssetChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	struct AFSDPlayerState* GetFSDPlayerState(); // Function FSD.PerkHUDWidget.GetFSDPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b42e0
	struct APlayerCharacter* GetCharacter(); // Function FSD.PerkHUDWidget.GetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b3ef0
};

// Class FSD.PerkHUDIconWidget
// Size: 0x240 (Inherited: 0x238)
struct UPerkHUDIconWidget : UPerkHUDWidget {
	float CoolDownProgress; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
};

// Class FSD.PerkHUDActivationWidget
// Size: 0x240 (Inherited: 0x238)
struct UPerkHUDActivationWidget : UPerkHUDWidget {
	enum class EPerkHUDActivationLocation Location; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)
};

// Class FSD.PerkFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPerkFunctionLibrary : UBlueprintFunctionLibrary {

	void SplitPerksByUsage(struct TArray<struct UPerkAsset*> perks, struct TArray<struct UPerkAsset*> OutPassivePerks, struct TArray<struct UPerkAsset*> OutActivePerks); // Function FSD.PerkFunctionLibrary.SplitPerksByUsage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11b6900
	struct TArray<struct UPerkAsset*> SortPerksByUsage(struct TArray<struct UPerkAsset*> perks); // Function FSD.PerkFunctionLibrary.SortPerksByUsage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11b6800
	void GetPerkEquipSlots(struct UObject* WorldContext, enum class EPerkUsageType InType, struct APlayerCharacter* InCharacterClass, int32_t OutAvailableSlots, int32_t OutUnavailableSlots, int32_t OutPromotionLockedSlots); // Function FSD.PerkFunctionLibrary.GetPerkEquipSlots // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11b4930
	struct TArray<enum class EPerkSlotType> GetPerkEquipSlotLayout(struct UObject* WorldContext, enum class EPerkUsageType InType, struct APlayerCharacter* InCharacterClass); // Function FSD.PerkFunctionLibrary.GetPerkEquipSlotLayout // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11b47f0
	struct TArray<struct UPerkAsset*> GetOwnedPerksByType(struct UObject* WorldContext, enum class EPerkUsageType InType); // Function FSD.PerkFunctionLibrary.GetOwnedPerksByType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11b4650
	struct TArray<struct UPerkAsset*> GetOwnedPerks(struct UObject* WorldContext); // Function FSD.PerkFunctionLibrary.GetOwnedPerks // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11b4580
	struct FText FormatRichText(struct FText SourceText, bool UpperCase, struct TMap<struct FString, struct FString> CharTagMap); // Function FSD.PerkFunctionLibrary.FormatRichText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11b3a90
};

// Class FSD.PerkUsageComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UPerkUsageComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct TArray<struct FPerkUsage> PerkUsageReplicated; // 0xb8(0x10)
	char pad_C8[0x10]; // 0xc8(0x10)

	void Server_MarkPerkUsed(struct UPerkAsset* Perk); // Function FSD.PerkUsageComponent.Server_MarkPerkUsed // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11b6240
	void Server_CheatReset(); // Function FSD.PerkUsageComponent.Server_CheatReset // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11b5cb0
	void OnRep_PerkUsageReplicated(); // Function FSD.PerkUsageComponent.OnRep_PerkUsageReplicated // (Final|Native|Protected) // @ game+0x11b59a0
};

// Class FSD.PhotographyStateComponent
// Size: 0x100 (Inherited: 0x100)
struct UPhotographyStateComponent : UCharacterStateComponent {
};

// Class FSD.PickaxeFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPickaxeFunctionLibrary : UBlueprintFunctionLibrary {

	bool RemovePickaxePartFromOwned(struct UObject* WorldContextObject, struct UPickaxePart* part); // Function FSD.PickaxeFunctionLibrary.RemovePickaxePartFromOwned // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11b5bf0
	bool IsPickaxePartEquipped(struct UObject* WorldContextObject, enum class EPickaxePartLocation Location, struct UPickaxePart* part, struct UItemID* pickaxeID); // Function FSD.PickaxeFunctionLibrary.IsPickaxePartEquipped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11b55d0
	struct TArray<struct UPickaxePart*> GetUnlockedPickaxeParts(struct UObject* WorldContextObject, enum class EPickaxePartLocation Category); // Function FSD.PickaxeFunctionLibrary.GetUnlockedPickaxeParts // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11b5160
	struct TArray<struct UPickaxePart*> GetPickaxeParts(struct UObject* WorldContextObject, enum class EPickaxePartLocation Category); // Function FSD.PickaxeFunctionLibrary.GetPickaxeParts // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11b4b10
	bool GetIsPickAxePartAcquired(struct UObject* WorldContextObject, struct UPickaxePart* InPickaxePart); // Function FSD.PickaxeFunctionLibrary.GetIsPickAxePartAcquired // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11b4420
	struct FPickaxeSet GetEquippedPickaxeSet(struct UObject* WorldContextObject, struct UItemID* pickaxeID); // Function FSD.PickaxeFunctionLibrary.GetEquippedPickaxeSet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11b41f0
	struct UPickaxePart* GetEquippedPickaxePart(struct UObject* WorldContextObject, enum class EPickaxePartLocation partLocation, struct UItemID* pickaxeID); // Function FSD.PickaxeFunctionLibrary.GetEquippedPickaxePart // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11b4100
	void EquipPickaxePart(struct UObject* WorldContextObject, struct UPickaxePart* part, enum class EPickaxePartLocation partLocation, struct UItemID* pickaxeID); // Function FSD.PickaxeFunctionLibrary.EquipPickaxePart // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11b3960
};

// Class FSD.PickaxeItem
// Size: 0x6c0 (Inherited: 0x338)
struct APickaxeItem : AItem {
	char pad_338[0x10]; // 0x338(0x10)
	bool QuadDamageCarving; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)
	struct FMulticastInlineDelegate ActiveMiningEvent; // 0x350(0x10)
	struct USceneComponent* FP_Root; // 0x360(0x08)
	struct USceneComponent* TP_Root; // 0x368(0x08)
	struct USceneComponent* FP_Scale; // 0x370(0x08)
	struct USceneComponent* TP_Scale; // 0x378(0x08)
	struct UPlayerAnimInstance* FPAnimInstance; // 0x380(0x08)
	struct UPlayerAnimInstance* TPAnimInstance; // 0x388(0x08)
	struct UAnimMontage* FP_EquipAnimation; // 0x390(0x08)
	struct UAnimMontage* TP_EquipAnimation; // 0x398(0x08)
	float EquipDuration; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct UItemCharacterAnimationSet* CharacterAnimationSet; // 0x3a8(0x08)
	char pad_3B0[0x8]; // 0x3b0(0x08)
	struct UDamageComponent* DamageComponent; // 0x3b8(0x08)
	struct UDamageComponent* SpecialDamageComponent; // 0x3c0(0x08)
	float SpecialCooldown; // 0x3c8(0x04)
	float SpecialCooldownRemaining; // 0x3cc(0x04)
	char pad_3D0[0x18]; // 0x3d0(0x18)
	struct FCoolDownProgressStyle SpecialCooldownUI; // 0x3e8(0x40)
	int32_t RockMiningBonus; // 0x428(0x04)
	int32_t DirtMiningBonus; // 0x42c(0x04)
	float DamageRange; // 0x430(0x04)
	float DamageRadius; // 0x434(0x04)
	struct UStatusEffect* OnDamageEnemySlowdownEffect; // 0x438(0x08)
	struct FGameplayTagContainer WideDamageTrackingTags; // 0x440(0x20)
	struct USoundCue* MiningSound; // 0x460(0x08)
	struct UForceFeedbackEffect* MineRumble; // 0x468(0x08)
	struct UForceFeedbackEffect* PartialMineRumble; // 0x470(0x08)
	struct UForceFeedbackEffect* DamageRumble; // 0x478(0x08)
	float GeneralImpactAudioVolume; // 0x480(0x04)
	float HitCooldown; // 0x484(0x04)
	float MiningDuration; // 0x488(0x04)
	float DistanceConsideredSameHit; // 0x48c(0x04)
	float BlockParticlesScaleFP; // 0x490(0x04)
	float BlockParticlesScaleTP; // 0x494(0x04)
	enum class EPickaxeState State; // 0x498(0x01)
	char pad_499[0x167]; // 0x499(0x167)
	bool ActiveMiningEnabled; // 0x600(0x01)
	char pad_601[0x3]; // 0x601(0x03)
	int32_t MaxActiveMiningCount; // 0x604(0x04)
	float ActiveMiningSpeedBoost; // 0x608(0x04)
	bool PreventQMining; // 0x60c(0x01)
	char pad_60D[0x3]; // 0x60d(0x03)
	float QMiningExpectedDelay; // 0x610(0x04)
	float QMiningInitialDelay; // 0x614(0x04)
	float QMiningReducedPlayRatePct; // 0x618(0x04)
	char pad_61C[0x4]; // 0x61c(0x04)
	double QMiningLastHitTime; // 0x620(0x08)
	struct USoundCue* ActiveMiningSucceedSound; // 0x628(0x08)
	struct USoundCue* ActiveMiningFailedSound; // 0x630(0x08)
	char pad_638[0xe]; // 0x638(0x0e)
	bool CanBezerk; // 0x646(0x01)
	char pad_647[0x1]; // 0x647(0x01)
	struct UStatusEffect* BezerkStatusEffect; // 0x648(0x08)
	char pad_650[0x2]; // 0x650(0x02)
	bool PowerAttackEnabled; // 0x652(0x01)
	char pad_653[0x5]; // 0x653(0x05)
	struct TMap<enum class EPickaxePartLocation, struct FPickaxeMeshInstance> EquippedParts; // 0x658(0x50)
	struct UMaterialInterface* EquippedMaterial; // 0x6a8(0x08)
	char pad_6B0[0x10]; // 0x6b0(0x10)

	void SpecialTargetDamageEffects(struct FVector ImpactPoint, struct FVector ImpactNormal); // Function FSD.PickaxeItem.SpecialTargetDamageEffects // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x158ca90
	void SetSpecialCoolDownDuration(float newCooldownDuration); // Function FSD.PickaxeItem.SetSpecialCoolDownDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x11b6780
	void Server_TriggerBezerk(); // Function FSD.PickaxeItem.Server_TriggerBezerk // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11b64c0
	void Server_SetState(enum class EPickaxeState NewState); // Function FSD.PickaxeItem.Server_SetState // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11b6410
	void Server_RemoveDebrisInstance(struct FVector_NetQuantize HitPos, int32_t DebrisIndex, int32_t remappedIndex); // Function FSD.PickaxeItem.Server_RemoveDebrisInstance // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11b6300
	void Server_HitBlock(struct FVector_NetQuantize Position, int32_t Material, bool removeDebris, bool isSpecial); // Function FSD.PickaxeItem.Server_HitBlock // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0x11b60c0
	void Server_DoPowerAttack(); // Function FSD.PickaxeItem.Server_DoPowerAttack // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11b6070
	void Server_DigBlock2(struct FVector carvePos, struct FVector carveDirection, int32_t TerrainMaterial, bool isSpecial); // Function FSD.PickaxeItem.Server_DigBlock2 // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x11b5ef0
	void Server_DamageTarget(struct UPrimitiveComponent* TargetComponent, bool isSpecial, struct FVector_NetQuantize ImpactPoint, struct FVector_NetQuantizeNormal ImpactNormal, struct UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // Function FSD.PickaxeItem.Server_DamageTarget // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11b5d00
	void RefreshSpecialCooldown(); // Function FSD.PickaxeItem.RefreshSpecialCooldown // (Final|Native|Public|BlueprintCallable) // @ game+0x11b5b00
	void OnRep_State(enum class EPickaxeState oldState); // Function FSD.PickaxeItem.OnRep_State // (Final|Native|Protected) // @ game+0x11b59c0
	void OnLoadoutChanged(); // Function FSD.PickaxeItem.OnLoadoutChanged // (Final|Native|Protected) // @ game+0x11b5900
	float GetSpecialCooldownProgress(); // Function FSD.PickaxeItem.GetSpecialCooldownProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b4fd0
	void All_SimulateHitBlock(struct FVector_NetQuantize Position, int32_t materia, bool removeDebris, bool isSpecial); // Function FSD.PickaxeItem.All_SimulateHitBlock // (Net|Native|Event|NetMulticast|Protected) // @ game+0x11b34c0
	void All_SimulateDigDebris(struct FVector_NetQuantize Position, struct UParticleSystem* Particles, struct USoundCue* cue); // Function FSD.PickaxeItem.All_SimulateDigDebris // (Net|Native|Event|NetMulticast|Protected) // @ game+0x11b33a0
	void All_SimulateDigBlock(struct FVector_NetQuantize Position, bool spawnParticles, int32_t Material, float Density, bool isSpecial); // Function FSD.PickaxeItem.All_SimulateDigBlock // (Net|Native|Event|NetMulticast|Protected) // @ game+0x11b31d0
	void All_SimulateDamageTarget(struct UPrimitiveComponent* TargetComponent, bool isSpecial, struct FVector_NetQuantize ImpactPoint, struct FVector_NetQuantizeNormal ImpactNormal, struct UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // Function FSD.PickaxeItem.All_SimulateDamageTarget // (Net|Native|Event|NetMulticast|Protected) // @ game+0x11b2fe0
	void All_DoPowerAttack(); // Function FSD.PickaxeItem.All_DoPowerAttack // (Net|Native|Event|NetMulticast|Protected) // @ game+0x11b2fc0
};

// Class FSD.PickaxePreviewActor
// Size: 0x298 (Inherited: 0x220)
struct APickaxePreviewActor : AActor {
	char pad_220[0x10]; // 0x220(0x10)
	struct USceneComponent* TP_Root; // 0x230(0x08)
	struct TMap<enum class EPickaxePartLocation, struct FPickaxeMeshInstance> EquippedParts; // 0x238(0x50)
	struct UItemID* ItemID; // 0x288(0x08)
	struct UMaterialInterface* EquippedMaterial; // 0x290(0x08)

	void PreviewParts(enum class EPickaxePartLocation PreviewLocation, struct UPickaxePart* PreviewPart); // Function FSD.PickaxePreviewActor.PreviewParts // (Final|Native|Public|BlueprintCallable) // @ game+0x11b5a40
	void EquipParts(); // Function FSD.PickaxePreviewActor.EquipParts // (Final|Native|Public|BlueprintCallable) // @ game+0x11b3940
};

// Class FSD.PickaxePart
// Size: 0x98 (Inherited: 0x60)
struct UPickaxePart : USavablePrimaryDataAsset {
	struct FText Title; // 0x60(0x18)
	struct UPickaxePartItem* Item; // 0x78(0x08)
	struct UItemAquisitionSource* AquisitionSource; // 0x80(0x08)
	bool UnlockedFromStart; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
	struct UDLCBase* RequiredDLC; // 0x90(0x08)

	enum class EPickaxePartLocation GetPrefferedLocation(); // Function FSD.PickaxePart.GetPrefferedLocation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ba8c0
};

// Class FSD.PickaxePartItem
// Size: 0x30 (Inherited: 0x28)
struct UPickaxePartItem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class FSD.PickaxeMaterialPart
// Size: 0x80 (Inherited: 0x30)
struct UPickaxeMaterialPart : UPickaxePartItem {
	struct TSoftObjectPtr<struct UMaterialInterface> Material; // 0x30(0x28)
	struct TSoftObjectPtr<struct UMaterialInterface> IconMaterial; // 0x58(0x28)
};

// Class FSD.PickaxeMeshPart
// Size: 0x58 (Inherited: 0x30)
struct UPickaxeMeshPart : UPickaxePartItem {
	struct TSoftObjectPtr<struct UStaticMesh> Mesh; // 0x30(0x28)
};

// Class FSD.PickaxeHeadPart
// Size: 0x58 (Inherited: 0x58)
struct UPickaxeHeadPart : UPickaxeMeshPart {
};

// Class FSD.PickaxeBladePart
// Size: 0x60 (Inherited: 0x58)
struct UPickaxeBladePart : UPickaxeMeshPart {
	bool RestrictedToBackside; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
};

// Class FSD.PickaxeShaftPart
// Size: 0x58 (Inherited: 0x58)
struct UPickaxeShaftPart : UPickaxeMeshPart {
};

// Class FSD.PickaxeHandlePart
// Size: 0x58 (Inherited: 0x58)
struct UPickaxeHandlePart : UPickaxeMeshPart {
};

// Class FSD.PickaxePommelPart
// Size: 0x58 (Inherited: 0x58)
struct UPickaxePommelPart : UPickaxeMeshPart {
};

// Class FSD.PickaxeSettings
// Size: 0x100 (Inherited: 0x30)
struct UPickaxeSettings : UDataAsset {
	struct TMap<struct UPlayerCharacterID*, struct APickaxePreviewActor*> PickaxePreviewActors; // 0x30(0x50)
	struct UAnimMontage* Salute_FP; // 0x80(0x08)
	struct UAnimMontage* Salute_TP; // 0x88(0x08)
	struct TArray<struct UPickaxePart*> Parts; // 0x90(0x10)
	struct TMap<struct UItemID*, struct FDefaultPickaxeParts> DefaultParts; // 0xa0(0x50)
	char pad_F0[0x10]; // 0xf0(0x10)
};

// Class FSD.PickaxePartEquip
// Size: 0x28 (Inherited: 0x28)
struct UPickaxePartEquip : UInterface {
};

// Class FSD.PillarSettings
// Size: 0x68 (Inherited: 0x30)
struct UPillarSettings : UDataAsset {
	struct TArray<struct FPillarSegment> PillarSegments; // 0x30(0x10)
	struct FRandRange PointRange; // 0x40(0x08)
	struct FRandRange PointNoiseRange; // 0x48(0x08)
	struct FRandRange PillarRangeScale; // 0x50(0x08)
	struct FRandRange PillarNoiseRangeScale; // 0x58(0x08)
	struct UFloodFillSettings* Noise; // 0x60(0x08)
};

// Class FSD.PillarGenerationComponent
// Size: 0x410 (Inherited: 0x3f0)
struct UPillarGenerationComponent : UGenerationComponent {
	struct TArray<struct FVector> Points; // 0x3f0(0x10)
	bool Visible; // 0x400(0x01)
	char pad_401[0x7]; // 0x401(0x07)
	struct UPillarSettings* PillarSettings; // 0x408(0x08)
};

// Class FSD.PillarGenerationItem
// Size: 0x230 (Inherited: 0x228)
struct APillarGenerationItem : AGenerationItem {
	struct UPillarGenerationComponent* PillarComponent; // 0x228(0x08)
};

// Class FSD.PilotingStateComponent
// Size: 0x120 (Inherited: 0x100)
struct UPilotingStateComponent : UCharacterStateComponent {
	struct AActor* Vehicle; // 0x100(0x08)
	char pad_108[0x18]; // 0x108(0x18)

	void Server_MoveRight(float Value); // Function FSD.PilotingStateComponent.Server_MoveRight // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0x11baf00
	void Server_MoveForward(float Value); // Function FSD.PilotingStateComponent.Server_MoveForward // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0x11bae50
	void OnRep_Vehicle(); // Function FSD.PilotingStateComponent.OnRep_Vehicle // (Final|Native|Protected) // @ game+0x11badb0
};

// Class FSD.PipelineBuilderItem
// Size: 0x3f0 (Inherited: 0x3e8)
struct APipelineBuilderItem : ATrackBuilderItem {
	struct UItemPlacerAggregator* SegmentPlacer; // 0x3e8(0x08)
};

// Class FSD.PipelineFinish
// Size: 0x248 (Inherited: 0x220)
struct APipelineFinish : AActor {
	struct UTrackBuilderConnectPoint* PipelineEndConnection; // 0x220(0x08)
	struct USingleUsableComponent* UsableOrderExtractor; // 0x228(0x08)
	struct APipelineExtractorPod* ExtractPodClass; // 0x230(0x08)
	struct APipelineExtractorPod* ExtractorPod; // 0x238(0x08)
	bool bPipelineCompleted; // 0x240(0x01)
	char pad_241[0x7]; // 0x241(0x07)

	void ReceivePipelineCompleted(); // Function FSD.PipelineFinish.ReceivePipelineCompleted // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveExtractorPodSpawned(struct APipelineExtractorPod* InExtractorPod); // Function FSD.PipelineFinish.ReceiveExtractorPodSpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_PipelineCompleted(); // Function FSD.PipelineFinish.OnRep_PipelineCompleted // (Final|Native|Protected) // @ game+0x11bad50
	void OnRep_ExtractorPod(); // Function FSD.PipelineFinish.OnRep_ExtractorPod // (Final|Native|Protected) // @ game+0x11bad30
	void OnExtractorPodStateChanged(struct ARessuplyPod* InExtractorPod, enum class ERessuplyPodState InState); // Function FSD.PipelineFinish.OnExtractorPodStateChanged // (Final|Native|Protected) // @ game+0x11bab70
	void OnExtractorPodOrdered(struct APlayerCharacter* InUser, enum class EInputKeys Key); // Function FSD.PipelineFinish.OnExtractorPodOrdered // (Final|Native|Protected|BlueprintCallable) // @ game+0x11baab0
	void OnConnectedWithSegment(struct UTrackBuilderConnectPoint* InConnectPoint, struct ATrackBuilderSegment* InSegment); // Function FSD.PipelineFinish.OnConnectedWithSegment // (Final|Native|Protected) // @ game+0x11ba9f0
	void OnConnectedSegmentActivated(struct APipelineSegment* InSegment); // Function FSD.PipelineFinish.OnConnectedSegmentActivated // (Final|Native|Protected) // @ game+0x11ba970
	struct FVector GetLandingOffset(); // Function FSD.PipelineFinish.GetLandingOffset // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.PipelineExtractorPod
// Size: 0x2e8 (Inherited: 0x2d8)
struct APipelineExtractorPod : ARessuplyPod {
	struct TWeakObjectPtr<struct APipelineSegment> ConnectedSegment; // 0x2d8(0x08)
	float TargetRotation; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)

	void SetTargetRotation(struct APipelineSegment* InPipelineSegment); // Function FSD.PipelineExtractorPod.SetTargetRotation // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x11bb220
	void ReceiveConnectedToSegment(struct APipelineSegment* InConnectedSegment); // Function FSD.PipelineExtractorPod.ReceiveConnectedToSegment // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_ConnectedSegment(); // Function FSD.PipelineExtractorPod.OnRep_ConnectedSegment // (Final|Native|Protected) // @ game+0x11bad10
	void ExtractorPodOrderedEvent(struct APlayerCharacter* InUser); // Function FSD.PipelineExtractorPod.ExtractorPodOrderedEvent // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.PipelineExtractorPodAnimInstance
// Size: 0x2a0 (Inherited: 0x270)
struct UPipelineExtractorPodAnimInstance : UAnimInstance {
	float ConnectionRotation; // 0x268(0x04)
	enum class EPipelineExtractorPodAnimState AnimState; // 0x26c(0x01)
	enum class ERessuplyPodState PodState; // 0x26d(0x01)
	enum class EPipelineBuildState PipelineState; // 0x26e(0x01)
	enum class ERefineryState RefineryState; // 0x26f(0x01)
	float RotationSpeed; // 0x270(0x04)
	struct TWeakObjectPtr<struct APipelineExtractorPod> Pod; // 0x274(0x08)
	struct TWeakObjectPtr<struct APipelineSegment> ConnectedSegment; // 0x27c(0x08)
	struct TWeakObjectPtr<struct APipelineStart> PipelineStart; // 0x284(0x08)
	struct TWeakObjectPtr<struct AFSDRefinery> Refinery; // 0x28c(0x08)
	char pad_29C[0x4]; // 0x29c(0x04)
};

// Class FSD.PipelineSegment
// Size: 0x3a8 (Inherited: 0x290)
struct APipelineSegment : ATrackBuilderSegment {
	struct FMulticastInlineDelegate OnPipelineBroken; // 0x290(0x10)
	struct FMulticastInlineDelegate OnPipelineRepaired; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnPipelineActivated; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnPipelineStateChanged; // 0x2c0(0x10)
	struct UStaticMesh* StaticMeshUnassembled; // 0x2d0(0x08)
	struct UStaticMesh* StaticMeshAssembled; // 0x2d8(0x08)
	struct UStaticMesh* StaticMeshFinal; // 0x2e0(0x08)
	struct FVector EditorEndLocation; // 0x2e8(0x0c)
	enum class ETraceTypeQuery CarvingTraceType; // 0x2f4(0x01)
	char pad_2F5[0x3]; // 0x2f5(0x03)
	struct UMaterialInterface* NumberMaterial; // 0x2f8(0x08)
	char pad_300[0x8]; // 0x300(0x08)
	struct USingleUsableComponent* RepairSegmentUsable; // 0x308(0x08)
	struct USingleUsableComponent* ActivateSegmentUsable; // 0x310(0x08)
	struct UDroneUseComponent* DroneUsable; // 0x318(0x08)
	struct USimpleHealthComponent* SegmentHealthComponent; // 0x320(0x08)
	struct USplineComponent* MovementSpline; // 0x328(0x08)
	struct USplineComponent* MovementSplineRight; // 0x330(0x08)
	struct USplineComponent* MovementSplineLeft; // 0x338(0x08)
	struct USplineMeshComponent* PipelineMesh; // 0x340(0x08)
	struct USplineMeshComponent* PipelineOuterMesh; // 0x348(0x08)
	struct USkeletalMeshComponent* PipelineCapMesh; // 0x350(0x08)
	struct USkeletalMeshComponent* EndPostMesh; // 0x358(0x08)
	struct UStaticMeshComponent* EndPostMeshStatic; // 0x360(0x08)
	struct UPathfinderSplineSegmentCollisionComponent* PathfinderComponent; // 0x368(0x08)
	bool bSegmentBroken; // 0x370(0x01)
	char pad_371[0x3]; // 0x371(0x03)
	float SegmentActivatedProgress; // 0x374(0x04)
	enum class EPipelineBuildState PipelineState; // 0x378(0x01)
	char pad_379[0x3]; // 0x379(0x03)
	struct TWeakObjectPtr<struct APipelineStart> PipelineStart; // 0x37c(0x08)
	float MinValidLength; // 0x384(0x04)
	float MaxValidLength; // 0x388(0x04)
	float TooSharpExtraLength; // 0x38c(0x04)
	float TooSteepExtraLength; // 0x390(0x04)
	float BlockedSphereSize; // 0x394(0x04)
	int32_t BlockedExtraRaytraceRotationOffset; // 0x398(0x04)
	float BlockedExtraRaytraces; // 0x39c(0x04)
	float BlockedExtraRaytraceDist; // 0x3a0(0x04)
	float BlockedRayTraceSuccesses; // 0x3a4(0x04)

	void UpdateSplineMesh(struct USplineMeshComponent* InMesh, float InProgress, bool InMoveEndCap); // Function FSD.PipelineSegment.UpdateSplineMesh // (Final|Native|Protected|BlueprintCallable) // @ game+0x11bb2e0
	void SetSegmentBroken(struct APlayerCharacter* InUser, bool InSegmentBroken); // Function FSD.PipelineSegment.SetSegmentBroken // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11bb150
	void SetPipelineNumberMaterial(struct UMaterialInterface* InNumberMaterial); // Function FSD.PipelineSegment.SetPipelineNumberMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x11bb0d0
	void SetEndPostVisible(bool InVisible); // Function FSD.PipelineSegment.SetEndPostVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x11bb040
	void ReceiveSegmentBrokenChanged(bool InSegmentBroken); // Function FSD.PipelineSegment.ReceiveSegmentBrokenChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveSegmentActivatedProgress(float InProgress); // Function FSD.PipelineSegment.ReceiveSegmentActivatedProgress // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveSegmentActivated(); // Function FSD.PipelineSegment.ReceiveSegmentActivated // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceivePlacementFinished(); // Function FSD.PipelineSegment.ReceivePlacementFinished // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceivePlacementBegin(); // Function FSD.PipelineSegment.ReceivePlacementBegin // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void PipelineStateDelegate__DelegateSignature(enum class EPipelineBuildState InPipelineState); // DelegateFunction FSD.PipelineSegment.PipelineStateDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void PipelineSegmentDelegate__DelegateSignature(struct APipelineSegment* InPipelineSegment); // DelegateFunction FSD.PipelineSegment.PipelineSegmentDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnRepaired(struct APlayerCharacter* InUser); // Function FSD.PipelineSegment.OnRepaired // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_SegmentBroken(); // Function FSD.PipelineSegment.OnRep_SegmentBroken // (Final|Native|Protected) // @ game+0x11bad90
	void OnRep_SegmentActivatedProgress(); // Function FSD.PipelineSegment.OnRep_SegmentActivatedProgress // (Final|Native|Protected) // @ game+0x11bad70
	struct APipelineStart* GetPipelineStart(); // Function FSD.PipelineSegment.GetPipelineStart // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ba890
	struct APipelineSegment* GetNextPipelineSegment(bool bForward); // Function FSD.PipelineSegment.GetNextPipelineSegment // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ba7f0
	bool GetIsSegmentActivated(); // Function FSD.PipelineSegment.GetIsSegmentActivated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ba7c0
	void CallbackSegmentRepaired(struct APlayerCharacter* InUser, enum class EInputKeys Key); // Function FSD.PipelineSegment.CallbackSegmentRepaired // (Final|Native|Protected) // @ game+0x11ba680
	void CallbackSegmentDestroyed(struct UHealthComponentBase* InHealth); // Function FSD.PipelineSegment.CallbackSegmentDestroyed // (Final|Native|Protected) // @ game+0x11ba600
	void CallbackSegmentActivatedProgress(float InProgress); // Function FSD.PipelineSegment.CallbackSegmentActivatedProgress // (Final|Native|Protected) // @ game+0x11ba580
	void CallbackSegmentActivated(struct APlayerCharacter* InUser, enum class EInputKeys Key); // Function FSD.PipelineSegment.CallbackSegmentActivated // (Final|Native|Protected) // @ game+0x11ba4c0
	void CallbackPipelineStateChanged(struct APipelineStart* InPipelineStart, enum class EPipelineBuildState InState); // Function FSD.PipelineSegment.CallbackPipelineStateChanged // (Final|Native|Protected) // @ game+0x11ba400
	void CallbackNextSegmentChanged(struct UTrackBuilderUsable* InUsable, struct ATrackBuilderSegment* InSegment); // Function FSD.PipelineSegment.CallbackNextSegmentChanged // (Final|Native|Protected) // @ game+0x11ba340
	void CallbackDroneUsed(int32_t TimesUsed); // Function FSD.PipelineSegment.CallbackDroneUsed // (Final|Native|Protected) // @ game+0x11ba2c0
};

// Class FSD.PipelineSegmentEndPostAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UPipelineSegmentEndPostAnimInstance : UAnimInstance {
	float AssemblyAnimLength; // 0x268(0x04)
	float AssemblyTimeTarget; // 0x26c(0x04)
	float AssemblyTime; // 0x270(0x04)
	bool bAssembling; // 0x274(0x01)
	char pad_27D[0x3]; // 0x27d(0x03)
};

// Class FSD.PipelineStart
// Size: 0x270 (Inherited: 0x220)
struct APipelineStart : AActor {
	struct FMulticastInlineDelegate OnBuildStateChanged; // 0x220(0x10)
	int32_t PipelineID; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct UTrackBuilderUsable* PipelineStartUsable; // 0x238(0x08)
	enum class EPipelineBuildState BuildState; // 0x240(0x01)
	char pad_241[0x7]; // 0x241(0x07)
	struct APipelineFinish* PipelineFinish; // 0x248(0x08)
	struct AFSDRefinery* Refinery; // 0x250(0x08)
	struct TArray<struct TWeakObjectPtr<struct APipelineSegment>> BrokenSegments; // 0x258(0x10)
	char pad_268[0x8]; // 0x268(0x08)

	void ReceiveBuildStateChanged(enum class EPipelineBuildState InBuildState); // Function FSD.PipelineStart.ReceiveBuildStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void PipelineStartStateDelegate__DelegateSignature(struct APipelineStart* InPipelineStart, enum class EPipelineBuildState InPipelineState); // DelegateFunction FSD.PipelineStart.PipelineStartStateDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void PipelineCompleted(struct APipelineFinish* InPipelineFinish); // Function FSD.PipelineStart.PipelineCompleted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11badd0
	void OnRep_BuildState(); // Function FSD.PipelineStart.OnRep_BuildState // (Final|Native|Protected) // @ game+0x11bacf0
	void OnNextSegmentChanged(struct UTrackBuilderUsable* InUsable, struct ATrackBuilderSegment* InSegment); // Function FSD.PipelineStart.OnNextSegmentChanged // (Final|Native|Protected) // @ game+0x11bac30
	struct TArray<struct APipelineSegment*> GetAllPipelineSegments(); // Function FSD.PipelineStart.GetAllPipelineSegments // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ba740
};

// Class FSD.PlaceableInterface
// Size: 0x28 (Inherited: 0x28)
struct UPlaceableInterface : UInterface {
};

// Class FSD.PlaceableItem
// Size: 0x3b8 (Inherited: 0x390)
struct APlaceableItem : AAnimatedItem {
	char pad_390[0x10]; // 0x390(0x10)
	struct UCapacityHoldingItemAggregator* Capacity; // 0x3a0(0x08)
	struct UItemPlacerAggregator* ItemPlacer; // 0x3a8(0x08)
	struct AActor* PlacableClass; // 0x3b0(0x08)

	void Server_SpawnItem(struct FVector Location); // Function FSD.PlaceableItem.Server_SpawnItem // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x11bafb0
	void ReceiveItemSpawned(struct AActor* SpawnedActor); // Function FSD.PlaceableItem.ReceiveItemSpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnCarriedAmountChanged(int32_t newAmount); // Function FSD.PlaceableItem.OnCarriedAmountChanged // (Final|Native|Protected) // @ game+0x11ba8f0
};

// Class FSD.PlanetZoneSetup
// Size: 0x40 (Inherited: 0x30)
struct UPlanetZoneSetup : UDataAsset {
	struct TArray<struct UPlanetZone*> PlanetZones; // 0x30(0x10)

	struct UPlanetZone* GetPlanetZoneForBiome(struct UBiome* Biome); // Function FSD.PlanetZoneSetup.GetPlanetZoneForBiome // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0640
};

// Class FSD.PlanetZone
// Size: 0x70 (Inherited: 0x30)
struct UPlanetZone : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<struct UBiome*> Biomes; // 0x38(0x10)
	struct TArray<struct FRequiredMissionItem> RequiredMissions; // 0x48(0x10)
	bool MustBeUnlocked; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	struct FGuid SaveGameID; // 0x5c(0x10)
	char pad_6C[0x4]; // 0x6c(0x04)

	bool IsUnlocked(struct UFSDSaveGame* SaveGame); // Function FSD.PlanetZone.IsUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0c30
	struct FGuid GetSavegameID(); // Function FSD.PlanetZone.GetSavegameID // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c07d0
	struct TArray<struct UBiome*> GetBiomes(); // Function FSD.PlanetZone.GetBiomes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0240
};

// Class FSD.PlasmaCarbine
// Size: 0x740 (Inherited: 0x6e0)
struct APlasmaCarbine : AAmmoDrivenWeapon {
	float RateOfFireBoostOnFullShield; // 0x6e0(0x04)
	bool RemoveShieldOnOverheat; // 0x6e4(0x01)
	bool RemoveShieldOnReload; // 0x6e5(0x01)
	char pad_6E6[0x2]; // 0x6e6(0x02)
	float HeatEffectsThreshold; // 0x6e8(0x04)
	char pad_6EC[0x4]; // 0x6ec(0x04)
	struct UAnimMontage* FP_CharacterOverheatEndMontage; // 0x6f0(0x08)
	struct UAnimMontage* TP_CharacterOverheatEndMontage; // 0x6f8(0x08)
	struct UAnimMontage* WPN_ItemOverheatEndMontage; // 0x700(0x08)
	struct UAnimMontage* FP_CharacterReloadEndMontage; // 0x708(0x08)
	struct UAnimMontage* TP_CharacterReloadEndMontage; // 0x710(0x08)
	struct UAnimMontage* WPN_ItemReloadEndMontage; // 0x718(0x08)
	char pad_720[0x20]; // 0x720(0x20)

	void ApplyShieldDamage(); // Function FSD.PlasmaCarbine.ApplyShieldDamage // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1092350
};

// Class FSD.PlayerAnimInstance
// Size: 0x3a0 (Inherited: 0x270)
struct UPlayerAnimInstance : UAnimInstance {
	bool IsFirstPerson; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	float WalkTreshhold; // 0x274(0x04)
	struct APlayerCharacter* Character; // 0x278(0x08)
	struct UParticleSystem* DefaultFootstepParticle; // 0x280(0x08)
	struct USoundCue* DefaultFootStepSound; // 0x288(0x08)
	struct UItemCharacterAnimationSet* AnimationSetA; // 0x290(0x08)
	struct UItemCharacterAnimationSet* AnimationSetB; // 0x298(0x08)
	bool AnimationSetAIsPrimary; // 0x2a0(0x01)
	enum class ECharacterState CharacterState; // 0x2a1(0x01)
	char pad_2A2[0x2]; // 0x2a2(0x02)
	float Speed; // 0x2a4(0x04)
	float WalkAnimationSpeed; // 0x2a8(0x04)
	float RunAnimationSpeed; // 0x2ac(0x04)
	float WalkRate; // 0x2b0(0x04)
	float RunRate; // 0x2b4(0x04)
	float Direction; // 0x2b8(0x04)
	struct FRotator AimRotation; // 0x2bc(0x0c)
	bool IsInitialized; // 0x2c8(0x01)
	char pad_2C9[0x3]; // 0x2c9(0x03)
	float Pitch; // 0x2cc(0x04)
	bool IsStandingDown; // 0x2d0(0x01)
	bool IsInAir; // 0x2d1(0x01)
	bool IsMoving; // 0x2d2(0x01)
	bool IsWalking; // 0x2d3(0x01)
	bool IsSprinting; // 0x2d4(0x01)
	bool IsAiming; // 0x2d5(0x01)
	bool IsAlive; // 0x2d6(0x01)
	bool IsLyingDown; // 0x2d7(0x01)
	bool OnZipline; // 0x2d8(0x01)
	bool IsGrinding; // 0x2d9(0x01)
	bool IsParalyzed; // 0x2da(0x01)
	bool IsGrabbed; // 0x2db(0x01)
	bool IsAttached; // 0x2dc(0x01)
	bool BeingRevived; // 0x2dd(0x01)
	bool IsLookingAtMap; // 0x2de(0x01)
	bool IsControllingEnemy; // 0x2df(0x01)
	struct FVector ControllingEnemyRootOffset; // 0x2e0(0x0c)
	struct FVector ControllingEnemyDirectionAlpha; // 0x2ec(0x0c)
	float GliderAnimationLength; // 0x2f8(0x04)
	struct FGliderAnimSync GliderAnimSync; // 0x2fc(0x20)
	bool IsAllowedToPlayMovementAnim; // 0x31c(0x01)
	char pad_31D[0x3]; // 0x31d(0x03)
	float CropBeard; // 0x320(0x04)
	char pad_324[0x4]; // 0x324(0x04)
	struct UAnimMontage* ActiveUseMontage; // 0x328(0x08)
	char pad_330[0x8]; // 0x330(0x08)
	struct UUseAnimationSetting* CurrentUseSetting; // 0x338(0x08)
	struct UAnimMontage* EndUseMontageToPlay; // 0x340(0x08)
	float AimDuration; // 0x348(0x04)
	float ReviveProgress; // 0x34c(0x04)
	float ReviveExplicitTime; // 0x350(0x04)
	char pad_354[0xc]; // 0x354(0x0c)
	float IdleTimeForInspect; // 0x360(0x04)
	float RepeatDealayForInspect; // 0x364(0x04)
	enum class ECharacterMoveDirection CharacterMoveDirection; // 0x368(0x01)
	char pad_369[0x3]; // 0x369(0x03)
	float MoveAdjustmentAngle; // 0x36c(0x04)
	struct UItemCharacterAnimationSet* CarryAnimationSet; // 0x370(0x08)
	struct UItemCharacterAnimationSet* DefaultAnimationSet; // 0x378(0x08)
	char pad_380[0x20]; // 0x380(0x20)

	bool StopUseMontage(bool stopImmediately); // Function FSD.PlayerAnimInstance.StopUseMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x11c3560
	void StopInspectWeapon(); // Function FSD.PlayerAnimInstance.StopInspectWeapon // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void StartInspectWeapon(); // Function FSD.PlayerAnimInstance.StartInspectWeapon // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void SetAiming(); // Function FSD.PlayerAnimInstance.SetAiming // (Final|Native|Public|BlueprintCallable) // @ game+0x11c20d0
	void PlayUseMontages(struct UUseAnimationSetting* useSetting); // Function FSD.PlayerAnimInstance.PlayUseMontages // (Final|Native|Public|BlueprintCallable) // @ game+0x11c15e0
	bool IsPlayingMontageInGroup(struct FName GroupName); // Function FSD.PlayerAnimInstance.IsPlayingMontageInGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d9070
	struct UItemCharacterAnimationSet* GetAnimationSet(); // Function FSD.PlayerAnimInstance.GetAnimationSet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c01e0
};

// Class FSD.PlayerFPAnimInstance
// Size: 0x450 (Inherited: 0x3a0)
struct UPlayerFPAnimInstance : UPlayerAnimInstance {
	struct FRotator WeaponRecoil; // 0x398(0x0c)
	float HeadBobScale; // 0x3a4(0x04)
	float WeaponSwayRecoverySpeed; // 0x3a8(0x04)
	float WeaponSwayAlphaRecoverySpeed; // 0x3ac(0x04)
	struct FRotator WeaponSwayAngle; // 0x3b0(0x0c)
	float WeaponSwayMaxAngle; // 0x3bc(0x04)
	struct FRotator CameraAntiSwayAngle; // 0x3c0(0x0c)
	float WeaponSwayAlpha; // 0x3cc(0x04)
	float WeaponSwayToApply; // 0x3d0(0x04)
	struct FVector CameraOffset; // 0x3d4(0x0c)
	char pad_3E8[0x8]; // 0x3e8(0x08)
	struct FVector NegativeCameraOffset; // 0x3f0(0x0c)
	bool HeadOnlyMode; // 0x3fc(0x01)
	char pad_3FD[0x3]; // 0x3fd(0x03)
	struct FRotator HeadRotation; // 0x400(0x0c)
	char pad_40C[0x4]; // 0x40c(0x04)
	struct UAnimSequence* FP_Idle; // 0x410(0x08)
	struct UAnimSequence* FP_Walk; // 0x418(0x08)
	struct UAnimSequence* FP_Sprint; // 0x420(0x08)
	struct UAnimSequence* FP_JumpStart; // 0x428(0x08)
	struct UAnimSequence* FP_JumpLoop; // 0x430(0x08)
	struct UAnimSequence* FP_JumpLand; // 0x438(0x08)
	struct UAnimSequence* FP_JumpLand_Aim; // 0x440(0x08)
	struct UAnimSequence* FP_Downed; // 0x448(0x08)
};

// Class FSD.PlayerTPAnimInstance
// Size: 0x5f0 (Inherited: 0x3a0)
struct UPlayerTPAnimInstance : UPlayerAnimInstance {
	float RigidBodyBlend; // 0x398(0x04)
	bool RigidBodyOn; // 0x39c(0x01)
	float UpperBodyBlend; // 0x3a0(0x04)
	float AimingValue; // 0x3a4(0x04)
	struct FRotator CounerMoveadjustmentAngleRotator; // 0x3a8(0x0c)
	bool FullBodyAnimActive; // 0x3b4(0x01)
	float FullBodyBlendTime; // 0x3b8(0x04)
	float BodyTurnRecoverySpeed; // 0x3bc(0x04)
	float BodyTurnMaxAngle; // 0x3c0(0x04)
	float BodyTurnLerpEXP; // 0x3c4(0x04)
	float TurnAnimationDuration; // 0x3c8(0x04)
	char pad_3CE[0xa]; // 0x3ce(0x0a)
	bool bCaveLeechBiting; // 0x3d8(0x01)
	char pad_3D9[0x3]; // 0x3d9(0x03)
	float CaveLeechBiteReactDelay; // 0x3dc(0x04)
	char pad_3E0[0x4]; // 0x3e0(0x04)
	bool IsResettingBodyTurn; // 0x3e4(0x01)
	char pad_3E5[0x3]; // 0x3e5(0x03)
	struct FRotator BodyTurn; // 0x3e8(0x0c)
	struct FRotator CounterBodyTurn; // 0x3f4(0x0c)
	bool TurningLeft; // 0x400(0x01)
	bool TurningRight; // 0x401(0x01)
	char pad_402[0x2]; // 0x402(0x02)
	float TurnProgress; // 0x404(0x04)
	bool HasPickedUpItem; // 0x408(0x01)
	bool IsLyingDownNoTransition; // 0x409(0x01)
	char pad_40A[0x2]; // 0x40a(0x02)
	int32_t DanceMove; // 0x40c(0x04)
	struct UAnimSequence* DanceSequence; // 0x410(0x08)
	bool IsDancing; // 0x418(0x01)
	char pad_419[0x3]; // 0x419(0x03)
	float PickedUpItemBlend; // 0x41c(0x04)
	float AttachedBodyTurnFactor; // 0x420(0x04)
	float AttachedHeadTurnFactor; // 0x424(0x04)
	struct FRotator AttachedBodyRotation; // 0x428(0x0c)
	struct FRotator AttachedHeadRotation; // 0x434(0x0c)
	char pad_440[0x8]; // 0x440(0x08)
	struct UBlendSpace1D* TP_LookUpDown; // 0x448(0x08)
	struct UBlendSpace1D* TP_LookUpDown_Aim; // 0x450(0x08)
	struct UBlendSpace1D* A_TP_LookUpDown_Aim; // 0x458(0x08)
	struct UBlendSpace1D* B_TP_LookUpDown_Aim; // 0x460(0x08)
	struct UAnimSequence* TP_JumpLoop; // 0x468(0x08)
	struct UAnimSequence* TP_JumpLoop_Aim; // 0x470(0x08)
	struct UAnimSequence* TP_JumpStart; // 0x478(0x08)
	struct UAnimSequence* TP_JumpStart_Aim; // 0x480(0x08)
	struct UAnimSequence* TP_Sprint; // 0x488(0x08)
	struct UAnimSequence* A_TP_Idle; // 0x490(0x08)
	struct UAnimSequence* B_TP_Idle; // 0x498(0x08)
	struct UAnimSequence* A_TP_Idle_Aim; // 0x4a0(0x08)
	struct UAnimSequence* B_TP_Idle_Aim; // 0x4a8(0x08)
	struct UAnimSequence* TP_LookForward; // 0x4b0(0x08)
	struct UAnimSequence* A_TP_LookForward; // 0x4b8(0x08)
	struct UAnimSequence* B_TP_LookForward; // 0x4c0(0x08)
	struct UAnimSequence* A_TP_LookForward_Aim; // 0x4c8(0x08)
	struct UAnimSequence* B_TP_LookForward_Aim; // 0x4d0(0x08)
	struct UAnimSequence* A_TP_Walk_Forward; // 0x4d8(0x08)
	struct UAnimSequence* B_TP_Walk_Forward; // 0x4e0(0x08)
	struct UAnimSequence* A_TP_Run_Forward; // 0x4e8(0x08)
	struct UAnimSequence* B_TP_Run_Forward; // 0x4f0(0x08)
	struct UAnimSequence* A_TP_Walk_Forward_Aim; // 0x4f8(0x08)
	struct UAnimSequence* B_TP_Walk_Forward_Aim; // 0x500(0x08)
	struct UAnimSequence* A_TP_Run_Forward_Aim; // 0x508(0x08)
	struct UAnimSequence* B_TP_Run_Forward_Aim; // 0x510(0x08)
	struct UAnimSequence* A_TP_Walk_Right; // 0x518(0x08)
	struct UAnimSequence* B_TP_Walk_Right; // 0x520(0x08)
	struct UAnimSequence* A_TP_Run_Right; // 0x528(0x08)
	struct UAnimSequence* B_TP_Run_Right; // 0x530(0x08)
	struct UAnimSequence* A_TP_Walk_Right_Aim; // 0x538(0x08)
	struct UAnimSequence* B_TP_Walk_Right_Aim; // 0x540(0x08)
	struct UAnimSequence* A_TP_Run_Right_Aim; // 0x548(0x08)
	struct UAnimSequence* B_TP_Run_Right_Aim; // 0x550(0x08)
	struct UAnimSequence* A_TP_Walk_Left; // 0x558(0x08)
	struct UAnimSequence* B_TP_Walk_Left; // 0x560(0x08)
	struct UAnimSequence* A_TP_Run_Left; // 0x568(0x08)
	struct UAnimSequence* B_TP_Run_Left; // 0x570(0x08)
	struct UAnimSequence* A_TP_Walk_Left_Aim; // 0x578(0x08)
	struct UAnimSequence* B_TP_Walk_Left_Aim; // 0x580(0x08)
	struct UAnimSequence* A_TP_Run_Left_Aim; // 0x588(0x08)
	struct UAnimSequence* B_TP_Run_Left_Aim; // 0x590(0x08)
	struct UAnimSequence* A_TP_Walk_Back; // 0x598(0x08)
	struct UAnimSequence* B_TP_Walk_Back; // 0x5a0(0x08)
	struct UAnimSequence* A_TP_Run_Back; // 0x5a8(0x08)
	struct UAnimSequence* B_TP_Run_Back; // 0x5b0(0x08)
	struct UAnimSequence* A_TP_Walk_Back_Aim; // 0x5b8(0x08)
	struct UAnimSequence* B_TP_Walk_Back_Aim; // 0x5c0(0x08)
	struct UAnimSequence* A_TP_Run_Back_Aim; // 0x5c8(0x08)
	struct UAnimSequence* B_TP_Run_Back_Aim; // 0x5d0(0x08)
	struct UAnimSequence* TP_Revived; // 0x5d8(0x08)
	struct UAnimSequence* TP_Downed; // 0x5e0(0x08)
	struct UAnimSequence* TP_Downed_Loop; // 0x5e8(0x08)

	void SetOverrideFullBody(bool overrideEnabled); // Function FSD.PlayerTPAnimInstance.SetOverrideFullBody // (Final|Native|Public|BlueprintCallable) // @ game+0x11c2740
};

// Class FSD.PlayerCameraDrone
// Size: 0x408 (Inherited: 0x280)
struct APlayerCameraDrone : APawn {
	struct UPawnMovementComponent* Movement; // 0x280(0x08)
	int32_t MenuTab; // 0x288(0x04)
	bool SplineMeshIsVisible; // 0x28c(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	float SplineSpeed; // 0x290(0x04)
	float MouseSensitivity; // 0x294(0x04)
	float CameraRoll; // 0x298(0x04)
	bool CameraDoesShake; // 0x29c(0x01)
	bool IsFollowingPlayerRotation; // 0x29d(0x01)
	char pad_29E[0x2]; // 0x29e(0x02)
	struct FVector FollowPositionOffset; // 0x2a0(0x0c)
	bool UseFreeRotation; // 0x2ac(0x01)
	bool UseDOF; // 0x2ad(0x01)
	char pad_2AE[0x2]; // 0x2ae(0x02)
	struct AActor* VanitySpawnable; // 0x2b0(0x08)
	char pad_2B8[0x20]; // 0x2b8(0x20)
	struct AActor* Flare; // 0x2d8(0x08)
	char pad_2E0[0x20]; // 0x2e0(0x20)
	struct AActor* BounceFlare; // 0x300(0x08)
	char pad_308[0x68]; // 0x308(0x68)
	struct AActor* Spline; // 0x370(0x08)
	struct AActor* SplineMesh; // 0x378(0x08)
	char pad_380[0x88]; // 0x380(0x88)

	bool ToggleSplineMeshVisibility(); // Function FSD.PlayerCameraDrone.ToggleSplineMeshVisibility // (Final|Native|Protected|BlueprintCallable) // @ game+0x11c37a0
	void SetRotationalPivotToPlayer(); // Function FSD.PlayerCameraDrone.SetRotationalPivotToPlayer // (Final|Native|Protected|BlueprintCallable) // @ game+0x11c2850
	void SetFlareLightSettings(float Intensity, float range, float Color); // Function FSD.PlayerCameraDrone.SetFlareLightSettings // (Final|Native|Protected|BlueprintCallable) // @ game+0x11c2460
	bool SetCameraShakeAmount(float Value); // Function FSD.PlayerCameraDrone.SetCameraShakeAmount // (Final|Native|Protected|BlueprintCallable) // @ game+0x11c2350
	void SetBounceFlareLightSettings(float Intensity, float range, float Color); // Function FSD.PlayerCameraDrone.SetBounceFlareLightSettings // (Final|Native|Protected|BlueprintCallable) // @ game+0x11c21c0
	void SaveLightConfig(); // Function FSD.PlayerCameraDrone.SaveLightConfig // (Final|Native|Private|BlueprintCallable) // @ game+0x11c17c0
	void ResetFollowVariables(); // Function FSD.PlayerCameraDrone.ResetFollowVariables // (Final|Native|Protected|BlueprintCallable) // @ game+0x11c1720
	void ResetAllLights(); // Function FSD.PlayerCameraDrone.ResetAllLights // (Final|Native|Protected|BlueprintCallable) // @ game+0x11c1700
	void OnFlareHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComponent, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.PlayerCameraDrone.OnFlareHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x11c10f0
	void LoadLightConfig(); // Function FSD.PlayerCameraDrone.LoadLightConfig // (Final|Native|Private|BlueprintCallable) // @ game+0x11c0e00
	struct FVector GetFlareLightSettings(); // Function FSD.PlayerCameraDrone.GetFlareLightSettings // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x11c04f0
	struct UCameraComponent* GetCamera(); // Function FSD.PlayerCameraDrone.GetCamera // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct FVector GetBounceFlareLightSettings(); // Function FSD.PlayerCameraDrone.GetBounceFlareLightSettings // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x11c02d0
	void CreateHUD(); // Function FSD.PlayerCameraDrone.CreateHUD // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ClearFocusPoint(); // Function FSD.PlayerCameraDrone.ClearFocusPoint // (Final|Native|Protected|BlueprintCallable) // @ game+0x11bfd20
	void BeginCountdown(); // Function FSD.PlayerCameraDrone.BeginCountdown // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1122630
};

// Class FSD.PlayerCharacter
// Size: 0xee0 (Inherited: 0x4c0)
struct APlayerCharacter : ACharacter {
	char pad_4C0[0x18]; // 0x4c0(0x18)
	struct FMulticastInlineDelegate OnStartedUsingItem; // 0x4d8(0x10)
	struct FMulticastInlineDelegate OnStoppedUsingItem; // 0x4e8(0x10)
	struct FMulticastInlineDelegate OnFirePressed; // 0x4f8(0x10)
	struct FMulticastInlineDelegate OnFireReleased; // 0x508(0x10)
	struct FMulticastInlineDelegate OnGrenadePressed; // 0x518(0x10)
	struct FMulticastInlineDelegate OnPerkInitialized; // 0x528(0x10)
	struct FMulticastInlineDelegate OnInstantRevivePossibleEvent; // 0x538(0x10)
	struct FMulticastInlineDelegate OnCollectedEverything; // 0x548(0x10)
	struct FMulticastInlineDelegate OnCollectedSchematic; // 0x558(0x10)
	struct FMulticastInlineDelegate OnCollectedSkin; // 0x568(0x10)
	struct FMulticastInlineDelegate OnCollectedDrink; // 0x578(0x10)
	struct FMulticastInlineDelegate OnCollectedVictoryPose; // 0x588(0x10)
	struct FMulticastInlineDelegate OnCollectedPickaxePart; // 0x598(0x10)
	struct FMulticastInlineDelegate OnCollectedVanityItem; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnCameraModeChanged; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnDownCameraTargetChanged; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnActionHoldProgress; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnThrowCarriableProgress; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnJumpPressed; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnJumpReleased; // 0x608(0x10)
	struct FMulticastInlineDelegate OnSecondaryFirePressed; // 0x618(0x10)
	struct FMulticastInlineDelegate OnSecondaryFireReleased; // 0x628(0x10)
	struct FMulticastInlineDelegate OnManualMiningBegin; // 0x638(0x10)
	struct FMulticastInlineDelegate OnManualMiningEnd; // 0x648(0x10)
	struct FMulticastInlineDelegate OnLaserPointerPressed; // 0x658(0x10)
	struct FMulticastInlineDelegate OnLaserPointerReleased; // 0x668(0x10)
	struct FMulticastInlineDelegate OnTerrainScannerPressed; // 0x678(0x10)
	struct FMulticastInlineDelegate OnTerrainScannerReleased; // 0x688(0x10)
	struct FMulticastInlineDelegate OnFlareThrown; // 0x698(0x10)
	struct FMulticastInlineDelegate OnDropItem; // 0x6a8(0x10)
	struct FMulticastInlineDelegate OnUpdateMeshes; // 0x6b8(0x10)
	struct FMulticastInlineDelegate OnOpenChat; // 0x6c8(0x10)
	struct FMulticastInlineDelegate OnAcceptInvite; // 0x6d8(0x10)
	struct FMulticastInlineDelegate OnRejectInvite; // 0x6e8(0x10)
	struct FMulticastInlineDelegate OnIgnoreInvite; // 0x6f8(0x10)
	struct FMulticastInlineDelegate OnToggleOutline; // 0x708(0x10)
	struct FMulticastInlineDelegate OnToggleMapTool; // 0x718(0x10)
	struct FMulticastInlineDelegate OnToggleScanTool; // 0x728(0x10)
	struct FMulticastInlineDelegate OnDepthChanged; // 0x738(0x10)
	struct FMulticastInlineDelegate OnCharacterStateChanged; // 0x748(0x10)
	struct FMulticastInlineDelegate OnCharacterDeathChange; // 0x758(0x10)
	struct FMulticastInlineDelegate OnDamagedEnemy; // 0x768(0x10)
	struct FMulticastInlineDelegate OnLaserPointerEvent; // 0x778(0x10)
	struct FMulticastInlineDelegate OnSecondaryLaserPointerEvent; // 0x788(0x10)
	struct FMulticastInlineDelegate OnSaluteEvent; // 0x798(0x10)
	struct FMulticastInlineDelegate OnPlayerShout; // 0x7a8(0x10)
	struct FMulticastInlineDelegate OnBoscoSalute; // 0x7b8(0x10)
	char pad_7C8[0x10]; // 0x7c8(0x10)
	struct FMulticastInlineDelegate OnRevivedEvent; // 0x7d8(0x10)
	struct FMulticastInlineDelegate OnReviveCallEvent; // 0x7e8(0x10)
	struct FMulticastInlineDelegate OnRevivedOtherCharacter; // 0x7f8(0x10)
	struct FMulticastInlineDelegate OnHeadlightOnChanged; // 0x808(0x10)
	struct FMulticastInlineDelegate OnCallDonkey; // 0x818(0x10)
	struct FGameplayTagContainer GameplayTags; // 0x828(0x20)
	struct UZipLineStateComponent* ZipLineStateComponent; // 0x848(0x08)
	struct TArray<struct AActor*> EscapableGrabberEnemies; // 0x850(0x10)
	struct FMulticastInlineDelegate OnEnemyStartedTracking; // 0x860(0x10)
	struct FMulticastInlineDelegate OnEnemyEndedTracking; // 0x870(0x10)
	struct FMulticastInlineDelegate OnKilledGrabber; // 0x880(0x10)
	struct FMulticastInlineDelegate OnPerkActivationTimerFinished; // 0x890(0x10)
	struct UPerkHUDActivationWidget* BoundPerkActivationW; // 0x8a0(0x08)
	float PerkActivationTimer; // 0x8a8(0x04)
	char pad_8AC[0x4]; // 0x8ac(0x04)
	struct FMulticastInlineDelegate OnCanEscapeGrabberChanged; // 0x8b0(0x10)
	struct AActor* GrabbedByClass; // 0x8c0(0x08)
	struct USoundCue* PowerAttackRefreshedSound; // 0x8c8(0x08)
	struct FMulticastInlineDelegate OnCoolDownProgress; // 0x8d0(0x10)
	bool bIsBeingBittenByCaveLeech; // 0x8e0(0x01)
	char pad_8E1[0x7]; // 0x8e1(0x07)
	struct UWidgetInteractionComponent* WidgetInteraction; // 0x8e8(0x08)
	struct TArray<struct FPlatformComponent> PlatformComponentClasses; // 0x8f0(0x10)
	char pad_900[0x14]; // 0x900(0x14)
	struct FDownCameraSettings DownCameraSettings; // 0x914(0x18)
	char pad_92C[0x14]; // 0x92c(0x14)
	struct TArray<struct TWeakObjectPtr<struct AShieldGeneratorActor>> ActiveShieldGenerators; // 0x940(0x10)
	char pad_950[0x4]; // 0x950(0x04)
	struct FGuid SaveGameID; // 0x954(0x10)
	struct FVector EstimatedVelocity; // 0x964(0x0c)
	char pad_970[0x10]; // 0x970(0x10)
	struct FHoldButton FlareHeadlightButton; // 0x980(0x28)
	struct FHoldButton CycleItemButton; // 0x9a8(0x28)
	char pad_9D0[0x8]; // 0x9d0(0x08)
	struct FHoldButton ToggleHUDButton; // 0x9d8(0x28)
	float EquipLaserpointerHoldDuration; // 0xa00(0x04)
	bool IsPressingMovementInputKey; // 0xa04(0x01)
	char pad_A05[0x1b]; // 0xa05(0x1b)
	struct UPlayerCharacterID* characterID; // 0xa20(0x08)
	SoftClassProperty TutorialManagerType; // 0xa28(0x28)
	SoftClassProperty TutorialManagerSpacerig; // 0xa50(0x28)
	struct USkeletalMeshComponent* FPMesh; // 0xa78(0x08)
	struct UCameraComponent* FirstPersonCamera; // 0xa80(0x08)
	struct USceneComponent* FirstPersonRoot; // 0xa88(0x08)
	struct UActorTrackingComponent* ActorTracking; // 0xa90(0x08)
	struct UCharacterIntoxicationComponent* IntoxicationComponent; // 0xa98(0x08)
	struct UMissionStatsCollector* MissionStatsCollector; // 0xaa0(0x08)
	struct USpringArmComponent* ThirdPersonSpringArm; // 0xaa8(0x08)
	struct UCameraComponent* ThirdPersonCamera; // 0xab0(0x08)
	struct UPointLightComponent* ThirdPersonLight; // 0xab8(0x08)
	struct USpringArmComponent* FollowSpringArm; // 0xac0(0x08)
	struct UCameraComponent* FollowCamera; // 0xac8(0x08)
	struct UCameraComponent* DownCamera; // 0xad0(0x08)
	struct UCharacterCameraController* CameraController; // 0xad8(0x08)
	struct UPlayerHealthComponent* HealthComponent; // 0xae0(0x08)
	struct UCharacterSightComponent* SightComponent; // 0xae8(0x08)
	struct UInventoryComponent* InventoryComponent; // 0xaf0(0x08)
	struct UCharacterUseComponent* UseComponent; // 0xaf8(0x08)
	struct USingleUsableComponent* UsableComponent; // 0xb00(0x08)
	struct UOutlineComponent* OutlineComponent; // 0xb08(0x08)
	struct UTrailComponent* TrailComponent; // 0xb10(0x08)
	struct UCharacterRecoilComponent* RecoilComponent; // 0xb18(0x08)
	struct UStatusEffectsComponent* StatusEffectsComponent; // 0xb20(0x08)
	struct UPawnStatsComponent* PawnStatsComponent; // 0xb28(0x08)
	struct UPlayerAfflictionComponent* PawnAfflictionComponent; // 0xb30(0x08)
	struct UPlayerAttackPositionComponent* AttackerPositioningComponent; // 0xb38(0x08)
	struct UCommunicationComponent* CommunicationComponent; // 0xb40(0x08)
	struct UPlayerTemperatureComponent* TemperatureComponent; // 0xb48(0x08)
	struct UPlayerReactiveTerrainTrackerComponent* ReactiveTerrainTracker; // 0xb50(0x08)
	struct UInstantUsable* TrackGrindUsableComponent; // 0xb58(0x08)
	float RunningSpeed; // 0xb60(0x04)
	float RunBoost; // 0xb64(0x04)
	float RunBoostChargeTime; // 0xb68(0x04)
	char pad_B6C[0x4]; // 0xb6c(0x04)
	struct USoundCue* RunBoostActivationSound; // 0xb70(0x08)
	struct UParticleSystem* RunBoostParticles; // 0xb78(0x08)
	char pad_B80[0x8]; // 0xb80(0x08)
	struct UPawnAffliction* RunBoostAffliction; // 0xb88(0x08)
	struct UPhysicsAsset* HangingPhysicsAsset; // 0xb90(0x08)
	float HangingSimulationBlend; // 0xb98(0x04)
	char pad_B9C[0x8]; // 0xb9c(0x08)
	bool IsPlayableCharacter; // 0xba4(0x01)
	char pad_BA5[0x3]; // 0xba5(0x03)
	struct UAudioComponent* SprintSoundComponent; // 0xba8(0x08)
	struct USoundCue* SpringSound; // 0xbb0(0x08)
	struct FAnalogAimSettings AimSettings; // 0xbb8(0x50)
	float DownedCameraMinPitch; // 0xc08(0x04)
	float DownedCameraMaxPitch; // 0xc0c(0x04)
	float TurnToFaceScannerAngularSpeed; // 0xc10(0x04)
	float Turn180Time; // 0xc14(0x04)
	float CarryingMovementSpeedPenalty; // 0xc18(0x04)
	float CarryingMaxFallVelocity; // 0xc1c(0x04)
	float MaxThrowProgress; // 0xc20(0x04)
	float MaxThrowHoldDuration; // 0xc24(0x04)
	char pad_C28[0x4]; // 0xc28(0x04)
	float CarryingThrowMinForce; // 0xc2c(0x04)
	float CarryingThrowMaxForce; // 0xc30(0x04)
	char pad_C34[0x4]; // 0xc34(0x04)
	struct UStatusEffect* CarryingThrowingStatusEffect; // 0xc38(0x08)
	char pad_C40[0x4]; // 0xc40(0x04)
	float ThrowCarriableProgress; // 0xc44(0x04)
	struct TMap<char, struct UCharacterStateComponent*> CharacterStates; // 0xc48(0x50)
	struct TWeakObjectPtr<struct ATutorialManager> TutorialManager; // 0xc98(0x08)
	struct UCharacterStateComponent* ActiveCharacterState; // 0xca0(0x08)
	char pad_CA8[0x3]; // 0xca8(0x03)
	bool IsInDropPod; // 0xcab(0x01)
	bool IsInEscapePod; // 0xcac(0x01)
	char pad_CAD[0x3]; // 0xcad(0x03)
	float ButtonMemoryDuration; // 0xcb0(0x04)
	bool IsRunning; // 0xcb4(0x01)
	bool CanDash; // 0xcb5(0x01)
	char pad_CB6[0x6]; // 0xcb6(0x06)
	float DashInputWindow; // 0xcbc(0x04)
	float DashFowardMovementMinRequirement; // 0xcc0(0x04)
	float DashRightMovementMaxRequirement; // 0xcc4(0x04)
	float DashControllerMinValueRequired; // 0xcc8(0x04)
	float DashCooldown; // 0xccc(0x04)
	struct UStatusEffect* DashStatusEffect; // 0xcd0(0x08)
	float ForwardInput; // 0xcd8(0x04)
	float RightInput; // 0xcdc(0x04)
	float ControllerForwardInput; // 0xce0(0x04)
	float ControllerRightInput; // 0xce4(0x04)
	char pad_CE8[0xc]; // 0xce8(0x0c)
	float StoppedRunningTime; // 0xcf4(0x04)
	float ShoutPressedTime; // 0xcf8(0x04)
	bool bIsUsingItemPressed; // 0xcfc(0x01)
	bool bIsUsingPressed; // 0xcfd(0x01)
	char pad_CFE[0x2]; // 0xcfe(0x02)
	float UsingDelay; // 0xd00(0x04)
	bool HeadLightOn; // 0xd04(0x01)
	bool IsUsing; // 0xd05(0x01)
	char pad_D06[0x2]; // 0xd06(0x02)
	float JumpPressedTime; // 0xd08(0x04)
	bool CanMove; // 0xd0c(0x01)
	bool CanAim; // 0xd0d(0x01)
	bool CanUseItem; // 0xd0e(0x01)
	bool CanChangeItems; // 0xd0f(0x01)
	bool CanMine; // 0xd10(0x01)
	bool IsStandingDown; // 0xd11(0x01)
	bool InDanceRange; // 0xd12(0x01)
	bool IsDancing; // 0xd13(0x01)
	float DanceStartTime; // 0xd14(0x04)
	struct UFSDAchievement* HappyFeetAchievement; // 0xd18(0x08)
	int32_t DanceMove; // 0xd20(0x04)
	enum class ECharacterCameraMode CameraMode; // 0xd24(0x01)
	bool IsInCharacterSelectionWorld; // 0xd25(0x01)
	char pad_D26[0x2]; // 0xd26(0x02)
	float IdleTime; // 0xd28(0x04)
	char pad_D2C[0x4]; // 0xd2c(0x04)
	struct UAnimMontage* FPDrinkSalute; // 0xd30(0x08)
	struct UAnimMontage* TPDrinkSalute; // 0xd38(0x08)
	struct UDialogDataAsset* SaluteShout; // 0xd40(0x08)
	struct UDialogDataAsset* DrinkShout; // 0xd48(0x08)
	struct UAnimMontage* CurrentSaluteMontage; // 0xd50(0x08)
	char pad_D58[0x8]; // 0xd58(0x08)
	struct TArray<struct UMaterialInterface*> CachedMaterials; // 0xd60(0x10)
	bool BlockTrackGrindOnLanded; // 0xd70(0x01)
	char pad_D71[0x17]; // 0xd71(0x17)
	struct FHeroInfo HeroInfo; // 0xd88(0x88)
	struct FString SteamClassID; // 0xe10(0x10)
	struct UMaterialInstanceDynamic* RadarMaterialInstance; // 0xe20(0x08)
	int32_t RadarMaterialAngleParameterIndex; // 0xe28(0x04)
	struct FVector LastUpdateVisibiltyPos; // 0xe2c(0x0c)
	struct FVector SpawnLocation; // 0xe38(0x0c)
	char pad_E44[0x4]; // 0xe44(0x04)
	struct UFSDPhysicalMaterial* FallbackPhysicalMaterial; // 0xe48(0x08)
	char pad_E50[0x1]; // 0xe50(0x01)
	bool ClientReady; // 0xe51(0x01)
	char pad_E52[0x6]; // 0xe52(0x06)
	struct UCharacterStateComponent* NextCharacterState; // 0xe58(0x08)
	char pad_E60[0x8]; // 0xe60(0x08)
	bool PlayerIsLeavingInDroppod; // 0xe68(0x01)
	char pad_E69[0xb]; // 0xe69(0x0b)
	bool CanInstantRevive; // 0xe74(0x01)
	char pad_E75[0x1]; // 0xe75(0x01)
	bool HasInitializedPerks; // 0xe76(0x01)
	char pad_E77[0x11]; // 0xe77(0x11)
	struct UCharacterVanityComponent* CharacterVanity; // 0xe88(0x08)
	char pad_E90[0x8]; // 0xe90(0x08)
	struct FCameraSpringSettings CameraSpringSettings; // 0xe98(0x3c)
	char pad_ED4[0xc]; // 0xed4(0x0c)

	void UseZipLine(struct AZipLineProjectile* ZipLine, struct FVector Start, struct FVector End); // Function FSD.PlayerCharacter.UseZipLine // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11c37f0
	void Unparalyze(); // Function FSD.PlayerCharacter.Unparalyze // (Final|Native|Public|BlueprintCallable) // @ game+0x11c37d0
	void ToggleScanTool(bool Visible); // Function FSD.PlayerCharacter.ToggleScanTool // (Final|Native|Protected|BlueprintCallable) // @ game+0x11c3710
	void ToggleHUDReleased(); // Function FSD.PlayerCharacter.ToggleHUDReleased // (Final|Native|Protected) // @ game+0x11c3690
	void ToggleHUDPressed(); // Function FSD.PlayerCharacter.ToggleHUDPressed // (Final|Native|Protected) // @ game+0x11c3670
	void ToggleHeadLight(); // Function FSD.PlayerCharacter.ToggleHeadLight // (Final|Native|Public|BlueprintCallable) // @ game+0x11c36b0
	void ThrowFlareReleased(); // Function FSD.PlayerCharacter.ThrowFlareReleased // (Final|Native|Protected) // @ game+0x11c3650
	void ThrowFlarePressed(); // Function FSD.PlayerCharacter.ThrowFlarePressed // (Final|Native|Protected) // @ game+0x11c3630
	void ThrowFlare(); // Function FSD.PlayerCharacter.ThrowFlare // (Final|Native|Public) // @ game+0x11c3610
	void StopUsingItem(); // Function FSD.PlayerCharacter.StopUsingItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x11c35f0
	void StartTutorials(bool ResetTutorials); // Function FSD.PlayerCharacter.StartTutorials // (Final|Native|Public|BlueprintCallable) // @ game+0x11c34d0
	void StartPerkActivation(struct UPerkHUDActivationWidget* PerkActivationWidget, float HoldTime); // Function FSD.PlayerCharacter.StartPerkActivation // (Final|Native|Public|BlueprintCallable) // @ game+0x11c3400
	struct UAudioComponent* SpawnSoundAttached(struct USoundBase* Sound, struct USceneComponent* AttachToComponent, float PriorityOverride, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool SendVibration); // Function FSD.PlayerCharacter.SpawnSoundAttached // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11c2fd0
	struct UAudioComponent* SpawnSoundAtLocation(struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool SendVibration); // Function FSD.PlayerCharacter.SpawnSoundAtLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11c2ce0
	struct UAudioComponent* SpawnSound2D(struct USoundBase* Sound, float PriorityOverride, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, bool SendVibration); // Function FSD.PlayerCharacter.SpawnSound2D // (Final|Native|Public|BlueprintCallable) // @ game+0x11c2a50
	void ShowSimpleHoldProgress(struct APlayerController* PlayerController, struct FText InDescription, float InProgress); // Function FSD.PlayerCharacter.ShowSimpleHoldProgress // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0x11c2900
	void SetStandingDown(bool standingDown); // Function FSD.PlayerCharacter.SetStandingDown // (Final|Native|Public|BlueprintCallable) // @ game+0x11c2870
	void SetRadarMaterialInstance(struct UMaterialInstanceDynamic* matInstance); // Function FSD.PlayerCharacter.SetRadarMaterialInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x11c27d0
	void SetOutsideShieldGenerator(struct AShieldGeneratorActor* Shield); // Function FSD.PlayerCharacter.SetOutsideShieldGenerator // (Final|Native|Public|BlueprintCallable) // @ game+0x11c26c0
	void SetIsCharacterSelectionModel(); // Function FSD.PlayerCharacter.SetIsCharacterSelectionModel // (Final|Native|Public|BlueprintCallable) // @ game+0x11c26a0
	void SetInsideShieldGenerator(struct AShieldGeneratorActor* Shield); // Function FSD.PlayerCharacter.SetInsideShieldGenerator // (Final|Native|Public|BlueprintCallable) // @ game+0x11c2620
	void SetInCharacterSelectionWorld(); // Function FSD.PlayerCharacter.SetInCharacterSelectionWorld // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11c2600
	void SetHeadLight(bool On); // Function FSD.PlayerCharacter.SetHeadLight // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x11c2570
	void SetFallbackPhysicalMaterial(struct UFSDPhysicalMaterial* PhysMat); // Function FSD.PlayerCharacter.SetFallbackPhysicalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x11c23e0
	void SetCameraMode(enum class ECharacterCameraMode NewCameraMode); // Function FSD.PlayerCharacter.SetCameraMode // (Final|Native|Public|BlueprintCallable) // @ game+0x11c22d0
	void SetAttached(struct USceneComponent* AttachTo, bool DelayUntilLanded); // Function FSD.PlayerCharacter.SetAttached // (Final|Native|Public|BlueprintCallable) // @ game+0x11c20f0
	void Server_TriggerDash(); // Function FSD.PlayerCharacter.Server_TriggerDash // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11c20b0
	void Server_ThrowCarriedItem(struct FVector_NetQuantize force); // Function FSD.PlayerCharacter.Server_ThrowCarriedItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x11c2020
	void Server_StartSalute(struct UAnimMontage* startSalute); // Function FSD.PlayerCharacter.Server_StartSalute // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11c1f90
	void Server_Shouted(); // Function FSD.PlayerCharacter.Server_Shouted // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x11c1f70
	void Server_SetUsing(bool characterIsUsing); // Function FSD.PlayerCharacter.Server_SetUsing // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11c1ee0
	void Server_SetRunning(bool characterIsRunning); // Function FSD.PlayerCharacter.Server_SetRunning // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11c1e50
	void Server_SetRunBoostActive(bool IsActive); // Function FSD.PlayerCharacter.Server_SetRunBoostActive // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11c1dc0
	void Server_SetIsThrowingCarriable(bool isThrowing); // Function FSD.PlayerCharacter.Server_SetIsThrowingCarriable // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11c1d30
	void Server_SetIsPressingMovementInput(bool aIsPushingInput); // Function FSD.PlayerCharacter.Server_SetIsPressingMovementInput // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x11c1ca0
	void Server_SetIsJumpPressed(bool InJumpPressed); // Function FSD.PlayerCharacter.Server_SetIsJumpPressed // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11c1c10
	void Server_SetDispenserReward(struct AEventRewardDispenser* Dispenser, struct USchematic* Reward); // Function FSD.PlayerCharacter.Server_SetDispenserReward // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x11c1b40
	void Server_SetClientReady(); // Function FSD.PlayerCharacter.Server_SetClientReady // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11c1b20
	void Server_InstantRevive(struct APlayerCharacter* ReviveTarget, enum class EInputKeys Key); // Function FSD.PlayerCharacter.Server_InstantRevive // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x11c1a50
	void Server_EscapeFromGrabber(); // Function FSD.PlayerCharacter.Server_EscapeFromGrabber // (Net|NetReliableNative|Event|Protected|NetServer|BlueprintCallable) // @ game+0x1092350
	void Server_CancelThrowingCarriable(); // Function FSD.PlayerCharacter.Server_CancelThrowingCarriable // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11c1a30
	void Server_CallDonkey(); // Function FSD.PlayerCharacter.Server_CallDonkey // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11c1a10
	void Server_AddImpulseToActor(struct AFSDPhysicsActor* Target, struct FVector_NetQuantize Impulse, struct FVector_NetQuantize Location, struct FVector_NetQuantize AngularImpulse); // Function FSD.PlayerCharacter.Server_AddImpulseToActor // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x11c18a0
	void Server_AddImpulse(struct FVector_NetQuantizeNormal Direction, float force); // Function FSD.PlayerCharacter.Server_AddImpulse // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x11c17e0
	void SendLevelUpStatistics(int32_t currentRank); // Function FSD.PlayerCharacter.SendLevelUpStatistics // (Final|Native|Public) // @ game+0x10c5380
	void ReviveProgress(float Progress); // Function FSD.PlayerCharacter.ReviveProgress // (Final|Native|Public) // @ game+0x11c1740
	void RequestChangeInGravityScale(float newGravityScale); // Function FSD.PlayerCharacter.RequestChangeInGravityScale // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x11c1680
	void RejectInvite(); // Function FSD.PlayerCharacter.RejectInvite // (Final|Native|Protected) // @ game+0x11c1660
	void ReceiveOnHeadlightOn(); // Function FSD.PlayerCharacter.ReceiveOnHeadlightOn // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveEscapedFromGrabber(); // Function FSD.PlayerCharacter.ReceiveEscapedFromGrabber // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Receive_ShowFieldMedicInstantReviveEffects(); // Function FSD.PlayerCharacter.Receive_ShowFieldMedicInstantReviveEffects // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void PrepareForEndScreen(); // Function FSD.PlayerCharacter.PrepareForEndScreen // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void PilotVehicle(struct AActor* Vehicle); // Function FSD.PlayerCharacter.PilotVehicle // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11c1560
	void Paralyze(struct AActor* ParalyzedBy); // Function FSD.PlayerCharacter.Paralyze // (Final|Native|Public|BlueprintCallable) // @ game+0x11c14e0
	void OpenChat(); // Function FSD.PlayerCharacter.OpenChat // (Final|Native|Protected) // @ game+0x11c14c0
	void OnResourceFull(struct UCappedResource* Resource); // Function FSD.PlayerCharacter.OnResourceFull // (Final|Native|Protected) // @ game+0x11c1440
	void OnRep_IsStandingDown(); // Function FSD.PlayerCharacter.OnRep_IsStandingDown // (Final|Native|Protected) // @ game+0x11c1420
	void OnRep_IsDancing(); // Function FSD.PlayerCharacter.OnRep_IsDancing // (Final|Native|Protected) // @ game+0x11c1400
	void OnRep_HeadLightOn(); // Function FSD.PlayerCharacter.OnRep_HeadLightOn // (Final|Native|Protected) // @ game+0x11c13e0
	void OnRep_DanceMove(); // Function FSD.PlayerCharacter.OnRep_DanceMove // (Final|Native|Protected) // @ game+0x11c13c0
	void OnRep_CharacterState(struct UCharacterStateComponent* oldState); // Function FSD.PlayerCharacter.OnRep_CharacterState // (Final|Native|Protected) // @ game+0x11c1340
	void OnPerkActivationFinished(); // Function FSD.PlayerCharacter.OnPerkActivationFinished // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnItemEquipped(struct AItem* Item); // Function FSD.PlayerCharacter.OnItemEquipped // (Final|Native|Protected) // @ game+0x11c12c0
	void OnCharacterUsed(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.PlayerCharacter.OnCharacterUsed // (Final|Native|Protected|BlueprintCallable) // @ game+0x11c1030
	void OnCharacterBeginUse(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.PlayerCharacter.OnCharacterBeginUse // (Final|Native|Protected) // @ game+0x11c0f70
	void MouseWheelUp(); // Function FSD.PlayerCharacter.MouseWheelUp // (Final|Native|Protected) // @ game+0x11c0f50
	void MouseWheelDown(); // Function FSD.PlayerCharacter.MouseWheelDown // (Final|Native|Protected) // @ game+0x11c0f30
	bool LockIfState(enum class ECharacterState LockIf, enum class ECharacterState LockTo, bool canMoveAndAim); // Function FSD.PlayerCharacter.LockIfState // (Final|Native|Public|BlueprintCallable) // @ game+0x11c0e20
	void KilledGrabber__DelegateSignature(struct AActor* Grabber); // DelegateFunction FSD.PlayerCharacter.KilledGrabber__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void JumpRelease(); // Function FSD.PlayerCharacter.JumpRelease // (Final|Native|Protected) // @ game+0x11c0de0
	void JumpPress(); // Function FSD.PlayerCharacter.JumpPress // (Final|Native|Protected) // @ game+0x11c0dc0
	void ItemUseDelegate__DelegateSignature(struct AItem* Item); // DelegateFunction FSD.PlayerCharacter.ItemUseDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool IsWithinDistance(struct AActor* Source, float Distance); // Function FSD.PlayerCharacter.IsWithinDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0cf0
	bool IsWalking(); // Function FSD.PlayerCharacter.IsWalking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0cc0
	bool IsStateActive(enum class ECharacterState State); // Function FSD.PlayerCharacter.IsStateActive // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0ba0
	bool IsSaluting(); // Function FSD.PlayerCharacter.IsSaluting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0b70
	bool IsParalyzed(); // Function FSD.PlayerCharacter.IsParalyzed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0b10
	bool IsMovementInputPressed(); // Function FSD.PlayerCharacter.IsMovementInputPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x11c0ae0
	bool IsMining(); // Function FSD.PlayerCharacter.IsMining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0ab0
	bool IsLyingDown(); // Function FSD.PlayerCharacter.IsLyingDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0a80
	bool IsJumpPressed(); // Function FSD.PlayerCharacter.IsJumpPressed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0a60
	bool IsInState(enum class ECharacterState aState); // Function FSD.PlayerCharacter.IsInState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c09d0
	bool IsFrozen(); // Function FSD.PlayerCharacter.IsFrozen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c09a0
	bool IsFirstPerson(); // Function FSD.PlayerCharacter.IsFirstPerson // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0940
	bool IsDown(); // Function FSD.PlayerCharacter.IsDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0910
	bool IsAlive(); // Function FSD.PlayerCharacter.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c08e0
	void IgnoreInvite(); // Function FSD.PlayerCharacter.IgnoreInvite // (Final|Native|Protected) // @ game+0x11c08c0
	bool HasBeenRevived(); // Function FSD.PlayerCharacter.HasBeenRevived // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c08a0
	struct UTrailComponent* GetTrailComponent(); // Function FSD.PlayerCharacter.GetTrailComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0880
	struct UPlayerTPAnimInstance* GetTPAnimInstance(); // Function FSD.PlayerCharacter.GetTPAnimInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0810
	float GetTimeSinceLastRevival(); // Function FSD.PlayerCharacter.GetTimeSinceLastRevival // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0840
	enum class ECharacterState GetPreviousState(); // Function FSD.PlayerCharacter.GetPreviousState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c07b0
	struct AFSDPlayerState* GetPlayerState(); // Function FSD.PlayerCharacter.GetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0780
	struct FString GetPlayerName(); // Function FSD.PlayerCharacter.GetPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0700
	struct AFSDPlayerController* GetPlayerController(); // Function FSD.PlayerCharacter.GetPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c06d0
	struct UInventoryList* GetInventoryList(); // Function FSD.PlayerCharacter.GetInventoryList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0610
	struct FText GetHeroSwitchToMessage(); // Function FSD.PlayerCharacter.GetHeroSwitchToMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c05d0
	struct FText GetHeroName(); // Function FSD.PlayerCharacter.GetHeroName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0590
	struct UTexture2D* GetHeroIcon(); // Function FSD.PlayerCharacter.GetHeroIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0560
	struct FLinearColor GetHeroColor(); // Function FSD.PlayerCharacter.GetHeroColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0530
	struct UPlayerFPAnimInstance* GetFPAnimInstance(); // Function FSD.PlayerCharacter.GetFPAnimInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c04c0
	struct AItem* GetEquippedItem(); // Function FSD.PlayerCharacter.GetEquippedItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0490
	float GetDownTime(); // Function FSD.PlayerCharacter.GetDownTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0460
	struct APlayerCharacter* GetDownCameraTarget(); // Function FSD.PlayerCharacter.GetDownCameraTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0420
	struct USceneComponent* GetDownCameraRotationPoint(); // Function FSD.PlayerCharacter.GetDownCameraRotationPoint // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	struct USceneComponent* GetDownCameraAttachPoint(); // Function FSD.PlayerCharacter.GetDownCameraAttachPoint // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	enum class ECharacterState GetCurrentState(); // Function FSD.PlayerCharacter.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c03f0
	float GetClassXP(); // Function FSD.PlayerCharacter.GetClassXP // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11c03c0
	struct UCharacterVanityComponent* GetCharacterVanity(); // Function FSD.PlayerCharacter.GetCharacterVanity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c03a0
	struct UCharacterStateComponent* GetCharacterStateComponent(enum class ECharacterState State); // Function FSD.PlayerCharacter.GetCharacterStateComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0310
	float GetBeginRevivedProgress(); // Function FSD.PlayerCharacter.GetBeginRevivedProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0210
	struct FString GetAnalyticsClass(); // Function FSD.PlayerCharacter.GetAnalyticsClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c01a0
	struct FRotator GetAimRotation(); // Function FSD.PlayerCharacter.GetAimRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0160
	struct FVector GetActorGroundLocation(); // Function FSD.PlayerCharacter.GetActorGroundLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0120
	struct TArray<struct AShieldGeneratorActor*> GetActiveShieldGenerators(); // Function FSD.PlayerCharacter.GetActiveShieldGenerators // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11c00a0
	struct UPlayerAnimInstance* GetActiveAnimInstance(); // Function FSD.PlayerCharacter.GetActiveAnimInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c0070
	void ForceIsPressingMovementInputKey(); // Function FSD.PlayerCharacter.ForceIsPressingMovementInputKey // (Final|Native|Public|BlueprintCallable) // @ game+0x11c0050
	void FirePressedDelegate__DelegateSignature(); // DelegateFunction FSD.PlayerCharacter.FirePressedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ExitVehicle(); // Function FSD.PlayerCharacter.ExitVehicle // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11c0030
	void CycleItemUp(); // Function FSD.PlayerCharacter.CycleItemUp // (Final|Native|Protected) // @ game+0x11c0010
	void CycleItemReleased(); // Function FSD.PlayerCharacter.CycleItemReleased // (Final|Native|Protected) // @ game+0x11bfff0
	void CycleItemPressed(); // Function FSD.PlayerCharacter.CycleItemPressed // (Final|Native|Protected) // @ game+0x11bffd0
	void CycleItemDown(); // Function FSD.PlayerCharacter.CycleItemDown // (Final|Native|Protected) // @ game+0x11bffb0
	void ConsumeCycleItemButton(); // Function FSD.PlayerCharacter.ConsumeCycleItemButton // (Final|Native|Public|BlueprintCallable) // @ game+0x11bff90
	void Client_TargetDamaged(struct UObject* Health, float Damage, float DamageModifier, bool IsWeakPoint, bool IsRadial); // Function FSD.PlayerCharacter.Client_TargetDamaged // (Net|Native|Event|Protected|NetClient) // @ game+0x11bfe00
	void Client_AddImpulse(struct FVector_NetQuantizeNormal Direction, float force); // Function FSD.PlayerCharacter.Client_AddImpulse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x11bfd40
	void CheckWithoutAPaddleAchievement(); // Function FSD.PlayerCharacter.CheckWithoutAPaddleAchievement // (Net|NetReliableNative|Event|Protected|NetClient|BlueprintCallable) // @ game+0x11bfd00
	void CheatRevive(); // Function FSD.PlayerCharacter.CheatRevive // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x11bfce0
	void CheatGodMode(); // Function FSD.PlayerCharacter.CheatGodMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x11bfcc0
	void CharacterTrackingDelegate__DelegateSignature(struct AActor* InTrackingEnemy); // DelegateFunction FSD.PlayerCharacter.CharacterTrackingDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ChangeState(enum class ECharacterState NewState); // Function FSD.PlayerCharacter.ChangeState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11bfc40
	void ChangeIfDifferentState(enum class ECharacterState NewState); // Function FSD.PlayerCharacter.ChangeIfDifferentState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11bfbc0
	void CanEscapeGrabberDelegate__DelegateSignature(bool bCanEscape); // DelegateFunction FSD.PlayerCharacter.CanEscapeGrabberDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool CanEscapeFromGrabber(); // Function FSD.PlayerCharacter.CanEscapeFromGrabber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11bfb90
	void CallDonkeyReleased(); // Function FSD.PlayerCharacter.CallDonkeyReleased // (Final|Native|Protected) // @ game+0x11bfb70
	void CallDonkeyPressed(); // Function FSD.PlayerCharacter.CallDonkeyPressed // (Final|Native|Protected) // @ game+0x11bfb50
	void BP_OnUpdateMeshes(); // Function FSD.PlayerCharacter.BP_OnUpdateMeshes // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void BP_OnControllerReady(); // Function FSD.PlayerCharacter.BP_OnControllerReady // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void AnnounceSchematicCollected(struct USchematic* InSchematic); // Function FSD.PlayerCharacter.AnnounceSchematicCollected // (Final|Native|Public|BlueprintCallable) // @ game+0x11bfad0
	void All_StartSalute(struct UAnimMontage* saluteMontage); // Function FSD.PlayerCharacter.All_StartSalute // (Net|Native|Event|NetMulticast|Protected) // @ game+0x11bfa40
	void All_ShowImpactEffects(struct UParticleSystem* Particles, struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Orientation); // Function FSD.PlayerCharacter.All_ShowImpactEffects // (Net|Native|Event|NetMulticast|Protected|Const) // @ game+0x11bf910
	void All_ShowFieldMedicInstantReviveEffects(); // Function FSD.PlayerCharacter.All_ShowFieldMedicInstantReviveEffects // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x11bf8f0
	void AddImpulseToActor(struct AFSDPhysicsActor* Target, struct FVector_NetQuantize Impulse, struct FVector_NetQuantize Location, struct FVector_NetQuantize AngularImpulse); // Function FSD.PlayerCharacter.AddImpulseToActor // (Final|Native|Public|BlueprintCallable) // @ game+0x11bf780
	void AddImpulseFromVector(struct FVector Vector); // Function FSD.PlayerCharacter.AddImpulseFromVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11bf6f0
	void AddImpulseFromDirectionAndForce(struct FVector Direction, float force); // Function FSD.PlayerCharacter.AddImpulseFromDirectionAndForce // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11bf610
	float AddClassXP(float Amount); // Function FSD.PlayerCharacter.AddClassXP // (Final|Native|Public|BlueprintCallable) // @ game+0x11bf580
	void AcknowledgeCharacterState(enum class ECharacterState eState); // Function FSD.PlayerCharacter.AcknowledgeCharacterState // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11bf500
	void AcceptInvite(); // Function FSD.PlayerCharacter.AcceptInvite // (Final|Native|Protected) // @ game+0x11bf4e0
};

// Class FSD.PlayerCharacterFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPlayerCharacterFunctionLibrary : UBlueprintFunctionLibrary {

	bool SetPlayerVoiceMuted(struct UObject* WorldContextObject, struct AFSDPlayerState* PlayerState, bool Mute, bool TrySystemWide, int32_t localUserNum); // Function FSD.PlayerCharacterFunctionLibrary.SetPlayerVoiceMuted // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11c71e0
	bool IsPlayerVoiceMuted(struct UObject* WorldContextObject, struct AFSDPlayerState* PlayerState, int32_t localUserNum); // Function FSD.PlayerCharacterFunctionLibrary.IsPlayerVoiceMuted // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11c6b30
	struct APlayerCharacter* GetRandomPlayer(struct UObject* WorldContextObject, bool MustBeAlive, bool MustNotBeParalyzed); // Function FSD.PlayerCharacterFunctionLibrary.GetRandomPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11c69c0
	struct APlayerCharacter* GetNearestVisiblePlayer(struct AActor* From, float MaxDistance, bool MustBeAlive, bool MustNotBeParalyzed); // Function FSD.PlayerCharacterFunctionLibrary.GetNearestVisiblePlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11c6710
	struct APlayerCharacter* GetNearestPlayerToPosition(struct UObject* WorldContextObject, struct FVector Position, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly); // Function FSD.PlayerCharacterFunctionLibrary.GetNearestPlayerToPosition // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11c6540
	struct APlayerCharacter* GetNearestPlayerFrom(struct UObject* WorldContext, struct FVector From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly); // Function FSD.PlayerCharacterFunctionLibrary.GetNearestPlayerFrom // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11c6370
	struct APlayerCharacter* GetNearestPlayer(struct AActor* From, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly); // Function FSD.PlayerCharacterFunctionLibrary.GetNearestPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11c61c0
};

// Class FSD.PlayerHealthComponent
// Size: 0x388 (Inherited: 0x248)
struct UPlayerHealthComponent : UHealthComponent {
	char pad_248[0x8]; // 0x248(0x08)
	struct FMulticastInlineDelegate OnFullHealthCannotHeal; // 0x250(0x10)
	struct FMulticastInlineDelegate OnHealedFromCrystalEvent; // 0x260(0x10)
	struct FMulticastInlineDelegate OnHealthRegeneratingChanged; // 0x270(0x10)
	char pad_280[0x10]; // 0x280(0x10)
	struct FMulticastInlineDelegate OnPlayerHit; // 0x290(0x10)
	float MaxHealth; // 0x2a0(0x04)
	float MaxArmor; // 0x2a4(0x04)
	float ArmorDamage; // 0x2a8(0x04)
	char pad_2AC[0x4]; // 0x2ac(0x04)
	float ReviveHealthReturnRatio; // 0x2b0(0x04)
	float ReviveArmorReturnRatio; // 0x2b4(0x04)
	float HealthPerCrystalVolume; // 0x2b8(0x04)
	struct FHealthRegenerationParams HealthRegeneration; // 0x2bc(0x10)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	struct UCurveFloat* ArmorRegenCurve; // 0x2d0(0x08)
	float ShieldRegenDelay; // 0x2d8(0x04)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct APlayerCharacter* Character; // 0x2e0(0x08)
	struct UParticleSystem* GenericImpactParticles; // 0x2e8(0x08)
	struct UParticleSystem* ShieldLinkEffect; // 0x2f0(0x08)
	struct FAudioWithCooldown AudioFriendlyFire; // 0x2f8(0x10)
	struct UParticleSystemComponent* ShieldLinkInstance; // 0x308(0x08)
	char pad_310[0x4]; // 0x310(0x04)
	float InvulnerabilityDuration; // 0x314(0x04)
	float ReviveInvulnerabilityTime; // 0x318(0x04)
	char pad_31C[0x3c]; // 0x31c(0x3c)
	struct UPlayerDamageTakenMutator* DamageTakenMutator; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)
	struct UStatusEffect* IronWillStatusEffectClass; // 0x368(0x08)
	struct UStatusEffect* IronWillStatusEffect; // 0x370(0x08)
	bool IronWillActive; // 0x378(0x01)
	char pad_379[0x3]; // 0x379(0x03)
	float IronWillTimeToActivate; // 0x37c(0x04)
	char pad_380[0x8]; // 0x380(0x08)

	struct UStatusEffect* SetIronWillStatusEffect(struct UStatusEffect* steClass); // Function FSD.PlayerHealthComponent.SetIronWillStatusEffect // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11c7150
	void Server_TryActivateIronWill(); // Function FSD.PlayerHealthComponent.Server_TryActivateIronWill // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x11c7100
	void OnRep_MaxHealth(); // Function FSD.PlayerHealthComponent.OnRep_MaxHealth // (Final|Native|Protected) // @ game+0x11c6cc0
	void OnRep_MaxArmor(); // Function FSD.PlayerHealthComponent.OnRep_MaxArmor // (Final|Native|Protected) // @ game+0x11c6ca0
	void OnRep_ArmorDamage(float oldDamage); // Function FSD.PlayerHealthComponent.OnRep_ArmorDamage // (Final|Native|Protected) // @ game+0x11c6c20
	bool IsLowHealth(); // Function FSD.PlayerHealthComponent.IsLowHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c6b00
	float GetRemainingIronWillActivationTime(); // Function FSD.PlayerHealthComponent.GetRemainingIronWillActivationTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c6ad0
	bool GetIsHealthRegenerating(); // Function FSD.PlayerHealthComponent.GetIsHealthRegenerating // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c61a0
	bool GetIronWillActive(); // Function FSD.PlayerHealthComponent.GetIronWillActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c6170
	float GetHealthRegeneratingTargetRatio(); // Function FSD.PlayerHealthComponent.GetHealthRegeneratingTargetRatio // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c6150
	void Client_SetHealthRegenerating(bool isRegenerating); // Function FSD.PlayerHealthComponent.Client_SetHealthRegenerating // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0x11c60c0
	void Client_OnFriendlyFire(struct AController* EventInstigator, struct AActor* DamageCauser); // Function FSD.PlayerHealthComponent.Client_OnFriendlyFire // (Net|Native|Event|Protected|NetClient|NetValidate) // @ game+0x11c5fc0
	void Client_HealthFullCannotHeal(); // Function FSD.PlayerHealthComponent.Client_HealthFullCannotHeal // (Net|NetReliableNative|Event|Protected|NetClient|NetValidate) // @ game+0x11c5fa0
	bool CanActivateIronWill(); // Function FSD.PlayerHealthComponent.CanActivateIronWill // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c5ee0
};

// Class FSD.PlayerImpactCooldownComponent
// Size: 0x108 (Inherited: 0xb0)
struct UPlayerImpactCooldownComponent : UActorComponent {
	float CoolDownTime; // 0xb0(0x04)
	char pad_B4[0x54]; // 0xb4(0x54)

	bool CheckCanImpact(struct AActor* Actor); // Function FSD.PlayerImpactCooldownComponent.CheckCanImpact // (Final|Native|Public|BlueprintCallable) // @ game+0x11c5f10
};

// Class FSD.PlayerMovementComponent
// Size: 0x6a0 (Inherited: 0x610)
struct UPlayerMovementComponent : UCharacterMovementComponent {
	bool DebugFastMove; // 0x610(0x01)
	char pad_611[0x7]; // 0x611(0x07)
	struct USoundBase* SlidingOnIceSound; // 0x618(0x08)
	char pad_620[0x10]; // 0x620(0x10)
	float LedgeClimbZVelocity; // 0x630(0x04)
	float MovementPenalty; // 0x634(0x04)
	char pad_638[0x8]; // 0x638(0x08)
	struct APlayerCharacter* Character; // 0x640(0x08)
	struct TWeakObjectPtr<struct UCharacterStateComponent> CurrentPhysUpdateState; // 0x648(0x08)
	char pad_650[0x50]; // 0x650(0x50)

	void RemoveGravityModifier(struct AActor* SourceActor); // Function FSD.PlayerMovementComponent.RemoveGravityModifier // (Final|Native|Public|BlueprintCallable) // @ game+0x11c7080
	void AddGravityModifier(struct AActor* SourceActor, float effect); // Function FSD.PlayerMovementComponent.AddGravityModifier // (Final|Native|Public|BlueprintCallable) // @ game+0x11c5e10
};

// Class FSD.PlayerProximityTracker
// Size: 0xf8 (Inherited: 0xb0)
struct UPlayerProximityTracker : UActorComponent {
	float MaxDistanceBetweenPlayers; // 0xb0(0x04)
	float PlayerSpheresUpdateRatePerSecond; // 0xb4(0x04)
	struct TArray<struct FPlayerSphere> PlayerSpheres; // 0xb8(0x10)
	struct TArray<struct FProximityTriggerItem> LocalPlayerProximityTriggers; // 0xc8(0x10)
	struct TArray<struct FProximityTriggerItem> AnyPlayerProximityTriggers; // 0xd8(0x10)
	char pad_E8[0x10]; // 0xe8(0x10)

	void Receive_RegisterForLocalPlayerProximity(struct UObject* WorldContextObject, struct FVector Location, float Distance, struct FDelegate proximityCallback, bool triggerOnlyOnce); // Function FSD.PlayerProximityTracker.Receive_RegisterForLocalPlayerProximity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11c6eb0
	void Receive_RegisterForAnyPlayerProximity(struct UObject* WorldContextObject, struct FVector Location, float Distance, struct FDelegate proximityCallback, bool triggerOnlyOnce); // Function FSD.PlayerProximityTracker.Receive_RegisterForAnyPlayerProximity // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11c6ce0
	struct FPlayerSphere GetPrimarySphere(); // Function FSD.PlayerProximityTracker.GetPrimarySphere // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c6980
	struct TArray<struct FPlayerSphere> GetPlayerSpheres(); // Function FSD.PlayerProximityTracker.GetPlayerSpheres // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c6860
};

// Class FSD.PlayerRejoinState
// Size: 0x118 (Inherited: 0xb0)
struct UPlayerRejoinState : UActorComponent {
	char pad_B0[0x68]; // 0xb0(0x68)

	void Server_Reset(); // Function FSD.PlayerRejoinState.Server_Reset // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x11cf240
	void Server_AddIntValue_Internal(struct FGuid ItemKey, struct FName ValueKey, int32_t Value); // Function FSD.PlayerRejoinState.Server_AddIntValue_Internal // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x11cf110
	void Server_AddFloatValue_Internal(struct FGuid ItemKey, struct FName ValueKey, float Value); // Function FSD.PlayerRejoinState.Server_AddFloatValue_Internal // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x11cf000
	void Client_SetValues(struct TArray<struct FRejoinFloat> floatValues, struct TArray<struct FRejoinInt> intValues); // Function FSD.PlayerRejoinState.Client_SetValues // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x11ccf80
};

// Class FSD.ResourcesComponent
// Size: 0x108 (Inherited: 0xb0)
struct UResourcesComponent : UActorComponent {
	struct FMulticastInlineDelegate OnResourceChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnResourceIncreased; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnResourceFull; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnResourceAdded; // 0xe0(0x10)
	struct TArray<struct UCappedResource*> Resources; // 0xf0(0x10)
	float ResourceCap; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)

	void ResourceIncreased(struct UCappedResource* Resource, float Delta); // Function FSD.ResourcesComponent.ResourceIncreased // (Final|Native|Protected) // @ game+0x11e4190
	void ResourceFull(struct UCappedResource* Resource); // Function FSD.ResourcesComponent.ResourceFull // (Final|Native|Protected) // @ game+0x11e4110
	void ResourceChanged(struct UCappedResource* Resource, float currentAmount); // Function FSD.ResourcesComponent.ResourceChanged // (Final|Native|Protected) // @ game+0x11e4040
	void OnRep_Resources(); // Function FSD.ResourcesComponent.OnRep_Resources // (Final|Native|Protected) // @ game+0x11e3eb0
	int32_t GetXPFromResourceMap(struct TMap<struct UResourceData*, float> Resources); // Function FSD.ResourcesComponent.GetXPFromResourceMap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11e3cd0
	int32_t GetXpFromMining(); // Function FSD.ResourcesComponent.GetXpFromMining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e3e60
	struct TMap<struct UResourceData*, float> GetSeparateResourcesFromMap(struct TMap<struct UResourceData*, float> Resources); // Function FSD.ResourcesComponent.GetSeparateResourcesFromMap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11e3ab0
	struct UCappedResource* GetResource(struct UResourceData* Data, bool createIfAmountIsZero); // Function FSD.ResourcesComponent.GetResource // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11e37e0
	float GetCapacityPct(); // Function FSD.ResourcesComponent.GetCapacityPct // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e3680
	struct TArray<struct UCappedResource*> GetAllResources(); // Function FSD.ResourcesComponent.GetAllResources // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11e35c0
};

// Class FSD.PlayerResourceComponent
// Size: 0x108 (Inherited: 0x108)
struct UPlayerResourceComponent : UResourcesComponent {

	struct UPlayerResourceComponent* GetFromPlayer(struct APlayerCharacter* PlayerCharacter); // Function FSD.PlayerResourceComponent.GetFromPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11ce440
};

// Class FSD.PlayerStatsComponent
// Size: 0x160 (Inherited: 0xb0)
struct UPlayerStatsComponent : UActorComponent {
	struct FMulticastInlineDelegate OnKillAdded; // 0xb0(0x10)
	int32_t TotalKills; // 0xc0(0x04)
	int32_t TotalRevived; // 0xc4(0x04)
	int32_t TotalDeaths; // 0xc8(0x04)
	int32_t TotalSupplypodsRequested; // 0xcc(0x04)
	float TotalGoldMined; // 0xd0(0x04)
	float TotalMOMsMined; // 0xd4(0x04)
	float TotalMineralsMined; // 0xd8(0x04)
	float TotalXPGained; // 0xdc(0x04)
	bool EscapedInPod; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
	struct APlayerCharacter* LastPlayedClass; // 0xe8(0x08)
	struct FEndMissionResult EndMissionResult; // 0xf0(0x60)
	struct FMulticastInlineDelegate OnEndMissionResultReady; // 0x150(0x10)

	void SendMissionAnalytics(bool trackMorkite); // Function FSD.PlayerStatsComponent.SendMissionAnalytics // (Final|Native|Public|BlueprintCallable) // @ game+0x11ceed0
	void SendEndMissionResult(struct FEndMissionResult Result); // Function FSD.PlayerStatsComponent.SendEndMissionResult // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x11cedf0
	void OnResourceMined(struct UCappedResource* Resource, float Amount); // Function FSD.PlayerStatsComponent.OnResourceMined // (Final|Native|Public) // @ game+0x11ced00
	void OnRep_EndMissionResult(); // Function FSD.PlayerStatsComponent.OnRep_EndMissionResult // (Final|Native|Protected) // @ game+0x11cebe0
	bool IsEndMissionResultReady(); // Function FSD.PlayerStatsComponent.IsEndMissionResultReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ce720
	bool GetSurvivedInPod(); // Function FSD.PlayerStatsComponent.GetSurvivedInPod // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1162340
	void EndMissionResultDelegate__DelegateSignature(struct FEndMissionResult Result); // DelegateFunction FSD.PlayerStatsComponent.EndMissionResultDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x158ca90
};

// Class FSD.PlayerTemperatureComponent
// Size: 0x180 (Inherited: 0xc8)
struct UPlayerTemperatureComponent : UTemperatureComponent {
	struct FMulticastInlineDelegate OnTemperatureChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnTemperatureStateChanged; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnTemperatureChangeRate; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnDefrosting; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnBarVisibilityChanged; // 0x108(0x10)
	float MinimumTemperature; // 0x118(0x04)
	float MaximumTemperature; // 0x11c(0x04)
	float DefrostTemperature; // 0x120(0x04)
	float BurnTemperature; // 0x124(0x04)
	float DouseFireTemperature; // 0x128(0x04)
	float TemperaturRegainSpeed; // 0x12c(0x04)
	float DefrostingRequired; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
	struct UStatusEffect* OnDefrostedStatusEffect; // 0x138(0x08)
	float NormalTemperature; // 0x140(0x04)
	float CurrentTemperature; // 0x144(0x04)
	float TargetTemperature; // 0x148(0x04)
	char pad_14C[0x9]; // 0x14c(0x09)
	int8_t TemperatureChangeSpeed; // 0x155(0x01)
	char pad_156[0x2]; // 0x156(0x02)
	float DefrostProgress; // 0x158(0x04)
	bool barVisible; // 0x15c(0x01)
	char pad_15D[0x13]; // 0x15d(0x13)
	struct APlayerCharacter* Character; // 0x170(0x08)
	enum class EPlayerTemperatureState TemperatureState; // 0x178(0x01)
	char pad_179[0x7]; // 0x179(0x07)

	void SetNormalTemperature(); // Function FSD.PlayerTemperatureComponent.SetNormalTemperature // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11cf330
	void SetFrozenTemperature(); // Function FSD.PlayerTemperatureComponent.SetFrozenTemperature // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11cf310
	void OnRep_TemperatureState(enum class EPlayerTemperatureState oldState); // Function FSD.PlayerTemperatureComponent.OnRep_TemperatureState // (Final|Native|Protected) // @ game+0x11cec80
	void OnRep_TemperatureChangeSpeed(int8_t OldSpeed); // Function FSD.PlayerTemperatureComponent.OnRep_TemperatureChangeSpeed // (Final|Native|Protected) // @ game+0x11cec00
	void OnRep_DefrostProgress(); // Function FSD.PlayerTemperatureComponent.OnRep_DefrostProgress // (Final|Native|Protected) // @ game+0x11cebc0
	void OnRep_CurrentTemperature(float OldTemperature); // Function FSD.PlayerTemperatureComponent.OnRep_CurrentTemperature // (Final|Native|Protected) // @ game+0x11ceb40
	void OnDeath(struct UHealthComponentBase* Health); // Function FSD.PlayerTemperatureComponent.OnDeath // (Final|Native|Protected) // @ game+0x11ce980
	int32_t GetTemperatureChangedSpeed(); // Function FSD.PlayerTemperatureComponent.GetTemperatureChangedSpeed // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ce5c0
	float GetDefrostProgress(); // Function FSD.PlayerTemperatureComponent.GetDefrostProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ce3f0
	float GetCurrentTemperatureNormalized(); // Function FSD.PlayerTemperatureComponent.GetCurrentTemperatureNormalized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ce3c0
	void Defrost(float Amount); // Function FSD.PlayerTemperatureComponent.Defrost // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11cd980
};

// Class FSD.PlayerTriggerBox
// Size: 0x278 (Inherited: 0x228)
struct APlayerTriggerBox : ATriggerBox {
	struct FMulticastInlineDelegate OnPlayerEntered; // 0x228(0x10)
	struct FMulticastInlineDelegate OnPlayerExited; // 0x238(0x10)
	struct FMulticastInlineDelegate OnAllPlayersEntered; // 0x248(0x10)
	struct FMulticastInlineDelegate OnAllPlayersExited; // 0x258(0x10)
	struct TArray<struct APlayerCharacter*> PlayersInside; // 0x268(0x10)

	void TriggerBoxPlayerEvent__DelegateSignature(struct APlayerCharacter* Player); // DelegateFunction FSD.PlayerTriggerBox.TriggerBoxPlayerEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void TriggerBoxEvent__DelegateSignature(); // DelegateFunction FSD.PlayerTriggerBox.TriggerBoxEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool IsAnyPlayerInside(bool excludingDeadPlayers); // Function FSD.PlayerTriggerBox.IsAnyPlayerInside // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ce600
	void BP_OnPlayerExited(struct APlayerCharacter* Player); // Function FSD.PlayerTriggerBox.BP_OnPlayerExited // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void BP_OnPlayerEntered(struct APlayerCharacter* Player); // Function FSD.PlayerTriggerBox.BP_OnPlayerEntered // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void BP_OnAllPlayersExited(); // Function FSD.PlayerTriggerBox.BP_OnAllPlayersExited // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void BP_OnAllPlayersEntered(); // Function FSD.PlayerTriggerBox.BP_OnAllPlayersEntered // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	bool AreAllPlayersInside(bool excludingDeadPlayers); // Function FSD.PlayerTriggerBox.AreAllPlayersInside // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11cc880
};

// Class FSD.PlayerTriggerComponent
// Size: 0xe0 (Inherited: 0xb0)
struct UPlayerTriggerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnTriggerBeginEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnTriggerEndEvent; // 0xc0(0x10)
	struct UPrimitiveComponent* collider; // 0xd0(0x08)
	char pad_D8[0x8]; // 0xd8(0x08)

	void SetCollider(struct UPrimitiveComponent* collider); // Function FSD.PlayerTriggerComponent.SetCollider // (Final|Native|Public|BlueprintCallable) // @ game+0x11cf290
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.PlayerTriggerComponent.OnEndOverlap // (Final|Native|Protected) // @ game+0x11cea00
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.PlayerTriggerComponent.OnBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x11ce770
};

// Class FSD.PLSTester
// Size: 0x298 (Inherited: 0x220)
struct APLSTester : AActor {
	int32_t PLSSeed; // 0x220(0x04)
	int32_t MissionSeed; // 0x224(0x04)
	int32_t GlobalSeed; // 0x228(0x04)
	int32_t GlobalMissionIndex; // 0x22c(0x04)
	struct UMissionComplexity* limitComplexity; // 0x230(0x08)
	struct UMissionDuration* limitDuration; // 0x238(0x08)
	struct UMissionMutator* Mutator; // 0x240(0x08)
	struct TArray<struct UMissionWarning*> Warnings; // 0x248(0x10)
	struct UBiome* Biome; // 0x258(0x08)
	struct UMissionTemplate* MissionTemplate; // 0x260(0x08)
	struct UMissionTemplate* CustomMissionTemplate; // 0x268(0x08)
	struct UDifficultySetting* OverrideDifficulty; // 0x270(0x08)
	int32_t SimulatePlayerCount; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct FText CustomMissionName; // 0x280(0x18)
};

// Class FSD.DeepDiveTester
// Size: 0x240 (Inherited: 0x220)
struct ADeepDiveTester : AActor {
	struct UBiome* Biome; // 0x220(0x08)
	int32_t Seed; // 0x228(0x04)
	enum class EMissionStructure MissionStructure; // 0x22c(0x01)
	char pad_22D[0x3]; // 0x22d(0x03)
	struct TArray<struct FDeepDiveTesterItem> Stages; // 0x230(0x10)
};

// Class FSD.PostProcessingManager
// Size: 0x250 (Inherited: 0x220)
struct APostProcessingManager : AActor {
	struct TArray<struct TWeakObjectPtr<struct AFSDPostProcessingActor>> RegisteredActors; // 0x220(0x10)
	struct TArray<struct FPostProcessingBlendable> CurrentBlendables; // 0x230(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> Materials; // 0x240(0x10)
};

// Class FSD.PresenceSubSystem
// Size: 0x58 (Inherited: 0x30)
struct UPresenceSubSystem : UGameInstanceSubsystem {
	struct UDiscordWrapper* DiscordWI; // 0x30(0x08)
	struct UCommunityGoalWrapper* CommunityWI; // 0x38(0x08)
	char pad_40[0x18]; // 0x40(0x18)
};

// Class FSD.ProceduralController
// Size: 0xb0 (Inherited: 0xb0)
struct UProceduralController : UActorComponent {

	void Server_RequestTunnelData(); // Function FSD.ProceduralController.Server_RequestTunnelData // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x11cf220
	void SendTunnelData(); // Function FSD.ProceduralController.SendTunnelData // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void SendRoomData(); // Function FSD.ProceduralController.SendRoomData // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void SendRequestedPLSData(); // Function FSD.ProceduralController.SendRequestedPLSData // (Final|Native|Public|BlueprintCallable) // @ game+0x11cefe0
	void SendRequestedCarverData(enum class EDebrisItemPass pass); // Function FSD.ProceduralController.SendRequestedCarverData // (Final|Native|Public|BlueprintCallable) // @ game+0x11cef60
	void RequestPLSData(); // Function FSD.ProceduralController.RequestPLSData // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void RequestCarverData(enum class EDebrisItemPass pass); // Function FSD.ProceduralController.RequestCarverData // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void ReceivedTunnelData(struct TArray<struct FTunnelNode> Tunnels); // Function FSD.ProceduralController.ReceivedTunnelData // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	void ReceivedRoomData(int32_t Seed, struct TArray<struct FRoomNode> Rooms, struct TArray<struct FPathObstacle> obstacles); // Function FSD.ProceduralController.ReceivedRoomData // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	void Client_SendTunnelData(struct TArray<struct FTunnelNode> Tunnels); // Function FSD.ProceduralController.Client_SendTunnelData // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x11cce60
	void Client_SendRoomData(int32_t Seed, struct TArray<struct FRoomNode> Rooms, struct TArray<struct FPathObstacle> obstacles); // Function FSD.ProceduralController.Client_SendRoomData // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x11ccc60
	void Client_RecieveCarverSizes(int32_t pass, int32_t carverCount); // Function FSD.ProceduralController.Client_RecieveCarverSizes // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x11ccba0
	void Client_ReceivePLSLevelCarver(int32_t pass, struct FLevelGenerationCarverLists levelCarvers); // Function FSD.ProceduralController.Client_ReceivePLSLevelCarver // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x11ccac0
	void Client_ReceivePLSInfluencers(struct FGeneratedInfluenceSets influenceSet); // Function FSD.ProceduralController.Client_ReceivePLSInfluencers // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x11cc9f0
	void Client_ReceivePLSDebris(struct TArray<struct FGeneratedDebrisItem> levelDebris); // Function FSD.ProceduralController.Client_ReceivePLSDebris // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x11cc950
};

// Class FSD.ProceduralObjectColliders
// Size: 0x100 (Inherited: 0xb0)
struct UProceduralObjectColliders : UActorComponent {
	char pad_B0[0x50]; // 0xb0(0x50)
};

// Class FSD.ProceduralSettings
// Size: 0x38 (Inherited: 0x30)
struct UProceduralSettings : UDataAsset {
	struct URoomDecorationObject* MiningpodCalldownLocationDecoration; // 0x30(0x08)
};

// Class FSD.CaveInfluencer
// Size: 0x30 (Inherited: 0x30)
struct UCaveInfluencer : UDataAsset {
};

// Class FSD.ProceduralTunnelComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UProceduralTunnelComponent : UActorComponent {
	struct UTunnelParameters* TunnelParameters; // 0xb0(0x08)
	bool CreateDirt; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct UCaveInfluencer* DirtInfluencer; // 0xc0(0x08)
	float DirtInfluencerRange; // 0xc8(0x04)
	char pad_CC[0xc]; // 0xcc(0x0c)
};

// Class FSD.ProfilingSubSystem
// Size: 0x40 (Inherited: 0x30)
struct UProfilingSubSystem : UWorldSubsystem {
	struct TArray<struct FProfileEntry> Entries; // 0x30(0x10)

	float GetTotalTime(); // Function FSD.ProfilingSubSystem.GetTotalTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11d42f0
	struct TArray<struct FProfileEntry> GetEntries(); // Function FSD.ProfilingSubSystem.GetEntries // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11d41d0
	struct TArray<struct FProfileCategoryTiming> GetCategoryTimings(); // Function FSD.ProfilingSubSystem.GetCategoryTimings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11d40f0
};

// Class FSD.FakePhysicsProjectile
// Size: 0x3a8 (Inherited: 0x2f0)
struct AFakePhysicsProjectile : AProjectileBase {
	struct FFakeMoverState MoverState; // 0x2f0(0x60)
	struct FFakeMoveState posVel; // 0x350(0x24)
	char pad_374[0x4]; // 0x374(0x04)
	struct UFakeMoverSettings* MoveSettings; // 0x378(0x08)
	float InitialSpeed; // 0x380(0x04)
	float DampOmega; // 0x384(0x04)
	float SyncTime; // 0x388(0x04)
	char pad_38C[0x1c]; // 0x38c(0x1c)

	void SphereBeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.FakePhysicsProjectile.SphereBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x11d5250
	void OnRep_PosVel(struct FFakeMoveState posVel); // Function FSD.FakePhysicsProjectile.OnRep_PosVel // (Final|Native|Public|HasOutParms) // @ game+0x11d4860
};

// Class FSD.ProjectileAttack
// Size: 0x50 (Inherited: 0x28)
struct UProjectileAttack : UObject {
	struct FFloatInterval Delay; // 0x28(0x08)
	bool TriggerOnEvent; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FFloatInterval HorizontalAngleOffset; // 0x34(0x08)
	struct FFloatInterval VerticalAngleOffset; // 0x3c(0x08)
	struct FName OverrideSocketName; // 0x44(0x08)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class FSD.NormalProjectileAttack
// Size: 0x60 (Inherited: 0x50)
struct UNormalProjectileAttack : UProjectileAttack {
	struct AProjectile* Projectile; // 0x50(0x08)
	float RandomAngle; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class FSD.BallisticProjectileAttack
// Size: 0x60 (Inherited: 0x50)
struct UBallisticProjectileAttack : UProjectileAttack {
	struct AProjectile* Projectile; // 0x50(0x08)
	float ProjectileArc; // 0x58(0x04)
	float Gravity; // 0x5c(0x04)
};

// Class FSD.ProjectileAttackBaseComponent
// Size: 0x178 (Inherited: 0xf0)
struct UProjectileAttackBaseComponent : UAttackBaseComponent {
	struct TArray<struct UProjectileAttack*> Projectiles; // 0xf0(0x10)
	struct TArray<struct UAnimMontage*> Montages; // 0x100(0x10)
	struct FName SocketName; // 0x110(0x08)
	bool UseSocketForRotation; // 0x118(0x01)
	bool ProjectilesIgnoreEachOther; // 0x119(0x01)
	char pad_11A[0x2e]; // 0x11a(0x2e)
	struct FMulticastInlineDelegate OnAttackStartedEvent; // 0x148(0x10)
	struct FMulticastInlineDelegate OnProjectileFiredEvent; // 0x158(0x10)
	struct FMulticastInlineDelegate OnAttackEndedEvent; // 0x168(0x10)

	bool TriggerMontage(struct AActor* Target); // Function FSD.ProjectileAttackBaseComponent.TriggerMontage // (Final|Native|Protected|BlueprintCallable) // @ game+0x11dad50
	struct UAnimMontage* SelectMontage(); // Function FSD.ProjectileAttackBaseComponent.SelectMontage // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x11da680
	void OnPerformAttack(); // Function FSD.ProjectileAttackBaseComponent.OnPerformAttack // (Final|Native|Protected) // @ game+0x11da480
	void OnMontageEnded(struct UAnimMontage* Montage, bool interrupted); // Function FSD.ProjectileAttackBaseComponent.OnMontageEnded // (Final|Native|Protected) // @ game+0x11da3b0
	void MulticastProjectileFired(); // Function FSD.ProjectileAttackBaseComponent.MulticastProjectileFired // (Net|Native|Event|NetMulticast|Protected) // @ game+0x108ba50
	void CancelMontage(); // Function FSD.ProjectileAttackBaseComponent.CancelMontage // (Final|Native|Protected|BlueprintCallable) // @ game+0x11d9280
};

// Class FSD.ProjectileAttackComponent
// Size: 0x180 (Inherited: 0x178)
struct UProjectileAttackComponent : UProjectileAttackBaseComponent {
	bool ManualyComplete; // 0x178(0x01)
	char pad_179[0x7]; // 0x179(0x07)

	void AddAttackMontage(struct UAnimMontage* attackMontage); // Function FSD.ProjectileAttackComponent.AddAttackMontage // (Final|Native|Protected|BlueprintCallable) // @ game+0x11d91c0
};

// Class FSD.ExplosionBaseComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UExplosionBaseComponent : UActorComponent {
	float CarveDiameterCM; // 0xb0(0x04)
	float CarveNoiseCM; // 0xb4(0x04)
	float CarveBurnThicknessCM; // 0xb8(0x04)
	float CarveNormalOffsetCM; // 0xbc(0x04)
	float CarveNormalSqueeze; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)

	void DamageOnlyFromHit(struct FHitResult HitResult, struct UDamageComponent* DamageComponent); // Function FSD.ExplosionBaseComponent.DamageOnlyFromHit // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11d9c20
	void DamageOnly(struct FVector Location, struct FName BoneName, struct UPrimitiveComponent* Target, struct UPhysicalMaterial* PhysicalMaterial, struct UDamageComponent* DamageComponent); // Function FSD.ExplosionBaseComponent.DamageOnly // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11d9a90
	void DamageArmorClients(struct FHitResult HitResult, struct UDamageComponent* DamageComponent); // Function FSD.ExplosionBaseComponent.DamageArmorClients // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11d9950
	void DamageAndCarveFromHit(struct FHitResult HitResult, struct UDamageComponent* DamageComponent); // Function FSD.ExplosionBaseComponent.DamageAndCarveFromHit // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11d9810
	void DamageAndCarve(struct FVector Location, struct FVector ImpactNormal, struct FName BoneName, struct UPrimitiveComponent* Target, struct UPhysicalMaterial* PhysicalMaterial, struct UDamageComponent* DamageComponent); // Function FSD.ExplosionBaseComponent.DamageAndCarve // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11d9620
	void CarveOnly(struct FVector Location, struct FVector ImpactNormal); // Function FSD.ExplosionBaseComponent.CarveOnly // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11d92a0
};

// Class FSD.ExplosionComponent
// Size: 0xc8 (Inherited: 0xc8)
struct UExplosionComponent : UExplosionBaseComponent {
};

// Class FSD.ProjectileExplosion
// Size: 0xf0 (Inherited: 0xc8)
struct UProjectileExplosion : UExplosionBaseComponent {
	struct FScaledEffect ExplosionEffect; // 0xc8(0x10)
	struct USoundCue* ExplosionSound; // 0xd8(0x08)
	struct UForceFeedbackEffect* ForceFeedbackEffect; // 0xe0(0x08)
	struct UForceFeedbackAttenuation* ForceFeedbackAttanuation; // 0xe8(0x08)

	void SpawnEffectsFromHit(struct FHitResult Hit); // Function FSD.ProjectileExplosion.SpawnEffectsFromHit // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11dab40
	void SpawnEffects(struct FVector Location, struct FVector Normal); // Function FSD.ProjectileExplosion.SpawnEffects // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11daa60
};

// Class FSD.ProjectileLauncherBaseComponent
// Size: 0x158 (Inherited: 0x110)
struct UProjectileLauncherBaseComponent : UWeaponFireComponent {
	bool UseSpread; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	float VerticalSpread; // 0x114(0x04)
	float HorizontalSpread; // 0x118(0x04)
	char pad_11C[0x4]; // 0x11c(0x04)
	struct FMulticastInlineDelegate OnProjectileSpawned; // 0x120(0x10)
	struct TArray<struct UItemUpgrade*> ProjectileUpgrades; // 0x130(0x10)
	float ArcStartAngle; // 0x140(0x04)
	bool TransferCharacterVelocityToProjectile; // 0x144(0x01)
	bool CameraToMuzzleFireCheck; // 0x145(0x01)
	char pad_146[0x12]; // 0x146(0x12)

	void Server_StopFire(); // Function FSD.ProjectileLauncherBaseComponent.Server_StopFire // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x108cac0
	void Server_Fire(struct FVector Origin, struct FVector_NetQuantizeNormal Direction, struct FVector_NetQuantizeNormal initialBonusVelocity, struct AProjectileBase* DormentProjectile, bool notifyClients); // Function FSD.ProjectileLauncherBaseComponent.Server_Fire // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults) // @ game+0x11da6b0
	void ProjectileSpawned__DelegateSignature(struct AProjectileBase* Projectile); // DelegateFunction FSD.ProjectileLauncherBaseComponent.ProjectileSpawned__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void All_ShowHit(); // Function FSD.ProjectileLauncherBaseComponent.All_ShowHit // (Net|Native|Event|NetMulticast|Protected) // @ game+0x108ba50
};

// Class FSD.ProjectileLauncherComponent
// Size: 0x170 (Inherited: 0x158)
struct UProjectileLauncherComponent : UProjectileLauncherBaseComponent {
	struct AProjectileBase* projectileClass; // 0x158(0x08)
	char pad_160[0x10]; // 0x160(0x10)

	void SetProjectileClass(struct AProjectileBase* NewProjectileClass); // Function FSD.ProjectileLauncherComponent.SetProjectileClass // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11da8e0
};

// Class FSD.ChargedProjectileLauncherComponent
// Size: 0x180 (Inherited: 0x158)
struct UChargedProjectileLauncherComponent : UProjectileLauncherBaseComponent {
	struct AProjectileBase* NormalProjectileClass; // 0x158(0x08)
	struct AProjectileBase* ChargedProjectileClass; // 0x160(0x08)
	float ProjectileChangeChargeValue; // 0x168(0x04)
	char pad_16C[0x14]; // 0x16c(0x14)

	void SetProjectileClassCharged(struct AProjectileBase* NewProjectileClass); // Function FSD.ChargedProjectileLauncherComponent.SetProjectileClassCharged // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11da960
	void SetProjectileClass(struct AProjectileBase* NewProjectileClass); // Function FSD.ChargedProjectileLauncherComponent.SetProjectileClass // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11da8e0
};

// Class FSD.PromotionRewardsSettings
// Size: 0x90 (Inherited: 0x30)
struct UPromotionRewardsSettings : UDataAsset {
	struct TArray<struct FClaimableRewardEntry> FirstPromotionRewards; // 0x30(0x10)
	struct TMap<int32_t, struct FPromotionRewardsRank> PromotionRanks; // 0x40(0x50)
};

// Class FSD.PromotionRewardsLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPromotionRewardsLibrary : UBlueprintFunctionLibrary {

	bool ClaimPromotionRewards(struct UObject* WorldContext, struct APlayerController* PlayerController, struct TArray<struct FClaimableRewardEntry> OutRewards, bool OutFirstPromotion); // Function FSD.PromotionRewardsLibrary.ClaimPromotionRewards // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11d9400
};

// Class FSD.ProspectorRobot
// Size: 0x3e8 (Inherited: 0x3a0)
struct AProspectorRobot : AEnemyDeepPathfinderCharacter {
	float WorkingArmSpeed; // 0x3a0(0x04)
	float EnginePowerMultiplier; // 0x3a4(0x04)
	char pad_3A8[0x8]; // 0x3a8(0x08)
	struct AActor* Target; // 0x3b0(0x08)
	float HeadResponsiveness; // 0x3b8(0x04)
	float HeadSearchSpeed; // 0x3bc(0x04)
	float HeadSearchMaxAngle; // 0x3c0(0x04)
	char pad_3C4[0x14]; // 0x3c4(0x14)
	struct UMaterialInstanceDynamic* EngineMaterial; // 0x3d8(0x08)
	enum class EProspectorRobotState ProspectorState; // 0x3e0(0x01)
	char pad_3E1[0x7]; // 0x3e1(0x07)

	void SetTarget(struct AActor* Target); // Function FSD.ProspectorRobot.SetTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x11da9e0
	void SetArmSpeed(float Speed); // Function FSD.ProspectorRobot.SetArmSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x11da860
	void OnStateEnd(enum class EProspectorRobotState oldState); // Function FSD.ProspectorRobot.OnStateEnd // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnStateBegin(enum class EProspectorRobotState NewState); // Function FSD.ProspectorRobot.OnStateBegin // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_ProspectorState(enum class EProspectorRobotState oldState); // Function FSD.ProspectorRobot.OnRep_ProspectorState // (Final|Native|Protected) // @ game+0x11da4a0
	bool IsStateActive(enum class EProspectorRobotState State); // Function FSD.ProspectorRobot.IsStateActive // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11da110
	void ChangeState(enum class EProspectorRobotState NewState); // Function FSD.ProspectorRobot.ChangeState // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x11d9380
};

// Class FSD.ProspectorAnimInstance
// Size: 0x2f0 (Inherited: 0x2c0)
struct UProspectorAnimInstance : UEnemyAnimInstance {
	char pad_2C0[0xc]; // 0x2c0(0x0c)
	struct FVector2D TiltResult; // 0x2cc(0x08)
	struct FVector2D LookingResult; // 0x2d4(0x08)
	char pad_2DC[0x8]; // 0x2dc(0x08)
	enum class EProspectorRobotState ProspectorState; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	float ArmBusyness; // 0x2e8(0x04)
	char pad_2EC[0x4]; // 0x2ec(0x04)
};

// Class FSD.PushingState
// Size: 0x108 (Inherited: 0x100)
struct UPushingState : UCharacterStateComponent {
	struct UUseAnimationSetting* PushingAnimation; // 0x100(0x08)
};

// Class FSD.RadarPointComponent
// Size: 0xd0 (Inherited: 0xb0)
struct URadarPointComponent : UActorComponent {
	struct FMulticastInlineDelegate OnRemove; // 0xb0(0x10)
	float PointPriority; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct UUserWidget* WidgetClass; // 0xc8(0x08)

	void MapToRadarPosition(struct FVector playerPos, struct FVector playerForward, struct FVector Pos, bool snap, struct FVector radarPos, float alpha); // Function FSD.RadarPointComponent.MapToRadarPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11da1a0
};

// Class FSD.NetworkedRadarPointComponent
// Size: 0xd0 (Inherited: 0xd0)
struct UNetworkedRadarPointComponent : URadarPointComponent {
};

// Class FSD.RagdollManager
// Size: 0xc0 (Inherited: 0xb0)
struct URagdollManager : UActorComponent {
	struct TArray<struct FRagdollItem> Items; // 0xb0(0x10)

	void StartRagdoll(struct AActor* Actor, struct TArray<struct UMaterialInstanceDynamic*> Materials, float desiredDuration); // Function FSD.RagdollManager.StartRagdoll // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11dac20
};

// Class FSD.RandomSelectorItem
// Size: 0x230 (Inherited: 0x228)
struct ARandomSelectorItem : AGenerationItem {
	int32_t Min; // 0x228(0x04)
	int32_t Max; // 0x22c(0x04)
};

// Class FSD.RandRangeFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct URandRangeFunctionLibrary : UBlueprintFunctionLibrary {

	bool TryPickRandomText(struct TArray<struct FText> TextArray, struct FRandomStream RandomStream, struct FText OutResult); // Function FSD.RandRangeFunctionLibrary.TryPickRandomText // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11dade0
	struct FText PickRandomText(struct TArray<struct FText> TextArray, struct FRandomStream RandomStream); // Function FSD.RandRangeFunctionLibrary.PickRandomText // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11da520
	int32_t GetValueFromStream(struct FIRandRange RandRange, struct FRandomStream RandomStream); // Function FSD.RandRangeFunctionLibrary.GetValueFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11d9fe0
	float GetFloatValue(struct FRandRange RandRange); // Function FSD.RandRangeFunctionLibrary.GetFloatValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11d9f20
	float GetFloatFromStream(struct FRandRange RandRange, struct FRandomStream RandomStream); // Function FSD.RandRangeFunctionLibrary.GetFloatFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11d9d60
};

// Class FSD.RandIntervalFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct URandIntervalFunctionLibrary : UBlueprintFunctionLibrary {

	float GetFloatValue(struct FRandInterval RandInterval); // Function FSD.RandIntervalFunctionLibrary.GetFloatValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11d9e70
};

// Class FSD.RDGComponent
// Size: 0xc0 (Inherited: 0xb0)
struct URDGComponent : UActorComponent {
	struct FMulticastInlineDelegate OnDetonated; // 0xb0(0x10)
};

// Class FSD.RDGLauncher
// Size: 0x6f0 (Inherited: 0x6e0)
struct ARDGLauncher : AAmmoDrivenWeapon {
	struct TArray<struct URDGComponent*> ActiveGrenades; // 0x6e0(0x10)

	void Server_DetonateAll(); // Function FSD.RDGLauncher.Server_DetonateAll // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1092350
	void RegisterGrenade(struct URDGComponent* Grenade); // Function FSD.RDGLauncher.RegisterGrenade // (Final|Native|Public|BlueprintCallable) // @ game+0x11deca0
};

// Class FSD.ReactiveTerrain
// Size: 0x28 (Inherited: 0x28)
struct UReactiveTerrain : UObject {

	void Receive_OnActorLeft(struct UStatusEffectsComponent* StatusEffects); // Function FSD.ReactiveTerrain.Receive_OnActorLeft // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Receive_OnActorEntered(struct UStatusEffectsComponent* StatusEffects); // Function FSD.ReactiveTerrain.Receive_OnActorEntered // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.StatusEffectReactiveTerrain
// Size: 0x30 (Inherited: 0x28)
struct UStatusEffectReactiveTerrain : UReactiveTerrain {
	struct UStatusEffect* StatusEffect; // 0x28(0x08)
};

// Class FSD.ReactiveTerrainTrackerComponent
// Size: 0xb0 (Inherited: 0xb0)
struct UReactiveTerrainTrackerComponent : UActorComponent {
};

// Class FSD.PlayerReactiveTerrainTrackerComponent
// Size: 0xb8 (Inherited: 0xb0)
struct UPlayerReactiveTerrainTrackerComponent : UReactiveTerrainTrackerComponent {
	struct UFSDPhysicalMaterial* CurrentPhysicalMaterial; // 0xb0(0x08)
};

// Class FSD.PathfinderReactiveTerrainTrackerComponent
// Size: 0xd0 (Inherited: 0xb0)
struct UPathfinderReactiveTerrainTrackerComponent : UReactiveTerrainTrackerComponent {
	struct FRandRange CheckInterval; // 0xb0(0x08)
	struct UFSDPhysicalMaterial* CurrentPhysicalMaterial; // 0xb8(0x08)
	struct UStatusEffectsComponent* StatusEffectsComponent; // 0xc0(0x08)
	char pad_C8[0x8]; // 0xc8(0x08)
};

// Class FSD.RecallableActor
// Size: 0x420 (Inherited: 0x380)
struct ARecallableActor : ADeepPathfinderCharacter {
	char pad_380[0x8]; // 0x380(0x08)
	struct FMulticastInlineDelegate OnStateChanged; // 0x388(0x10)
	struct FMulticastInlineDelegate OnReturnFinish; // 0x398(0x10)
	struct FMulticastInlineDelegate OnRelocateFinished; // 0x3a8(0x10)
	float AcceptanceRadius; // 0x3b8(0x04)
	float AutoRecallDistance; // 0x3bc(0x04)
	float RelocateLandingHeight; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct AActor* RelocationMarkerType; // 0x3c8(0x08)
	struct TWeakObjectPtr<struct AActor> RecallTarget; // 0x3d0(0x08)
	enum class ERecallableActorState State; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct FTransform RelocateTransform; // 0x3e0(0x30)
	bool RelocateLanded; // 0x410(0x01)
	char pad_411[0x3]; // 0x411(0x03)
	struct TWeakObjectPtr<struct AActor> RelocationMarker; // 0x414(0x08)
	bool bInitialized; // 0x41c(0x01)
	char pad_41D[0x3]; // 0x41d(0x03)

	void SetRecallTarget(struct AActor* NewTarget); // Function FSD.RecallableActor.SetRecallTarget // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x11df1e0
	void Relocate(struct FVector NewLocation, struct FRotator NewRotation); // Function FSD.RecallableActor.Relocate // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|BlueprintCallable|NetValidate) // @ game+0x11defc0
	void ReceiveOnStateChanged(); // Function FSD.RecallableActor.ReceiveOnStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void RecallableActorStateChanged__DelegateSignature(struct ARecallableActor* Sender, enum class ERecallableActorState State); // DelegateFunction FSD.RecallableActor.RecallableActorStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void Recall(); // Function FSD.RecallableActor.Recall // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x11dec50
	void OnReturnSucceeded(); // Function FSD.RecallableActor.OnReturnSucceeded // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnReturnFailed(); // Function FSD.RecallableActor.OnReturnFailed // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_State(enum class ERecallableActorState oldState); // Function FSD.RecallableActor.OnRep_State // (Final|Native|Protected) // @ game+0x11deb50
	void OnRep_RecallTarget(); // Function FSD.RecallableActor.OnRep_RecallTarget // (Final|Native|Protected) // @ game+0x11dead0
	void OnRelocated(); // Function FSD.RecallableActor.OnRelocated // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRecallTargetChanged(struct AActor* NewTarget); // Function FSD.RecallableActor.OnRecallTargetChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnPathFinished(bool success); // Function FSD.RecallableActor.OnPathFinished // (Final|Native|Protected) // @ game+0x11de9c0
	void OnMoving(); // Function FSD.RecallableActor.OnMoving // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnMoveRequested(); // Function FSD.RecallableActor.OnMoveRequested // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnMoveFinished(bool returnedHome); // Function FSD.RecallableActor.OnMoveFinished // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	bool GetIsReturning(); // Function FSD.RecallableActor.GetIsReturning // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11de720
	bool GetIsMovingOrMoveRequested(); // Function FSD.RecallableActor.GetIsMovingOrMoveRequested // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11de6f0
	bool GetIsMoving(); // Function FSD.RecallableActor.GetIsMoving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11de6c0
	bool GetIsMoveRequested(); // Function FSD.RecallableActor.GetIsMoveRequested // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11de690
	void BeginMove(); // Function FSD.RecallableActor.BeginMove // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x11de3d0
};

// Class FSD.RecallableItem
// Size: 0x3b0 (Inherited: 0x390)
struct ARecallableItem : AAnimatedItem {
	char pad_390[0x8]; // 0x390(0x08)
	struct ARecallableActor* ItemType; // 0x398(0x08)
	struct TArray<struct TWeakObjectPtr<struct ARecallableActor>> ActiveItems; // 0x3a0(0x10)

	void ServerSpawnItem(struct FVector Location, struct FRotator Rotation); // Function FSD.RecallableItem.ServerSpawnItem // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x11df0f0
	void ReceiveOnItemSpawned(struct ARecallableActor* Item); // Function FSD.RecallableItem.ReceiveOnItemSpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_ActiveItems(); // Function FSD.RecallableItem.OnRep_ActiveItems // (Native|Protected) // @ game+0x1090b80
	void ItemReturnFinished(struct AActor* Item, bool success); // Function FSD.RecallableItem.ItemReturnFinished // (Final|Native|Protected) // @ game+0x11de7f0
	bool CanSpawnItem(struct FVector Location, struct FRotator Rotation); // Function FSD.RecallableItem.CanSpawnItem // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x11de3f0
};

// Class FSD.SentryGun
// Size: 0x400 (Inherited: 0x220)
struct ASentryGun : AActor {
	char pad_220[0x10]; // 0x220(0x10)
	struct FMulticastInlineDelegate OnEnabledChanged; // 0x230(0x10)
	struct FMulticastInlineDelegate OnAmmoCountChanged; // 0x240(0x10)
	struct FMulticastInlineDelegate OnMaxAmmoCountChanged; // 0x250(0x10)
	struct USkeletalMeshComponent* SentryGunMesh; // 0x260(0x08)
	struct TArray<struct FSentryGunMuzzleSetup> SentryGunMuzzels; // 0x268(0x10)
	char pad_278[0x10]; // 0x278(0x10)
	struct AProjectile* projectileClass; // 0x288(0x08)
	struct USoundCue* ShootingSound; // 0x290(0x08)
	struct UParticleSystem* MuzzleFlash; // 0x298(0x08)
	struct FTracerData TracerData; // 0x2a0(0x30)
	struct UParticleSystem* Tracer; // 0x2d0(0x08)
	float MinTracerDistance; // 0x2d8(0x04)
	float AngleRestriction; // 0x2dc(0x04)
	bool Enabled; // 0x2e0(0x01)
	char pad_2E1[0x7]; // 0x2e1(0x07)
	struct TArray<struct FOverlapResult> OverlapCache; // 0x2e8(0x10)
	struct FRotator MinRotation; // 0x2f8(0x0c)
	struct FRotator MaxRotation; // 0x304(0x0c)
	float AquisitionRange; // 0x310(0x04)
	float RotationSpeed; // 0x314(0x04)
	float ShotCoolDown; // 0x318(0x04)
	float TargetLeading; // 0x31c(0x04)
	int32_t BurstCount; // 0x320(0x04)
	float BurstShotCoolDown; // 0x324(0x04)
	float IdleScanAngle; // 0x328(0x04)
	float IdleScanSpeed; // 0x32c(0x04)
	float FinalShotFadeOut; // 0x330(0x04)
	char pad_334[0x4]; // 0x334(0x04)
	struct USoundBase* AudioOnTurn; // 0x338(0x08)
	struct FGameplayTagContainer DissallowedTargetTags; // 0x340(0x20)
	char pad_360[0x18]; // 0x360(0x18)
	int32_t AmmoCount; // 0x378(0x04)
	int32_t MaxAmmoCount; // 0x37c(0x04)
	float Damage; // 0x380(0x04)
	float TargetYaw; // 0x384(0x04)
	float TargetPitch; // 0x388(0x04)
	struct TWeakObjectPtr<struct UHealthComponentBase> LastTarget; // 0x38c(0x08)
	struct TWeakObjectPtr<struct UHealthComponentBase> PrioritizedTarget; // 0x394(0x08)
	char pad_39C[0x1c]; // 0x39c(0x1c)
	struct UWeaponFireComponent* WeaponFire; // 0x3b8(0x08)
	char pad_3C0[0x30]; // 0x3c0(0x30)
	struct UAudioComponent* ShootingAudioComponent; // 0x3f0(0x08)
	char pad_3F8[0x8]; // 0x3f8(0x08)

	void UseAmmo(int32_t Amount); // Function FSD.SentryGun.UseAmmo // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1200e00
	void ReceiveAmmoChanged(int32_t Delta, int32_t currentAmount); // Function FSD.SentryGun.ReceiveAmmoChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_MaxAmmoCount(int32_t OldCount); // Function FSD.SentryGun.OnRep_MaxAmmoCount // (Final|Native|Protected) // @ game+0x12005a0
	void OnRep_LastTarget(); // Function FSD.SentryGun.OnRep_LastTarget // (Final|Native|Protected) // @ game+0x1200580
	void OnRep_AmmoCount(int32_t OldCount); // Function FSD.SentryGun.OnRep_AmmoCount // (Final|Native|Protected) // @ game+0x1200500
	void OnProjectileFired(struct FVector Location); // Function FSD.SentryGun.OnProjectileFired // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1200450
	void OnNewTargetRequested(struct FLaserPointerTarget HitInfo); // Function FSD.SentryGun.OnNewTargetRequested // (Final|Native|Protected|HasOutParms) // @ game+0x1200370
	struct FTransform GetMuzzleTransform(); // Function FSD.SentryGun.GetMuzzleTransform // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ffea0
	struct FName GetMuzzleName(); // Function FSD.SentryGun.GetMuzzleName // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ffe60
	int32_t GetMaxAmmoCount(); // Function FSD.SentryGun.GetMaxAmmoCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112a5f0
	float GetDeployProgress(); // Function FSD.SentryGun.GetDeployProgress // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x11ff6b0
	float GetAmmoLeftPct(); // Function FSD.SentryGun.GetAmmoLeftPct // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ff550
	int32_t GetAmmoLeft(); // Function FSD.SentryGun.GetAmmoLeft // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ff530
	void Force_Fire(struct AActor* Target); // Function FSD.SentryGun.Force_Fire // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x117ee40
	void EnabledChanged__DelegateSignature(bool IsEnabled); // DelegateFunction FSD.SentryGun.EnabledChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void AmmoSpent(); // Function FSD.SentryGun.AmmoSpent // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.RedeployableSentryGun
// Size: 0x4b0 (Inherited: 0x400)
struct ARedeployableSentryGun : ASentryGun {
	struct FMulticastInlineDelegate OnStateChanged; // 0x400(0x10)
	struct FMulticastInlineDelegate OnDeployFinished; // 0x410(0x10)
	struct FMulticastInlineDelegate OnDismantleFinished; // 0x420(0x10)
	struct FMulticastInlineDelegate OnDeployProgressEvent; // 0x430(0x10)
	struct UActorTrackingComponent* ActorTrackingIcon; // 0x440(0x08)
	struct UOutlineComponent* outline; // 0x448(0x08)
	struct TWeakObjectPtr<struct APlayerCharacter> SentryGunOwner; // 0x450(0x08)
	bool bOutlineAndIconVisible; // 0x458(0x01)
	enum class ERedeployableSentryGunState State; // 0x459(0x01)
	char pad_45A[0x16]; // 0x45a(0x16)
	float PlasmaLineMaxRange; // 0x470(0x04)
	char pad_474[0x4]; // 0x474(0x04)
	struct TArray<struct ASentryElectroBeam*> PlasmaLines; // 0x478(0x10)
	struct ASentryElectroBeam* PlasmaBeamClass; // 0x488(0x08)
	struct AActor* ElectrocutionActorClass; // 0x490(0x08)
	struct AActor* ElectrocutionActor; // 0x498(0x08)
	struct AActor* EMPDischargeActorClass; // 0x4a0(0x08)
	float EMPDiscargeCooldown; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)

	void ToggleOutlineAndIcon(bool Visible); // Function FSD.RedeployableSentryGun.ToggleOutlineAndIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x11df4a0
	void SetSentryGunOwner(struct APlayerCharacter* Character); // Function FSD.RedeployableSentryGun.SetSentryGunOwner // (Final|Native|Public|BlueprintCallable) // @ game+0x11df2a0
	void ReceiveOnStateChanged(); // Function FSD.RedeployableSentryGun.ReceiveOnStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveOnSentryGunOwnerChanged(); // Function FSD.RedeployableSentryGun.ReceiveOnSentryGunOwnerChanged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveOnDismantled(); // Function FSD.RedeployableSentryGun.ReceiveOnDismantled // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveOnDismantle(); // Function FSD.RedeployableSentryGun.ReceiveOnDismantle // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveOnDeployed(); // Function FSD.RedeployableSentryGun.ReceiveOnDeployed // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveOnDeploy(); // Function FSD.RedeployableSentryGun.ReceiveOnDeploy // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnStateChanged__DelegateSignature(struct ARedeployableSentryGun* Sender, enum class ERedeployableSentryGunState NewState); // DelegateFunction FSD.RedeployableSentryGun.OnStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnRep_State(enum class ERedeployableSentryGunState oldState); // Function FSD.RedeployableSentryGun.OnRep_State // (Final|Native|Protected) // @ game+0x11debd0
	void OnRep_SentryGunOwner(); // Function FSD.RedeployableSentryGun.OnRep_SentryGunOwner // (Final|Native|Protected) // @ game+0x11deb30
	void OnElectrocutionActorDestroyed(struct AActor* Actor); // Function FSD.RedeployableSentryGun.OnElectrocutionActorDestroyed // (Final|Native|Protected) // @ game+0x11de8c0
	void OnDismantleFinished__DelegateSignature(); // DelegateFunction FSD.RedeployableSentryGun.OnDismantleFinished__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnDeployProgress__DelegateSignature(float Progress); // DelegateFunction FSD.RedeployableSentryGun.OnDeployProgress__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnDeployFinished__DelegateSignature(); // DelegateFunction FSD.RedeployableSentryGun.OnDeployFinished__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool GetIsDismantled(); // Function FSD.RedeployableSentryGun.GetIsDismantled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11de660
	bool GetIsDeployed(); // Function FSD.RedeployableSentryGun.GetIsDeployed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11de630
	float GetAnimDuration(struct USkeletalMeshComponent* Mesh); // Function FSD.RedeployableSentryGun.GetAnimDuration // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x11de590
	void DismantleFinished(); // Function FSD.RedeployableSentryGun.DismantleFinished // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x11de570
	void Dismantle(); // Function FSD.RedeployableSentryGun.Dismantle // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11de550
	void DeployFinished(); // Function FSD.RedeployableSentryGun.DeployFinished // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x11de530
	void Deploy(); // Function FSD.RedeployableSentryGun.Deploy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11de510
	void ActivateSpecialAttack(); // Function FSD.RedeployableSentryGun.ActivateSpecialAttack // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.RefineryObjective
// Size: 0x208 (Inherited: 0x178)
struct URefineryObjective : UObjective {
	struct FMulticastInlineDelegate OnRefinerySpawned; // 0x178(0x10)
	SoftClassProperty refineryClass; // 0x188(0x28)
	struct TWeakObjectPtr<struct AFSDRefinery> Refinery; // 0x1b0(0x08)
	enum class ERefineryState RefineryState; // 0x1b8(0x01)
	char pad_1B9[0x7]; // 0x1b9(0x07)
	struct UDebrisPositioning* RefineryPlacement; // 0x1c0(0x08)
	SoftClassProperty RawMaterialClass; // 0x1c8(0x28)
	struct UDebrisPositioning* RawMaterialPlacement; // 0x1f0(0x08)
	int32_t RawMaterialCount; // 0x1f8(0x04)
	bool bMissionCompleted; // 0x1fc(0x01)
	bool bIsFinalBattle; // 0x1fd(0x01)
	char pad_1FE[0x2]; // 0x1fe(0x02)
	int32_t OptionalTunnelRoomID; // 0x200(0x04)
	char pad_204[0x4]; // 0x204(0x04)

	void SpawnWells(struct AProceduralSetup* setup, struct FVector rigLocation, float minDistanceBetween, struct TArray<struct FVector2D> minMaxDistancesToRig); // Function FSD.RefineryObjective.SpawnWells // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11df320
	void RefineryDelegate__DelegateSignature(struct AFSDRefinery* InRefinery); // DelegateFunction FSD.RefineryObjective.RefineryDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ReceiveRefinerySpawned(struct AFSDRefinery* InRefinery); // Function FSD.RefineryObjective.ReceiveRefinerySpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_Refinery(); // Function FSD.RefineryObjective.OnRep_Refinery // (Final|Native|Protected) // @ game+0x11deaf0
	void OnRefineryStateChanged(enum class ERefineryState InRefineryState); // Function FSD.RefineryObjective.OnRefineryStateChanged // (Final|Native|Protected) // @ game+0x11dea50
	struct FVector GetRefinerySpawnLocation(struct AFSDRefinery* refineryClass); // Function FSD.RefineryObjective.GetRefinerySpawnLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11de750
	void AddMissionCriticalItems(struct AProceduralSetup* setup); // Function FSD.RefineryObjective.AddMissionCriticalItems // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.RegisterInviteNotificationBlueprintCallProxy
// Size: 0x98 (Inherited: 0x30)
struct URegisterInviteNotificationBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnInviteReceived; // 0x30(0x10)
	struct FMulticastInlineDelegate OnInviteAccepted; // 0x40(0x10)
	struct FMulticastInlineDelegate OnInviteRejected; // 0x50(0x10)
	struct UObject* WorldContextObject; // 0x60(0x08)
	char pad_68[0x30]; // 0x68(0x30)

	struct URegisterInviteNotificationBlueprintCallProxy* RegisterInvitiNotification(struct UObject* WorldContextObject); // Function FSD.RegisterInviteNotificationBlueprintCallProxy.RegisterInvitiNotification // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11ded20
};

// Class FSD.RegisterSessionInviteNotificationBlueprintCallProxy
// Size: 0x58 (Inherited: 0x30)
struct URegisterSessionInviteNotificationBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSessionUserInviteAccepted; // 0x30(0x10)
	struct UObject* WorldContextObject; // 0x40(0x08)
	char pad_48[0x10]; // 0x48(0x10)

	struct URegisterSessionInviteNotificationBlueprintCallProxy* RegisterSessionInviteNotification(struct UObject* WorldContextObject); // Function FSD.RegisterSessionInviteNotificationBlueprintCallProxy.RegisterSessionInviteNotification // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11deda0
};

// Class FSD.RejectInviteBlueprintCallProxy
// Size: 0x90 (Inherited: 0x30)
struct URejectInviteBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char pad_58[0x38]; // 0x58(0x38)

	struct URejectInviteBlueprintCallProxy* RejectInvite(struct UObject* WorldContextObject, struct FString ListName, struct FString UserId); // Function FSD.RejectInviteBlueprintCallProxy.RejectInvite // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11dee20
};

// Class FSD.RepairableComponent
// Size: 0xf0 (Inherited: 0xb0)
struct URepairableComponent : UActorComponent {
	struct FMulticastInlineDelegate OnFullyRepairedEvent; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnAllResourcesAquiredEvent; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnRepairedEvent; // 0xd0(0x10)
	struct UGemResourceData* RequiresCarriedResource; // 0xe0(0x08)
	int32_t ResourcesRequired; // 0xe8(0x04)
	bool IsFullyRepaired; // 0xec(0x01)
	char pad_ED[0x3]; // 0xed(0x03)

	bool TryRepair(struct APlayerCharacter* User); // Function FSD.RepairableComponent.TryRepair // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11df530
	void OnRep_ResourcesRequired(); // Function FSD.RepairableComponent.OnRep_ResourcesRequired // (Final|Native|Protected) // @ game+0x11deb10
	int32_t GetResourcesRequired(); // Function FSD.RepairableComponent.GetResourcesRequired // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a3100
	void Cheat_Repair(); // Function FSD.RepairableComponent.Cheat_Repair // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11de4f0
};

// Class FSD.RepairObjective
// Size: 0x1e8 (Inherited: 0x178)
struct URepairObjective : UObjective {
	int32_t RepairedObjectives; // 0x178(0x04)
	int32_t ObjectivesToRepair; // 0x17c(0x04)
	SoftClassProperty RepairObjectiveClass; // 0x180(0x28)
	struct UGemResourceData* RepairObjectiveResource; // 0x1a8(0x08)
	struct UDebrisPositioning* Positioning; // 0x1b0(0x08)
	int32_t RepairResourcesPerActor; // 0x1b8(0x04)
	float RepairResourceDistanceFromActor; // 0x1bc(0x04)
	float MinRepairObjectiveDistanceToLandingZone; // 0x1c0(0x04)
	char pad_1C4[0x4]; // 0x1c4(0x04)
	struct TArray<struct AActor*> RepairedObjectivesList; // 0x1c8(0x10)
	char pad_1D8[0x10]; // 0x1d8(0x10)

	void OnRep_RepairedObjectives(); // Function FSD.RepairObjective.OnRep_RepairedObjectives // (Final|Native|Protected) // @ game+0x10c9930
	void OnRep_ObjectivesToRepair(); // Function FSD.RepairObjective.OnRep_ObjectivesToRepair // (Final|Native|Protected) // @ game+0x10c9930
	void OnObjectiveRepaired(struct URepairableComponent* repairable); // Function FSD.RepairObjective.OnObjectiveRepaired // (Final|Native|Protected) // @ game+0x11de940
	void AllObjectivesRepaired(); // Function FSD.RepairObjective.AllObjectivesRepaired // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ResourceBank
// Size: 0x158 (Inherited: 0xf0)
struct UResourceBank : UUsableComponentBase {
	struct FMulticastInlineDelegate OnBeginDeposite; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnDepositing; // 0x100(0x10)
	struct FMulticastInlineDelegate OnEndDeposite; // 0x110(0x10)
	bool OpenForDeposit; // 0x120(0x01)
	char pad_121[0x7]; // 0x121(0x07)
	struct AFSDGameState* GameState; // 0x128(0x08)
	float DepositesPerSecond; // 0x130(0x04)
	float DepositeAmount; // 0x134(0x04)
	char pad_138[0x4]; // 0x138(0x04)
	bool CanGetStrict; // 0x13c(0x01)
	bool AddToTeamInventory; // 0x13d(0x01)
	char pad_13E[0x2]; // 0x13e(0x02)
	struct USoundBase* AudioBeginDepositing; // 0x140(0x08)
	struct USoundBase* AudioDepositing; // 0x148(0x08)
	struct USoundBase* AudioEndDepositing; // 0x150(0x08)

	void ResourceBankEvent__DelegateSignature(struct APlayerCharacter* User); // DelegateFunction FSD.ResourceBank.ResourceBankEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void All_Depositing(struct APlayerCharacter* Character); // Function FSD.ResourceBank.All_Depositing // (Net|Native|Event|NetMulticast|Protected) // @ game+0x11e3340
};

// Class FSD.RestrictedResourceBank
// Size: 0x160 (Inherited: 0x158)
struct URestrictedResourceBank : UResourceBank {
	struct UResourceData* RequiredResource; // 0x158(0x08)
};

// Class FSD.ResourceChunk
// Size: 0x290 (Inherited: 0x238)
struct AResourceChunk : AFSDPhysicsActor {
	float CollectDuration; // 0x238(0x04)
	bool CanBeCollectedNormally; // 0x23c(0x01)
	bool CanBeCollected; // 0x23d(0x01)
	char pad_23E[0x2]; // 0x23e(0x02)
	struct USimpleObjectInfoComponent* InfoComponent; // 0x240(0x08)
	float ResourceAmount; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
	struct USoundCue* PickupSound; // 0x250(0x08)
	struct UResourceData* ResourceData; // 0x258(0x08)
	struct TArray<struct APlayerCharacter*> OverlappingPlayers; // 0x260(0x10)
	struct TWeakObjectPtr<struct APlayerCharacter> CollectedBy; // 0x270(0x08)
	char pad_278[0x18]; // 0x278(0x18)

	void SetCollectOpen(); // Function FSD.ResourceChunk.SetCollectOpen // (Final|Native|Protected) // @ game+0x11e4260
	void OnRep_CollectedBy(); // Function FSD.ResourceChunk.OnRep_CollectedBy // (Final|Native|Protected) // @ game+0x11e3e90
	struct UResourceData* GetResourceData(); // Function FSD.ResourceChunk.GetResourceData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1091330
	float GetResourceAmount(); // Function FSD.ResourceChunk.GetResourceAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e38b0
	void CalcMovement(float InProgress, struct FVector InVector, struct FVector OutVelocity, struct FVector OutAngularVelocity); // Function FSD.ResourceChunk.CalcMovement // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ResourceCreator
// Size: 0x30 (Inherited: 0x30)
struct UResourceCreator : UDataAsset {
};

// Class FSD.VeinResourceCreator
// Size: 0x78 (Inherited: 0x30)
struct UVeinResourceCreator : UResourceCreator {
	struct UVeinResourceData* Resource; // 0x30(0x08)
	struct UDebrisPositioning* Positioning; // 0x38(0x08)
	enum class ECarveFilterType CarveType; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float SegmentMaxDot; // 0x44(0x04)
	float VeinWorldHorizontalMaxDot; // 0x48(0x04)
	float VeinWorldHorizontalMinDot; // 0x4c(0x04)
	struct FRandRange VeinLength; // 0x50(0x08)
	struct UFloodFillSettings* Noise; // 0x58(0x08)
	float range; // 0x60(0x04)
	float NoiseRange; // 0x64(0x04)
	struct TArray<struct TSoftObjectPtr<struct UDebrisBase>> Debris; // 0x68(0x10)
};

// Class FSD.PatchResourceCreator
// Size: 0x70 (Inherited: 0x30)
struct UPatchResourceCreator : UResourceCreator {
	struct UDebrisPositioning* Positioning; // 0x30(0x08)
	enum class ECarveFilterType CarveType; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct UFloodFillSettings* PatchNoise; // 0x40(0x08)
	struct UFloodFillSettings* CarverNoise; // 0x48(0x08)
	float range; // 0x50(0x04)
	float NoiseRange; // 0x54(0x04)
	float NoiseScale; // 0x58(0x04)
	float Size; // 0x5c(0x04)
	struct TArray<struct UDebrisBase*> VeinDebris; // 0x60(0x10)
};

// Class FSD.CarvedResourceCreator
// Size: 0x98 (Inherited: 0x30)
struct UCarvedResourceCreator : UResourceCreator {
	struct UCarvedResourceData* Resource; // 0x30(0x08)
	bool ScaleToResourceDistribution; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct UDebrisPositioning* Positioning; // 0x40(0x08)
	struct FIRandRange NumCarvers; // 0x48(0x08)
	float ExpensiveNoise; // 0x50(0x04)
	float CarveOffsetRadius; // 0x54(0x04)
	struct AActor* SpawnAttachClass; // 0x58(0x08)
	float AttachSpawnOffsetDistance; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct UTerrainMaterial* TerrainMaterial; // 0x68(0x08)
	enum class ECarveFilterType Filter; // 0x70(0x01)
	enum class CarveOptionsCellSize CarveCellSize; // 0x71(0x01)
	char pad_72[0x6]; // 0x72(0x06)
	struct TArray<struct FUDebrisCarveMesh> Meshes; // 0x78(0x10)
	struct TArray<struct FResourceDebris> Debris; // 0x88(0x10)
};

// Class FSD.BaseResource
// Size: 0x30 (Inherited: 0x30)
struct UBaseResource : UDataAsset {
};

// Class FSD.ResourceObjective
// Size: 0x1c0 (Inherited: 0x178)
struct UResourceObjective : UResourceBasedObjective {
	struct UResourceData* Resource; // 0x178(0x08)
	float ResourcesRequired; // 0x180(0x04)
	float ResourcesCollected; // 0x184(0x04)
	float ResourceBuffer; // 0x188(0x04)
	float RoundToNearest; // 0x18c(0x04)
	struct FText ObjectivesText; // 0x190(0x18)
	struct FText CreditsRewardText; // 0x1a8(0x18)

	void OnResourceChanged(struct UCappedResource* CappedResource, float Amount); // Function FSD.ResourceObjective.OnResourceChanged // (Final|Native|Protected) // @ game+0x11e3f70
	void OnRep_ResourcesCollected(float prevAmount); // Function FSD.ResourceObjective.OnRep_ResourcesCollected // (Final|Native|Protected) // @ game+0x10e7020
	float GetRequiredAmount(float missionScaling); // Function FSD.ResourceObjective.GetRequiredAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e3750
};

// Class FSD.RessuplyPodSpawn
// Size: 0x2d8 (Inherited: 0x2d8)
struct ARessuplyPodSpawn : ARessuplyPod {

	void SetController(struct AFSDPlayerController* Controller); // Function FSD.RessuplyPodSpawn.SetController // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void SetCharacter(struct APlayerCharacter* Character); // Function FSD.RessuplyPodSpawn.SetCharacter // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.RessuplyPodItem
// Size: 0x3f0 (Inherited: 0x390)
struct ARessuplyPodItem : AAnimatedItem {
	struct AActor* ResupplyBeacon; // 0x390(0x08)
	struct UItemPlacerAggregator* ItemPlacerClass; // 0x398(0x08)
	struct UItemPlacerAggregator* ItemPlacerInstance; // 0x3a0(0x08)
	struct ARessuplyPod* SupplyPodClass; // 0x3a8(0x08)
	int32_t ResourceCost; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
	struct FText OrderDescription; // 0x3b8(0x18)
	struct FText LogText; // 0x3d0(0x18)
	float CoolDown; // 0x3e8(0x04)
	bool Used; // 0x3ec(0x01)
	char pad_3ED[0x3]; // 0x3ed(0x03)

	void Server_Call_Resupply(struct FVector Location); // Function FSD.RessuplyPodItem.Server_Call_Resupply // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x109b7e0
	void ReceiveItemPlacerSpawned(struct UItemPlacerAggregator* InItemPlacer); // Function FSD.RessuplyPodItem.ReceiveItemPlacerSpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_Used(); // Function FSD.RessuplyPodItem.OnRep_Used // (Final|Native|Protected) // @ game+0x11e3f50
	int32_t GetResourceCost(struct UObject* WorldContextObject); // Function FSD.RessuplyPodItem.GetResourceCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e38d0
	struct UItemPlacerAggregator* GetActiveAggregator(); // Function FSD.RessuplyPodItem.GetActiveAggregator // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e3520
};

// Class FSD.UnlockReward
// Size: 0x30 (Inherited: 0x30)
struct UUnlockReward : UReward {
};

// Class FSD.UnlockPlanetZoneReward
// Size: 0x38 (Inherited: 0x30)
struct UUnlockPlanetZoneReward : UUnlockReward {
	struct UPlanetZone* ZoneToUnlock; // 0x30(0x08)
};

// Class FSD.UnlockMissionTypeReward
// Size: 0x38 (Inherited: 0x30)
struct UUnlockMissionTypeReward : UUnlockReward {
	struct UMissionTemplate* MissionToUnlock; // 0x30(0x08)
};

// Class FSD.UnlockComplexityReward
// Size: 0x40 (Inherited: 0x30)
struct UUnlockComplexityReward : UUnlockReward {
	struct UMissionTemplate* mission; // 0x30(0x08)
	struct UMissionComplexity* Complexity; // 0x38(0x08)
};

// Class FSD.UnlockDurationReward
// Size: 0x40 (Inherited: 0x30)
struct UUnlockDurationReward : UUnlockReward {
	struct UMissionTemplate* mission; // 0x30(0x08)
	struct UMissionDuration* Duration; // 0x38(0x08)
};

// Class FSD.UnlockDifficultyReward
// Size: 0x38 (Inherited: 0x30)
struct UUnlockDifficultyReward : UUnlockReward {
	struct UDifficultySetting* Difficulty; // 0x30(0x08)
};

// Class FSD.ResourceReward
// Size: 0x40 (Inherited: 0x30)
struct UResourceReward : UReward {
	struct UResourceData* Resource; // 0x30(0x08)
	int32_t Amount; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.WeeklyResourceReward
// Size: 0x40 (Inherited: 0x30)
struct UWeeklyResourceReward : UReward {
	int32_t ResourceCount; // 0x30(0x04)
	struct FIRandRange Amount; // 0x34(0x08)
	char pad_3C[0x4]; // 0x3c(0x04)

	struct TMap<struct UResourceData*, float> GetRewards(struct AFSDPlayerController* Player); // Function FSD.WeeklyResourceReward.GetRewards // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e3960
};

// Class FSD.RetirementReward
// Size: 0x38 (Inherited: 0x30)
struct URetirementReward : UUnlockReward {
	struct UPlayerCharacterID* characterID; // 0x30(0x08)
};

// Class FSD.ItemBlueprintReward
// Size: 0x58 (Inherited: 0x30)
struct UItemBlueprintReward : UUnlockReward {
	SoftClassProperty ItemToUnlock; // 0x30(0x28)

	struct AActor* GetActorDefaultObject(); // Function FSD.ItemBlueprintReward.GetActorDefaultObject // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e3590
	struct AActor* GetActorClass(); // Function FSD.ItemBlueprintReward.GetActorClass // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e3550
};

// Class FSD.SchematicReward
// Size: 0x40 (Inherited: 0x30)
struct USchematicReward : UUnlockReward {
	enum class ESchematicType SchematicType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct USchematic* RewardedSchematic; // 0x38(0x08)
};

// Class FSD.SkinUnlock
// Size: 0x48 (Inherited: 0x30)
struct USkinUnlock : UUnlockReward {
	struct UItemID* OptionalItemID; // 0x30(0x08)
	struct UPlayerCharacterID* OptionalCharacterID; // 0x38(0x08)
	struct UItemSkin* Skin; // 0x40(0x08)
};

// Class FSD.PermanentItemUpgradeReward
// Size: 0x40 (Inherited: 0x30)
struct UPermanentItemUpgradeReward : UUnlockReward {
	struct AActor* Item; // 0x30(0x08)
	struct UItemUpgrade* Upgrade; // 0x38(0x08)
};

// Class FSD.OverclockingUnlockReward
// Size: 0x38 (Inherited: 0x30)
struct UOverclockingUnlockReward : UUnlockReward {
	struct AActor* Item; // 0x30(0x08)
};

// Class FSD.PureTextReward
// Size: 0x48 (Inherited: 0x30)
struct UPureTextReward : UUnlockReward {
	struct FText Text; // 0x30(0x18)
};

// Class FSD.VanityReward
// Size: 0x48 (Inherited: 0x30)
struct UVanityReward : UUnlockReward {
	struct UVanityItem* VanityItem; // 0x30(0x08)
	struct UPlayerCharacterID* OptionalCharacterID; // 0x38(0x08)
	bool UseContextAsTargetCharacter; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class FSD.VanityCollectionReward
// Size: 0x50 (Inherited: 0x30)
struct UVanityCollectionReward : UUnlockReward {
	struct TArray<struct UVanityItem*> vanityItems; // 0x30(0x10)
	struct UPlayerCharacterID* OptionalCharacterID; // 0x40(0x08)
	bool UseContextAsTargetCharacter; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class FSD.VictoryPoseReward
// Size: 0x40 (Inherited: 0x30)
struct UVictoryPoseReward : UUnlockReward {
	struct UVictoryPose* VictoryPose; // 0x30(0x08)
	struct UPlayerCharacterID* OptionalCharacterID; // 0x38(0x08)
};

// Class FSD.PickaxePartReward
// Size: 0x38 (Inherited: 0x30)
struct UPickaxePartReward : UUnlockReward {
	struct UPickaxePart* PicaxePart; // 0x30(0x08)
};

// Class FSD.PickaxeSetReward
// Size: 0x68 (Inherited: 0x30)
struct UPickaxeSetReward : UUnlockReward {
	struct UPickaxePart* BladeFront; // 0x30(0x08)
	struct UPickaxePart* OptionalBladeBack; // 0x38(0x08)
	struct UPickaxePart* Pommel; // 0x40(0x08)
	struct UPickaxePart* Handle; // 0x48(0x08)
	struct UPickaxePart* Shaft; // 0x50(0x08)
	struct UPickaxePart* Head; // 0x58(0x08)
	struct UPickaxePart* Material; // 0x60(0x08)
};

// Class FSD.SeasonTokenReward
// Size: 0x38 (Inherited: 0x30)
struct USeasonTokenReward : UReward {
	int32_t Amount; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class FSD.RewardWidget
// Size: 0x238 (Inherited: 0x230)
struct URewardWidget : UUserWidget {
	struct UReward* Reward; // 0x230(0x08)

	void PlayReceiveAnim(); // Function FSD.RewardWidget.PlayReceiveAnim // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.RichTextInputDecorator
// Size: 0x38 (Inherited: 0x30)
struct URichTextInputDecorator : UCustomRichTextDecorator {
	struct URichTextInputWidget* DecoratorWidgetClass; // 0x30(0x08)
};

// Class FSD.RichTextInputWidget
// Size: 0x518 (Inherited: 0x230)
struct URichTextInputWidget : UUserWidget {
	struct FName InputName; // 0x230(0x08)
	struct TMap<struct FName, struct FString> MetaData; // 0x238(0x50)
	struct FText Content; // 0x288(0x18)
	struct FTextBlockStyle TextStyle; // 0x2a0(0x268)
	enum class EFSDInputSource InputSource; // 0x508(0x01)
	char pad_509[0x7]; // 0x509(0x07)
	struct URichTextBlock* RichTextBlock; // 0x510(0x08)

	void ScaleTextBlockToHeight(struct UTextBlock* InTextBlock, float LineHeight); // Function FSD.RichTextInputWidget.ScaleTextBlockToHeight // (Final|Native|Protected|BlueprintCallable) // @ game+0x11ea030
	void ReceiveInputUnknown(); // Function FSD.RichTextInputWidget.ReceiveInputUnknown // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveInputDetails(struct FInputDisplay InDisplay); // Function FSD.RichTextInputWidget.ReceiveInputDetails // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	void OnInputSourceChanged(enum class EFSDInputSource InSource); // Function FSD.RichTextInputWidget.OnInputSourceChanged // (Final|Native|Protected) // @ game+0x11e9ca0
	void OnCustomKeyBindsChanged(); // Function FSD.RichTextInputWidget.OnCustomKeyBindsChanged // (Final|Native|Protected) // @ game+0x11e9c80
	struct FVector2D MeasureTextSize(struct FText Text, float Scale); // Function FSD.RichTextInputWidget.MeasureTextSize // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e9910
	float GetLineHeight(); // Function FSD.RichTextInputWidget.GetLineHeight // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e96a0
	void ApplyTextStyle(struct UTextBlock* InTextBlock, struct FTextBlockStyle InTextStyle); // Function FSD.RichTextInputWidget.ApplyTextStyle // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x11e94b0
};

// Class FSD.RichTextStylable
// Size: 0x730 (Inherited: 0x668)
struct URichTextStylable : URichTextBlock {
	struct FSlateFontInfo Font; // 0x668(0x50)
	struct FSlateColor FontColor; // 0x6b8(0x28)
	struct TMap<struct FName, struct FTextStyleOverride> Styles; // 0x6e0(0x50)
};

// Class FSD.RichTextSizable
// Size: 0x6a0 (Inherited: 0x668)
struct URichTextSizable : URichTextBlock {
	bool bOverrideDefaultSize; // 0x668(0x01)
	char pad_669[0x3]; // 0x669(0x03)
	int32_t OverrideDefaultFontSize; // 0x66c(0x04)
	bool bOverrideDefaultColor; // 0x670(0x01)
	char pad_671[0x7]; // 0x671(0x07)
	struct FSlateColor OverrideDefaultFontColor; // 0x678(0x28)

	void SetDefaultFontSize(int32_t inFontSize); // Function FSD.RichTextSizable.SetDefaultFontSize // (Final|Native|Protected|BlueprintCallable) // @ game+0x11ea190
	void SetDefaultFontColor(struct FLinearColor InColor); // Function FSD.RichTextSizable.SetDefaultFontColor // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11ea100
};

// Class FSD.FSDRichTextFunctionlibrary
// Size: 0x28 (Inherited: 0x28)
struct UFSDRichTextFunctionlibrary : UBlueprintFunctionLibrary {

	void SplitRichText(struct FRichTextParseResult Parser, int32_t SplitIndex, bool bKeepLeftFormatting, bool bKeepRightFormatting, struct FText OutLeftText, struct FText OutRightText); // Function FSD.FSDRichTextFunctionlibrary.SplitRichText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11ea390
	struct FRichTextParseResult ParseRichText(struct FText InText); // Function FSD.FSDRichTextFunctionlibrary.ParseRichText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11e9d20
	struct FText MidRichText(struct FRichTextParseResult Parser, int32_t StartIndex, int32_t count, bool bKeepFormatting); // Function FSD.FSDRichTextFunctionlibrary.MidRichText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11e9a40
};

// Class FSD.RockEnemiesEvent
// Size: 0x3d8 (Inherited: 0x358)
struct ARockEnemiesEvent : AGameEvent {
	struct AProjectile* PowerUpClass; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)
	float PowerUpGenerationTime; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)
	struct TArray<int32_t> KillAmountPerPlayer; // 0x370(0x10)
	struct TArray<int32_t> MaxEnemyCountPerPlayer; // 0x380(0x10)
	struct TArray<struct APawn*> SpawnedRockEnemies; // 0x390(0x10)
	struct USkeletalMeshComponent* Mesh; // 0x3a0(0x08)
	struct UParticleSystem* MuzzleEffect; // 0x3a8(0x08)
	int32_t PowerUpsPerGeneration; // 0x3b0(0x04)
	int32_t GruntPointsAward; // 0x3b4(0x04)
	int32_t TankPointsAward; // 0x3b8(0x04)
	char pad_3BC[0x14]; // 0x3bc(0x14)
	struct UEnemyGroupDescriptor* RockEnemies; // 0x3d0(0x08)

	void StopPowerupGeneration(); // Function FSD.RockEnemiesEvent.StopPowerupGeneration // (Final|Native|Protected|BlueprintCallable) // @ game+0x11ea6d0
	void StartPowerupGeneration(); // Function FSD.RockEnemiesEvent.StartPowerupGeneration // (Final|Native|Protected|BlueprintCallable) // @ game+0x11ea6b0
	void SpawnRockEnemies(float Difficulty, struct TArray<struct FVector> Locations); // Function FSD.RockEnemiesEvent.SpawnRockEnemies // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x11ea2a0
	void ShowFireEffects(int32_t selectedBone); // Function FSD.RockEnemiesEvent.ShowFireEffects // (Net|Native|Event|NetMulticast|Protected) // @ game+0x11ea210
	void RockEnemySpawned(struct APawn* spawnedEnemy); // Function FSD.RockEnemiesEvent.RockEnemySpawned // (Final|Native|Public) // @ game+0x11e9fb0
	void RockEnemyDied(struct UHealthComponentBase* Health); // Function FSD.RockEnemiesEvent.RockEnemyDied // (Final|Native|Public) // @ game+0x11e9f30
	void OnShoot(); // Function FSD.RockEnemiesEvent.OnShoot // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void EnemySpawnedAfterComplete(struct APawn* spawnedEnemy); // Function FSD.RockEnemiesEvent.EnemySpawnedAfterComplete // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.RoomCarverComponent
// Size: 0x200 (Inherited: 0x1f0)
struct URoomCarverComponent : USceneComponent {
	struct URoomGenerator* RoomGenerator; // 0x1f0(0x08)
	char pad_1F8[0x8]; // 0x1f8(0x08)
};

// Class FSD.RoomDecorationObject
// Size: 0x40 (Inherited: 0x30)
struct URoomDecorationObject : UDataAsset {
	struct UDebrisPositioning* Positioning; // 0x30(0x08)
	struct AActor* Actor; // 0x38(0x08)
};

// Class FSD.RoomFeature
// Size: 0x40 (Inherited: 0x28)
struct URoomFeature : UObject {
	struct TArray<struct URoomFeature*> RoomFeatures; // 0x28(0x10)
	char pad_38[0x8]; // 0x38(0x08)
};

// Class FSD.RandomSelector
// Size: 0x48 (Inherited: 0x40)
struct URandomSelector : URoomFeature {
	int32_t Min; // 0x40(0x04)
	int32_t Max; // 0x44(0x04)
};

// Class FSD.FloodFillLine
// Size: 0x70 (Inherited: 0x40)
struct UFloodFillLine : URoomFeature {
	struct UFloodFillSettings* WallNoiseOverride; // 0x40(0x08)
	struct UFloodFillSettings* CeilingNoiseOverride; // 0x48(0x08)
	struct UFloodFillSettings* FloorNoiseOverride; // 0x50(0x08)
	bool UseDetailNoise; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct TArray<struct FRoomLinePoint> Points; // 0x60(0x10)
};

// Class FSD.FloodFillPillar
// Size: 0x70 (Inherited: 0x40)
struct UFloodFillPillar : URoomFeature {
	struct UFloodFillSettings* NoiseOverride; // 0x40(0x08)
	struct TArray<struct FRandLinePoint> Points; // 0x48(0x10)
	struct FRandRange RangeScale; // 0x58(0x08)
	struct FRandRange NoiseRangeScale; // 0x60(0x08)
	struct FRandRange EndcapScale; // 0x68(0x08)
};

// Class FSD.FloodFillProceduralPillar
// Size: 0x58 (Inherited: 0x40)
struct UFloodFillProceduralPillar : URoomFeature {
	struct TArray<struct FVector> Points; // 0x40(0x10)
	struct UPillarSettings* PillarSettings; // 0x50(0x08)
};

// Class FSD.FloodFillBox
// Size: 0x78 (Inherited: 0x40)
struct UFloodFillBox : URoomFeature {
	struct UFloodFillSettings* Noise; // 0x40(0x08)
	struct FVector Position; // 0x48(0x0c)
	struct FVector Extends; // 0x54(0x0c)
	struct FRotator Rotation; // 0x60(0x0c)
	bool IsCarver; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
	float NoiseRange; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class FSD.EntranceFeature
// Size: 0x60 (Inherited: 0x40)
struct UEntranceFeature : URoomFeature {
	struct FVector Location; // 0x40(0x0c)
	struct FRotator Direction; // 0x4c(0x0c)
	enum class ECaveEntranceType EntranceType; // 0x58(0x01)
	enum class ECaveEntrancePriority Priority; // 0x59(0x01)
	char pad_5A[0x6]; // 0x5a(0x06)
};

// Class FSD.ResourceFeature
// Size: 0x60 (Inherited: 0x40)
struct UResourceFeature : URoomFeature {
	struct FVector Location; // 0x40(0x0c)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct UResourceData* Resource; // 0x50(0x08)
	float BaseAmount; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class FSD.SpawnActorFeature
// Size: 0x90 (Inherited: 0x40)
struct USpawnActorFeature : URoomFeature {
	struct FVector Location; // 0x40(0x0c)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct AActor* ActorToSpawn; // 0x50(0x08)
	struct FVector AdjustmentDirection; // 0x58(0x0c)
	enum class EItemAdjustmentType Adjustment; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	struct FVector ScaleMin; // 0x68(0x0c)
	struct FVector ScaleMax; // 0x74(0x0c)
	struct FRotator RotationDelta; // 0x80(0x0c)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class FSD.SpawnTriggerFeature
// Size: 0x90 (Inherited: 0x40)
struct USpawnTriggerFeature : URoomFeature {
	struct AActor* TriggerClass; // 0x40(0x08)
	char pad_48[0x8]; // 0x48(0x08)
	struct FTransform Transform; // 0x50(0x30)
	struct FName Message; // 0x80(0x08)
	char pad_88[0x8]; // 0x88(0x08)
};

// Class FSD.SpawnTrigger
// Size: 0x228 (Inherited: 0x220)
struct ASpawnTrigger : AActor {
	struct FName Message; // 0x220(0x08)
};

// Class FSD.SubRoomFeature
// Size: 0x68 (Inherited: 0x40)
struct USubRoomFeature : URoomFeature {
	struct URoomGenerator* RoomGenerator; // 0x40(0x08)
	struct FVector Location; // 0x48(0x0c)
	struct FRotator Rotation; // 0x54(0x0c)
	float Scale; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class FSD.RandomSubRoomFeature
// Size: 0xb0 (Inherited: 0x40)
struct URandomSubRoomFeature : URoomFeature {
	struct URoomGeneratorGroup* RoomGroup; // 0x40(0x08)
	struct FGameplayTagQuery tagQuery; // 0x48(0x48)
	int32_t Layer; // 0x90(0x04)
	struct FVector Location; // 0x94(0x0c)
	struct FRotator Rotation; // 0xa0(0x0c)
	float Scale; // 0xac(0x04)
};

// Class FSD.DropPodCalldownLocationFeature
// Size: 0x58 (Inherited: 0x40)
struct UDropPodCalldownLocationFeature : URoomFeature {
	struct FVector Location; // 0x40(0x0c)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct AActor* CalldownClass; // 0x50(0x08)
};

// Class FSD.RoomGeneratorBase
// Size: 0x58 (Inherited: 0x30)
struct URoomGeneratorBase : UDataAsset {
	float Bounds; // 0x30(0x04)
	bool CanOnlyBeUsedOnce; // 0x34(0x01)
	enum class ERoomMirroringSupport MirrorSupport; // 0x35(0x01)
	char pad_36[0x2]; // 0x36(0x02)
	struct FGameplayTagContainer RoomTags; // 0x38(0x20)
};

// Class FSD.RoomGenerator
// Size: 0x68 (Inherited: 0x58)
struct URoomGenerator : URoomGeneratorBase {
	struct TArray<struct URoomFeature*> RoomFeatures; // 0x58(0x10)

	struct TArray<struct URoomFeature*> GetAllRoomFeatures(); // Function FSD.RoomGenerator.GetAllRoomFeatures // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e9620
};

// Class FSD.RoomGeneratorGroup
// Size: 0x40 (Inherited: 0x30)
struct URoomGeneratorGroup : UDataAsset {
	struct TArray<struct URoomGenerator*> Rooms; // 0x30(0x10)

	struct URoomGenerator* GetRandomRoomWithTags(struct FRoomGeneratorGroupInstance groupInstance, struct FGameplayTagQuery queury, struct FRandomStream RandomStream); // Function FSD.RoomGeneratorGroup.GetRandomRoomWithTags // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11e9770
	struct URoomGenerator* GetRandomRoom(struct FRandomStream RandomStream); // Function FSD.RoomGeneratorGroup.GetRandomRoom // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11e96d0
	struct FRoomGeneratorGroupInstance CreateGroupInstance(); // Function FSD.RoomGeneratorGroup.CreateGroupInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e95a0
};

// Class FSD.RotateToFace
// Size: 0x210 (Inherited: 0x1f0)
struct URotateToFace : USceneComponent {
	struct FVector TargetOffset; // 0x1f0(0x0c)
	char pad_1FC[0x4]; // 0x1fc(0x04)
	struct AActor* Target; // 0x200(0x08)
	int32_t Face; // 0x208(0x04)
	char pad_20C[0x4]; // 0x20c(0x04)

	void SetTarget(struct AActor* Target); // Function FSD.RotateToFace.SetTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1092590
	void SetShouldFaceAway(bool FaceAway); // Function FSD.RotateToFace.SetShouldFaceAway // (Final|Native|Public|BlueprintCallable) // @ game+0x11efc70
};

// Class FSD.SalvageObjective
// Size: 0x268 (Inherited: 0x178)
struct USalvageObjective : UObjective {
	int32_t SalvageActorCount; // 0x178(0x04)
	char pad_17C[0x4]; // 0x17c(0x04)
	struct UGemResourceData* LegResource; // 0x180(0x08)
	int32_t LegCountPerActor; // 0x188(0x04)
	float LegDistanceToActor; // 0x18c(0x04)
	struct FMulticastInlineDelegate OnDisableLegSpheres; // 0x190(0x10)
	struct UDebrisPositioning* Positioning; // 0x1a0(0x08)
	struct TArray<struct TSoftObjectPtr<struct UDebrisBase>> Debris; // 0x1a8(0x10)
	SoftClassProperty SalvageActor; // 0x1b8(0x28)
	SoftClassProperty DamagedPodClass; // 0x1e0(0x28)
	struct UDebrisPositioning* DamagedPodPositioning; // 0x208(0x08)
	float DamagedPodMinDistanceToDropZone; // 0x210(0x04)
	char pad_214[0x4]; // 0x214(0x04)
	struct AMiningPod* DamagedPod; // 0x218(0x08)
	int32_t ActorsToSalvage; // 0x220(0x04)
	int32_t ActorsSalvaged; // 0x224(0x04)
	int32_t RepairPoints; // 0x228(0x04)
	int32_t PointsRepaired; // 0x22c(0x04)
	float MinSalvageActorDistanceToLandingZone; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct TArray<struct AMiniMule*> AllSalvageActors; // 0x238(0x10)
	struct TArray<struct AMiniMule*> SalvagedActors; // 0x248(0x10)
	char pad_258[0x10]; // 0x258(0x10)

	void PointRepaired(); // Function FSD.SalvageObjective.PointRepaired // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x11ef460
	void OnRep_PointsRepaired(); // Function FSD.SalvageObjective.OnRep_PointsRepaired // (Final|Native|Protected) // @ game+0x10c9930
	void OnRep_ActorsToSalvage(int32_t prevAmount); // Function FSD.SalvageObjective.OnRep_ActorsToSalvage // (Final|Native|Protected) // @ game+0x107ea10
	void OnRep_ActorsSalvaged(int32_t prevAmount); // Function FSD.SalvageObjective.OnRep_ActorsSalvaged // (Final|Native|Protected) // @ game+0x11ef360
	void OnActorRepaired(struct URepairableComponent* repairable); // Function FSD.SalvageObjective.OnActorRepaired // (Final|Native|Protected) // @ game+0x11ef2c0
	struct FTransform FindRepairPointLocation(struct AProceduralSetup* setup, struct FVector podLocation, float Radius, float maxVerticalDistance, struct UDebrisPositioning* DebrisPositioning, struct AActor* terrainPlacement, struct TArray<struct FVector> locationsToAvoid, struct UCurveFloat* AvoidCostCurve); // Function FSD.SalvageObjective.FindRepairPointLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11ee190
	void AllActorsSalvaged(); // Function FSD.SalvageObjective.AllActorsSalvaged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.SalvageFuelPod
// Size: 0x2d8 (Inherited: 0x2d8)
struct ASalvageFuelPod : ARessuplyPod {

	void ReceiveFuelLineStarted(bool InFuelLineStarted); // Function FSD.SalvageFuelPod.ReceiveFuelLineStarted // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void ReceiveFuelLineConnected(struct AFuelLineEndPoint* InFuelLine); // Function FSD.SalvageFuelPod.ReceiveFuelLineConnected // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void ReceiveFirstFuelLineSegment(struct AFuelLineSegment* InFirstSegment); // Function FSD.SalvageFuelPod.ReceiveFirstFuelLineSegment // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.SavableObject
// Size: 0x40 (Inherited: 0x28)
struct USavableObject : UObject {
	bool EnableDangerousSaveGameIDEditing; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	struct FGuid SaveGameID; // 0x2c(0x10)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.SavableActor
// Size: 0x238 (Inherited: 0x220)
struct ASavableActor : AActor {
	bool EnableDangerousSaveGameIDEditing; // 0x220(0x01)
	char pad_221[0x3]; // 0x221(0x03)
	struct FGuid SaveGameID; // 0x224(0x10)
	char pad_234[0x4]; // 0x234(0x04)
};

// Class FSD.SaveGameIDInterface
// Size: 0x28 (Inherited: 0x28)
struct USaveGameIDInterface : UInterface {
};

// Class FSD.RefundableInterface
// Size: 0x28 (Inherited: 0x28)
struct URefundableInterface : USaveGameIDInterface {
};

// Class FSD.ItemIDInterface
// Size: 0x28 (Inherited: 0x28)
struct UItemIDInterface : UInterface {
};

// Class FSD.SaveGameLibrary
// Size: 0x28 (Inherited: 0x28)
struct USaveGameLibrary : UBlueprintFunctionLibrary {

	bool TryGetSaveGameSnapShot(struct UObject* WorldContext, struct FString Filename, int32_t userIdx, struct FSaveGameSnapShot OutSnapShot); // Function FSD.SaveGameLibrary.TryGetSaveGameSnapShot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11efd00
	struct TMap<struct FString, struct FDateTime> GetUserSaveGameSlots(struct FString UserId); // Function FSD.SaveGameLibrary.GetUserSaveGameSlots // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11eeba0
	struct TMap<struct FString, struct FDateTime> GetAllSaveGameSlots(); // Function FSD.SaveGameLibrary.GetAllSaveGameSlots // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11ee470
};

// Class FSD.SaveGameStateComponent
// Size: 0x210 (Inherited: 0xb0)
struct USaveGameStateComponent : UActorComponent {
	struct FMulticastInlineDelegate OnEquippedPerksChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnItemUpgradeCrafted; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnItemUpgradeEquipped; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnItemUpgradeUnequipped; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPlayerProgressChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnLoadoutChangedEvent; // 0x100(0x10)
	struct FMulticastInlineDelegate OnCharacterStatsChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnCreditsChanged; // 0x120(0x10)
	int32_t Credits; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
	struct TArray<struct FSaveGameStatePerkItem> EquippedPerks; // 0x138(0x10)
	struct UVictoryPose* VictoryPose; // 0x148(0x08)
	struct FItemLoadout EquippedLoadout; // 0x150(0x84)
	struct FActiveCampaingMission ActiveCampaignMission; // 0x1d4(0x0c)
	char pad_1E0[0x8]; // 0x1e0(0x08)
	struct TArray<struct FItemUpgradeSelection> ItemUpgradeSelections; // 0x1e8(0x10)
	struct FPlayerProgress PlayerProgress; // 0x1f8(0x08)
	struct TArray<struct FCharacterProgress> CharacterStats; // 0x200(0x10)

	void SetCampaign(); // Function FSD.SaveGameStateComponent.SetCampaign // (Final|Native|Public|BlueprintCallable) // @ game+0x11efbb0
	void Server_SetVictoryPose(struct UVictoryPose* pose); // Function FSD.SaveGameStateComponent.Server_SetVictoryPose // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11efaf0
	void Server_SetPlayerProgress(struct FPlayerProgress Progress); // Function FSD.SaveGameStateComponent.Server_SetPlayerProgress // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11efa30
	void Server_SetLoadout(struct FItemLoadout Loadout, struct TArray<struct FItemUpgradeSelection> weaponLoadouts); // Function FSD.SaveGameStateComponent.Server_SetLoadout // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11ef8a0
	void Server_SetEquippedPerks(struct TArray<struct FSaveGameStatePerkItem> perks); // Function FSD.SaveGameStateComponent.Server_SetEquippedPerks // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11ef7e0
	void Server_SetCredits(int32_t Amount); // Function FSD.SaveGameStateComponent.Server_SetCredits // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11ef720
	void Server_SetCharacterStats(struct TArray<struct FCharacterProgress> Stats); // Function FSD.SaveGameStateComponent.Server_SetCharacterStats // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11ef660
	void Server_SetActiveCampaignMission(struct FActiveCampaingMission Data); // Function FSD.SaveGameStateComponent.Server_SetActiveCampaignMission // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x11ef580
	void RefreshLoadoutFromSave(struct UPlayerCharacterID* characterID); // Function FSD.SaveGameStateComponent.RefreshLoadoutFromSave // (Final|Native|Public|BlueprintCallable) // @ game+0x11ef500
	void OnRep_PlayerProgress(); // Function FSD.SaveGameStateComponent.OnRep_PlayerProgress // (Final|Native|Protected) // @ game+0x11ef440
	void OnRep_ItemUpgradeSelections(); // Function FSD.SaveGameStateComponent.OnRep_ItemUpgradeSelections // (Final|Native|Protected) // @ game+0x11ef420
	void OnRep_Credits(); // Function FSD.SaveGameStateComponent.OnRep_Credits // (Final|Native|Protected) // @ game+0x11ef400
	void OnRep_CharacterStats(); // Function FSD.SaveGameStateComponent.OnRep_CharacterStats // (Final|Native|Protected) // @ game+0x11ef3e0
	void OnRep_ActiveCampaignMission(); // Function FSD.SaveGameStateComponent.OnRep_ActiveCampaignMission // (Final|Native|Protected) // @ game+0x11ef340
	void ItemUpgradeEquipSignature__DelegateSignature(struct AActor* itemClass, struct UItemUpgrade* Upgrade); // DelegateFunction FSD.SaveGameStateComponent.ItemUpgradeEquipSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ItemUpgradeCraftSignature__DelegateSignature(struct UItemUpgrade* Upgrade); // DelegateFunction FSD.SaveGameStateComponent.ItemUpgradeCraftSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	struct FCharacterProgress GetCharacterStat(struct UPlayerCharacterID* characterID); // Function FSD.SaveGameStateComponent.GetCharacterStat // (Final|Native|Public|BlueprintCallable) // @ game+0x11ee540
	struct UGeneratedMission* GetActiveCampaignMission(); // Function FSD.SaveGameStateComponent.GetActiveCampaignMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ee440
	void CreditsChangedDelegate__DelegateSignature(); // DelegateFunction FSD.SaveGameStateComponent.CreditsChangedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
};

// Class FSD.SchematicRarity
// Size: 0x38 (Inherited: 0x30)
struct USchematicRarity : UDataAsset {
	float Rarity; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class FSD.Schematic
// Size: 0x108 (Inherited: 0x58)
struct USchematic : USavableDataAsset {
	struct FMulticastInlineDelegate OnSchematicAddedToInventory; // 0x58(0x10)
	struct FMulticastInlineDelegate OnSchematicReset; // 0x68(0x10)
	struct FMulticastInlineDelegate OnSchematicBuilt; // 0x78(0x10)
	struct USchematicCategory* Category; // 0x88(0x08)
	struct USchematicPricingTier* PricingTier; // 0x90(0x08)
	struct USchematicRarity* Rarity; // 0x98(0x08)
	struct UPlayerCharacterID* UsedByCharacter; // 0xa0(0x08)
	struct USchematicItem* Item; // 0xa8(0x08)
	struct TMap<struct UResourceData*, int32_t> CraftingCost; // 0xb0(0x50)
	bool CostIsLocked; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)

	void SetCraftingMaterialCost(); // Function FSD.Schematic.SetCraftingMaterialCost // (Final|Native|Public|BlueprintCallable) // @ game+0x11efc50
	void SetCostLocked(bool IsLocked); // Function FSD.Schematic.SetCostLocked // (Final|Native|Public) // @ game+0x11efbd0
	void SchematicDelegate__DelegateSignature(struct USchematic* Schematic); // DelegateFunction FSD.Schematic.SchematicDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool HasBeenForged(struct UObject* WorldContext); // Function FSD.Schematic.HasBeenForged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11eeff0
	bool HasBeenAwardedOrForged(struct UObject* WorldContext); // Function FSD.Schematic.HasBeenAwardedOrForged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11eef60
	bool HasBeenAwarded(struct UObject* WorldContext); // Function FSD.Schematic.HasBeenAwarded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11eeed0
	struct FText GetTitle(); // Function FSD.Schematic.GetTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11eeb00
	enum class ESchematicState GetSchematicState(struct UObject* WorldContext); // Function FSD.Schematic.GetSchematicState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11eea70
	struct USchematicItem* GetSchematicItem(); // Function FSD.Schematic.GetSchematicItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11eea50
	struct TMap<struct UResourceData*, int32_t> GetResourceCost(); // Function FSD.Schematic.GetResourceCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ee820
	struct FColor GetIconTint(); // Function FSD.Schematic.GetIconTint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ee7e0
	struct UTexture* GetIcon(struct UObject* WorldContextObject); // Function FSD.Schematic.GetIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ee750
	struct FText GetDescription(); // Function FSD.Schematic.GetDescription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ee5e0
	bool CanAffordSchematic(struct UObject* WorldContext); // Function FSD.Schematic.CanAffordSchematic // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ee080
	void BuildSchematic(struct UObject* WorldContext); // Function FSD.Schematic.BuildSchematic // (Final|Native|Public|BlueprintCallable) // @ game+0x11ee000
	void AddSchematicToPlayerInventory(struct UObject* WorldContext); // Function FSD.Schematic.AddSchematicToPlayerInventory // (Final|Native|Public|BlueprintCallable) // @ game+0x11edf10
};

// Class FSD.SchematicBankBase
// Size: 0x38 (Inherited: 0x30)
struct USchematicBankBase : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class FSD.SchematicBank
// Size: 0x88 (Inherited: 0x38)
struct USchematicBank : USchematicBankBase {
	struct TSet<struct USchematic*> Schematics; // 0x38(0x50)

	void AddSchematic(struct USchematic* Schematic); // Function FSD.SchematicBank.AddSchematic // (Final|Native|Public|BlueprintCallable) // @ game+0x11ede90
};

// Class FSD.SchematicBankInterface
// Size: 0x28 (Inherited: 0x28)
struct USchematicBankInterface : UInterface {
};

// Class FSD.SchematicCategory
// Size: 0xf0 (Inherited: 0x58)
struct USchematicCategory : USavableDataAsset {
	struct FText CategoryName; // 0x58(0x18)
	struct TSoftObjectPtr<struct UTexture2D> FrameTexture; // 0x70(0x28)
	struct FLinearColor FrameTint; // 0x98(0x10)
	struct FLinearColor BackgroundTint; // 0xa8(0x10)
	enum class ESchematicType SchematicType; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct TSoftObjectPtr<struct UDialogDataAsset> ShoutForging; // 0xc0(0x28)
	struct UEventRewardType* RewardType; // 0xe8(0x08)
};

// Class FSD.SchematicBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USchematicBlueprintLibrary : UBlueprintFunctionLibrary {

	void PriceAllSchematics(bool lockPrices); // Function FSD.SchematicBlueprintLibrary.PriceAllSchematics // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11ef480
	bool IsSchematicOwnedOrForged(struct UObject* WorldContextObject, struct USchematic* Schematic); // Function FSD.SchematicBlueprintLibrary.IsSchematicOwnedOrForged // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11ef200
	bool IsSchematicOwned(struct UObject* WorldContextObject, struct USchematic* Schematic); // Function FSD.SchematicBlueprintLibrary.IsSchematicOwned // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11ef140
	bool IsSchematicForged(struct UObject* WorldContextObject, struct USchematic* Schematic); // Function FSD.SchematicBlueprintLibrary.IsSchematicForged // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11ef080
	bool HasAnyUnlockableSchematics(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, struct TSet<struct USchematicCategory*> Categories); // Function FSD.SchematicBlueprintLibrary.HasAnyUnlockableSchematics // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11eecd0
	struct TArray<struct USchematic*> GetRewardableSchematics(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, struct USchematicCategory* Category); // Function FSD.SchematicBlueprintLibrary.GetRewardableSchematics // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11ee920
	struct TArray<struct USchematic*> GetForgedSchematic(struct UObject* WorldContextObject); // Function FSD.SchematicBlueprintLibrary.GetForgedSchematic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11ee680
	struct USchematicCategory* FindItemUpgradeSchematicCategory(struct UItemUpgrade* Upgrade); // Function FSD.SchematicBlueprintLibrary.FindItemUpgradeSchematicCategory // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11ee110
	void AddSkinSchematicCollectionToSettings(struct UItemSkinSchematicCollection* Collection); // Function FSD.SchematicBlueprintLibrary.AddSkinSchematicCollectionToSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11edf90
};

// Class FSD.SchematicItem
// Size: 0x28 (Inherited: 0x28)
struct USchematicItem : UObject {

	struct FText GetTitle(); // Function FSD.SchematicItem.GetTitle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11f5d40
	struct FColor GetIconTint(); // Function FSD.SchematicItem.GetIconTint // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11f4fd0
	struct UTexture* GetIcon(struct UObject* WorldContextObject); // Function FSD.SchematicItem.GetIcon // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11f4ed0
	struct FText GetDescription(); // Function FSD.SchematicItem.GetDescription // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11f4e30
};

// Class FSD.OverclockShematicItem
// Size: 0x38 (Inherited: 0x28)
struct UOverclockShematicItem : USchematicItem {
	struct UItemID* OwningItem; // 0x28(0x08)
	struct UItemUpgrade* Overclock; // 0x30(0x08)

	struct UUpgradableGearComponent* GetOwningGearComponent(); // Function FSD.OverclockShematicItem.GetOwningGearComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11f5310
};

// Class FSD.VanitySchematicItem
// Size: 0x30 (Inherited: 0x28)
struct UVanitySchematicItem : USchematicItem {
	struct UVanityItem* Item; // 0x28(0x08)

	struct UVanityItem* GetVanityItem(); // Function FSD.VanitySchematicItem.GetVanityItem // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f5de0
};

// Class FSD.VictoryPoseSchematicItem
// Size: 0x30 (Inherited: 0x28)
struct UVictoryPoseSchematicItem : USchematicItem {
	struct UVictoryPose* VictoryPose; // 0x28(0x08)
};

// Class FSD.DrinkableSchematicItem
// Size: 0x30 (Inherited: 0x28)
struct UDrinkableSchematicItem : USchematicItem {
	struct UDrinkableDataAsset* Drinkable; // 0x28(0x08)
};

// Class FSD.SkinSchematicItem
// Size: 0x38 (Inherited: 0x28)
struct USkinSchematicItem : USchematicItem {
	struct UItemID* ItemID; // 0x28(0x08)
	struct UItemSkin* Skin; // 0x30(0x08)
};

// Class FSD.ResourceSchematicItem
// Size: 0x40 (Inherited: 0x28)
struct UResourceSchematicItem : USchematicItem {
	int32_t Credits; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct UResourceData* Resource; // 0x30(0x08)
	int32_t ResourceAmount; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.BlankSchematicItem
// Size: 0x60 (Inherited: 0x28)
struct UBlankSchematicItem : USchematicItem {
	struct FText Title; // 0x28(0x18)
	struct FText Description; // 0x40(0x18)
	struct UTexture2D* Icon; // 0x58(0x08)
};

// Class FSD.SchematicSettings
// Size: 0x340 (Inherited: 0x30)
struct USchematicSettings : UDataAsset {
	struct UDataTable* PricingTable; // 0x30(0x08)
	struct USchematic* BlankSchematic; // 0x38(0x08)
	struct TSet<struct USchematicBank*> SchematicBanks; // 0x40(0x50)
	struct TSet<struct UOverclockBank*> OverclockBanks; // 0x90(0x50)
	struct TSet<struct UItemSkinSchematicCollection*> SkinSchematicCollections; // 0xe0(0x50)
	struct TSet<struct USchematicBankBase*> VanitySchematicBanks; // 0x130(0x50)
	struct TMap<enum class ESchematicType, struct FSchematicType> SchematicTypes; // 0x180(0x50)
	struct USchematicBank* EndlessSchematics; // 0x1d0(0x08)
	struct TSet<struct USchematicCategory*> Categories; // 0x1d8(0x50)
	struct TArray<struct USchematicCategory*> OverclockCategories; // 0x228(0x10)
	struct TArray<struct USchematicCategory*> VanityCategories; // 0x238(0x10)
	struct TArray<struct USchematicCategory*> EndlessCategories; // 0x248(0x10)
	struct USchematicPricingTier* OverclockPricingTier; // 0x258(0x08)
	struct TArray<struct USchematicPricingTier*> VanityPricingTiers; // 0x260(0x10)
	struct TArray<struct USchematicRarity*> VanityRarity; // 0x270(0x10)
	struct TArray<struct USchematicRarity*> OverclockRarity; // 0x280(0x10)
	struct TArray<struct USchematicRarity*> EndlessRarity; // 0x290(0x10)
	char pad_2A0[0xa0]; // 0x2a0(0xa0)

	struct FSchematicType GetSchematicTypeData(enum class ESchematicType InType); // Function FSD.SchematicSettings.GetSchematicTypeData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f5340
	struct TSet<struct USchematic*> GetSchematics(); // Function FSD.SchematicSettings.GetSchematics // (Final|Native|Public|Const) // @ game+0x11f5450
};

// Class FSD.ForginSettings
// Size: 0x48 (Inherited: 0x30)
struct UForginSettings : UDataAsset {
	int32_t XPRequiredPerLevel; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<enum class ESchematicType> MasteryRewardCycle; // 0x38(0x10)
};

// Class FSD.Season
// Size: 0x168 (Inherited: 0x58)
struct USeason : USavableDataAsset {
	struct FText SeasonName; // 0x58(0x18)
	int32_t SeasonNumber; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	struct TArray<struct FSeasonLevel> Levels; // 0x78(0x10)
	struct FSeasonLevel RewardAfterAllLevels; // 0x88(0x10)
	struct TArray<struct FUnassignedReward> UnassignedRewards; // 0x98(0x10)
	struct UTreeOfVanity* TreeOfVanity; // 0xa8(0x08)
	struct UGameDLC* SeasonDLC; // 0xb0(0x08)
	struct FRuntimeFloatCurve SpawnChanceByMissionLength; // 0xb8(0x88)
	struct TArray<struct FSeasonalEventEntry> SeasonalEvents; // 0x140(0x10)
	int32_t NumberOfScripChallenges; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	struct TArray<struct UMissionStat*> ScripChallenges; // 0x158(0x10)

	void AddUnassignedReward(int32_t Index, struct UReward* Reward); // Function FSD.Season.AddUnassignedReward // (Final|Native|Protected|BlueprintCallable) // @ game+0x11f4060
	void AddLevel(int32_t Index, struct UReward* Reward, struct UReward* specialReward); // Function FSD.Season.AddLevel // (Final|Native|Protected|BlueprintCallable) // @ game+0x11f3f60
};

// Class FSD.SeasonChallenge
// Size: 0x118 (Inherited: 0x58)
struct USeasonChallenge : USavableDataAsset {
	struct FText ChallengeText; // 0x58(0x18)
	struct TSoftObjectPtr<struct UTexture2D> Icon; // 0x70(0x28)
	struct TSoftObjectPtr<struct UTexture2D> IconOutlined; // 0x98(0x28)
	struct FLinearColor Color; // 0xc0(0x10)
	struct TArray<struct FTrackedStatInfo> TrackedStats; // 0xd0(0x10)
	struct TArray<struct FChallengeVariation> Variations; // 0xe0(0x10)
	int32_t NumberOfChoices; // 0xf0(0x04)
	float ChallengeWeight; // 0xf4(0x04)
	bool bIsSpecialChallenge; // 0xf8(0x01)
	char pad_F9[0x3]; // 0xf9(0x03)
	int32_t MaxOccurences; // 0xfc(0x04)
	struct USeasonChallenge* ChallengeAfterMaxOccurences; // 0x100(0x08)
	struct TArray<struct UCampaign*> RequiredCampaigns; // 0x108(0x10)

	struct UTexture2D* GetIconOutlined(); // Function FSD.SeasonChallenge.GetIconOutlined // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f4fa0
	struct UTexture2D* GetIcon(); // Function FSD.SeasonChallenge.GetIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f4f70
};

// Class FSD.SeasonEditorRewardWidget
// Size: 0x238 (Inherited: 0x230)
struct USeasonEditorRewardWidget : UUserWidget {
	struct UReward* Reward; // 0x230(0x08)
};

// Class FSD.SeasonLevelWidget
// Size: 0x260 (Inherited: 0x230)
struct USeasonLevelWidget : UUserWidget {
	struct FMulticastInlineDelegate OnRewardClaimed; // 0x230(0x10)
	int32_t Level; // 0x240(0x04)
	int32_t SeasonLevel; // 0x244(0x04)
	bool IsNormalClaimed; // 0x248(0x01)
	bool IsSpecialClaimed; // 0x249(0x01)
	bool IsUnlocked; // 0x24a(0x01)
	char pad_24B[0x5]; // 0x24b(0x05)
	struct FSeasonLevel LevelInfo; // 0x250(0x10)

	bool TryClaimReward(bool isNormalReward); // Function FSD.SeasonLevelWidget.TryClaimReward // (Final|Native|Public|BlueprintCallable) // @ game+0x11f6480
	void SetData(int32_t inLevel, bool LastInRow); // Function FSD.SeasonLevelWidget.SetData // (Native|Public|BlueprintCallable) // @ game+0x11f6370
	void RefreshState(); // Function FSD.SeasonLevelWidget.RefreshState // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void OnDataSet(); // Function FSD.SeasonLevelWidget.OnDataSet // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.SeasonInfinityLevelWidget
// Size: 0x268 (Inherited: 0x260)
struct USeasonInfinityLevelWidget : USeasonLevelWidget {
	int32_t InfinityStartLevel; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
};

// Class FSD.SeasonSettings
// Size: 0x68 (Inherited: 0x30)
struct USeasonSettings : UDataAsset {
	struct USeason* CurrentSeason; // 0x30(0x08)
	int32_t MaxActiveChallenges; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct USeasonChallenge*> SeasonChallenges; // 0x40(0x10)
	int32_t XPPerLevel; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct UCurveFloat* XPToPerforcemancePointsCurve; // 0x58(0x08)
	int32_t TreeOfVanitySnapSize; // 0x60(0x04)
	float SpecialChallengeChange; // 0x64(0x04)
};

// Class FSD.SeasonReplicatorComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USeasonReplicatorComponent : UActorComponent {

	void CompleteSeasonEvent(struct USeasonEventData* inEvent); // Function FSD.SeasonReplicatorComponent.CompleteSeasonEvent // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x11f4520
};

// Class FSD.SeasonsSubsystem
// Size: 0xf0 (Inherited: 0x30)
struct USeasonsSubsystem : UGameInstanceSubsystem {
	struct FMulticastInlineDelegate OnXPChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnTokensChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnVanityTreeReset; // 0x50(0x10)
	struct FMulticastInlineDelegate OnScripChallengeUpdated; // 0x60(0x10)
	struct FMulticastInlineDelegate OnClaimStatusChanged; // 0x70(0x10)
	int32_t ForceSeasonEventIndex; // 0x80(0x04)
	char pad_84[0xc]; // 0x84(0x0c)
	struct FSeasonMissionResult TempSeasonMissionResult; // 0x90(0x30)
	struct FSeasonMissionResult LatestMissionSeasonResult; // 0xc0(0x30)

	struct FTimespan TimeToNewChallenge(); // Function FSD.SeasonsSubsystem.TimeToNewChallenge // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11f6440
	void RerollChallenge(int32_t Index); // Function FSD.SeasonsSubsystem.RerollChallenge // (Final|Native|Public|BlueprintCallable) // @ game+0x11f62f0
	void OnStatChanged(struct UMissionStat* Stat, float Value); // Function FSD.SeasonsSubsystem.OnStatChanged // (Final|Native|Protected) // @ game+0x11f6220
	void OnScripChallengeCompleted(struct UMissionStat* Stat, float Value); // Function FSD.SeasonsSubsystem.OnScripChallengeCompleted // (Final|Native|Protected) // @ game+0x11f6150
	void IsRewardClaimed(int32_t Level, bool IsNormalClaimed, bool IsSpecialClaimed); // Function FSD.SeasonsSubsystem.IsRewardClaimed // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11f6030
	bool IsNodeUnlocked(int32_t TreeOfVanityNodeID); // Function FSD.SeasonsSubsystem.IsNodeUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f5fa0
	bool IsNodeBought(int32_t TreeOfVanityNodeID); // Function FSD.SeasonsSubsystem.IsNodeBought // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f5f10
	void InitliazeStats(); // Function FSD.SeasonsSubsystem.InitliazeStats // (Final|Native|Public) // @ game+0x11f5ef0
	bool HasClaimedLevelRewards(int32_t startLevel, int32_t numberOfLevels); // Function FSD.SeasonsSubsystem.HasClaimedLevelRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x11f5e30
	bool HasClaimedAllRewards(); // Function FSD.SeasonsSubsystem.HasClaimedAllRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f5e00
	int32_t GetSeasonXPFromMissionXP(struct AFSDPlayerState* PlayerState); // Function FSD.SeasonsSubsystem.GetSeasonXPFromMissionXP // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f5cb0
	int32_t GetSeasonXP(); // Function FSD.SeasonsSubsystem.GetSeasonXP // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f5c80
	int32_t GetSeasonNumber(); // Function FSD.SeasonsSubsystem.GetSeasonNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11f5c50
	struct FText GetSeasonName(); // Function FSD.SeasonsSubsystem.GetSeasonName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11f5bb0
	struct FSeasonMissionResult GetSeasonMissionResult(); // Function FSD.SeasonsSubsystem.GetSeasonMissionResult // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f5b00
	void GetSeasonLevelFromXP(int32_t XP, int32_t Level, float currentLevelPercent, int32_t currentLevelXP, int32_t LevelXPTotal); // Function FSD.SeasonsSubsystem.GetSeasonLevelFromXP // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11f5920
	void GetSeasonLevel(int32_t Level, float currentLevelPercent, int32_t currentLevelXP, int32_t LevelXPTotal); // Function FSD.SeasonsSubsystem.GetSeasonLevel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11f5780
	void GetSeasonBought(bool isBought); // Function FSD.SeasonsSubsystem.GetSeasonBought // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11f56f0
	void GetScriptChallengeInfo(int32_t Completed, int32_t claimed, int32_t Total); // Function FSD.SeasonsSubsystem.GetScriptChallengeInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11f55b0
	int32_t GetNumberOfTokens(struct UObject* WorldContextObject); // Function FSD.SeasonsSubsystem.GetNumberOfTokens // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f5280
	int32_t GetNumberOfSeasonLevels(); // Function FSD.SeasonsSubsystem.GetNumberOfSeasonLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f5250
	struct FSeasonLevel GetNextReward(); // Function FSD.SeasonsSubsystem.GetNextReward // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f5210
	int32_t GetLevelXP(int32_t Level); // Function FSD.SeasonsSubsystem.GetLevelXP // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f5180
	struct FSeasonLevel GetLevelReward(int32_t Level); // Function FSD.SeasonsSubsystem.GetLevelReward // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f50e0
	void GetLevelProgress(int32_t Level, float levelPercent); // Function FSD.SeasonsSubsystem.GetLevelProgress // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11f5010
	struct TArray<struct UDataAsset*> GetAssetReferences(int32_t challengeIndex, struct USeasonChallenge* outChallenge); // Function FSD.SeasonsSubsystem.GetAssetReferences // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11f4d20
	struct TArray<struct FChallengeInfo> GetActiveChallenges(bool canGenerateNewChallenge); // Function FSD.SeasonsSubsystem.GetActiveChallenges // (Final|Native|Public|BlueprintCallable) // @ game+0x11f4c70
	struct UTextureRenderTarget2D* GenerateVanityRewardIcon(struct UVanityItem* Item, struct UPlayerCharacterID* Character, struct FTransform Offset, bool rebuildMesh, struct FVector2D Size); // Function FSD.SeasonsSubsystem.GenerateVanityRewardIcon // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11f4a90
	struct UTextureRenderTarget2D* GenerateSkinRewardIcon(struct UItemSkin* Skin, struct UPlayerCharacterID* Character, bool bShowCloseUp, struct FTransform Offset, bool rebuildMesh, struct FVector2D Size); // Function FSD.SeasonsSubsystem.GenerateSkinRewardIcon // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11f4860
	struct UTextureRenderTarget2D* GeneratePickaxeRewardIcon(struct UPickaxePart* part, enum class EPickaxePartLocation PickaxePartLocation, struct UPlayerCharacterID* Character, struct FTransform Offset, bool rebuildMesh, struct FVector2D Size); // Function FSD.SeasonsSubsystem.GeneratePickaxeRewardIcon // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11f4630
	void CompleteSeasonEvent_Server(struct USeasonEventData* inEvent); // Function FSD.SeasonsSubsystem.CompleteSeasonEvent_Server // (Final|Native|Public|BlueprintCallable) // @ game+0x11f45b0
	bool ClaimScripChallenge(); // Function FSD.SeasonsSubsystem.ClaimScripChallenge // (Final|Native|Public|BlueprintCallable) // @ game+0x11f44f0
	bool ClaimReward(struct UObject* WorldContext, struct AFSDPlayerController* Player, int32_t Level, bool isNormalReward); // Function FSD.SeasonsSubsystem.ClaimReward // (Final|Native|Public|BlueprintCallable) // @ game+0x11f43b0
	void CHEAT_SetSeasonMissionResult(int32_t XPFromMission, int32_t numberOfChallenges, struct USeasonEventData* Event); // Function FSD.SeasonsSubsystem.CHEAT_SetSeasonMissionResult // (Final|Native|Public|BlueprintCallable) // @ game+0x11f4280
	void CHEAT_ResetTimeToNewChallenge(); // Function FSD.SeasonsSubsystem.CHEAT_ResetTimeToNewChallenge // (Final|Native|Public|BlueprintCallable) // @ game+0x11f4260
	void CHEAT_ResetReroll(); // Function FSD.SeasonsSubsystem.CHEAT_ResetReroll // (Final|Native|Public|BlueprintCallable) // @ game+0x11f4240
	void CHEAT_AddChallenge(); // Function FSD.SeasonsSubsystem.CHEAT_AddChallenge // (Final|Native|Public|BlueprintCallable) // @ game+0x11f4220
	bool CanRerollChallenge(); // Function FSD.SeasonsSubsystem.CanRerollChallenge // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f4380
	bool BuyTreeNode(struct UObject* WorldContextObject, struct AFSDPlayerController* Player, int32_t TreeOfVanityNodeID); // Function FSD.SeasonsSubsystem.BuyTreeNode // (Final|Native|Public|BlueprintCallable) // @ game+0x11f4120
};

// Class FSD.SeasonEventData
// Size: 0xa0 (Inherited: 0x58)
struct USeasonEventData : USavableDataAsset {
	struct FText Name; // 0x58(0x18)
	int32_t PerformancePoints; // 0x70(0x04)
	int32_t PerformancePointsOnFail; // 0x74(0x04)
	struct TSoftObjectPtr<struct UTexture2D> Icon; // 0x78(0x28)
};

// Class FSD.SendInviteBlueprintCallProxy
// Size: 0x88 (Inherited: 0x30)
struct USendInviteBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char pad_58[0x30]; // 0x58(0x30)

	struct USendInviteBlueprintCallProxy* SendInvite(struct UObject* WorldContextObject, struct FString ListName, struct FString UserId); // Function FSD.SendInviteBlueprintCallProxy.SendInvite // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1200660
};

// Class FSD.SendSessionInviteToFriendBlueprintCallProxy
// Size: 0x68 (Inherited: 0x30)
struct USendSessionInviteToFriendBlueprintCallProxy : UOnlineBlueprintCallProxyBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct UObject* WorldContextObject; // 0x50(0x08)
	char pad_58[0x10]; // 0x58(0x10)

	struct USendSessionInviteToFriendBlueprintCallProxy* SendSessionInviteToFriend(struct UObject* WorldContextObject, struct FString FriendId); // Function FSD.SendSessionInviteToFriendBlueprintCallProxy.SendSessionInviteToFriend // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1200800
};

// Class FSD.SentryAttachment
// Size: 0x220 (Inherited: 0x220)
struct ASentryAttachment : AActor {
};

// Class FSD.SentryGunAnimInstance
// Size: 0x290 (Inherited: 0x270)
struct USentryGunAnimInstance : UAnimInstance {
	struct ASentryGun* SentryGun; // 0x268(0x08)
	struct ARedeployableSentryGun* RedeployableSentryGun; // 0x270(0x08)
	struct FRotator TurretRotation; // 0x278(0x0c)
	float YawOffset; // 0x284(0x04)
	float BuildProgress; // 0x288(0x04)
};

// Class FSD.RecallableSentryGun
// Size: 0x440 (Inherited: 0x420)
struct ARecallableSentryGun : ARecallableActor {
	struct FMulticastInlineDelegate OnSentryIndexChanged; // 0x420(0x10)
	int32_t SentryIndex; // 0x430(0x04)
	char pad_434[0xc]; // 0x434(0x0c)

	void SentryIndexChanged__DelegateSignature(int32_t Index); // DelegateFunction FSD.RecallableSentryGun.SentryIndexChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ReceiveOnSentryReady(struct ASentryGun* SentryGun, struct APlayerCharacter* PlayerCharacter); // Function FSD.RecallableSentryGun.ReceiveOnSentryReady // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_SentryIndex(); // Function FSD.RecallableSentryGun.OnRep_SentryIndex // (Final|Native|Protected) // @ game+0x1200640
	void GetStateDescription(struct FText Description); // Function FSD.RecallableSentryGun.GetStateDescription // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x158ca90
	struct ASentryGun* GetSentryGunClass(); // Function FSD.RecallableSentryGun.GetSentryGunClass // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x158ca90
	struct ASentryGun* GetSentryGun(); // Function FSD.RecallableSentryGun.GetSentryGun // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x158ca90
};

// Class FSD.ReloadSentryUsableComponent
// Size: 0x188 (Inherited: 0x118)
struct UReloadSentryUsableComponent : UUsableComponent {
	struct FText OutOfAmmoText; // 0x118(0x18)
	struct FText AmmoFullText; // 0x130(0x18)
	struct USoundBase* AudioOutOfAmmo; // 0x148(0x08)
	struct USoundBase* AudioReloading; // 0x150(0x08)
	struct UAudioComponent* ReloadingAudioComponent; // 0x158(0x08)
	bool Usable; // 0x160(0x01)
	bool bReloading; // 0x161(0x01)
	char pad_162[0x6]; // 0x162(0x06)
	struct UAudioComponent* ReloadAudioComponent; // 0x168(0x08)
	float AmmoPerSec; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)
	struct TWeakObjectPtr<struct APlayerCharacter> OwningPlayerCharacter; // 0x178(0x08)
	struct ASentryGun* SentryGun; // 0x180(0x08)

	void SetOwningPlayerCharacter(struct APlayerCharacter* Player); // Function FSD.ReloadSentryUsableComponent.SetOwningPlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x12009a0
	void SetCanUse(bool isUsable); // Function FSD.ReloadSentryUsableComponent.SetCanUse // (Final|Native|Public|BlueprintCallable) // @ game+0x1200920
	void OnRep_Reloading(); // Function FSD.ReloadSentryUsableComponent.OnRep_Reloading // (Final|Native|Protected) // @ game+0x1200620
	void OnReloadAudioFinished(); // Function FSD.ReloadSentryUsableComponent.OnReloadAudioFinished // (Final|Native|Protected) // @ game+0x12004e0
};

// Class FSD.SentryGunItem
// Size: 0x3c8 (Inherited: 0x3b8)
struct ASentryGunItem : APlaceableItem {
	struct TArray<struct UItemUpgrade*> upgrades; // 0x3b8(0x10)
};

// Class FSD.RecallableSentryGunItem
// Size: 0x438 (Inherited: 0x3b0)
struct ARecallableSentryGunItem : ARecallableItem {
	struct FMulticastInlineDelegate OnActiveItemsChanged; // 0x3b0(0x10)
	struct FMulticastInlineDelegate OnSelectedItemChanged; // 0x3c0(0x10)
	int32_t MaxSentryCount; // 0x3d0(0x04)
	float MinDistanceBetweenSentries; // 0x3d4(0x04)
	struct FText RecallHoldDescription; // 0x3d8(0x18)
	float RecallHoldDuration; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct UCapacityHoldingItemAggregator* AmmoCapacity; // 0x3f8(0x08)
	struct UItemPlacerAggregator* ItemPlacer; // 0x400(0x08)
	struct TArray<struct UItemUpgrade*> upgrades; // 0x408(0x10)
	struct AItem* LoadoutClass; // 0x418(0x08)
	float SupplyStatusWeight; // 0x420(0x04)
	float SentryAngleRestriction; // 0x424(0x04)
	bool bIsUpgraded; // 0x428(0x01)
	char pad_429[0xf]; // 0x429(0x0f)

	void ReceiveItemUpgraded(); // Function FSD.RecallableSentryGunItem.ReceiveItemUpgraded // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void RecallableSentryGunSignature__DelegateSignature(struct ARecallableSentryGun* SentryGun); // DelegateFunction FSD.RecallableSentryGunItem.RecallableSentryGunSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void RecallableSentryGunItemSignature__DelegateSignature(struct ARecallableSentryGunItem* Item); // DelegateFunction FSD.RecallableSentryGunItem.RecallableSentryGunItemSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	bool HasAmmoLeft(); // Function FSD.RecallableSentryGunItem.HasAmmoLeft // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x12001f0
	struct ARecallableSentryGun* GetSelectedSentryGun(); // Function FSD.RecallableSentryGunItem.GetSelectedSentryGun // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1200060
	struct TArray<struct ARecallableSentryGun*> GetActiveSentryGuns(); // Function FSD.RecallableSentryGunItem.GetActiveSentryGuns // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11ff4b0
	bool AreAllSentriesPlaced(); // Function FSD.RecallableSentryGunItem.AreAllSentriesPlaced // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11faa70
};

// Class FSD.SessionHandling
// Size: 0x28 (Inherited: 0x28)
struct USessionHandling : UBlueprintFunctionLibrary {

	void StopVoice(struct UObject* WorldContextObject); // Function FSD.SessionHandling.StopVoice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1200d90
	void StartVoice(struct UObject* WorldContextObject); // Function FSD.SessionHandling.StartVoice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1200d20
	bool StartSearchForFriends(int32_t localUserNum, struct UFSDGameInstance* GameInstance); // Function FSD.SessionHandling.StartSearchForFriends // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1200c60
	void StartCheckForInstalledDLC(struct UObject* WorldContextObject); // Function FSD.SessionHandling.StartCheckForInstalledDLC // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1200300
	void SortServerList(struct UObject* WorldContextObject, enum class EServerSortOrder order, bool Reverse, bool sortByFriends, struct TArray<struct FBlueprintSessionResult> servers); // Function FSD.SessionHandling.SortServerList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1200a90
	void ShowStoreUI(struct UObject* WorldContextObject); // Function FSD.SessionHandling.ShowStoreUI // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1141d10
	void ShowInviteUI(struct UObject* WorldContextObject); // Function FSD.SessionHandling.ShowInviteUI // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1200a20
	void JoinOfficialXboxClub(struct UObject* WorldContextObject); // Function FSD.SessionHandling.JoinOfficialXboxClub // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1200300
	bool IsVoiceChatting(); // Function FSD.SessionHandling.IsVoiceChatting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x12002d0
	bool IsInActiveSession(); // Function FSD.SessionHandling.IsInActiveSession // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x12002a0
	bool IsDisconnectReasonAKick(enum class EDisconnectReason reason); // Function FSD.SessionHandling.IsDisconnectReasonAKick // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1200220
	struct FString GetVoiceStatus(); // Function FSD.SessionHandling.GetVoiceStatus // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1200170
	struct FText GetSessionJoinError(struct UObject* WorldContextObject); // Function FSD.SessionHandling.GetSessionJoinError // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1200090
	bool GetOnlinePlayerName(int32_t localUserNum, struct FString Name); // Function FSD.SessionHandling.GetOnlinePlayerName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11fff80
	enum class EFSDNATType GetNATType(struct UObject* WorldContextObject); // Function FSD.SessionHandling.GetNATType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11fff00
	enum class EMissionStructure GetMissionStructure(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.GetMissionStructure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11ffc20
	struct FString GetLoginStatus(int32_t localUserNum); // Function FSD.SessionHandling.GetLoginStatus // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11ffb60
	struct FString GetHostUsername(struct UObject* WorldContextObject); // Function FSD.SessionHandling.GetHostUsername // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11ffa90
	struct FString GetHostUniqueId(struct UObject* WorldContextObject); // Function FSD.SessionHandling.GetHostUniqueId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11ff9c0
	bool GetFriendsList(int32_t localUserNum, struct TArray<struct FFriendInfo> Players); // Function FSD.SessionHandling.GetFriendsList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11ff890
	struct FString GetFriendlyServerNameSanitized(struct UObject* WorldContextObject); // Function FSD.SessionHandling.GetFriendlyServerNameSanitized // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11ff7c0
	struct FString GetFriendlyServerName(struct UObject* WorldContextObject); // Function FSD.SessionHandling.GetFriendlyServerName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11ff6f0
	bool GetCurrentSessionState(struct FString sessionState, struct FString ID); // Function FSD.SessionHandling.GetCurrentSessionState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11ff590
	bool FSDUpdateSessionInfo(struct UObject* WorldContextObject); // Function FSD.SessionHandling.FSDUpdateSessionInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11ff060
	enum class EFSDMissionStatus FSDMissionStatus(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDMissionStatus // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fee20
	void FSDListen(struct UObject* WorldContextObject); // Function FSD.SessionHandling.FSDListen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11fedb0
	bool FSDIsSessionValid(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsSessionValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11feb70
	bool FSDIsPrivateServer(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsPrivateServer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fe930
	bool FSDIsPasswordRequired(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsPasswordRequired // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fe6f0
	bool FSDIsModdedServer(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsModdedServer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fe4b0
	bool FSDIsModdedSandboxServer(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsModdedSandboxServer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fe270
	bool FSDIsFullServer(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsFullServer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fe030
	bool FSDIsEliteDeepDive(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsEliteDeepDive // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fddf0
	bool FSDIsClassLocked(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDIsClassLocked // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fdbb0
	bool FSDHasHiddenModsNotInstalledOnClient(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDHasHiddenModsNotInstalledOnClient // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fd970
	bool FSDHasGameStarted(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDHasGameStarted // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fd730
	struct TArray<struct FString> FSDGetVerifiedModsInstalled(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetVerifiedModsInstalled // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fd4a0
	bool FSDGetServerStartTime(struct FBlueprintSessionResult Result, struct FDateTime StartTime); // Function FSD.SessionHandling.FSDGetServerStartTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11fd200
	struct FString FSDGetServerNameSanitized(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetServerNameSanitized // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fcf80
	struct FString FSDGetServerName(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetServerName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fcd00
	struct FString FSDGetServerID(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetServerID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fca80
	struct FString FSDGetRegion(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetRegion // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fc800
	struct TArray<struct UPlayerCharacterID*> FSDGetPlayerClassIDs(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetPlayerClassIDs // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fc300
	struct TArray<struct APlayerCharacter*> FSDGetPlayerClasses(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetPlayerClasses // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fc580
	int32_t FSDGetNumPlayers(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetNumPlayers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fc0c0
	struct TArray<struct FString> FSDGetModsInstalled(struct FBlueprintSessionResult Result, bool ExcludeVerifiedMods); // Function FSD.SessionHandling.FSDGetModsInstalled // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fbdf0
	int32_t FSDGetMissionSeed(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetMissionSeed // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fbbb0
	struct FString FSDGetMapName(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetMapName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fb930
	struct FString FSDGetHostUserID(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetHostUserID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fb6b0
	int32_t FSDGetGlobalMissionSeed(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetGlobalMissionSeed // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fb470
	float FSDGetDistanceFloat(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetDistanceFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fb220
	enum class EServerDistance FSDGetDistance(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetDistance // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fafe0
	struct UDifficultySetting* FSDGetDifficulty(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetDifficulty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fada0
	struct FString FSDGetBuildId(struct FBlueprintSessionResult Result); // Function FSD.SessionHandling.FSDGetBuildId // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11fab20
	bool FSDCancelFindSessions(struct UObject* WorldContextObject); // Function FSD.SessionHandling.FSDCancelFindSessions // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x11faaa0
	bool FindBestQuickJoinServer(struct UObject* WorldContextObject, struct TArray<struct FBlueprintSessionResult> sessions, struct UDifficultySetting* Difficulty, struct UBiome* Biome, struct UMissionTemplate* MissionTemplate, struct FBlueprintSessionResult OutResult); // Function FSD.SessionHandling.FindBestQuickJoinServer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11ff0e0
	bool AllowLinkToExternalFeedback(struct UObject* WorldContextObject); // Function FSD.SessionHandling.AllowLinkToExternalFeedback // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1138940
};

// Class FSD.SharkEnemy
// Size: 0x4f0 (Inherited: 0x3a0)
struct ASharkEnemy : AEnemyDeepPathfinderCharacter {
	struct UPawnSensingComponent* PawnSensing; // 0x3a0(0x08)
	struct USphereComponent* CollisionSphere; // 0x3a8(0x08)
	struct USphereComponent* NearTargetSphere; // 0x3b0(0x08)
	struct UParticleSystemComponent* TearingGroundParticles; // 0x3b8(0x08)
	struct UParticleSystemComponent* AirTrailParticles; // 0x3c0(0x08)
	struct UInDangerComponent* Danger; // 0x3c8(0x08)
	struct UEnemyComponent* EnemyComponent; // 0x3d0(0x08)
	struct UDamageComponent* Damage; // 0x3d8(0x08)
	struct UDamageComponent* BumpDamage; // 0x3e0(0x08)
	struct UFakePhysGrabberComponent* RestrictedGrabberComponent; // 0x3e8(0x08)
	float RagdollSpeedFactor; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct USoundCue* ImpactCue; // 0x3f8(0x08)
	struct USoundCue* JumpSound; // 0x400(0x08)
	char pad_408[0x4]; // 0x408(0x04)
	float DiveForSeconds; // 0x40c(0x04)
	char pad_410[0x4]; // 0x410(0x04)
	struct FVector_NetQuantize RagdollImpact; // 0x414(0x0c)
	char pad_420[0x10]; // 0x420(0x10)
	float LaunchPower; // 0x430(0x04)
	char pad_434[0xc]; // 0x434(0x0c)
	float GrabTime; // 0x440(0x04)
	char pad_444[0xc]; // 0x444(0x0c)
	float StopSpeedThreshold; // 0x450(0x04)
	float UpsideDownTime; // 0x454(0x04)
	float RaiseSpeed; // 0x458(0x04)
	float TiltInSpeed; // 0x45c(0x04)
	float TiltOutSpeed; // 0x460(0x04)
	float SafeTimeAfterVounerable; // 0x464(0x04)
	float RaiseHeight; // 0x468(0x04)
	float AttackDuration; // 0x46c(0x04)
	float HitLaunchPower; // 0x470(0x04)
	float ChanceToGrab; // 0x474(0x04)
	float MinTimeBetweenBumps; // 0x478(0x04)
	char pad_47C[0x4]; // 0x47c(0x04)
	float ChanceForJump; // 0x480(0x04)
	float MinJumpCooldown; // 0x484(0x04)
	float MaxJumpCooldown; // 0x488(0x04)
	float JumpForce; // 0x48c(0x04)
	float TimeBeforeGroundCheck; // 0x490(0x04)
	char pad_494[0xc]; // 0x494(0x0c)
	float MinCirclingTime; // 0x4a0(0x04)
	float MaxCirclingTime; // 0x4a4(0x04)
	struct UFakeMoverSettings* CircleSetttings; // 0x4a8(0x08)
	struct UFakeMoverSettings* AttackSettings; // 0x4b0(0x08)
	struct UFakeMoverSettings* PostHitSettings; // 0x4b8(0x08)
	struct UFakeMoverSettings* JumpSettings; // 0x4c0(0x08)
	struct UFakeMoverSettings* VounerableSettings; // 0x4c8(0x08)
	float MaxInGroundTime; // 0x4d0(0x04)
	float MinInGroundTime; // 0x4d4(0x04)
	float StartParticleTime; // 0x4d8(0x04)
	float EndParticleTime; // 0x4dc(0x04)
	struct UParticleSystem* DiveParticles; // 0x4e0(0x08)
	char pad_4E8[0x1]; // 0x4e8(0x01)
	enum class ESharkEnemyState State; // 0x4e9(0x01)
	char pad_4EA[0x6]; // 0x4ea(0x06)

	void SetVulnerable(); // Function FSD.SharkEnemy.SetVulnerable // (Final|Native|Public) // @ game+0x1205840
	void ReleasePlayer(struct AActor* playerchar); // Function FSD.SharkEnemy.ReleasePlayer // (Final|Native|Public) // @ game+0x1205560
	void PopRecentlyBumpedPlayer(); // Function FSD.SharkEnemy.PopRecentlyBumpedPlayer // (Final|Native|Protected) // @ game+0x1205540
	void OnStateChangedEvent(enum class ESharkEnemyState CurrentState); // Function FSD.SharkEnemy.OnStateChangedEvent // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnSeePawn(struct APawn* APawn); // Function FSD.SharkEnemy.OnSeePawn // (Final|Native|Protected) // @ game+0x1205440
	void OnRep_State(enum class ESharkEnemyState oldState); // Function FSD.SharkEnemy.OnRep_State // (Final|Native|Protected) // @ game+0x1205340
	void OnRep_RagdollImpact(); // Function FSD.SharkEnemy.OnRep_RagdollImpact // (Final|Native|Public) // @ game+0x1205320
	void OnRep_DiveTime(); // Function FSD.SharkEnemy.OnRep_DiveTime // (Final|Native|Protected) // @ game+0x1205300
	void OnNearTarget(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.SharkEnemy.OnNearTarget // (Final|Native|Protected|HasOutParms) // @ game+0x1205070
	void OnLandedEvent(); // Function FSD.SharkEnemy.OnLandedEvent // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnJumpEvent(); // Function FSD.SharkEnemy.OnJumpEvent // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnGrabbedEvent(); // Function FSD.SharkEnemy.OnGrabbedEvent // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnExitState(enum class ESharkEnemyState State); // Function FSD.SharkEnemy.OnExitState // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnEnterState(enum class ESharkEnemyState State); // Function FSD.SharkEnemy.OnEnterState // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnDeath(struct UHealthComponentBase* aHealthComponent); // Function FSD.SharkEnemy.OnDeath // (Final|Native|Private) // @ game+0x1204ff0
	void OnDamaged(float aAmount); // Function FSD.SharkEnemy.OnDamaged // (Final|Native|Protected) // @ game+0x1204f70
	void OnCollided(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.SharkEnemy.OnCollided // (Final|Native|Protected|HasOutParms) // @ game+0x1204d60
	void Jumped(); // Function FSD.SharkEnemy.Jumped // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1090b80
	void ImpactSound(); // Function FSD.SharkEnemy.ImpactSound // (Net|Native|Event|NetMulticast|Protected) // @ game+0x10926c0
	void DiveShow(); // Function FSD.SharkEnemy.DiveShow // (Final|Native|Protected) // @ game+0x1204bd0
	void DiveHide(); // Function FSD.SharkEnemy.DiveHide // (Final|Native|Protected) // @ game+0x1204bb0
	void ActivateDanger(); // Function FSD.SharkEnemy.ActivateDanger // (Final|Native|Private) // @ game+0x1204950
};

// Class FSD.SharkAnimInstance
// Size: 0x410 (Inherited: 0x410)
struct USharkAnimInstance : USpiderAnimInstance {
	enum class ESharkEnemyState SharkState; // 0x408(0x01)
	bool IsCloseToGround; // 0x409(0x01)
	bool AttackConnected; // 0x40a(0x01)
	float BendValue; // 0x40c(0x04)
};

// Class FSD.ThrowableItem
// Size: 0x408 (Inherited: 0x390)
struct AThrowableItem : AAnimatedItem {
	char pad_390[0x8]; // 0x390(0x08)
	struct AThrowableActor* ThrowableClass; // 0x398(0x08)
	struct UAnimMontage* FPThrowMontage; // 0x3a0(0x08)
	struct UAnimMontage* TPThrowMontage; // 0x3a8(0x08)
	float ThrowVelocity; // 0x3b0(0x04)
	float InheritOwnerVelocityScale; // 0x3b4(0x04)
	float ThrowAngle; // 0x3b8(0x04)
	float CooldownAfterThrow; // 0x3bc(0x04)
	float CooldownAfterDetonation; // 0x3c0(0x04)
	bool CanThrowBeforeEquipAnimFinish; // 0x3c4(0x01)
	char pad_3C5[0x3]; // 0x3c5(0x03)
	float ThrowDelay; // 0x3c8(0x04)
	float ThrowZOffset; // 0x3cc(0x04)
	float CooldownLeft; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct TArray<struct UItemUpgrade*> upgrades; // 0x3d8(0x10)
	struct AItem* LoadoutItem; // 0x3e8(0x08)
	struct TArray<struct TWeakObjectPtr<struct AThrowableActor>> ThrownActors; // 0x3f0(0x10)
	char pad_400[0x8]; // 0x400(0x08)

	void Simulate_Throw(struct AThrowableActor* ActorClass); // Function FSD.ThrowableItem.Simulate_Throw // (Net|Native|Event|NetMulticast|Protected) // @ game+0x121c400
	void Server_Throw(struct AThrowableActor* ActorClass); // Function FSD.ThrowableItem.Server_Throw // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x121c260
	void ReceiveItemThrown(struct AThrowableActor* thrownActor); // Function FSD.ThrowableItem.ReceiveItemThrown // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveItemSpawned(struct AThrowableActor* thrownActor); // Function FSD.ThrowableItem.ReceiveItemSpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnThrownActorDestroyed(struct AActor* Actor); // Function FSD.ThrowableItem.OnThrownActorDestroyed // (Final|Native|Protected) // @ game+0x121bc60
	struct FVector GetThrowLocation(); // Function FSD.ThrowableItem.GetThrowLocation // (Native|Event|Protected|HasDefaults|BlueprintEvent|Const) // @ game+0x121ba70
};

// Class FSD.ShieldGeneratorItem
// Size: 0x480 (Inherited: 0x408)
struct AShieldGeneratorItem : AThrowableItem {
	char pad_408[0x10]; // 0x408(0x10)
	struct UCapacityHoldingItemAggregator* ChargeCapacity; // 0x418(0x08)
	struct UCapacityHoldingItemAggregator* CarryCapacity; // 0x420(0x08)
	float RechargeDuration; // 0x428(0x04)
	int32_t UnchargedCount; // 0x42c(0x04)
	float RechargeProgress; // 0x430(0x04)
	float SupplyStatusWeight; // 0x434(0x04)
	struct UDialogDataAsset* ShoutRecarged; // 0x438(0x08)
	struct FCoolDownProgressStyle RechargeProgressUI; // 0x440(0x40)

	void ReceiveGeneratorReturned(); // Function FSD.ShieldGeneratorItem.ReceiveGeneratorReturned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveGeneratorRechargeProgress(float Progress); // Function FSD.ShieldGeneratorItem.ReceiveGeneratorRechargeProgress // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveGeneratorRecharged(); // Function FSD.ShieldGeneratorItem.ReceiveGeneratorRecharged // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_UnchargedCount(int32_t OldCount); // Function FSD.ShieldGeneratorItem.OnRep_UnchargedCount // (Final|Native|Protected) // @ game+0x12053c0
	bool GetIsRecharging(); // Function FSD.ShieldGeneratorItem.GetIsRecharging // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1204c60
	void GeneratorReturned(); // Function FSD.ShieldGeneratorItem.GeneratorReturned // (Final|Native|Protected|BlueprintCallable) // @ game+0x1204bf0
};

// Class FSD.ThrowableActor
// Size: 0x230 (Inherited: 0x220)
struct AThrowableActor : AActor {
	struct UProjectileMovementComponent* Movement; // 0x220(0x08)
	bool IsMoving; // 0x228(0x01)
	bool IgnoreFellOutOfWorld; // 0x229(0x01)
	bool IgnoreOwnersCollision; // 0x22a(0x01)
	char pad_22B[0x5]; // 0x22b(0x05)

	void ReceiveIgnoreCharacter(struct APlayerCharacter* Character); // Function FSD.ThrowableActor.ReceiveIgnoreCharacter // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void ReceiveHitObject(); // Function FSD.ThrowableActor.ReceiveHitObject // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_IsMoving(); // Function FSD.ThrowableActor.OnRep_IsMoving // (Final|Native|Protected) // @ game+0x121bc00
};

// Class FSD.ShieldGeneratorActor
// Size: 0x240 (Inherited: 0x230)
struct AShieldGeneratorActor : AThrowableActor {
	float GeneratorRadius; // 0x230(0x04)
	float DeployDelay; // 0x234(0x04)
	bool bPushStatusEffectOnExit; // 0x238(0x01)
	char pad_239[0x3]; // 0x239(0x03)
	float GeneratorLifetime; // 0x23c(0x04)
};

// Class FSD.ShootingPlantAnimInstance
// Size: 0x2e0 (Inherited: 0x2c0)
struct UShootingPlantAnimInstance : UEnemyAnimInstance {
	struct AActor* Target; // 0x2b8(0x08)
	float Yaw; // 0x2c0(0x04)
	float Pitch; // 0x2c4(0x04)
	float YawSpeed; // 0x2c8(0x04)
	float PitchSpeed; // 0x2cc(0x04)
	bool IsVisible; // 0x2d0(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
};

// Class FSD.ShowroomItem
// Size: 0x248 (Inherited: 0x220)
struct AShowroomItem : AActor {
	SoftClassProperty ShowroomStage; // 0x220(0x28)
};

// Class FSD.EnemyShowroomItem
// Size: 0x250 (Inherited: 0x248)
struct AEnemyShowroomItem : AShowroomItem {
	enum class EShowroomScaling Scaling; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)
};

// Class FSD.ShowroomController
// Size: 0xb8 (Inherited: 0xb0)
struct UShowroomController : UActorComponent {
	struct AShowroomStage* Stage; // 0xb0(0x08)

	void SetLightChannels(struct AActor* Actor); // Function FSD.ShowroomController.SetLightChannels // (Final|Native|Protected|BlueprintCallable) // @ game+0x12056c0
	void RotateShowroom(float Pitch, float Yaw); // Function FSD.ShowroomController.RotateShowroom // (Final|Native|Public|BlueprintCallable) // @ game+0x1205600
	void ResetShowroomRotation(); // Function FSD.ShowroomController.ResetShowroomRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x12055e0
	struct FRotator GetShowroomRotation(); // Function FSD.ShowroomController.GetShowroomRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1204c90
};

// Class FSD.EnemyShowroomController
// Size: 0xc0 (Inherited: 0xb8)
struct UEnemyShowroomController : UShowroomController {
	struct AEnemyShowroomItem* EnemyInstance; // 0xb8(0x08)

	void Receive_PlayAttack(struct UAnimSequenceBase* attackAnimation); // Function FSD.EnemyShowroomController.Receive_PlayAttack // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void PlayAttack(struct UAnimSequenceBase* Animation); // Function FSD.EnemyShowroomController.PlayAttack // (Final|Native|Public|BlueprintCallable) // @ game+0x12054c0
	struct UEnemyShowroomController* DisplayEnemy(struct UObject* WorldContextObject, SoftClassProperty EnemyPreviewActor); // Function FSD.EnemyShowroomController.DisplayEnemy // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1204a80
};

// Class FSD.ShowroomCameraKey
// Size: 0x30 (Inherited: 0x30)
struct UShowroomCameraKey : UDataAsset {
};

// Class FSD.ShowroomSceneCaptureComponent
// Size: 0x880 (Inherited: 0x880)
struct UShowroomSceneCaptureComponent : USceneCaptureComponent2D {
	struct UShowroomCameraKey* CameraKey; // 0x878(0x08)
};

// Class FSD.CharacterShowroomController
// Size: 0xc0 (Inherited: 0xb8)
struct UCharacterShowroomController : UShowroomController {
	struct APlayerCharacter* CharacterInstance; // 0xb8(0x08)

	void Receive_CharacterShown(); // Function FSD.CharacterShowroomController.Receive_CharacterShown // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void EquipWeapon(enum class EItemCategory Category); // Function FSD.CharacterShowroomController.EquipWeapon // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	struct UCharacterShowroomController* DisplayCharacter(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, struct UShowroomCameraKey* Key); // Function FSD.CharacterShowroomController.DisplayCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1204990
};

// Class FSD.ShowroomManager
// Size: 0xd8 (Inherited: 0xb0)
struct UShowroomManager : UActorComponent {
	struct FVector ShowroomLocation; // 0xb0(0x0c)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct AShowroomStage* CurrentStage; // 0xc0(0x08)
	struct AShowroomStage* StageInstance; // 0xc8(0x08)
	struct UTextureRenderTarget2D* RenderTarget; // 0xd0(0x08)

	struct UShowroomController* GetController(); // Function FSD.ShowroomManager.GetController // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1204c30
	void ClearShowroom(); // Function FSD.ShowroomManager.ClearShowroom // (Final|Native|Public|BlueprintCallable) // @ game+0x1204970
};

// Class FSD.ShowroomSettings
// Size: 0xa8 (Inherited: 0x30)
struct UShowroomSettings : UDataAsset {
	SoftClassProperty EnemyShowroomController; // 0x30(0x28)
	SoftClassProperty CharacterShowroomController; // 0x58(0x28)
	SoftClassProperty CharacterStage; // 0x80(0x28)
};

// Class FSD.ShowroomStage
// Size: 0x268 (Inherited: 0x220)
struct AShowroomStage : AActor {
	struct USceneCaptureComponent2D* SceneCapure; // 0x220(0x08)
	struct USceneCaptureComponent2D* ActiveCaptureComponent; // 0x228(0x08)
	struct UShowroomController* ControllerClass; // 0x230(0x08)
	struct UShowroomController* ControllerInstance; // 0x238(0x08)
	struct USceneCaptureComponent2D* SceneCapture; // 0x240(0x08)
	float MinPitch; // 0x248(0x04)
	float MaxPitch; // 0x24c(0x04)
	struct USceneComponent* CameraFocusPoint; // 0x250(0x08)
	char pad_258[0x10]; // 0x258(0x10)

	void ReceiveInitialize(struct UTextureRenderTarget2D* RenderTarget); // Function FSD.ShowroomStage.ReceiveInitialize // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	struct USceneCaptureComponent2D* GetActiveCaptureComponent(); // Function FSD.ShowroomStage.GetActiveCaptureComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x1204c10
	struct UTextureRenderTarget2D* CreateRenderTarget(); // Function FSD.ShowroomStage.CreateRenderTarget // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.Shredder
// Size: 0x3b8 (Inherited: 0x3a0)
struct AShredder : AEnemyDeepPathfinderCharacter {
	float FoldoutRange; // 0x3a0(0x04)
	float SpinRange; // 0x3a4(0x04)
	char pad_3A8[0x8]; // 0x3a8(0x08)
	struct AActor* CurrentTarget; // 0x3b0(0x08)
};

// Class FSD.ShredderAnimInstance
// Size: 0x2c0 (Inherited: 0x2c0)
struct UShredderAnimInstance : UEnemyAnimInstance {
	bool InFoldoutRange; // 0x2b8(0x01)
	bool InSpinRange; // 0x2b9(0x01)
};

// Class FSD.SimpleHealthComponent
// Size: 0x1d0 (Inherited: 0x148)
struct USimpleHealthComponent : UHealthComponentBase {
	float Damage; // 0x148(0x04)
	float MaxHealth; // 0x14c(0x04)
	bool InvulnerableToNonDefinedResistances; // 0x150(0x01)
	bool bShowHealthBar; // 0x151(0x01)
	char pad_152[0x2]; // 0x152(0x02)
	struct FVector HealthBarOffsetWorld; // 0x154(0x0c)
	struct TWeakObjectPtr<struct UEnemyComponent> EnemyComponent; // 0x160(0x08)
	struct TMap<struct UPawnStat*, float> Resistances; // 0x168(0x50)
	struct TArray<struct UDamageTag*> RequiredDamageTags; // 0x1b8(0x10)
	bool AutomaticFlushNetDormancy; // 0x1c8(0x01)
	char pad_1C9[0x7]; // 0x1c9(0x07)

	void OnRep_Damage(float oldDamage); // Function FSD.SimpleHealthComponent.OnRep_Damage // (Final|Native|Protected) // @ game+0x1205280
	float HealFromDeath(float Amount); // Function FSD.SimpleHealthComponent.HealFromDeath // (Native|Public|BlueprintCallable) // @ game+0x1204cd0
};

// Class FSD.MaggotAnimationSharingStateProcessor
// Size: 0x50 (Inherited: 0x50)
struct UMaggotAnimationSharingStateProcessor : UAnimationSharingStateProcessor {
};

// Class FSD.PipelineAnimationSharingProcessor
// Size: 0x50 (Inherited: 0x50)
struct UPipelineAnimationSharingProcessor : UAnimationSharingStateProcessor {
};

// Class FSD.SkinEffect
// Size: 0x28 (Inherited: 0x28)
struct USkinEffect : UObject {

	void Receive_AddToItem(struct UMeshComponent* Mesh, struct AActor* Skinnable, bool IsFirstPerson); // Function FSD.SkinEffect.Receive_AddToItem // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1209d40
};

// Class FSD.MaterialSkinEffect
// Size: 0x38 (Inherited: 0x28)
struct UMaterialSkinEffect : USkinEffect {
	struct TArray<struct TSoftObjectPtr<struct UMaterialInterface>> Materials; // 0x28(0x10)
};

// Class FSD.SkeletalMeshSkinEffect
// Size: 0x50 (Inherited: 0x28)
struct USkeletalMeshSkinEffect : USkinEffect {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x28(0x28)
};

// Class FSD.Skinnable
// Size: 0x28 (Inherited: 0x28)
struct USkinnable : UInterface {
};

// Class FSD.SkinnableComponent
// Size: 0xc0 (Inherited: 0xb0)
struct USkinnableComponent : UActorComponent {
	struct UItemSkin* EquippedSkinColor; // 0xb0(0x08)
	struct UItemSkin* EquippedSkinMesh; // 0xb8(0x08)

	void UpdateSkin(struct AFSDPlayerState* Player); // Function FSD.SkinnableComponent.UpdateSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x120ad10
	void OnLoadoutChanged(); // Function FSD.SkinnableComponent.OnLoadoutChanged // (Final|Native|Protected) // @ game+0x12094c0
	struct TArray<struct UItemSkin*> GetSkinsForItem(struct UItemID* ItemID, enum class EItemSkinType SkinType); // Function FSD.SkinnableComponent.GetSkinsForItem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1208810
	struct UItemSkin* GetEquippedSkinMesh(struct UItemID* ItemID, struct AFSDPlayerState* Player); // Function FSD.SkinnableComponent.GetEquippedSkinMesh // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1208750
	struct UItemSkin* GetEquippedSkinColor(struct UItemID* ItemID, struct AFSDPlayerState* Player); // Function FSD.SkinnableComponent.GetEquippedSkinColor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1208690
	struct UItemSkin* GetEquippedSkin(struct UItemID* ItemID, enum class EItemSkinType SkinType, struct AFSDPlayerState* Player); // Function FSD.SkinnableComponent.GetEquippedSkin // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x12085a0
	struct TArray<struct UItemSkin*> GetEquippableColorSkins(struct UItemID* ItemID, struct AFSDPlayerState* Player); // Function FSD.SkinnableComponent.GetEquippableColorSkins // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x12084a0
	struct UItemSkin* GetDefaultItemSkin(struct UItemID* ItemID, enum class EItemSkinType itemSkinType); // Function FSD.SkinnableComponent.GetDefaultItemSkin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x12083e0
	struct UItemSkin* GetBaseColorSkinForMeshSkin(struct UItemID* ItemID, struct UItemSkin* meshSkin); // Function FSD.SkinnableComponent.GetBaseColorSkinForMeshSkin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1208320
	void EquipSkin(struct UItemSkin* Skin, struct UItemID* ItemID, struct AFSDPlayerState* Player); // Function FSD.SkinnableComponent.EquipSkin // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1208200
};

// Class FSD.DroneSkinnableComponent
// Size: 0xc0 (Inherited: 0xc0)
struct UDroneSkinnableComponent : USkinnableComponent {
};

// Class FSD.SoundClassManager
// Size: 0x40 (Inherited: 0x30)
struct USoundClassManager : UGameInstanceSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
};

// Class FSD.SoundMixManagerComponent
// Size: 0xc0 (Inherited: 0xb0)
struct USoundMixManagerComponent : UActorComponent {
	struct TArray<struct FSoundMixManagerItem> SoundMixes; // 0xb0(0x10)
};

// Class FSD.SpaceRigBar
// Size: 0x270 (Inherited: 0x220)
struct ASpaceRigBar : AActor {
	struct FMulticastInlineDelegate OnNewDrinkableSpecial; // 0x220(0x10)
	struct UInstantUsable* BarUsable; // 0x230(0x08)
	struct UBoxComponent* BarUsableCollider; // 0x238(0x08)
	struct UBarMenuWidget* BarMenuWidget; // 0x240(0x08)
	struct TArray<struct FVector> DrinkServingLocations; // 0x248(0x10)
	struct TArray<struct FDrinkableBarSlot> DrinkableBarSlots; // 0x258(0x10)
	struct UDrinkableDataAsset* DrinkableSpecial; // 0x268(0x08)

	void SpawnDrinkables(struct UDrinkableDataAsset* Drinkable, struct APlayerCharacter* User); // Function FSD.SpaceRigBar.SpawnDrinkables // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x1209e50
	void ReceiveFinishedSpawningDrinkables(struct UDrinkableDataAsset* DrinkableData, struct APlayerCharacter* Customer); // Function FSD.SpaceRigBar.ReceiveFinishedSpawningDrinkables // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveDrinkableSpawned(struct ADrinkableActor* Drinkable, struct APlayerCharacter* Customer, int32_t LocationIndex); // Function FSD.SpaceRigBar.ReceiveDrinkableSpawned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveBeginSpawningDrinkables(struct UDrinkableDataAsset* DrinkableData, struct APlayerCharacter* Customer); // Function FSD.SpaceRigBar.ReceiveBeginSpawningDrinkables // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void PlayBartenderTip(struct APlayerCharacter* User); // Function FSD.SpaceRigBar.PlayBartenderTip // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void PayTip(struct APlayerCharacter* Character, int32_t Credits); // Function FSD.SpaceRigBar.PayTip // (Final|Native|Protected|BlueprintCallable) // @ game+0x12095d0
	void OnRep_DrinkableSpecial(); // Function FSD.SpaceRigBar.OnRep_DrinkableSpecial // (Final|Native|Protected) // @ game+0x12095b0
	bool HasUnclaimedDrinkables(); // Function FSD.SpaceRigBar.HasUnclaimedDrinkables // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1209490
	bool HasSpaceForMoreDrinkables(); // Function FSD.SpaceRigBar.HasSpaceForMoreDrinkables // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1209460
	int32_t GetAvailableDrinkableSlots(); // Function FSD.SpaceRigBar.GetAvailableDrinkableSlots // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x12082f0
	void DrinkableSignature__DelegateSignature(struct UDrinkableDataAsset* Drinkable); // DelegateFunction FSD.SpaceRigBar.DrinkableSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
};

// Class FSD.SpaceRigBarMenuItem
// Size: 0x258 (Inherited: 0x250)
struct USpaceRigBarMenuItem : UFSDUserWidget {
	struct UDrinkableDataAsset* Drink; // 0x250(0x08)

	void Unselect(); // Function FSD.SpaceRigBarMenuItem.Unselect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void Select(); // Function FSD.SpaceRigBarMenuItem.Select // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.SpawnActorWithDebrisPosComponent
// Size: 0xc0 (Inherited: 0xb0)
struct USpawnActorWithDebrisPosComponent : UActorComponent {
	float MinDistanceBetweenSpwans; // 0xb0(0x04)
	bool AddTerrainPlacementBlockers; // 0xb4(0x01)
	bool AvoidImportantLocations; // 0xb5(0x01)
	char pad_B6[0x2]; // 0xb6(0x02)
	float MinDistanceToImportantLocations; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)

	bool PlaceActorsWithCallback(int32_t NumToSpawn, int32_t NumToSpawnMin, int32_t NumAllowedChecks, struct AActor* SpawnedActorClass, struct AProceduralSetup* setup, float Radius, struct UDebrisPositioning* DebrisPositioning, struct TArray<struct FVector> locationsToAvoid, struct UCurveFloat* AvoidCostCurve, struct FDelegate OnSpawned, struct FVector CustomLocation); // Function FSD.SpawnActorWithDebrisPosComponent.PlaceActorsWithCallback // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x12099f0
	bool PlaceActors(int32_t NumToSpawn, int32_t NumToSpawnMin, int32_t NumAllowedChecks, struct AActor* SpawnedActorClass, struct AProceduralSetup* setup, float Radius, struct UDebrisPositioning* DebrisPositioning, struct TArray<struct FVector> locationsToAvoid, struct UCurveFloat* AvoidCostCurve, struct TArray<struct AActor*> OutSpawnedActors, struct FVector CustomLocation); // Function FSD.SpawnActorWithDebrisPosComponent.PlaceActors // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1209690
	void AddTerrainPlacement(struct AActor* Actor, struct AProceduralSetup* setup); // Function FSD.SpawnActorWithDebrisPosComponent.AddTerrainPlacement // (Final|Native|Public|BlueprintCallable) // @ game+0x12080d0
};

// Class FSD.SpawningBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USpawningBlueprintLibrary : UBlueprintFunctionLibrary {

	void SpawnEnemyGroupDescriptorSpreadOut(struct UObject* WorldContextObject, struct UEnemyGroupDescriptor* descriptor, float Difficulty, struct TArray<struct FVector> Locations, bool Alert, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.SpawnEnemyGroupDescriptorSpreadOut // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x120a890
	void SpawnEnemyGroupDescriptor(struct UObject* WorldContextObject, struct UEnemyGroupDescriptor* descriptor, float Difficulty, struct FVector Location, bool Alert, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.SpawnEnemyGroupDescriptor // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x120a6d0
	void SpawnEnemiesFromPool(struct UObject* WorldContextObject, float Difficulty, struct TArray<struct FVector> Locations, bool Alert, bool isConstantPreassure); // Function FSD.SpawningBlueprintLibrary.SpawnEnemiesFromPool // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x120a510
	void SpawnEnemiesAtLocationWithCallback(struct UObject* WorldContextObject, struct UEnemyDescriptor* EnemyDescriptor, int32_t count, struct FVector Location, struct FDelegate Callback, bool Alert, bool scaleToDifficulty, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.SpawnEnemiesAtLocationWithCallback // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x120a2a0
	void SpawnEnemiesAtLocation(struct UObject* WorldContextObject, struct UEnemyDescriptor* EnemyDescriptor, int32_t count, struct FVector Location, bool Alert, bool scaleToDifficulty, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.SpawnEnemiesAtLocation // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x120a090
	void SpawnEnemiesAtEachLocation(struct UObject* WorldContextObject, struct UEnemyDescriptor* EnemyDescriptor, struct TArray<struct FVector> Locations, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.SpawnEnemiesAtEachLocation // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1209f10
	struct TArray<struct FVector> GetSpawnPointsInRange(struct UObject* WorldContextObject, float distanceToPlayers, int32_t spawnPointCount, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.GetSpawnPointsInRange // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1209180
	struct TArray<struct FVector> GetSpawnPointsInCircle(struct UObject* WorldContextObject, struct FVector Location, float Radius, int32_t count, bool scaleToDificulty, float maxSpawnAngle, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.GetSpawnPointsInCircle // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1208f30
	struct TArray<struct FVector> GetSpawnPointsFromLocation(struct UObject* WorldContextObject, struct FVector Location, float Distance, int32_t spawnPointCount, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.GetSpawnPointsFromLocation // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1208d70
	struct TArray<struct FVector> GetSpawnPointsAroundLocation(struct UObject* WorldContextObject, struct FVector Location, float Distance, int32_t spawnPointCount, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.GetSpawnPointsAroundLocation // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1208bb0
	struct FVector GetSpawnPointInRange(struct UObject* WorldContextObject, float distanceToPlayers, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.GetSpawnPointInRange // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1208aa0
	struct FVector GetSpawnPointFromLocation(struct UObject* WorldContextObject, struct FVector Location, float Distance, enum class DeepPathFinderSize pfSize); // Function FSD.SpawningBlueprintLibrary.GetSpawnPointFromLocation // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1208920
};

// Class FSD.SpecialAttackComponent
// Size: 0x120 (Inherited: 0xf0)
struct USpecialAttackComponent : UAttackBaseComponent {
	struct TArray<struct UAnimMontage*> Montages; // 0xf0(0x10)
	char pad_100[0x10]; // 0x100(0x10)
	struct FMulticastInlineDelegate OnAttackActionNotify; // 0x110(0x10)

	void TriggerAttack(struct FName Name); // Function FSD.SpecialAttackComponent.TriggerAttack // (Final|Native|Protected) // @ game+0x120ac10
	struct UAnimMontage* SelectMontage(); // Function FSD.SpecialAttackComponent.SelectMontage // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x11da680
	void Receive_OnPerformAttack(); // Function FSD.SpecialAttackComponent.Receive_OnPerformAttack // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Receive_OnAborted(); // Function FSD.SpecialAttackComponent.Receive_OnAborted // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnMontageEnded(struct UAnimMontage* Montage, bool interrupted); // Function FSD.SpecialAttackComponent.OnMontageEnded // (Final|Native|Protected) // @ game+0x12094e0
	void OnFrozen(bool IsFrozen); // Function FSD.SpecialAttackComponent.OnFrozen // (Native|Event|Protected|BlueprintEvent) // @ game+0x10d2020
};

// Class FSD.SpecialDamageAttackComponent
// Size: 0x128 (Inherited: 0x120)
struct USpecialDamageAttackComponent : USpecialAttackComponent {
	struct UDamageComponent* Damage; // 0x120(0x08)
};

// Class FSD.SpecialEventBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USpecialEventBlueprintLibrary : UBlueprintFunctionLibrary {

	struct USchematic* TryGivePendingReward(struct UObject* WorldContextObject); // Function FSD.SpecialEventBlueprintLibrary.TryGivePendingReward // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x120ac90
	void StorePendingReward(struct UObject* WorldContextObject, struct TArray<struct USchematic*> schematicsToChooseFrom); // Function FSD.SpecialEventBlueprintLibrary.StorePendingReward // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x120ab30
	void SpawnEventRewardFrame(struct UObject* WorldContextObject, struct FVector Location); // Function FSD.SpecialEventBlueprintLibrary.SpawnEventRewardFrame // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x120aa70
	bool HasPendingReward(struct UObject* WorldContextObject); // Function FSD.SpecialEventBlueprintLibrary.HasPendingReward // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x12093e0
	struct TArray<struct USchematic*> GetSpecialEventsRewardSchematics(struct UObject* WorldContextObject); // Function FSD.SpecialEventBlueprintLibrary.GetSpecialEventsRewardSchematics // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1209310
	void ClearPendingReward(struct UObject* WorldContextObject); // Function FSD.SpecialEventBlueprintLibrary.ClearPendingReward // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1208190
};

// Class FSD.SpecialEventSpawner
// Size: 0x28 (Inherited: 0x28)
struct USpecialEventSpawner : UObject {
};

// Class FSD.SimpleSpecialEventSpawner
// Size: 0x60 (Inherited: 0x28)
struct USimpleSpecialEventSpawner : USpecialEventSpawner {
	struct UDebrisPositioning* Positioning; // 0x28(0x08)
	SoftClassProperty EventActor; // 0x30(0x28)
	float EventAvoidanceRadius; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class FSD.EncounterSpecialEventSpawner
// Size: 0x38 (Inherited: 0x28)
struct UEncounterSpecialEventSpawner : USpecialEventSpawner {
	struct FEncounterSpecialItem Encounter; // 0x28(0x10)
};

// Class FSD.SpecialEvent
// Size: 0x40 (Inherited: 0x30)
struct USpecialEvent : UDataAsset {
	float Weight; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct USpecialEventSpawner* EventSpawner; // 0x38(0x08)
};

// Class FSD.SpecialEventSettings
// Size: 0x108 (Inherited: 0x30)
struct USpecialEventSettings : UDataAsset {
	struct TArray<struct USpecialEvent*> SpecialEvents; // 0x30(0x10)
	SoftClassProperty EventRewardFrameClass; // 0x40(0x28)
	struct UDebrisPositioning* EventRewardFramePositioning; // 0x68(0x08)
	float EventRewardRadius; // 0x70(0x04)
	float CreditsReward; // 0x74(0x04)
	float XPReward; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FRuntimeFloatCurve SpawnChanceMissionLengthCurve; // 0x80(0x88)
};

// Class FSD.ShootingSpiderAnimInstance
// Size: 0x430 (Inherited: 0x410)
struct UShootingSpiderAnimInstance : USpiderAnimInstance {
	float LookAtBlend; // 0x408(0x04)
	bool CheckCurve; // 0x40c(0x01)
	struct TWeakObjectPtr<struct AActor> TargetActor; // 0x410(0x08)
	struct FVector LookAtLocation; // 0x418(0x0c)
	char pad_429[0x7]; // 0x429(0x07)
};

// Class FSD.SpiderEnemy
// Size: 0x3e8 (Inherited: 0x3a0)
struct ASpiderEnemy : AEnemyDeepPathfinderCharacter {
	char pad_3A0[0x8]; // 0x3a0(0x08)
	struct UPawnStatsComponent* PawnStats; // 0x3a8(0x08)
	struct TArray<struct UAnimSequenceBase*> HitReactions; // 0x3b0(0x10)
	float FirstHitReactBlendIn; // 0x3c0(0x04)
	float OverrideHitReactBlendIn; // 0x3c4(0x04)
	char pad_3C8[0x8]; // 0x3c8(0x08)
	struct UStaticMesh* GoreMesh; // 0x3d0(0x08)
	bool ApplyDifficultySpeedModifier; // 0x3d8(0x01)
	char pad_3D9[0x3]; // 0x3d9(0x03)
	float AttackDamageModifier; // 0x3dc(0x04)
	bool LimitRagdollSpeed; // 0x3e0(0x01)
	char pad_3E1[0x3]; // 0x3e1(0x03)
	float MaxRagdollSpeed; // 0x3e4(0x04)

	void PlayHitReaction(); // Function FSD.SpiderEnemy.PlayHitReaction // (Final|Native|Protected) // @ game+0x120e400
	void OnDamaged(float Damage); // Function FSD.SpiderEnemy.OnDamaged // (Final|Native|Protected) // @ game+0x120e1e0
	struct UStaticMeshComponent* CreateHeadGore(); // Function FSD.SpiderEnemy.CreateHeadGore // (Final|Native|Protected|BlueprintCallable) // @ game+0x120e050
	void AlertNearbyEnemies(); // Function FSD.SpiderEnemy.AlertNearbyEnemies // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.EnemyBufferComponent
// Size: 0x170 (Inherited: 0xb0)
struct UEnemyBufferComponent : UActorComponent {
	struct UStatusEffect* StatusEffect; // 0xb0(0x08)
	struct FName BufferParticleSocket; // 0xb8(0x08)
	struct UParticleSystem* Particles; // 0xc0(0x08)
	float ParticleTangentSize; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct FMulticastInlineDelegate OnBuffingChangedEvent; // 0xd0(0x10)
	float BuffRadius; // 0xe0(0x04)
	int32_t MaxBuffedTargets; // 0xe4(0x04)
	struct FGameplayTagQuery BuffQuery; // 0xe8(0x48)
	struct TArray<struct AFSDPawn*> BuffTargets; // 0x130(0x10)
	struct TArray<struct UParticleSystemComponent*> ParticleInstances; // 0x140(0x10)
	char pad_150[0x20]; // 0x150(0x20)

	void SetBuffingEnabled(bool Enabled); // Function FSD.EnemyBufferComponent.SetBuffingEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x120e530
	void OnPawnDied(struct UHealthComponentBase* Health); // Function FSD.EnemyBufferComponent.OnPawnDied // (Final|Native|Protected) // @ game+0x120e2e0
	void OnOwnerDied(struct UHealthComponentBase* Health); // Function FSD.EnemyBufferComponent.OnOwnerDied // (Final|Native|Protected) // @ game+0x120e260
};

// Class FSD.AlignEnemyComponent
// Size: 0xb8 (Inherited: 0xb0)
struct UAlignEnemyComponent : UActorComponent {
	bool RotateWhileStationary; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	void SetRotateWhileStationary(bool Value); // Function FSD.AlignEnemyComponent.SetRotateWhileStationary // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x120e6c0
	void OnRep_RotateWhileStationary(); // Function FSD.AlignEnemyComponent.OnRep_RotateWhileStationary // (Final|Native|Protected) // @ game+0x120e360
};

// Class FSD.SplineDecoratorComponent
// Size: 0x580 (Inherited: 0x530)
struct USplineDecoratorComponent : UInstancedStaticMeshComponent {
	float DistanceBetweenInstances; // 0x528(0x04)
	int32_t StartIndex; // 0x52c(0x04)
	int32_t EndIndex; // 0x530(0x04)
	bool bUpdateContinuously; // 0x534(0x01)
	struct FVector VerticalOffset; // 0x538(0x0c)
	struct FVector Scale; // 0x544(0x0c)
	float DistanceProgress; // 0x550(0x04)
	struct USplineComponent* SplineComponent; // 0x558(0x08)
	struct TArray<struct FTransform> NewInstancesTransforms; // 0x560(0x10)
	float Phase; // 0x570(0x04)
	char pad_575[0xb]; // 0x575(0x0b)

	void Update(float DeltaTime); // Function FSD.SplineDecoratorComponent.Update // (Final|Native|Public|BlueprintCallable) // @ game+0x120eb80
	void SetUpdateContinuously(bool InContinuously); // Function FSD.SplineDecoratorComponent.SetUpdateContinuously // (Final|Native|Public|BlueprintCallable) // @ game+0x120eaf0
	void SetSplineComponentAndMaterial(struct USplineComponent* InSplineComponent, int32_t ElementIndex, struct UMaterialInterface* Material); // Function FSD.SplineDecoratorComponent.SetSplineComponentAndMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x120e7d0
	void SetSplineComponent(struct USplineComponent* InSplineComponent); // Function FSD.SplineDecoratorComponent.SetSplineComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x120e750
};

// Class FSD.SplinePlant
// Size: 0x448 (Inherited: 0x220)
struct ASplinePlant : AActor {
	struct USplineComponent* PlantSpline; // 0x220(0x08)
	struct USceneComponent* PlantEndPoint; // 0x228(0x08)
	struct UAudioComponent* AudioComponent; // 0x230(0x08)
	struct TSoftObjectPtr<struct USoundCue> CueExtending; // 0x238(0x28)
	struct TSoftObjectPtr<struct USoundCue> CueRetracting; // 0x260(0x28)
	struct USoundCue* AudioExtending; // 0x288(0x08)
	struct USoundCue* AudioRetracting; // 0x290(0x08)
	bool bEnabledSegmentCollision; // 0x298(0x01)
	char pad_299[0x3]; // 0x299(0x03)
	float CarveRadius; // 0x29c(0x04)
	struct TSoftObjectPtr<struct UStaticMesh> SegmentMeshPtr; // 0x2a0(0x28)
	enum class ESplineMeshAxis SegmentForwardAxis; // 0x2c8(0x01)
	char pad_2C9[0x3]; // 0x2c9(0x03)
	float SegmentLength; // 0x2cc(0x04)
	struct FRuntimeFloatCurve SegmentWidthCurve; // 0x2d0(0x88)
	float SegmentWidthScale; // 0x358(0x04)
	char pad_35C[0x4]; // 0x35c(0x04)
	struct FRuntimeFloatCurve SegmentHeightCurve; // 0x360(0x88)
	float SegmentHeightScale; // 0x3e8(0x04)
	float PreviewLengthPercent; // 0x3ec(0x04)
	int32_t PreviewSeed; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct TArray<struct USplineMeshComponent*> SegmentMeshCache; // 0x3f8(0x10)
	struct TArray<struct USplineMeshComponent*> CollisionMeshCache; // 0x408(0x10)
	struct USplineComponent* SplineInstance; // 0x418(0x08)
	struct UStaticMesh* SegmentMesh; // 0x420(0x08)
	int32_t Seed; // 0x428(0x04)
	char pad_42C[0x1c]; // 0x42c(0x1c)

	void SetTargetPlantLengthPercent(float InTargetPercent, float InPercentPerSecond, float InEaseExp); // Function FSD.SplinePlant.SetTargetPlantLengthPercent // (Final|Native|Public|BlueprintCallable) // @ game+0x120e9e0
	void SetTargetPlantLength(float InTargetLength, float InDistancePerSecond, float InEaseExp); // Function FSD.SplinePlant.SetTargetPlantLength // (Final|Native|Public|BlueprintCallable) // @ game+0x120e8d0
	void SetPlantLengthPercent(float InPercent); // Function FSD.SplinePlant.SetPlantLengthPercent // (Final|Native|Public|BlueprintCallable) // @ game+0x120e640
	void ResetSpline(); // Function FSD.SplinePlant.ResetSpline // (Final|Native|Protected|BlueprintCallable) // @ game+0x120e510
	void ResetScale(); // Function FSD.SplinePlant.ResetScale // (Final|Native|Protected|BlueprintCallable) // @ game+0x120e4f0
	void ReceivePrepareSpline(struct USplineComponent* InSplineComponent, int32_t InSeed); // Function FSD.SplinePlant.ReceivePrepareSpline // (Native|Event|Protected|BlueprintEvent) // @ game+0x120e420
	void ReceiveMovementUpdated(float InDistanceProgress); // Function FSD.SplinePlant.ReceiveMovementUpdated // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveMovementStarted(float InTargetDistance); // Function FSD.SplinePlant.ReceiveMovementStarted // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveMovementFinished(float InDistanceProgress); // Function FSD.SplinePlant.ReceiveMovementFinished // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	float GetPlantTargetLengthPercent(); // Function FSD.SplinePlant.GetPlantTargetLengthPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x120e130
	float GetPlantLengthPercent(); // Function FSD.SplinePlant.GetPlantLengthPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x120e110
	struct FTransform GetNearestLocationToLocalPlayer(); // Function FSD.SplinePlant.GetNearestLocationToLocalPlayer // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x120e0b0
	float GetFullPlantLength(); // Function FSD.SplinePlant.GetFullPlantLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x120e080
};

// Class FSD.StabberVineRoot
// Size: 0x340 (Inherited: 0x340)
struct AStabberVineRoot : AEnemyPawn {

	void RemoveVine(struct AStabberVine* vine); // Function FSD.StabberVineRoot.RemoveVine // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.StabberVine
// Size: 0x4d0 (Inherited: 0x4d0)
struct AStabberVine : ATentacleBase {
};

// Class FSD.StatHat
// Size: 0xb8 (Inherited: 0x30)
struct UStatHat : UGameInstanceSubsystem {
	char pad_30[0x88]; // 0x30(0x88)

	void AddStatValue(struct FString Key, float Value); // Function FSD.StatHat.AddStatValue // (Final|Native|Public|BlueprintCallable) // @ game+0x120dee0
	void AddStatCount(struct FString Key, int32_t count); // Function FSD.StatHat.AddStatCount // (Final|Native|Public|BlueprintCallable) // @ game+0x120de00
};

// Class FSD.StatusEffectExclusiveKey
// Size: 0x30 (Inherited: 0x30)
struct UStatusEffectExclusiveKey : UDataAsset {
};

// Class FSD.StatusEffect
// Size: 0xf8 (Inherited: 0x28)
struct UStatusEffect : UObject {
	struct UPawnAffliction* PawnAffliction; // 0x28(0x08)
	struct TArray<struct UStatusEffectItem*> StatusEffects; // 0x30(0x10)
	float MaxResistance; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct UDamageClass* DamageClass; // 0x48(0x08)
	struct UStatusEffectExclusiveKey* ExclusiveKey; // 0x50(0x08)
	struct FRandRange ApplyEffectsInterval; // 0x58(0x08)
	bool CanStack; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	float Duration; // 0x64(0x04)
	bool ApplyDurationAfterPop; // 0x68(0x01)
	bool RemoveOnDeath; // 0x69(0x01)
	bool RemoveOnTemperatureStateChange; // 0x6a(0x01)
	char pad_6B[0x5]; // 0x6b(0x05)
	struct FGameplayTagQuery GameplayTagQuery; // 0x70(0x48)
	struct FGameplayTagContainer ExcludeTargetsWithTags; // 0xb8(0x20)
	struct FGameplayTagContainer TargetRequiredTags; // 0xd8(0x20)

	bool ShouldInstantiate(); // Function FSD.StatusEffect.ShouldInstantiate // (Native|Event|Public|BlueprintEvent|Const) // @ game+0xbaf250
	float GetStatusEffectDuration(struct UStatusEffect* StatusEffect); // Function FSD.StatusEffect.GetStatusEffectDuration // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x120e150
	bool CanTrigger(struct AActor* Target); // Function FSD.StatusEffect.CanTrigger // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x120dfc0
};

// Class FSD.StatusEffectItem
// Size: 0x28 (Inherited: 0x28)
struct UStatusEffectItem : UObject {
};

// Class FSD.DotStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UDotStatusEffectItem : UStatusEffectItem {
	struct FRandRange damageAmount; // 0x28(0x08)
};

// Class FSD.DotEnemyArmorStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UDotEnemyArmorStatusEffectItem : UStatusEffectItem {
	struct FRandRange damageAmount; // 0x28(0x08)
};

// Class FSD.PlayerArmorStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UPlayerArmorStatusEffectItem : UStatusEffectItem {
	struct FRandRange ChangeAmount; // 0x28(0x08)
};

// Class FSD.HealingStatusEffectItem
// Size: 0x48 (Inherited: 0x28)
struct UHealingStatusEffectItem : UStatusEffectItem {
	bool HealPercentage; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float NoDamageTimeRequired; // 0x2c(0x04)
	struct UPawnAffliction* PawnAffliction; // 0x30(0x08)
	struct FRandRange Amount; // 0x38(0x08)
	bool IgnoreCanTakeDamage; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class FSD.StatChangeStatusEffectItem
// Size: 0x38 (Inherited: 0x28)
struct UStatChangeStatusEffectItem : UStatusEffectItem {
	struct UPawnStat* Stat; // 0x28(0x08)
	float StatChange; // 0x30(0x04)
	bool AffectedByResistances; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
};

// Class FSD.TemperatureStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UTemperatureStatusEffectItem : UStatusEffectItem {
	struct FRandRange TemperatureChangeAmount; // 0x28(0x08)
};

// Class FSD.HeatSourceStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UHeatSourceStatusEffectItem : UStatusEffectItem {
	float Temperature; // 0x28(0x04)
	enum class ETemperatureIntensity Intensity; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
};

// Class FSD.PheromoneStatusEffectItem
// Size: 0x28 (Inherited: 0x28)
struct UPheromoneStatusEffectItem : UStatusEffectItem {
};

// Class FSD.MakeAttackableStatusEffectItem
// Size: 0x38 (Inherited: 0x28)
struct UMakeAttackableStatusEffectItem : UStatusEffectItem {
	float AttackCostModifier; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct UAttackerPositioningComponent* ComponentClass; // 0x30(0x08)
};

// Class FSD.FSDPawnStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UFSDPawnStatusEffectItem : UStatusEffectItem {
	float StaggerDurationMultiplier; // 0x28(0x04)
	float AttackSpeedModifier; // 0x2c(0x04)
};

// Class FSD.ReplenishOxygenStatusEffectItem
// Size: 0x28 (Inherited: 0x28)
struct UReplenishOxygenStatusEffectItem : UStatusEffectItem {
};

// Class FSD.EnemyTemperatureStatusEffectItem
// Size: 0x38 (Inherited: 0x28)
struct UEnemyTemperatureStatusEffectItem : UStatusEffectItem {
	float WarmingRate; // 0x28(0x04)
	float UnFreezeTemperature; // 0x2c(0x04)
	float TemperatureChangeScaleModifier; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class FSD.EnemyDetonationStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UEnemyDetonationStatusEffectItem : UStatusEffectItem {
	bool FireDetonation; // 0x28(0x01)
	bool IceDetonation; // 0x29(0x01)
	char pad_2A[0x6]; // 0x2a(0x06)
};

// Class FSD.ShoutStatusEffectItem
// Size: 0x30 (Inherited: 0x28)
struct UShoutStatusEffectItem : UStatusEffectItem {
	struct UDialogDataAsset* BeginShout; // 0x28(0x08)
};

// Class FSD.StatusEffectsComponent
// Size: 0x120 (Inherited: 0xb0)
struct UStatusEffectsComponent : UActorComponent {
	struct TArray<struct FActiveStatusEffectBank> ActiveStatusEffects; // 0xb0(0x10)
	struct UHealthComponentBase* OwnerHealth; // 0xc0(0x08)
	struct TSet<struct UStatusEffectExclusiveKey*> ActiveExclusiveKeys; // 0xc8(0x50)
	bool IgnoreAll; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)

	bool TryPushActiveStatusEffect(struct UStatusEffect* StatusEffect, struct AActor* Target, struct AActor* Owner); // Function FSD.StatusEffectsComponent.TryPushActiveStatusEffect // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1213210
	bool TryPopActiveStatusEffect(struct UStatusEffect* StatusEffect, struct AActor* Target, struct AActor* Owner); // Function FSD.StatusEffectsComponent.TryPopActiveStatusEffect // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1213020
	bool PushActiveStatusEffectInstance(struct UStatusEffect* StatusEffect, struct AActor* Owner); // Function FSD.StatusEffectsComponent.PushActiveStatusEffectInstance // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1212d00
	bool PushActiveStatusEffect(struct UStatusEffect* StatusEffect, struct AActor* Owner); // Function FSD.StatusEffectsComponent.PushActiveStatusEffect // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1212c40
	void PopAllActiveStatusEffects(struct AActor* Owner); // Function FSD.StatusEffectsComponent.PopAllActiveStatusEffects // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1212bc0
	bool PopActiveStatusEffectInstance(struct UStatusEffect* StatusEffect, struct AActor* Owner); // Function FSD.StatusEffectsComponent.PopActiveStatusEffectInstance // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1212b00
	bool PopActiveStatusEffect(struct UStatusEffect* StatusEffect, struct AActor* Owner); // Function FSD.StatusEffectsComponent.PopActiveStatusEffect // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1212a40
	void OnDeath(struct UHealthComponentBase* HealthComponent); // Function FSD.StatusEffectsComponent.OnDeath // (Final|Native|Protected) // @ game+0x1212760
	bool HasActiveEffect(struct UStatusEffect* StatusEffect); // Function FSD.StatusEffectsComponent.HasActiveEffect // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x12121e0
	struct UStatusEffect* CreateStatusEffectInstance(struct UStatusEffect* StatusEffect, struct UObject* Owner); // Function FSD.StatusEffectsComponent.CreateStatusEffectInstance // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1212000
};

// Class FSD.StatusEffectTriggerComponent
// Size: 0x100 (Inherited: 0xb0)
struct UStatusEffectTriggerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnEffectTriggered; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnActorEnterLeave; // 0xc0(0x10)
	struct TArray<struct UStatusEffect*> StatusEffects; // 0xd0(0x10)
	struct TArray<struct UStatusEffect*> LeaveTriggerEffects; // 0xe0(0x10)
	struct UPrimitiveComponent* collider; // 0xf0(0x08)
	bool RemoveStatusEffectOnEndOverlap; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	void OnOverlapEnd(struct AActor* MyActor, struct AActor* OtherActor); // Function FSD.StatusEffectTriggerComponent.OnOverlapEnd // (Final|Native|Protected) // @ game+0x12128c0
	void OnOverlapBegin(struct AActor* MyActor, struct AActor* OtherActor); // Function FSD.StatusEffectTriggerComponent.OnOverlapBegin // (Final|Native|Protected) // @ game+0x1212800
	void OnComponentOverlapEnd(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.StatusEffectTriggerComponent.OnComponentOverlapEnd // (Final|Native|Protected) // @ game+0x1212620
	void OnComponentOverlapBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.StatusEffectTriggerComponent.OnComponentOverlapBegin // (Final|Native|Protected|HasOutParms) // @ game+0x1212410
};

// Class FSD.StayAwayFromWallsComponent
// Size: 0x250 (Inherited: 0x1f0)
struct UStayAwayFromWallsComponent : USceneComponent {
	char pad_1F0[0x8]; // 0x1f0(0x08)
	struct AFSDGameState* GameState; // 0x1f8(0x08)
	char pad_200[0x28]; // 0x200(0x28)
	float MaxSpeed; // 0x228(0x04)
	float Acceleration; // 0x22c(0x04)
	float BackAcceleration; // 0x230(0x04)
	float PointOffset; // 0x234(0x04)
	float AvoidSpeed; // 0x238(0x04)
	float GoBackSpeed; // 0x23c(0x04)
	bool Active; // 0x240(0x01)
	char pad_241[0xf]; // 0x241(0x0f)

	void SetIsActive(bool IsActive); // Function FSD.StayAwayFromWallsComponent.SetIsActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1212fa0
};

// Class FSD.Steerable
// Size: 0x28 (Inherited: 0x28)
struct USteerable : UInterface {
};

// Class FSD.StickyFlame
// Size: 0x268 (Inherited: 0x220)
struct AStickyFlame : AActor {
	struct UParticleSystemComponent* FlameParticles; // 0x220(0x08)
	struct UAudioComponent* Audio; // 0x228(0x08)
	struct UStatusEffectTriggerComponent* StatusTriggerComponent; // 0x230(0x08)
	struct FDecalData Decal; // 0x238(0x18)
	float FlameLifetime; // 0x250(0x04)
	float FlameExtinguishTime; // 0x254(0x04)
	float AudioFadeOutTime; // 0x258(0x04)
	bool IsActive; // 0x25c(0x01)
	char pad_25D[0xb]; // 0x25d(0x0b)

	void OnRep_IsActive(); // Function FSD.StickyFlame.OnRep_IsActive // (Final|Native|Protected) // @ game+0x1212a20
	void OnExtinguisFlame(); // Function FSD.StickyFlame.OnExtinguisFlame // (Final|Native|Protected) // @ game+0x12127e0
};

// Class FSD.StickyFlameSpawner
// Size: 0xe8 (Inherited: 0xb0)
struct UStickyFlameSpawner : UActorComponent {
	struct FMulticastInlineDelegate OnStickyFlameSpawned; // 0xb0(0x10)
	struct AStickyFlame* StickyFlameActor; // 0xc0(0x08)
	float FlameLifetime; // 0xc8(0x04)
	float StickyFlameIntervals; // 0xcc(0x04)
	float StickyFlameMinDistance; // 0xd0(0x04)
	float StickyFlameLastTime; // 0xd4(0x04)
	struct FVector StickyFlameLastLocation; // 0xd8(0x0c)
	char pad_E4[0x4]; // 0xe4(0x04)

	bool TrySpawnStickyFlameHit(struct FHitResult Hit); // Function FSD.StickyFlameSpawner.TrySpawnStickyFlameHit // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x12134f0
	bool TrySpawnStickyFlame(struct FVector Location, struct FVector Normal); // Function FSD.StickyFlameSpawner.TrySpawnStickyFlame // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1213400
	void StickyFlameSignature__DelegateSignature(struct AStickyFlame* StickyFlame); // DelegateFunction FSD.StickyFlameSpawner.StickyFlameSignature__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ServerSpawnStickyFlame(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal); // Function FSD.StickyFlameSpawner.ServerSpawnStickyFlame // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1212de0
};

// Class FSD.STLMeshCarver
// Size: 0x70 (Inherited: 0x28)
struct USTLMeshCarver : UObject {
	struct FBox AABB; // 0x28(0x1c)
	char pad_44[0x4]; // 0x44(0x04)
	struct FDeepCSGFloatTree BSPTree; // 0x48(0x18)
	struct TArray<struct FVector> Vertices; // 0x60(0x10)
};

// Class FSD.SubHealthComponent
// Size: 0xf0 (Inherited: 0xb0)
struct USubHealthComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FMulticastInlineDelegate OnDamageTaken; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnHealthChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnCanTakeDamageChanged; // 0xd8(0x10)
	enum class EHealthbarType HealthbarType; // 0xe8(0x01)
	char pad_E9[0x1]; // 0xe9(0x01)
	enum class EEnemyHealthScaling EnemyHealthScaling; // 0xea(0x01)
	char pad_EB[0x5]; // 0xeb(0x05)

	void SetCanTakeDamage(bool canTakeDamage); // Function FSD.SubHealthComponent.SetCanTakeDamage // (Native|Public|BlueprintCallable) // @ game+0x1212f10
	bool IsDead(); // Function FSD.SubHealthComponent.IsDead // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115d280
	bool IsAlive(); // Function FSD.SubHealthComponent.IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115d240
	float GetHealthPct(); // Function FSD.SubHealthComponent.GetHealthPct // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115d040
	float GetHealth(); // Function FSD.SubHealthComponent.GetHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x115cf10
	bool GetCanTakeDamage(); // Function FSD.SubHealthComponent.GetCanTakeDamage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1212150
};

// Class FSD.DestructibleSubHealthComponent
// Size: 0x118 (Inherited: 0xf0)
struct UDestructibleSubHealthComponent : USubHealthComponent {
	float MaxHealth; // 0xf0(0x04)
	float RadialDamageResistance; // 0xf4(0x04)
	bool AllowInderectDamage; // 0xf8(0x01)
	bool PassthroughDamageWhenDisabled; // 0xf9(0x01)
	char pad_FA[0x2]; // 0xfa(0x02)
	float Damage; // 0xfc(0x04)
	struct USceneComponent* ArmorComponent; // 0x100(0x08)
	struct FMulticastInlineDelegate OnDestroyed; // 0x108(0x10)

	void SubHealthDestroyed__DelegateSignature(struct UDestructibleSubHealthComponent* subHealth); // DelegateFunction FSD.DestructibleSubHealthComponent.SubHealthDestroyed__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void ResetHealth(); // Function FSD.DestructibleSubHealthComponent.ResetHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x1212dc0
	void OnRep_Damage(float oldDamage); // Function FSD.DestructibleSubHealthComponent.OnRep_Damage // (Final|Native|Protected) // @ game+0x1212980
};

// Class FSD.PassthroughSubHealthComponent
// Size: 0xf8 (Inherited: 0xf0)
struct UPassthroughSubHealthComponent : USubHealthComponent {
	struct USceneComponent* ArmorComponent; // 0xf0(0x08)
};

// Class FSD.TargetDummyPawn
// Size: 0x250 (Inherited: 0x220)
struct ATargetDummyPawn : AActor {
	char pad_220[0x10]; // 0x220(0x10)
	struct FGameplayTagContainer GameplayTags; // 0x230(0x20)
};

// Class FSD.TeamResourcesComponent
// Size: 0x108 (Inherited: 0x108)
struct UTeamResourcesComponent : UResourcesComponent {
};

// Class FSD.Teleporter
// Size: 0x238 (Inherited: 0x220)
struct ATeleporter : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct ATeleporter* ConnectedTeleporter; // 0x228(0x08)
	float MinTeleporterRange; // 0x230(0x04)
	float MaxTeleporterRange; // 0x234(0x04)
};

// Class FSD.TemporaryBuff
// Size: 0x70 (Inherited: 0x30)
struct UTemporaryBuff : UDataAsset {
	struct FText Description; // 0x30(0x18)
	struct TSoftObjectPtr<struct UTexture2D> Icon; // 0x48(0x28)

	void DeActivateBuff(struct AFSDPlayerController* Player); // Function FSD.TemporaryBuff.DeActivateBuff // (Native|Public|BlueprintCallable|Const) // @ game+0x12120c0
	void ActivateBuffOnPlayer(struct APlayerCharacter* Player); // Function FSD.TemporaryBuff.ActivateBuffOnPlayer // (Native|Public|BlueprintCallable|Const) // @ game+0x1211ea0
	void ActivateBuffOnController(struct AFSDPlayerController* Player); // Function FSD.TemporaryBuff.ActivateBuffOnController // (Native|Public|BlueprintCallable|Const) // @ game+0x1211e10
};

// Class FSD.StatTemporaryBuff
// Size: 0xc0 (Inherited: 0x70)
struct UStatTemporaryBuff : UTemporaryBuff {
	struct TMap<struct UPawnStat*, float> ModifiedStats; // 0x70(0x50)
};

// Class FSD.TentacleAnimInstance
// Size: 0xa50 (Inherited: 0x270)
struct UTentacleAnimInstance : UAnimInstance {
	struct FTentacleAnimInstanceProxy AnimInstanceProxy; // 0x270(0x7d0)
	bool UseActorRotationDuringExtension; // 0xa40(0x01)
	char pad_A41[0xf]; // 0xa41(0x0f)
};

// Class FSD.TerrainDetectComponent
// Size: 0x220 (Inherited: 0x1f0)
struct UTerrainDetectComponent : USceneComponent {
	char pad_1F0[0x8]; // 0x1f0(0x08)
	struct FMulticastInlineDelegate OnPointRemoved; // 0x1f8(0x10)
	bool StartDetectOnBeginPlay; // 0x208(0x01)
	bool OnlyDetectOnServer; // 0x209(0x01)
	bool KillActorOnPointRemoved; // 0x20a(0x01)
	char pad_20B[0x1]; // 0x20b(0x01)
	struct FVector ActiveDetectPos; // 0x20c(0x0c)
	int32_t DetectorId; // 0x218(0x04)
	char pad_21C[0x4]; // 0x21c(0x04)

	void UpdateDetectLocation(); // Function FSD.TerrainDetectComponent.UpdateDetectLocation // (Final|Native|Public|BlueprintCallable) // @ game+0x12178f0
	void StopDetect(); // Function FSD.TerrainDetectComponent.StopDetect // (Final|Native|Public|BlueprintCallable) // @ game+0x1217760
	void StartDetect(); // Function FSD.TerrainDetectComponent.StartDetect // (Final|Native|Public|BlueprintCallable) // @ game+0x1217720
};

// Class FSD.TerrainDetectBoxComponent
// Size: 0x440 (Inherited: 0x420)
struct UTerrainDetectBoxComponent : UBoxComponent {
	struct FMulticastInlineDelegate OnBoxExcavated; // 0x420(0x10)
	bool StartDetectOnBeginPlay; // 0x430(0x01)
	bool OnlyDetectOnServer; // 0x431(0x01)
	char pad_432[0x2]; // 0x432(0x02)
	int32_t NumCornersToExcavate; // 0x434(0x04)
	int32_t NumCornersExcavated; // 0x438(0x04)
	bool KillActorOnPointRemoved; // 0x43c(0x01)
	char pad_43D[0x3]; // 0x43d(0x03)

	void StartDetect(); // Function FSD.TerrainDetectBoxComponent.StartDetect // (Final|Native|Public|BlueprintCallable) // @ game+0x1217700
};

// Class FSD.TerrainDetectInterface
// Size: 0x28 (Inherited: 0x28)
struct UTerrainDetectInterface : UInterface {
};

// Class FSD.TerrainFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UTerrainFunctionLibrary : UBlueprintFunctionLibrary {

	void CreateExplosionCrater2(struct UObject* WorldContextObject, struct FVector Location, float CarveDiameter, float carveNoiseSize, float carveBurnThickness, struct FVector Normal, float NormalOffset, float NormalSqueeze, bool allowCustomBurntMaterial, bool DissolvePlatforms, struct UTerrainMaterial* overrideBurnedMaterial); // Function FSD.TerrainFunctionLibrary.CreateExplosionCrater2 // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1215fe0
	void CreateExplosionCrater(struct UObject* WorldContextObject, struct FVector Location, float CarveDiameter, float carveNoiseSize, float carveBurnThickness, bool allowCustomBurntMaterial, struct UTerrainMaterial* overrideBurnedMaterial); // Function FSD.TerrainFunctionLibrary.CreateExplosionCrater // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1216300
};

// Class FSD.ProceduralFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UProceduralFunctionLibrary : UBlueprintFunctionLibrary {

	void SpawnTerrainImpact(struct UObject* WorldContextObject, struct UFXSystemAsset* particle, struct FVector Location, struct FRotator Rotation); // Function FSD.ProceduralFunctionLibrary.SpawnTerrainImpact // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x12175a0
	struct AProceduralSetup* GetProceduralSetup(struct UObject* WorldContextObject); // Function FSD.ProceduralFunctionLibrary.GetProceduralSetup // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1216a00
	int32_t GetObjectiveXP(struct UObjective* objectiveClass, float missionLength); // Function FSD.ProceduralFunctionLibrary.GetObjectiveXP // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1216930
	int32_t GetObjectiveCredits(struct UObjective* objectiveClass, float missionLength); // Function FSD.ProceduralFunctionLibrary.GetObjectiveCredits // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1216860
	struct UBiome* GetBiome(struct AProceduralSetup* levelSetup); // Function FSD.ProceduralFunctionLibrary.GetBiome // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x12165b0
	void CreateEntrances(struct AProceduralSetup* pls, struct FRoomNode Room, int32_t exitCount, int32_t entranceCount, struct UDebrisPositioning* exitPositioning, struct UDebrisPositioning* entrancePositioning); // Function FSD.ProceduralFunctionLibrary.CreateEntrances // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1215b80
	bool AllControllersFinishedTransitionToPlay(struct UObject* WorldContextObject); // Function FSD.ProceduralFunctionLibrary.AllControllersFinishedTransitionToPlay // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1215ab0
};

// Class FSD.SmartRockTerrainMaterial
// Size: 0x30 (Inherited: 0x30)
struct USmartRockTerrainMaterial : UTerrainMaterialBase {
};

// Class FSD.TerrainMaterial
// Size: 0x220 (Inherited: 0xa0)
struct UTerrainMaterial : UTerrainMaterialCore {
	char Collide : 1; // 0xa0(0x01)
	char Diggable : 1; // 0xa0(0x01)
	char CanBeDrilled : 1; // 0xa0(0x01)
	char ExplosionProof : 1; // 0xa0(0x01)
	char MeltsInFire : 1; // 0xa0(0x01)
	char PlatformDissolvable : 1; // 0xa0(0x01)
	char pad_A0_6 : 2; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
	struct UResourceData* ResourceData; // 0xa8(0x08)
	int32_t HitsNeededToMine; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct TArray<struct FDecalData> HitDecal; // 0xb8(0x10)
	bool CanHaveDecals; // 0xc8(0x01)
	char pad_C9[0x3]; // 0xc9(0x03)
	float PickAxeDigSize; // 0xcc(0x04)
	bool RemoveDebrisOnFirstHit; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
	struct UDialogDataAsset* ShoutLookAt; // 0xd8(0x08)
	struct UDialogDataAsset* ShoutOnDig; // 0xe0(0x08)
	struct UTerrainType* TerrainType; // 0xe8(0x08)
	char pad_F0[0x8]; // 0xf0(0x08)
	struct FText InGameName; // 0xf8(0x18)
	struct FText InGameDescription; // 0x110(0x18)
	char Precious : 1; // 0x128(0x01)
	char pad_128_1 : 7; // 0x128(0x01)
	char pad_129[0x7]; // 0x129(0x07)
	struct TSoftObjectPtr<struct UFXSystemAsset> DigParticles; // 0x130(0x28)
	struct TSoftObjectPtr<struct UMaterialInstance> DigParticlesMaterialOverride; // 0x158(0x28)
	struct TSoftObjectPtr<struct UFXSystemAsset> PartialDigParticles; // 0x180(0x28)
	struct TSoftObjectPtr<struct UMaterialInstance> PartialDigParticlesMaterialOverride; // 0x1a8(0x28)
	struct TSoftObjectPtr<struct USoundCue> CrumbleSound; // 0x1d0(0x28)
	struct TSoftObjectPtr<struct USoundCue> PartialMineSound; // 0x1f8(0x28)

	struct UFXSystemComponent* SpawnPartialDigParticles(struct UObject* WorldContextObject, struct FVector Location, struct FRotator Rotation); // Function FSD.TerrainMaterial.SpawnPartialDigParticles // (Final|Native|Public|HasDefaults|BlueprintCallable|Const) // @ game+0x1217470
	struct UFXSystemComponent* SpawnDigParticles(struct UObject* WorldContextObject, struct FVector Location, struct FRotator Rotation, float Density); // Function FSD.TerrainMaterial.SpawnDigParticles // (Final|Native|Public|HasDefaults|BlueprintCallable|Const) // @ game+0x12172f0
	bool IsPrecious(); // Function FSD.TerrainMaterial.IsPrecious // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1216c00
	struct UMaterialInstance* GetObjectMaterial(); // Function FSD.TerrainMaterial.GetObjectMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1216830
	struct FText GetInGameName(); // Function FSD.TerrainMaterial.GetInGameName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1216790
	struct UMaterialInstance* GetDigParticlesMaterialOverride(); // Function FSD.TerrainMaterial.GetDigParticlesMaterialOverride // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1216720
};

// Class FSD.TerrainType
// Size: 0x70 (Inherited: 0x30)
struct UTerrainType : UDataAsset {
	char Collide : 1; // 0x30(0x01)
	char Diggable : 1; // 0x30(0x01)
	char Precious : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct USoundCue* DebrisStandardSoundCue; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)
	struct TSoftObjectPtr<struct UParticleSystem> DebrisStandardParticles; // 0x48(0x28)
};

// Class FSD.TerrainMaterialsCollection
// Size: 0x60 (Inherited: 0x30)
struct UTerrainMaterialsCollection : UDataAsset {
	struct TArray<struct UTerrainMaterial*> Materials; // 0x30(0x10)
	struct TArray<struct UTerrainType*> TerrainTypes; // 0x40(0x10)
	char pad_50[0x10]; // 0x50(0x10)
};

// Class FSD.TerrainModifyingProjectile
// Size: 0x398 (Inherited: 0x340)
struct ATerrainModifyingProjectile : AProjectile {
	struct FMulticastInlineDelegate OnRevertToNormal; // 0x340(0x10)
	struct UTerrainMaterial* Terrain; // 0x350(0x08)
	struct UTerrainMaterial* OriginalGroundMaterial; // 0x358(0x08)
	struct UStaticMesh* CarveMesh; // 0x360(0x08)
	struct FVector CarveMeshScale; // 0x368(0x0c)
	struct FVector LastHitLocation; // 0x374(0x0c)
	float Radius; // 0x380(0x04)
	bool Revert; // 0x384(0x01)
	char pad_385[0x3]; // 0x385(0x03)
	float TimeOnGround; // 0x388(0x04)
	float ExpensiveCarveNoise; // 0x38c(0x04)
	char pad_390[0x8]; // 0x390(0x08)

	void Tick(float DeltaSeconds); // Function FSD.TerrainModifyingProjectile.Tick // (Native|Public) // @ game+0x12177a0
	float GetRadius(); // Function FSD.TerrainModifyingProjectile.GetRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1216a80
	void BeginPlay(); // Function FSD.TerrainModifyingProjectile.BeginPlay // (Native|Public) // @ game+0x1215b30
};

// Class FSD.TerrainPlacementComponent
// Size: 0x230 (Inherited: 0x1f0)
struct UTerrainPlacementComponent : USceneComponent {
	struct TArray<struct FTerrainPlacementBox> TerrainCheckers; // 0x1f0(0x10)
	enum class EDebrisColliderType CapsuleType; // 0x200(0x01)
	char pad_201[0x3]; // 0x201(0x03)
	struct FDebrisCapsule Capsule; // 0x204(0x20)
	int32_t BlockerIDHack; // 0x224(0x04)
	char pad_228[0x8]; // 0x228(0x08)

	void RemoveBlockers(); // Function FSD.TerrainPlacementComponent.RemoveBlockers // (Final|Native|Public|BlueprintCallable) // @ game+0x1216f80
	void AddBlockers(struct AProceduralSetup* ProceduralSetup, struct FTransform Transform); // Function FSD.TerrainPlacementComponent.AddBlockers // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1215990
};

// Class FSD.TerrainScannerItem
// Size: 0x400 (Inherited: 0x390)
struct ATerrainScannerItem : AAnimatedItem {
	int32_t TerrainScannerZoomDirection; // 0x390(0x04)
	struct FName ScannerAttachSocketName; // 0x394(0x08)
	char pad_39C[0x4]; // 0x39c(0x04)
	float TerrainScannerStartAngle; // 0x3a0(0x04)
	float TerrainScannerScale; // 0x3a4(0x04)
	float DelayedTerrainScannerScale; // 0x3a8(0x04)
	float DelayedTerrainScannerZoom; // 0x3ac(0x04)
	char pad_3B0[0x1]; // 0x3b0(0x01)
	bool IsLookingAtMap; // 0x3b1(0x01)
	bool UpdateMapToolActors; // 0x3b2(0x01)
	char pad_3B3[0x5]; // 0x3b3(0x05)
	struct TArray<struct UAnimMontage*> UseLoopsFP; // 0x3b8(0x10)
	struct UAnimMontage* EndFP; // 0x3c8(0x08)
	struct TArray<struct UAnimMontage*> UseLoopsTP; // 0x3d0(0x10)
	struct UAnimMontage* EndTP; // 0x3e0(0x08)
	char pad_3E8[0x8]; // 0x3e8(0x08)
	struct USceneComponent* TerrainScannerRoot; // 0x3f0(0x08)
	struct USceneCaptureComponent2D* TerrainScannerCapture; // 0x3f8(0x08)

	void Server_SetIslookingAtMap(bool lookingAtMap); // Function FSD.TerrainScannerItem.Server_SetIslookingAtMap // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1216fc0
	void OnRep_IsLookingAtMap(); // Function FSD.TerrainScannerItem.OnRep_IsLookingAtMap // (Final|Native|Protected) // @ game+0x1216f60
};

// Class FSD.TerrainScannerStaticMesh
// Size: 0x490 (Inherited: 0x480)
struct UTerrainScannerStaticMesh : UStaticMeshComponent {
	bool bVisibleAtBeginPlay; // 0x480(0x01)
	bool bHideOnDeath; // 0x481(0x01)
	bool bUseFogOfWar; // 0x482(0x01)
	bool bVisibleOnScanner; // 0x483(0x01)
	char pad_484[0xc]; // 0x484(0x0c)

	void SetVisibleOnScanner(bool InShowOnScanner); // Function FSD.TerrainScannerStaticMesh.SetVisibleOnScanner // (Final|Native|Public|BlueprintCallable) // @ game+0x1217190
	void OnOwnerDeath(struct UHealthComponentBase* InHealthComponent); // Function FSD.TerrainScannerStaticMesh.OnOwnerDeath // (Final|Native|Protected) // @ game+0x1216ea0
};

// Class FSD.TerrainScannerSplineMesh
// Size: 0x520 (Inherited: 0x520)
struct UTerrainScannerSplineMesh : USplineMeshComponent {
	bool bVisibleAtBeginPlay; // 0x518(0x01)
	bool bHideOnDeath; // 0x519(0x01)
	bool bUseFogOfWar; // 0x51a(0x01)
	bool bVisibleOnScanner; // 0x51b(0x01)

	void SetVisibleOnScanner(bool InShowOnScanner); // Function FSD.TerrainScannerSplineMesh.SetVisibleOnScanner // (Final|Native|Public|BlueprintCallable) // @ game+0x1217100
	void OnOwnerDeath(struct UHealthComponentBase* InHealthComponent); // Function FSD.TerrainScannerSplineMesh.OnOwnerDeath // (Final|Native|Protected) // @ game+0x1216e20
};

// Class FSD.TetherComponent
// Size: 0x158 (Inherited: 0xb0)
struct UTetherComponent : UActorComponent {
	struct FMulticastInlineDelegate OnPowerChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnConnectionChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnTetherMessage; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnConnectionRangeUpdated; // 0xe0(0x10)
	char pad_F0[0x8]; // 0xf0(0x08)
	struct UMeshComponent* TetherMesh; // 0xf8(0x08)
	bool AutoSetup; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct TArray<struct UTetherComponent*> ConnectionHistory; // 0x108(0x10)
	char pad_118[0x10]; // 0x118(0x10)
	struct FName ConnectionPointName; // 0x128(0x08)
	struct UTetherComponent* ForwardConnection; // 0x130(0x08)
	struct UTetherComponent* backConnection; // 0x138(0x08)
	float ConnectionDistance; // 0x140(0x04)
	enum class ETetherConnectionMode ConnectionMode; // 0x144(0x04)
	int32_t ConnectionPriority; // 0x148(0x04)
	int32_t ConnectionHistorySize; // 0x14c(0x04)
	bool GeneratesPower; // 0x150(0x01)
	bool PeriodicConnectionValidation; // 0x151(0x01)
	bool hasPower; // 0x152(0x01)
	char pad_153[0x5]; // 0x153(0x05)

	void ToggleConnectionValidation(bool Enabled, bool reactivate); // Function FSD.TetherComponent.ToggleConnectionValidation // (Final|Native|Public|BlueprintCallable) // @ game+0x1217820
	void StopLoSTimer(); // Function FSD.TetherComponent.StopLoSTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x1217780
	void StartLoSTimer(); // Function FSD.TetherComponent.StartLoSTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x1217740
	void SetupConnectionpoint(struct UMeshComponent* Mesh, struct FName SocketName); // Function FSD.TetherComponent.SetupConnectionpoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1217220
	void SetConnectionRange(float range); // Function FSD.TetherComponent.SetConnectionRange // (Final|Native|Public|BlueprintCallable) // @ game+0x1217080
	void ResetConnectionHistory(); // Function FSD.TetherComponent.ResetConnectionHistory // (Final|Native|Public|BlueprintCallable) // @ game+0x1216fa0
	void OnRep_HasPower(); // Function FSD.TetherComponent.OnRep_HasPower // (Final|Native|Protected) // @ game+0x1216f40
	void OnRep_ForwardConnection(); // Function FSD.TetherComponent.OnRep_ForwardConnection // (Final|Native|Protected) // @ game+0x1216f20
	void OnRep_BackConnection(); // Function FSD.TetherComponent.OnRep_BackConnection // (Final|Native|Protected) // @ game+0x1216f20
	void MessageTetherLine(struct FName Message, float Delay, enum class ETetherMessageDirection messageDirection); // Function FSD.TetherComponent.MessageTetherLine // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1216d10
	void MessageBody(struct FTetherMessageSettings Message); // Function FSD.TetherComponent.MessageBody // (Final|Native|Protected|HasOutParms) // @ game+0x1216c70
	bool IsStartOfLine(); // Function FSD.TetherComponent.IsStartOfLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1216c30
	bool IsFullyConnected(); // Function FSD.TetherComponent.IsFullyConnected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1216bc0
	bool IsEndOfLine(); // Function FSD.TetherComponent.IsEndOfLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1216b80
	bool IsConnected(); // Function FSD.TetherComponent.IsConnected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1216b40
	struct UTetherComponent* GetTetherlineEnd(bool front); // Function FSD.TetherComponent.GetTetherlineEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x1216aa0
	bool GetHasPower(); // Function FSD.TetherComponent.GetHasPower // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1216770
	struct UTetherComponent* GetForwardConnection(); // Function FSD.TetherComponent.GetForwardConnection // (Final|Native|Public|BlueprintCallable) // @ game+0x1216750
	float GetConnectionRange(); // Function FSD.TetherComponent.GetConnectionRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1216700
	struct FVector GetConnectionPoint(); // Function FSD.TetherComponent.GetConnectionPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x12166c0
	struct TArray<struct UTetherComponent*> GetConnectionHistory(); // Function FSD.TetherComponent.GetConnectionHistory // (Final|Native|Public|BlueprintCallable) // @ game+0x1216630
	struct UTetherComponent* GetBackConnection(); // Function FSD.TetherComponent.GetBackConnection // (Final|Native|Public|BlueprintCallable) // @ game+0x1216590
	void DisconnectFromTetherLine(bool Deactivate); // Function FSD.TetherComponent.DisconnectFromTetherLine // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1216500
	bool ConnectToTetherLine(); // Function FSD.TetherComponent.ConnectToTetherLine // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1215b50
};

// Class FSD.Tether
// Size: 0x2b0 (Inherited: 0x260)
struct ATether : ACarriableItem {
	struct USkeletalMeshComponent* BaseMesh; // 0x260(0x08)
	struct UInstantUsable* UsableComponent; // 0x268(0x08)
	struct UCarriableComponent* Carry; // 0x270(0x08)
	struct USphereComponent* UseTrigger; // 0x278(0x08)
	struct UNiagaraComponent* TetherBeam; // 0x280(0x08)
	struct USphereComponent* PysicalCollision; // 0x288(0x08)
	struct UDamageComponent* ExplosionDamage; // 0x290(0x08)
	struct UParticleSystem* ExplosionParticle; // 0x298(0x08)
	struct USoundCue* ExplosionSound; // 0x2a0(0x08)
	bool IsOnGround; // 0x2a8(0x01)
	char pad_2A9[0x3]; // 0x2a9(0x03)
	float KnockBackForce; // 0x2ac(0x04)

	void SetIsOnGround(bool IsOnGround); // Function FSD.Tether.SetIsOnGround // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x121c380
	void OnDronePickup(); // Function FSD.Tether.OnDronePickup // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnDroneDrop(); // Function FSD.Tether.OnDroneDrop // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnClosed(); // Function FSD.Tether.OnClosed // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void Explode(); // Function FSD.Tether.Explode // (Net|Native|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x10ab220
};

// Class FSD.TetherStation
// Size: 0x240 (Inherited: 0x220)
struct ATetherStation : AActor {
	struct USceneComponent* SceneRoot; // 0x220(0x08)
	struct USkeletalMeshComponent* BaseMesh; // 0x228(0x08)
	struct AFacilityGeneratorLine* FacilityGeneratorLineType; // 0x230(0x08)
	bool AreGeneratorsReady; // 0x238(0x01)
	bool FacilityActive; // 0x239(0x01)
	char pad_23A[0x6]; // 0x23a(0x06)

	void SpawnGeneratorLines(struct FTransform startL, struct FTransform startR, struct TArray<struct FTransform> endL, struct TArray<struct FTransform> endR, struct AFacilityGeneratorLine* outLineL, struct AFacilityGeneratorLine* outLineR); // Function FSD.TetherStation.SpawnGeneratorLines // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x121c490
	void SetGeneratorsReady(bool ready); // Function FSD.TetherStation.SetGeneratorsReady // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x121c2f0
	void Onrep_FacilityActive(); // Function FSD.TetherStation.Onrep_FacilityActive // (Final|Native|Private) // @ game+0x121bce0
	void OnRep_AreGeneratorsReady(); // Function FSD.TetherStation.OnRep_AreGeneratorsReady // (Final|Native|Private) // @ game+0x121bbc0
	void OnGeneratorsReady(); // Function FSD.TetherStation.OnGeneratorsReady // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnActivated(); // Function FSD.TetherStation.OnActivated // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void DisableShields(); // Function FSD.TetherStation.DisableShields // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void ActivateFacility(); // Function FSD.TetherStation.ActivateFacility // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x121afd0
};

// Class FSD.TetherAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct UTetherAnimInstance : UAnimInstance {
	bool SearchingForConnection; // 0x268(0x01)
};

// Class FSD.Throwable
// Size: 0x28 (Inherited: 0x28)
struct UThrowable : UInterface {
};

// Class FSD.ThrownGrenadeItem
// Size: 0x3b0 (Inherited: 0x338)
struct AThrownGrenadeItem : AItem {
	char pad_338[0x8]; // 0x338(0x08)
	struct FMulticastInlineDelegate OnGrenadeThrown; // 0x340(0x10)
	struct UPlayerAnimInstance* FPAnimInstance; // 0x350(0x08)
	struct UPlayerAnimInstance* TPAnimInstance; // 0x358(0x08)
	struct UItemCharacterAnimationSet* CharacterAnimationSet; // 0x360(0x08)
	struct FVector ThrowOffset; // 0x368(0x0c)
	float ThrowAngle; // 0x374(0x04)
	int32_t MaxGrenades; // 0x378(0x04)
	int32_t Grenades; // 0x37c(0x04)
	float GrenadeCooldownRemaining; // 0x380(0x04)
	enum class EThrownGrenadeItemState State; // 0x384(0x04)
	struct AGrenade* GrenadeClass; // 0x388(0x08)
	struct UGrenadeAnimationSet* DefaultGrenadeAnimationSet; // 0x390(0x08)
	char pad_398[0x8]; // 0x398(0x08)
	struct UStaticMeshComponent* GrenadeMeshInstance; // 0x3a0(0x08)
	char pad_3A8[0x1]; // 0x3a8(0x01)
	bool HasRejoinedInitialized; // 0x3a9(0x01)
	char pad_3AA[0x6]; // 0x3aa(0x06)

	void Server_ThrowGrenade(); // Function FSD.ThrownGrenadeItem.Server_ThrowGrenade // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1123bc0
	void Server_SetState(enum class EThrownGrenadeItemState itemState); // Function FSD.ThrownGrenadeItem.Server_SetState // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x121c1d0
	void Server_Resupply(float percentage); // Function FSD.ThrownGrenadeItem.Server_Resupply // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x121c150
	void ResupplyGrenades(float percentage); // Function FSD.ThrownGrenadeItem.ResupplyGrenades // (Final|Native|Public|BlueprintCallable) // @ game+0x121bd00
	void OnRep_State(); // Function FSD.ThrownGrenadeItem.OnRep_State // (Final|Native|Protected) // @ game+0x121bc40
	void OnRep_GrenadeCount(); // Function FSD.ThrownGrenadeItem.OnRep_GrenadeCount // (Final|Native|Protected) // @ game+0x121bbe0
	void OnGrenadeThrown__DelegateSignature(); // DelegateFunction FSD.ThrownGrenadeItem.OnGrenadeThrown__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnDeath(struct UHealthComponentBase* Health); // Function FSD.ThrownGrenadeItem.OnDeath // (Final|Native|Protected) // @ game+0x1182fe0
	void GrenadeThrowFinished(); // Function FSD.ThrownGrenadeItem.GrenadeThrowFinished // (Final|Native|Protected) // @ game+0x121bab0
	float GetGrenadeThrowVelocity(); // Function FSD.ThrownGrenadeItem.GetGrenadeThrowVelocity // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x121ba20
	struct FRotator GetGrenadeThrowRotation(); // Function FSD.ThrownGrenadeItem.GetGrenadeThrowRotation // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x121b9e0
	float GetGrenadeGravity(); // Function FSD.ThrownGrenadeItem.GetGrenadeGravity // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x121b9b0
	float GetGrenadeDuration(); // Function FSD.ThrownGrenadeItem.GetGrenadeDuration // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x121b980
};

// Class FSD.TickableActionBase
// Size: 0x40 (Inherited: 0x30)
struct UTickableActionBase : UBlueprintAsyncActionBase {
	char pad_30[0x10]; // 0x30(0x10)
};

// Class FSD.MiniTimerAction
// Size: 0x68 (Inherited: 0x40)
struct UMiniTimerAction : UTickableActionBase {
	struct FMulticastInlineDelegate Completed; // 0x40(0x10)
	struct FMulticastInlineDelegate OnTick; // 0x50(0x10)
	char pad_60[0x8]; // 0x60(0x08)

	void TickDelegate__DelegateSignature(float DeltaTime, float NormalizedTime); // DelegateFunction FSD.MiniTimerAction.TickDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	struct UMiniTimerAction* MiniTimer(struct UObject* WorldContext, float InDuration); // Function FSD.MiniTimerAction.MiniTimer // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x121baf0
};

// Class FSD.MultiTextCounterAction
// Size: 0xb8 (Inherited: 0x40)
struct UMultiTextCounterAction : UTickableActionBase {
	struct FMulticastInlineDelegate Completed; // 0x40(0x10)
	struct FMulticastInlineDelegate OnTick; // 0x50(0x10)
	struct UTextBlock* TotalBlock; // 0x60(0x08)
	struct FText TotalFormat; // 0x68(0x18)
	struct TArray<struct FTextCounterEntry> Entries; // 0x80(0x10)
	float CountSpeed; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
	struct USoundCue* CountingSound; // 0x98(0x08)
	struct UAudioComponent* AudioComponent; // 0xa0(0x08)
	struct UObject* WorldContext; // 0xa8(0x08)
	char pad_B0[0x8]; // 0xb0(0x08)

	void TickDelegate__DelegateSignature(); // DelegateFunction FSD.MultiTextCounterAction.TickDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	struct UMultiTextCounterAction* StartMultiTextCounter(struct UObject* InWorldContext, struct UTextBlock* InTotalBlock, struct FText InTotalFormat, float InCountSpeed, struct USoundCue* InCountingSound, struct TArray<struct FTextCounterEntry> InEntries); // Function FSD.MultiTextCounterAction.StartMultiTextCounter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x121c770
};

// Class FSD.PendingLatentActionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UPendingLatentActionLibrary : UBlueprintFunctionLibrary {

	void WaitOneFrame(struct UObject* WorldContextObject, struct FLatentActionInfo LatentInfo); // Function FSD.PendingLatentActionLibrary.WaitOneFrame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x121cc20
};

// Class FSD.MoveComponentToAction
// Size: 0xd0 (Inherited: 0x40)
struct UMoveComponentToAction : UTickableActionBase {
	struct TWeakObjectPtr<struct USceneComponent> Component; // 0x40(0x08)
	char pad_48[0x78]; // 0x48(0x78)
	struct FMulticastInlineDelegate Completed; // 0xc0(0x10)

	struct UMoveComponentToAction* EaseComponentTo(struct UObject* WorldContext, struct USceneComponent* InComponent, struct FTransform InEndTransform, enum class EEasingFunc InEasingMode, bool InWorldSpace, float InDuration); // Function FSD.MoveComponentToAction.EaseComponentTo // (Final|Native|Static|Protected|HasDefaults|BlueprintCallable) // @ game+0x121b530
	void CompletedDelegate__DelegateSignature(struct USceneComponent* Component); // DelegateFunction FSD.MoveComponentToAction.CompletedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
};

// Class FSD.TowerEventModule
// Size: 0x388 (Inherited: 0x2f0)
struct ATowerEventModule : AFSDPawn {
	char pad_2F0[0x8]; // 0x2f0(0x08)
	struct USceneComponent* Root; // 0x2f8(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x300(0x08)
	struct UEnemyHealthComponent* Health; // 0x308(0x08)
	struct UArmorHealthDamageComponent* ArmorDamage; // 0x310(0x08)
	struct UWeakpointGlowComponent* WeakpointGlow; // 0x318(0x08)
	struct UParticleSystemComponent* SmokeParticles; // 0x320(0x08)
	struct FRotator MainBodyRotation; // 0x328(0x0c)
	char pad_334[0x4]; // 0x334(0x04)
	struct USkeletalMesh* DestroyedMesh; // 0x338(0x08)
	struct USoundCue* ExplosionSound; // 0x340(0x08)
	struct UParticleSystem* ExplosionEffect; // 0x348(0x08)
	struct ATowerEventModule* PreviousModule; // 0x350(0x08)
	struct ATowerEventModule* NextModule; // 0x358(0x08)
	struct UStaticMesh* ArmorMesh; // 0x360(0x08)
	int32_t ArmorPieces; // 0x368(0x04)
	float ArmorLifetime; // 0x36c(0x04)
	float ArmorPopForce; // 0x370(0x04)
	float ArmorShedDelay; // 0x374(0x04)
	struct TArray<struct UStaticMeshComponent*> ArmorMeshes; // 0x378(0x10)

	void OnAttack(); // Function FSD.TowerEventModule.OnAttack // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void HideArmorPlates(); // Function FSD.TowerEventModule.HideArmorPlates // (Final|Native|Protected) // @ game+0x121bad0
	void DestroyArmor(); // Function FSD.TowerEventModule.DestroyArmor // (Final|Native|Protected) // @ game+0x121b480
};

// Class FSD.AimingTowerEventModule
// Size: 0x3a0 (Inherited: 0x388)
struct AAimingTowerEventModule : ATowerEventModule {
	struct FRotator AimRotation; // 0x388(0x0c)
	char pad_394[0x4]; // 0x394(0x04)
	struct AActor* CurrentTarget; // 0x398(0x08)
};

// Class FSD.TracerManager
// Size: 0xc8 (Inherited: 0x30)
struct UTracerManager : UWorldSubsystem {
	char pad_30[0x20]; // 0x30(0x20)
	float StartScale; // 0x50(0x04)
	float WhizByStartDistance; // 0x54(0x04)
	float WhizByMaxDistanceFromTrajectory; // 0x58(0x04)
	float WhizBySpeed; // 0x5c(0x04)
	char pad_60[0x68]; // 0x60(0x68)

	void AddTracer(struct FVector Origin, struct FVector Destination, float Speed, struct UParticleSystem* particle, float MinDistance, float Offset, struct UParticleSystem* Trail); // Function FSD.TracerManager.AddTracer // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x121aff0
};

// Class FSD.TrackBuilderMovement
// Size: 0xb8 (Inherited: 0xb0)
struct UTrackBuilderMovement : UActorComponent {
	float MovementSpeed; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class FSD.TrackMovementStateComponent
// Size: 0x250 (Inherited: 0x100)
struct UTrackMovementStateComponent : UCharacterStateComponent {
	struct UAudioComponent* AudioStartComponent; // 0x100(0x08)
	struct UAudioComponent* AudioDuringComponent; // 0x108(0x08)
	struct UAudioComponent* AudioStopComponent; // 0x110(0x08)
	struct USoundBase* AudioOnStart; // 0x118(0x08)
	struct USoundBase* AudioOnDuring; // 0x120(0x08)
	struct USoundBase* AudioOnStop; // 0x128(0x08)
	float AudioOnFadeOut; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
	struct UDialogDataAsset* StateUpdateShout; // 0x138(0x08)
	float StateUpdateShoutFrequencySecsMin; // 0x140(0x04)
	float StateUpdateShoutFrequencySecsMax; // 0x144(0x04)
	float AudioDuringSlidingSpeedParam; // 0x148(0x04)
	float SpeedTarget; // 0x14c(0x04)
	float SpeedMin; // 0x150(0x04)
	float SpeedMax; // 0x154(0x04)
	float AccelerationBase; // 0x158(0x04)
	float AccelerationMultiplier; // 0x15c(0x04)
	float DecelerationMultiplier; // 0x160(0x04)
	float AccelerationOnSlopeMultiplier; // 0x164(0x04)
	float DecelerationOnSlopeMultiplier; // 0x168(0x04)
	float StoppingDeceleration; // 0x16c(0x04)
	float StoppingDistance; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)
	SoftClassProperty ConnectorClass; // 0x178(0x28)
	struct AZipLineConnector* Connector; // 0x1a0(0x08)
	enum class EExitTrackMode ExitMode; // 0x1a8(0x01)
	char pad_1A9[0x3]; // 0x1a9(0x03)
	struct FPipelineMovementData TrackMovementData; // 0x1ac(0x1c)
	char pad_1C8[0x88]; // 0x1c8(0x88)

	void ServerExitMode(enum class EExitTrackMode eMode); // Function FSD.TrackMovementStateComponent.ServerExitMode // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1221360
	void ServerAddTemporaryAcceration(float Acceleration, float Duration); // Function FSD.TrackMovementStateComponent.ServerAddTemporaryAcceration // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1221260
	void OnRep_TrackMovementdata(struct FPipelineMovementData oldState); // Function FSD.TrackMovementStateComponent.OnRep_TrackMovementdata // (Final|Native|Protected|HasOutParms) // @ game+0x1220d70
	void JumpPressed(); // Function FSD.TrackMovementStateComponent.JumpPressed // (Final|Native|Protected) // @ game+0x1220a50
};

// Class FSD.TrailComponent
// Size: 0x230 (Inherited: 0x1f0)
struct UTrailComponent : USceneComponent {
	float MinRadius; // 0x1f0(0x04)
	float MinStep; // 0x1f4(0x04)
	float MaxStep; // 0x1f8(0x04)
	bool MinimizePath; // 0x1fc(0x01)
	char pad_1FD[0x3]; // 0x1fd(0x03)
	struct TArray<struct FVector> Trail; // 0x200(0x10)
	enum class ETraceTypeQuery Query; // 0x210(0x01)
	bool bDrawPath; // 0x211(0x01)
	char pad_212[0x2]; // 0x212(0x02)
	float MaxDrawDistance; // 0x214(0x04)
	float PathLineWidth; // 0x218(0x04)
	float PathNodeSize; // 0x21c(0x04)
	struct FColor DrawColor; // 0x220(0x04)
	char pad_224[0xc]; // 0x224(0x0c)

	int32_t TrailLength(); // Function FSD.TrailComponent.TrailLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1221490
	void ToggleDrawPath(bool Visible); // Function FSD.TrailComponent.ToggleDrawPath // (Final|Native|Public|BlueprintCallable) // @ game+0x1221410
	void Reset(); // Function FSD.TrailComponent.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0x1221240
	struct FVector GetTrailPoint(int32_t Index); // Function FSD.TrailComponent.GetTrailPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x12204e0
	struct FVector GetNextTrailPointFrom(struct FVector From); // Function FSD.TrailComponent.GetNextTrailPointFrom // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1220280
	int32_t GetNearestTrailIndex(struct FVector Location); // Function FSD.TrailComponent.GetNearestTrailIndex // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1220140
	struct UTrailComponent* GetNearestPlayerTrail(struct UWorld* World, struct FVector From, float MinDist, float MaxDist); // Function FSD.TrailComponent.GetNearestPlayerTrail // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1220000
	struct FColor GetDrawColor(); // Function FSD.TrailComponent.GetDrawColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x121ffb0
};

// Class FSD.TreasureBox
// Size: 0x2f0 (Inherited: 0x288)
struct ATreasureBox : ATreasureContainer {
	struct URepairableComponent* repairable; // 0x288(0x08)
	struct URepairableUsable* RepairUsable; // 0x290(0x08)
	struct USingleUsableComponent* HammeringUsable; // 0x298(0x08)
	struct UTerrainPlacementComponent* terrainPlacement; // 0x2a0(0x08)
	struct UStaticMeshComponent* MiddlePlane; // 0x2a8(0x08)
	struct USkeletalMeshComponent* BoxMesh; // 0x2b0(0x08)
	float CollectActivationDelay; // 0x2b8(0x04)
	char pad_2BC[0x4]; // 0x2bc(0x04)
	struct UAnimSequenceBase* OpenBoxAnim; // 0x2c0(0x08)
	float DelayToOpenAfterRepair; // 0x2c8(0x04)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	struct AActor* ResourceClass; // 0x2d0(0x08)
	struct UTreasureRewarder* boxRewarder; // 0x2d8(0x08)
	float HologramRotationSpeed; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	int32_t ItemsInserted; // 0x2e8(0x04)
	char pad_2EC[0x1]; // 0x2ec(0x01)
	bool IsTreasureAvailable; // 0x2ed(0x01)
	char pad_2EE[0x2]; // 0x2ee(0x02)

	void PlaceResources(struct AProceduralSetup* setup, float Radius, struct UDebrisPositioning* DebrisPositioning, struct TArray<struct FVector> locationsToAvoid, struct UCurveFloat* AvoidCostCurve); // Function FSD.TreasureBox.PlaceResources // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1220f60
	void OnUsedEvent(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.TreasureBox.OnUsedEvent // (Final|Native|Public) // @ game+0x1220ea0
	void OnRepairedEvent(struct URepairableComponent* repaired); // Function FSD.TreasureBox.OnRepairedEvent // (Final|Native|Public) // @ game+0x1220e20
	void OnHammerProgress(float Progress); // Function FSD.TreasureBox.OnHammerProgress // (Final|Native|Public) // @ game+0x1220b70
	void OnHammered(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.TreasureBox.OnHammered // (Final|Native|Public) // @ game+0x1220bf0
	void OnFullyRepairedEvent(struct URepairableComponent* repaired); // Function FSD.TreasureBox.OnFullyRepairedEvent // (Final|Native|Public) // @ game+0x1220af0
	void OnAllResourcesCollectedEvent(struct URepairableComponent* repaired); // Function FSD.TreasureBox.OnAllResourcesCollectedEvent // (Final|Native|Public) // @ game+0x1220a70
	void BP_OnCollectedTreasure(struct APlayerCharacter* collector); // Function FSD.TreasureBox.BP_OnCollectedTreasure // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void AfterRepairDelay(); // Function FSD.TreasureBox.AfterRepairDelay // (Final|Native|Public) // @ game+0x121fc80
	void ActivateCollection(); // Function FSD.TreasureBox.ActivateCollection // (Final|Native|Protected) // @ game+0x121fa40
};

// Class FSD.TreasureBoxAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UTreasureBoxAnimInstance : UAnimInstance {
	float BuildProgress; // 0x268(0x04)
	float PhysicsAlpha; // 0x26c(0x04)
	bool IsTreasureAvailable; // 0x270(0x01)
	bool IsLeftInserted; // 0x271(0x01)
	bool IsRightInserted; // 0x272(0x01)
	char pad_27B[0x5]; // 0x27b(0x05)
};

// Class FSD.TreasureFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UTreasureFunctionLibrary : UBlueprintFunctionLibrary {

	bool IsBoxInWall(struct UObject* WorldContextObject, struct AProceduralSetup* setup, float SizeX, float SizeY, float sizeZ, struct FTransform transorm); // Function FSD.TreasureFunctionLibrary.IsBoxInWall // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1220840
	bool GiveSimilarSkin(struct UObject* WorldContextObject, struct UItemSkin* targetSkin, struct UItemID* targetItem, struct UItemSkin* outGivenSkin, struct UItemID* outSkinnedItem); // Function FSD.TreasureFunctionLibrary.GiveSimilarSkin // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x12206a0
	void GiveRandomSkin(struct UObject* WorldContextObject, struct UItemSkin* outGivenSkin, struct UItemID* outSkinnedItem); // Function FSD.TreasureFunctionLibrary.GiveRandomSkin // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1220580
};

// Class FSD.TreasureRewarder
// Size: 0xb0 (Inherited: 0xb0)
struct UTreasureRewarder : UActorComponent {
};

// Class FSD.SkinTreasureRewarder
// Size: 0xc0 (Inherited: 0xb0)
struct USkinTreasureRewarder : UTreasureRewarder {
	struct UItemSkin* GivenSkin; // 0xb0(0x08)
	struct UItemID* GivenSkinID; // 0xb8(0x08)
};

// Class FSD.DrinkTreasureRewarder
// Size: 0xb8 (Inherited: 0xb0)
struct UDrinkTreasureRewarder : UTreasureRewarder {
	struct UDrinkableDataAsset* GivenDrink; // 0xb0(0x08)
};

// Class FSD.VictoryPoseRewarder
// Size: 0xc0 (Inherited: 0xb0)
struct UVictoryPoseRewarder : UTreasureRewarder {
	struct UVictoryPose* GivenPose; // 0xb0(0x08)
	struct UPlayerCharacterID* GivenCharacterID; // 0xb8(0x08)
};

// Class FSD.PickaxePartRewarder
// Size: 0xb8 (Inherited: 0xb0)
struct UPickaxePartRewarder : UTreasureRewarder {
	struct UPickaxePart* PickaxePart; // 0xb0(0x08)
};

// Class FSD.VanityItemRewarder
// Size: 0xc0 (Inherited: 0xb0)
struct UVanityItemRewarder : UTreasureRewarder {
	struct UVanityItem* GivenVanityItem; // 0xb0(0x08)
	struct UPlayerCharacterID* GivenCharacterID; // 0xb8(0x08)
};

// Class FSD.TreasureSettings
// Size: 0x158 (Inherited: 0x30)
struct UTreasureSettings : UDataAsset {
	struct TArray<struct UItemSkinSet*> SkinSets; // 0x30(0x10)
	struct TArray<struct UDrinkableDataAsset*> Drinks; // 0x40(0x10)
	struct TArray<struct UVictoryPose*> VictoryPoses; // 0x50(0x10)
	struct TArray<enum class ETreasureType> CrateTreasureTypes; // 0x60(0x10)
	struct FText CrateTreasureEmptyMsg; // 0x70(0x18)
	struct TArray<enum class ETreasureType> LostPackTreasureTypes; // 0x88(0x10)
	struct FText LostPackEmptyMsg; // 0x98(0x18)
	struct UItemAquisitionSource* CrateAquisitionSource; // 0xb0(0x08)
	struct UItemAquisitionSource* LostPackAquisitionSource; // 0xb8(0x08)
	struct FRuntimeFloatCurve TreasureChanceMissionLengthCurve; // 0xc0(0x88)
	struct TArray<struct USpecialEvent*> TreasureEvents; // 0x148(0x10)
};

// Class FSD.TreeOfVanity
// Size: 0x68 (Inherited: 0x58)
struct UTreeOfVanity : USavableDataAsset {
	struct TArray<struct FVanityNode> Nodes; // 0x58(0x10)

	void ClearNodes(); // Function FSD.TreeOfVanity.ClearNodes // (Final|Native|Public|BlueprintCallable) // @ game+0x121fe00
	void AddNode(struct UReward* Reward, int32_t NodeID, struct TArray<int32_t> ConnectedNodes, bool isStartingNode, bool isBig, struct FVector2D Position); // Function FSD.TreeOfVanity.AddNode // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x121fa60
};

// Class FSD.TreeOfVanityItemWidget
// Size: 0x278 (Inherited: 0x230)
struct UTreeOfVanityItemWidget : UUserWidget {
	struct UReward* Reward; // 0x230(0x08)
	bool bIsPrimaryReward; // 0x238(0x01)
	bool bIsStartingNode; // 0x239(0x01)
	char pad_23A[0x6]; // 0x23a(0x06)
	struct TArray<struct UTreeOfVanityItemWidget*> ConnectedNodes; // 0x240(0x10)
	int32_t NodeID; // 0x250(0x04)
	bool bIsClickable; // 0x254(0x01)
	char pad_255[0x3]; // 0x255(0x03)
	struct UReward* DefaultReward; // 0x258(0x08)
	struct TArray<struct UUserWidget*> NodeConnections; // 0x260(0x10)
	bool bIsBought; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)

	void SetIsBought(bool inIsBought); // Function FSD.TreeOfVanityItemWidget.SetIsBought // (Final|Native|Public|BlueprintCallable) // @ game+0x1228b70
	void SetData(struct UReward* InReward, bool inIsPrimaryReward, bool inIsStartingNode, struct TArray<struct UTreeOfVanityItemWidget*> inConnectedNodes, int32_t inNodeID); // Function FSD.TreeOfVanityItemWidget.SetData // (Final|Native|Public|BlueprintCallable) // @ game+0x1228810
	void OnDataUpdated(); // Function FSD.TreeOfVanityItemWidget.OnDataUpdated // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	bool GetIsBought(); // Function FSD.TreeOfVanityItemWidget.GetIsBought // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1226620
};

// Class FSD.TremorAttackComponent
// Size: 0x178 (Inherited: 0x128)
struct UTremorAttackComponent : USpecialDamageAttackComponent {
	char pad_128[0x18]; // 0x128(0x18)
	bool IsAttackActive; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)
	struct UBoxComponent* CollisionComponent; // 0x148(0x08)
	struct UParticleSystemComponent* ParticlesComponent; // 0x150(0x08)
	float InitialParticlesDelay; // 0x158(0x04)
	float PostParticleDelay; // 0x15c(0x04)
	float TargetMaxDistanceFromGround; // 0x160(0x04)
	float TimeBetweenDamageTicks; // 0x164(0x04)
	float LaunchForce; // 0x168(0x04)
	float Duration; // 0x16c(0x04)
	char pad_170[0x8]; // 0x170(0x08)

	void StopParticles(); // Function FSD.TremorAttackComponent.StopParticles // (Final|Native|Protected) // @ game+0x1229130
	void StartParticles(); // Function FSD.TremorAttackComponent.StartParticles // (Final|Native|Protected) // @ game+0x1229110
	void OnTargetExitedTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function FSD.TremorAttackComponent.OnTargetExitedTrigger // (Native|Public) // @ game+0x1228220
	void OnTargetEnteredTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult SweepResult); // Function FSD.TremorAttackComponent.OnTargetEnteredTrigger // (Native|Public|HasOutParms) // @ game+0x1228020
	void OnRep_IsAttackActive(); // Function FSD.TremorAttackComponent.OnRep_IsAttackActive // (Final|Native|Protected) // @ game+0x1228000
	bool IsInited(); // Function FSD.TremorAttackComponent.IsInited // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1227700
	void InitTremorAttack(struct UBoxComponent* Box, struct UParticleSystemComponent* Particles); // Function FSD.TremorAttackComponent.InitTremorAttack // (Final|Native|Public|BlueprintCallable) // @ game+0x1227580
};

// Class FSD.TunnelParameters
// Size: 0x50 (Inherited: 0x30)
struct UTunnelParameters : UDataAsset {
	struct UFloodFillSettings* PathfinderNoise; // 0x30(0x08)
	float PathZPenalty; // 0x38(0x04)
	float PathDirectionPenalty; // 0x3c(0x04)
	float PathEntranceAnglePenalty; // 0x40(0x04)
	float ObstacleCostScale; // 0x44(0x04)
	bool AllowBlockedEntrances; // 0x48(0x01)
	bool PickBestMatchingEntrance; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
};

// Class FSD.TunnelSegmentSetting
// Size: 0x90 (Inherited: 0x30)
struct UTunnelSegmentSetting : UDataAsset {
	struct UTerrainMaterial* Material; // 0x30(0x08)
	struct UFloodFillSettings* PathfinderNoise; // 0x38(0x08)
	struct UFloodFillSettings* CielingNoise; // 0x40(0x08)
	struct UFloodFillSettings* WallNoise; // 0x48(0x08)
	struct UFloodFillSettings* FloorNoise; // 0x50(0x08)
	struct FVector2D VRange; // 0x58(0x08)
	struct FVector2D HRange; // 0x60(0x08)
	struct FVector2D Cielingheight; // 0x68(0x08)
	struct FVector2D FloorHeight; // 0x70(0x08)
	struct FVector2D CielingNoiseRange; // 0x78(0x08)
	struct FVector2D WallNoiseRange; // 0x80(0x08)
	struct FVector2D FloorNoiseRange; // 0x88(0x08)
};

// Class FSD.TunnelSettings
// Size: 0x90 (Inherited: 0x30)
struct UTunnelSettings : UDataAsset {
	struct UTerrainMaterial* Material; // 0x30(0x08)
	struct UFloodFillSettings* PathfinderNoise; // 0x38(0x08)
	struct UFloodFillSettings* CielingNoise; // 0x40(0x08)
	struct UFloodFillSettings* WallNoise; // 0x48(0x08)
	struct UFloodFillSettings* FloorNoise; // 0x50(0x08)
	struct FVector2D VRange; // 0x58(0x08)
	struct FVector2D HRange; // 0x60(0x08)
	struct FVector2D Cielingheight; // 0x68(0x08)
	struct FVector2D FloorHeight; // 0x70(0x08)
	struct FVector2D CielingNoiseRange; // 0x78(0x08)
	struct FVector2D WallNoiseRange; // 0x80(0x08)
	struct FVector2D FloorNoiseRange; // 0x88(0x08)
};

// Class FSD.TunnelSetting
// Size: 0x70 (Inherited: 0x30)
struct UTunnelSetting : UDataAsset {
	struct UFloodFillSettings* PathfinderNoise; // 0x30(0x08)
	struct UTunnelSegmentSetting* BaseSegmentSetting; // 0x38(0x08)
	struct UTunnelSegmentSetting* TightBendSegmentSetting; // 0x40(0x08)
	struct UTunnelSegmentSetting* DirtSegmentSetting; // 0x48(0x08)
	struct UTunnelSegmentSetting* DirtOffsetSetting; // 0x50(0x08)
	struct TArray<struct FTunnelSettingItem> VariationSegments; // 0x58(0x10)
	float Weight; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.TutorialContentWidget
// Size: 0x260 (Inherited: 0x250)
struct UTutorialContentWidget : UFSDUserWidget {
	struct FMulticastInlineDelegate OnTutorialFinished; // 0x250(0x10)

	void OnTutorialFinished__DelegateSignature(struct UTutorialContentWidget* TutorialWidget); // DelegateFunction FSD.TutorialContentWidget.OnTutorialFinished__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	void OnShown(); // Function FSD.TutorialContentWidget.OnShown // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void OnRemoveWidget(); // Function FSD.TutorialContentWidget.OnRemoveWidget // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.TutorialLevelWidget
// Size: 0x278 (Inherited: 0x250)
struct UTutorialLevelWidget : UFSDUserWidget {
	char pad_250[0x8]; // 0x250(0x08)
	float DelayBetweenTutorials; // 0x258(0x04)
	char pad_25C[0x1c]; // 0x25c(0x1c)

	void ShowTutorialWidget(struct UTutorialContentWidget* TutorialWidget, bool ignoreQueue); // Function FSD.TutorialLevelWidget.ShowTutorialWidget // (Final|Native|Public) // @ game+0x1229040
	void RemoveTutorialWidget(struct UTutorialContentWidget* TutorialWidget); // Function FSD.TutorialLevelWidget.RemoveTutorialWidget // (Final|Native|Public) // @ game+0x1228790
	void RemoveAllTutorials(); // Function FSD.TutorialLevelWidget.RemoveAllTutorials // (Final|Native|Public|BlueprintCallable) // @ game+0x12285a0
	void OnTutorialFinished(struct UTutorialContentWidget* TutorialWidget); // Function FSD.TutorialLevelWidget.OnTutorialFinished // (Final|Native|Protected) // @ game+0x1228360
	void OnNewActiveTutorial(struct UTutorialContentWidget* Widget); // Function FSD.TutorialLevelWidget.OnNewActiveTutorial // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.TutorialManager
// Size: 0x260 (Inherited: 0x220)
struct ATutorialManager : AActor {
	float MinimumTimeBetweenTutorials; // 0x220(0x04)
	bool ResetTutorialsOnStart; // 0x224(0x01)
	bool ShowTutorialsDebug; // 0x225(0x01)
	char pad_226[0x2]; // 0x226(0x02)
	struct TWeakObjectPtr<struct AFSDPlayerController> PlayerController; // 0x228(0x08)
	struct TWeakObjectPtr<struct APlayerCharacter> PlayerCharacter; // 0x230(0x08)
	struct TWeakObjectPtr<struct UFSDSaveGame> SaveGame; // 0x238(0x08)
	struct TArray<struct TWeakObjectPtr<struct UTutorialComponent>> Tutorials; // 0x240(0x10)
	struct TWeakObjectPtr<struct UTutorialComponent> ActiveTutorial; // 0x250(0x08)
	char pad_258[0x8]; // 0x258(0x08)
};

// Class FSD.TutorialWidget
// Size: 0x258 (Inherited: 0x250)
struct UTutorialWidget : UFSDUserWidget {
	float RemainingVisibleTime; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)

	void Show(struct FText Text, struct FText Title, struct FText TaskText, struct UTexture2D* Image, float Duration); // Function FSD.TutorialWidget.Show // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1228da0
	void OnShow(struct FText Text, struct FText Title, struct FText TaskText, struct UTexture2D* Image); // Function FSD.TutorialWidget.OnShow // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	void OnHide(bool watched); // Function FSD.TutorialWidget.OnHide // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Hide(bool watched); // Function FSD.TutorialWidget.Hide // (Final|Native|Public|BlueprintCallable) // @ game+0x12274f0
	void ChangeHintDuration(float NewDuration); // Function FSD.TutorialWidget.ChangeHintDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x1225430
};

// Class FSD.BTTask_TunnelToTarget
// Size: 0xa8 (Inherited: 0x70)
struct UBTTask_TunnelToTarget : UBTTaskNode {
	struct FBlackboardKeySelector TargetKey; // 0x70(0x28)
	float BurrowSpeed; // 0x98(0x04)
	float BurrowDuration; // 0x9c(0x04)
	struct FFloatInterval DurationClamp; // 0xa0(0x08)
};

// Class FSD.HeightenedSenseComponent
// Size: 0xe8 (Inherited: 0xc0)
struct UHeightenedSenseComponent : UFloatPerkComponent {
	struct UPawnAffliction* HeightenSenseAffliction; // 0xc0(0x08)
	float AlertDistance; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct TArray<struct FHeightenedSenseTracker> ActiveTrackers; // 0xd0(0x10)
	bool bAfflictionActivated; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)

	void RemoveTracker(struct AActor* TrackerActor); // Function FSD.HeightenedSenseComponent.RemoveTracker // (Final|Native|Protected) // @ game+0x1228710
	void AddTracker(struct AActor* TrackerActor); // Function FSD.HeightenedSenseComponent.AddTracker // (Final|Native|Protected) // @ game+0x1224f40
};

// Class FSD.UIFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UUIFunctionLibrary : UBlueprintFunctionLibrary {

	void SetLoadoutIcon(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, int32_t loadoutIndex, int32_t IconIndex); // Function FSD.UIFunctionLibrary.SetLoadoutIcon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1228bf0
	void RemoveItemUINotification(struct UObject* WorldContextObject, struct TArray<struct UObject*> Item, bool MatchChildNotifications); // Function FSD.UIFunctionLibrary.RemoveItemUINotification // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x12285c0
	bool IsInItemUINotificationSet(struct UObject* WorldContextObject, struct UObject* Item); // Function FSD.UIFunctionLibrary.IsInItemUINotificationSet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1227640
	int64_t GetUnixTimeStamp(); // Function FSD.UIFunctionLibrary.GetUnixTimeStamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x12273d0
	int32_t GetLoadoutIcon(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID, int32_t loadoutIndex); // Function FSD.UIFunctionLibrary.GetLoadoutIcon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1226ca0
	struct TArray<struct FText> FormatNewsTexts(struct TArray<struct FText> texts, int32_t RandomSeed, struct UNewsTextLists* wordList, struct UMissionNameBank* MissionNameBank); // Function FSD.UIFunctionLibrary.FormatNewsTexts // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1225860
	void ClearAllItemUINotifications(struct UObject* WorldContextObject); // Function FSD.UIFunctionLibrary.ClearAllItemUINotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1225700
	void CheckItemUINotification(struct UObject* WorldContextObject, struct TArray<struct UObject*> Item, bool HasNotification, bool MatchChildNotifications); // Function FSD.UIFunctionLibrary.CheckItemUINotification // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x12254b0
	void AddItemUINotification(struct UObject* WorldContextObject, struct TArray<struct UObject*> Item); // Function FSD.UIFunctionLibrary.AddItemUINotification // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1224e30
};

// Class FSD.UpgradableGearComponent
// Size: 0x200 (Inherited: 0xb0)
struct UUpgradableGearComponent : UActorComponent {
	struct UItemData* ItemData; // 0xb0(0x08)
	struct TArray<struct FUpgradeTier> UpgradeTiers; // 0xb8(0x10)
	struct UOverclockBank* OverclockBank; // 0xc8(0x08)
	struct TArray<struct UItemUpgrade*> AllOverclocks; // 0xd0(0x10)
	struct UTexture2D* IconLine; // 0xe0(0x08)
	struct UTexture2D* IconBG; // 0xe8(0x08)
	struct UTexture2D* IconDetailed; // 0xf0(0x08)
	struct TSoftObjectPtr<struct UTexture2D> PreviewImage; // 0xf8(0x28)
	SoftClassProperty PreviewActor; // 0x120(0x28)
	struct FText Name; // 0x148(0x18)
	struct FText Category; // 0x160(0x18)
	struct FText Description; // 0x178(0x18)
	int32_t CreditCost; // 0x190(0x04)
	char pad_194[0x4]; // 0x194(0x04)
	struct TMap<struct UResourceData*, float> ResourceCost; // 0x198(0x50)
	int32_t RequiredCharacterLevel; // 0x1e8(0x04)
	char pad_1EC[0x4]; // 0x1ec(0x04)
	struct TArray<struct FMasteryItem> masteryLevels; // 0x1f0(0x10)

	void SetGearStatText(struct FGearStatEntry Entry, struct FText Text); // Function FSD.UpgradableGearComponent.SetGearStatText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1228a00
	bool PurchaseItem(struct UObject* WorldContextObject, struct UItemID* ItemID); // Function FSD.UpgradableGearComponent.PurchaseItem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x12284c0
	bool PlayerOwnesUpgradeInAllTiers(struct AActor* itemClass, struct UObject* WorldContextObject); // Function FSD.UpgradableGearComponent.PlayerOwnesUpgradeInAllTiers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1228400
	void MirrorUpgradePreviewStatus(struct FGearStatEntry From, struct FGearStatEntry to); // Function FSD.UpgradableGearComponent.MirrorUpgradePreviewStatus // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1227e20
	bool IsUpgradeEquipped(struct AActor* itemClass, struct UItemUpgrade* Upgrade, struct AFSDPlayerState* Player); // Function FSD.UpgradableGearComponent.IsUpgradeEquipped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1227c70
	bool IsTierUnLocked(struct AActor* itemClass, int32_t tierIndex, struct AFSDPlayerState* Player, struct UPlayerCharacterID* characterID); // Function FSD.UpgradableGearComponent.IsTierUnLocked // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1227b40
	bool IsOverclockingEnabled(struct UObject* WorldContextObject, struct AFSDPlayerState* Player, struct UPlayerCharacterID* characterID, struct AActor* itemClass); // Function FSD.UpgradableGearComponent.IsOverclockingEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1227980
	bool IsItemUnlocked(struct UObject* WorldContextObject, struct UItemID* Item); // Function FSD.UpgradableGearComponent.IsItemUnlocked // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x12278c0
	bool IsItemOwned(struct UObject* WorldContextObject, struct UItemID* Item); // Function FSD.UpgradableGearComponent.IsItemOwned // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1227800
	bool IsItemEquipped(struct UObject* WorldContextObject, struct UItemID* ItemID); // Function FSD.UpgradableGearComponent.IsItemEquipped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1227740
	int32_t GetUpgradeTier(struct AActor* itemClass, struct UItemUpgrade* ItemUpgrade); // Function FSD.UpgradableGearComponent.GetUpgradeTier // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1227400
	struct FString GetSourceGearName(); // Function FSD.UpgradableGearComponent.GetSourceGearName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x12272d0
	struct TMap<struct UResourceData*, float> GetResourceCost(); // Function FSD.UpgradableGearComponent.GetResourceCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1227290
	int32_t GetRequiredCharacterLevel(); // Function FSD.UpgradableGearComponent.GetRequiredCharacterLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1227260
	struct UTexture2D* GetPreviewImage(); // Function FSD.UpgradableGearComponent.GetPreviewImage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1227230
	struct AActor* GetPreviewActorClass(); // Function FSD.UpgradableGearComponent.GetPreviewActorClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x12271f0
	struct TArray<struct UItemUpgrade*> GetOverClocks(); // Function FSD.UpgradableGearComponent.GetOverClocks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1227160
	int32_t GetMasteryProgress(struct UObject* WorldContextObject, struct UItemID* ItemID, int32_t maxMastery); // Function FSD.UpgradableGearComponent.GetMasteryProgress // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1227060
	struct TArray<struct FMasteryItem> GetMasteryLevels(struct UItemID* ItemID); // Function FSD.UpgradableGearComponent.GetMasteryLevels // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1226f10
	bool GetMasteryForLevel(struct TArray<struct FMasteryItem> masteryLevels, int32_t Level, struct FMasteryItem outLevel); // Function FSD.UpgradableGearComponent.GetMasteryForLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1226d90
	struct TArray<struct FUpgradeTier> GetItemUpgradeTiers(struct AActor* itemClass); // Function FSD.UpgradableGearComponent.GetItemUpgradeTiers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x12269c0
	enum class EItemUpgradeStatus GetItemUpgradeStatus(struct UObject* WorldContextObject, struct AActor* itemClass, struct UItemUpgrade* ItemUpgrade, struct UPlayerCharacterID* characterID); // Function FSD.UpgradableGearComponent.GetItemUpgradeStatus // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1226890
	struct TArray<struct UItemUpgrade*> GetItemUpgrades(struct AActor* itemClass, struct UItemUpgrade* upgradeClass, struct AFSDPlayerState* Player, char upgradeIndex); // Function FSD.UpgradableGearComponent.GetItemUpgrades // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1226b10
	struct AActor* GetItemPreviewClassFromActor(struct AActor* Actor); // Function FSD.UpgradableGearComponent.GetItemPreviewClassFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1226800
	struct AActor* GetItemPreviewClass(struct UItemID* ItemID); // Function FSD.UpgradableGearComponent.GetItemPreviewClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1226770
	bool GetItemMasteryForLevel(struct UItemID* ItemID, int32_t Level, struct FMasteryItem outLevel); // Function FSD.UpgradableGearComponent.GetItemMasteryForLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1226640
	struct UTexture2D* GetIconLine(); // Function FSD.UpgradableGearComponent.GetIconLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x12265f0
	struct UTexture2D* GetIconDetailed(); // Function FSD.UpgradableGearComponent.GetIconDetailed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x12265c0
	struct UTexture2D* GetIconBG(); // Function FSD.UpgradableGearComponent.GetIconBG // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1226590
	struct FText GetGearStatValue(struct FGearStatEntry Entry); // Function FSD.UpgradableGearComponent.GetGearStatValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1226380
	struct TArray<struct FGearStatEntry> GetGearStats(struct AFSDPlayerState* PlayerState, struct AActor* ActorClass); // Function FSD.UpgradableGearComponent.GetGearStats // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x12264b0
	struct FString GetGearSourceName(struct UItemID* ItemID); // Function FSD.UpgradableGearComponent.GetGearSourceName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x12262b0
	struct FText GetGearName(); // Function FSD.UpgradableGearComponent.GetGearName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1226210
	struct FText GetGearDescription(); // Function FSD.UpgradableGearComponent.GetGearDescription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1226170
	struct FText GetGearCategory(); // Function FSD.UpgradableGearComponent.GetGearCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x12260d0
	struct TArray<struct UItemUpgrade*> GetEquippedUpgrades(struct AActor* itemClass, struct AFSDPlayerState* Player); // Function FSD.UpgradableGearComponent.GetEquippedUpgrades // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1225fd0
	struct UItemUpgrade* GetEquippedUpgradeAtTier(struct AActor* itemClass, int32_t tierIndex, struct UPlayerCharacterID* characterID, struct AFSDPlayerState* Player); // Function FSD.UpgradableGearComponent.GetEquippedUpgradeAtTier // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1225ea0
	struct UItemUpgrade* GetEquippedOverclock(struct UObject* WorldContextObject, struct AActor* itemClass); // Function FSD.UpgradableGearComponent.GetEquippedOverclock // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1225de0
	struct TArray<struct UItemUpgrade*> GetEquippableOverclocks(struct UObject* WorldContextObject, struct AActor* itemClass, struct UPlayerCharacterID* characterID); // Function FSD.UpgradableGearComponent.GetEquippableOverclocks // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1225cb0
	int32_t GetCreditCost(); // Function FSD.UpgradableGearComponent.GetCreditCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1225c80
	struct TArray<struct FCraftingCost> GetCraftingCost(); // Function FSD.UpgradableGearComponent.GetCraftingCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1225c00
	int32_t GetCharacterLevelRequiredForItem(struct UItemID* ItemID); // Function FSD.UpgradableGearComponent.GetCharacterLevelRequiredForItem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1225b80
	struct TArray<struct UItemUpgrade*> GetAllUpgrades(); // Function FSD.UpgradableGearComponent.GetAllUpgrades // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1225b00
	void ClearEquippedUpgrade(struct AActor* itemClass, int32_t tierIndex, struct AFSDPlayerState* Player); // Function FSD.UpgradableGearComponent.ClearEquippedUpgrade // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1225770
	void CheckMasteryUnlocks(struct UItemID* ItemID, struct AFSDPlayerController* Player); // Function FSD.UpgradableGearComponent.CheckMasteryUnlocks // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1225650
	bool CanItemOverclock(struct UObject* WorldContextObject, struct AActor* itemClass); // Function FSD.UpgradableGearComponent.CanItemOverclock // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1225140
	bool CanAffordUpgrade(struct UObject* WorldContextObject, struct UItemUpgrade* Upgrade); // Function FSD.UpgradableGearComponent.CanAffordUpgrade // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1225080
	bool CanAffordItem(struct UObject* WorldContextObject, struct UItemID* ItemID); // Function FSD.UpgradableGearComponent.CanAffordItem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1224fc0
};

// Class FSD.UpgradableItemComponent
// Size: 0x200 (Inherited: 0x200)
struct UUpgradableItemComponent : UUpgradableGearComponent {
};

// Class FSD.UpgradableBoscoComponent
// Size: 0x200 (Inherited: 0x200)
struct UUpgradableBoscoComponent : UUpgradableGearComponent {
};

// Class FSD.UseAnimationSetting
// Size: 0x78 (Inherited: 0x30)
struct UUseAnimationSetting : UDataAsset {
	struct UAnimMontage* BeginFP; // 0x30(0x08)
	struct TArray<struct UAnimMontage*> LoopsFP; // 0x38(0x10)
	struct UAnimMontage* EndFP; // 0x48(0x08)
	struct UAnimMontage* BeginTP; // 0x50(0x08)
	struct TArray<struct UAnimMontage*> LoopsTP; // 0x58(0x10)
	struct UAnimMontage* EndTP; // 0x68(0x08)
	bool IsManuallyControlled; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class FSD.BPInstantUsable
// Size: 0x150 (Inherited: 0x150)
struct UBPInstantUsable : UInstantUsable {

	bool BPCanUse(struct APlayerCharacter* User, struct USceneComponent* UseCollider); // Function FSD.BPInstantUsable.BPCanUse // (Event|Protected|BlueprintEvent|Const) // @ game+0x158ca90
};

// Class FSD.ShieldBoostUsable
// Size: 0x150 (Inherited: 0x150)
struct UShieldBoostUsable : UInstantUsable {

	void OnCharacterBoosted(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.ShieldBoostUsable.OnCharacterBoosted // (Final|Native|Protected) // @ game+0x122f6f0
};

// Class FSD.RepairableUsable
// Size: 0x150 (Inherited: 0x150)
struct URepairableUsable : UInstantUsable {
};

// Class FSD.SingleUsableComponent
// Size: 0x1f8 (Inherited: 0x118)
struct USingleUsableComponent : UUsableComponent {
	struct FMulticastInlineDelegate OnUsedBy; // 0x118(0x10)
	struct FMulticastInlineDelegate OnUseBegin; // 0x128(0x10)
	struct FMulticastInlineDelegate OnProgress; // 0x138(0x10)
	struct FMulticastInlineDelegate OnUsableChanged; // 0x148(0x10)
	struct FMulticastInlineDelegate OnUserCountChanged; // 0x158(0x10)
	struct FMulticastInlineDelegate OnFailed; // 0x168(0x10)
	struct USoundCue* AudioBeginUse; // 0x178(0x08)
	struct USoundCue* AudioFailedUse; // 0x180(0x08)
	struct USoundCue* AudioCompletedUse; // 0x188(0x08)
	struct UDialogDataAsset* BoscoLaserpointerShout; // 0x190(0x08)
	bool CoopUse; // 0x198(0x01)
	char pad_199[0x7]; // 0x199(0x07)
	struct UPawnStat* UseSpeedStat; // 0x1a0(0x08)
	float CoopUseMultiplier; // 0x1a8(0x04)
	bool Usable; // 0x1ac(0x01)
	bool TurnOffAfterUse; // 0x1ad(0x01)
	bool MultipleUse; // 0x1ae(0x01)
	bool CancelUseOnRestrictionChange; // 0x1af(0x01)
	char pad_1B0[0x1]; // 0x1b0(0x01)
	bool bShowUsingUI; // 0x1b1(0x01)
	char pad_1B2[0x6]; // 0x1b2(0x06)
	struct TSoftObjectPtr<struct UTexture2D> UsableIcon; // 0x1b8(0x28)
	float useDuration; // 0x1e0(0x04)
	float Progress; // 0x1e4(0x04)
	float DesiredProgress; // 0x1e8(0x04)
	int32_t userCount; // 0x1ec(0x04)
	struct UAudioComponent* AudioBeginUseInstance; // 0x1f0(0x08)

	void Use(struct APlayerCharacter* User, enum class EInputKeys Key, float DeltaTime); // Function FSD.SingleUsableComponent.Use // (Final|Native|Public|BlueprintCallable) // @ game+0x122fcc0
	void SetCanUse(bool CanUse); // Function FSD.SingleUsableComponent.SetCanUse // (Final|Native|Public|BlueprintCallable) // @ game+0x122f960
	void OnRep_UserCount(); // Function FSD.SingleUsableComponent.OnRep_UserCount // (Final|Native|Protected) // @ game+0x122f810
	void OnRep_Usable(); // Function FSD.SingleUsableComponent.OnRep_Usable // (Final|Native|Protected) // @ game+0x122f7f0
	void OnRep_DesiredProgress(); // Function FSD.SingleUsableComponent.OnRep_DesiredProgress // (Final|Native|Protected) // @ game+0x122f7b0
	void Cheat_Use(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.SingleUsableComponent.Cheat_Use // (Final|Native|Public|BlueprintCallable) // @ game+0x122f200
	void All_PlayFailedAudio(); // Function FSD.SingleUsableComponent.All_PlayFailedAudio // (Net|Native|Event|NetMulticast|Protected) // @ game+0x122f110
};

// Class FSD.ContinuousUsableComponent
// Size: 0x138 (Inherited: 0x118)
struct UContinuousUsableComponent : UUsableComponent {
	struct FMulticastInlineDelegate UseTick; // 0x118(0x10)
	float TimeBetweenTicks; // 0x128(0x04)
	bool Usable; // 0x12c(0x01)
	char pad_12D[0xb]; // 0x12d(0x0b)

	void SetCanUse(bool CanUse); // Function FSD.ContinuousUsableComponent.SetCanUse // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x122f850
};

// Class FSD.OncePerPlayerUsableComponent
// Size: 0x178 (Inherited: 0x150)
struct UOncePerPlayerUsableComponent : UInstantUsable {
	struct FMulticastInlineDelegate OnUsersChangedEvent; // 0x150(0x10)
	struct TArray<struct FUniqueNetIdRepl> Users; // 0x160(0x10)
	char pad_170[0x8]; // 0x170(0x08)

	void OnUsersChanged(struct TArray<struct FUniqueNetIdRepl> userList); // Function FSD.OncePerPlayerUsableComponent.OnUsersChanged // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	void OnRep_Users(); // Function FSD.OncePerPlayerUsableComponent.OnRep_Users // (Final|Native|Protected) // @ game+0x122f830
};

// Class FSD.EventRewarderUsableComponent
// Size: 0x218 (Inherited: 0x1f8)
struct UEventRewarderUsableComponent : USingleUsableComponent {
	struct FText RewardUseText; // 0x1f8(0x18)
	char pad_210[0x8]; // 0x210(0x08)

	struct FText CreateUseText(int32_t blankSchematicCount); // Function FSD.EventRewarderUsableComponent.CreateUseText // (Event|Protected|BlueprintEvent|Const) // @ game+0x158ca90
};

// Class FSD.SpecialEventUsableComponent
// Size: 0x1f8 (Inherited: 0x1f8)
struct USpecialEventUsableComponent : USingleUsableComponent {
};

// Class FSD.ControlEnemyUsable
// Size: 0x160 (Inherited: 0x150)
struct UControlEnemyUsable : UInstantUsable {
	char pad_150[0x10]; // 0x150(0x10)
};

// Class FSD.UsableAggregator
// Size: 0xf0 (Inherited: 0xc8)
struct UUsableAggregator : UItemAggregator {
	struct FMulticastInlineDelegate OnVisibilityChanged; // 0xc8(0x10)
	struct FText UsingText; // 0xd8(0x18)

	float GetProgress(); // Function FSD.UsableAggregator.GetProgress // (Native|Public|BlueprintCallable) // @ game+0x122f4d0
};

// Class FSD.UsingStateComponent
// Size: 0x100 (Inherited: 0x100)
struct UUsingStateComponent : UCharacterStateComponent {
};

// Class FSD.ValidationFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UValidationFunctionLibrary : UBlueprintFunctionLibrary {

	void SetSelectedAssets(struct TArray<struct FString> Paths); // Function FSD.ValidationFunctionLibrary.SetSelectedAssets // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x122fa70
};

// Class FSD.ValidatorStrategy
// Size: 0x40 (Inherited: 0x28)
struct UValidatorStrategy : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class FSD.SimpleNameStrategy
// Size: 0x70 (Inherited: 0x40)
struct USimpleNameStrategy : UValidatorStrategy {
	char pad_40[0x30]; // 0x40(0x30)
};

// Class FSD.PrefixNameStrategy
// Size: 0x70 (Inherited: 0x70)
struct UPrefixNameStrategy : USimpleNameStrategy {
};

// Class FSD.PostfixNameStrategy
// Size: 0x70 (Inherited: 0x70)
struct UPostfixNameStrategy : USimpleNameStrategy {
};

// Class FSD.PreOrPostfixNameStrategy
// Size: 0x70 (Inherited: 0x70)
struct UPreOrPostfixNameStrategy : USimpleNameStrategy {
};

// Class FSD.ContainsNameStrategy
// Size: 0x70 (Inherited: 0x70)
struct UContainsNameStrategy : USimpleNameStrategy {
};

// Class FSD.NotContainsNameStrategy
// Size: 0x70 (Inherited: 0x70)
struct UNotContainsNameStrategy : USimpleNameStrategy {
};

// Class FSD.ValidDependenciesStrategy
// Size: 0x60 (Inherited: 0x40)
struct UValidDependenciesStrategy : UValidatorStrategy {
	char pad_40[0x20]; // 0x40(0x20)
};

// Class FSD.VanityAnimInstance
// Size: 0x2a0 (Inherited: 0x270)
struct UVanityAnimInstance : UAnimInstance {
	enum class EVanitySlot VanitySlot; // 0x268(0x01)
	bool ArmorCoversBeard; // 0x269(0x01)
	struct FVector ArmorChestThickness; // 0x26c(0x0c)
	struct FRotator ArmorChestRotation; // 0x278(0x0c)
	struct FVector ExternalForce; // 0x284(0x0c)
	float ExternalForceMultiplier; // 0x290(0x04)
	float MaxForce; // 0x294(0x04)
	char pad_29E[0x2]; // 0x29e(0x02)
};

// Class FSD.VanityTestCharacter
// Size: 0x520 (Inherited: 0x4c0)
struct AVanityTestCharacter : ACharacter {
	float ArmorThickness; // 0x4b8(0x04)
	float BeardThickness; // 0x4bc(0x04)
	bool ArmorCoversBeard; // 0x4c0(0x01)
	struct TMap<enum class EVanitySlot, struct FVanityTestCharacterItem> vanityItems; // 0x4c8(0x50)
	struct USkeletalMesh* WeaponMesh; // 0x518(0x08)

	void SetupVanity(); // Function FSD.VanityTestCharacter.SetupVanity // (Final|Native|Public|BlueprintCallable) // @ game+0x122fca0
};

// Class FSD.VanityCharacter
// Size: 0x2b8 (Inherited: 0x220)
struct AVanityCharacter : AActor {
	struct UChildActorComponent* ChildActorComponent; // 0x220(0x08)
	struct UAnimSequenceBase* Animation; // 0x228(0x08)
	struct USkinColorVanityItem* skinColor; // 0x230(0x08)
	struct UBeardColorVanityItem* BeardColor; // 0x238(0x08)
	struct UBeardColorVanityItem* DynamicBeardColor; // 0x240(0x08)
	struct UHeadVanityItem* Head; // 0x248(0x08)
	struct UEyeBrowsVanityItem* EyeBrows; // 0x250(0x08)
	struct USideburnsVanityItem* Sideburns; // 0x258(0x08)
	struct UMoustacheVanityItem* Moustache; // 0x260(0x08)
	struct UBeardVanityItem* Beard; // 0x268(0x08)
	struct UArmorVanityItem* Armor; // 0x270(0x08)
	struct UArmorMaterialVanityItem* ArmorColor; // 0x278(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x280(0x08)
	struct USkeletalMeshComponent* BodyMesh; // 0x288(0x08)
	struct UBeardColorVanityItem* DefaultHairColor; // 0x290(0x08)
	struct UMaterialInterface* DefaultArmorMaterial; // 0x298(0x08)
	struct AItem* itemClass; // 0x2a0(0x08)
	struct UItemSkin* Framework; // 0x2a8(0x08)
	struct UItemSkin* Paintjob; // 0x2b0(0x08)

	void DisplayVanity(); // Function FSD.VanityCharacter.DisplayVanity // (Final|Native|Public|BlueprintCallable) // @ game+0x122f2e0
	void Clean(); // Function FSD.VanityCharacter.Clean // (Final|Native|Protected|BlueprintCallable) // @ game+0x122f2c0
};

// Class FSD.IconGenerationBase
// Size: 0x240 (Inherited: 0x220)
struct AIconGenerationBase : AActor {
	struct USceneCaptureComponent2D* ActiveCaptureComponent; // 0x220(0x08)
	struct UMaterialInterface* DownScaleMaterial; // 0x228(0x08)
	char pad_230[0x10]; // 0x230(0x10)
};

// Class FSD.IconGenerationCameraKey
// Size: 0x30 (Inherited: 0x30)
struct UIconGenerationCameraKey : UDataAsset {
};

// Class FSD.IconSceneCaptureComponent
// Size: 0x880 (Inherited: 0x880)
struct UIconSceneCaptureComponent : USceneCaptureComponent2D {
	struct UIconGenerationCameraKey* CameraKey; // 0x878(0x08)
};

// Class FSD.IconGenerationCharacter
// Size: 0x278 (Inherited: 0x240)
struct AIconGenerationCharacter : AIconGenerationBase {
	struct UMaterialInterface* OrigBaseMaterial; // 0x240(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x248(0x08)
	struct USkeletalMeshComponent* BodyMesh; // 0x250(0x08)
	struct UBeardColorVanityItem* HairColor; // 0x258(0x08)
	struct UMaterialInterface* ArmorMaterial; // 0x260(0x08)
	struct TArray<struct UIconSceneCaptureComponent*> CaptureComponents; // 0x268(0x10)
};

// Class FSD.PickaxeIconSceneCaptureComponent
// Size: 0x880 (Inherited: 0x880)
struct UPickaxeIconSceneCaptureComponent : USceneCaptureComponent2D {
	bool bIsFullView; // 0x878(0x01)
	enum class EPickaxePartLocation CameraKey; // 0x879(0x01)
};

// Class FSD.IconGenerationPickaxe
// Size: 0x250 (Inherited: 0x240)
struct AIconGenerationPickaxe : AIconGenerationBase {
	struct TArray<struct UPickaxeIconSceneCaptureComponent*> CaptureComponents; // 0x240(0x10)
};

// Class FSD.WeaponIconSceneCaptureComponent
// Size: 0x880 (Inherited: 0x880)
struct UWeaponIconSceneCaptureComponent : USceneCaptureComponent2D {
	struct UIconGenerationCameraKey* CameraKey; // 0x878(0x08)
};

// Class FSD.IconGenerationWeapon
// Size: 0x250 (Inherited: 0x240)
struct AIconGenerationWeapon : AIconGenerationBase {
	struct TArray<struct UWeaponIconSceneCaptureComponent*> CaptureComponents; // 0x240(0x10)
};

// Class FSD.VanityItem
// Size: 0x1a0 (Inherited: 0x60)
struct UVanityItem : USavablePrimaryDataAsset {
	char pad_60[0x10]; // 0x60(0x10)
	struct FMulticastInlineDelegate OnUnlockFlagChanged; // 0x70(0x10)
	int32_t SortingPriority; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct FText ItemName; // 0x88(0x18)
	struct FText ItemDescription; // 0xa0(0x18)
	struct FString NotesInternal; // 0xb8(0x10)
	struct UTexture2D* Icon; // 0xc8(0x08)
	bool IsPartOfRandomization; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
	struct UIconGenerationCameraKey* IconGenerationCameraKey; // 0xd8(0x08)
	struct UDLCBase* RequiredDLC; // 0xe0(0x08)
	struct UDLCBase* CraftingRestrictionDLC; // 0xe8(0x08)
	bool bUnLockedFlag; // 0xf0(0x01)
	char pad_F1[0x3]; // 0xf1(0x03)
	int32_t CraftingPlayerRankRequired; // 0xf4(0x04)
	struct TMap<struct UResourceData*, float> CraftingCost; // 0xf8(0x50)
	int32_t CraftingCreditsCost; // 0x148(0x04)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct TSet<struct UPlayerCharacterID*> RestrictToCharacters; // 0x150(0x50)

	bool RemoveFromOwned(struct UObject* WorldContext); // Function FSD.VanityItem.RemoveFromOwned // (Final|Native|Public|BlueprintCallable) // @ game+0x12356f0
	void PreviewItem(struct AFSDPlayerState* PlayerState, bool Show); // Function FSD.VanityItem.PreviewItem // (Native|Public|BlueprintCallable|Const) // @ game+0x1235620
	void MarkAsUnLocked(); // Function FSD.VanityItem.MarkAsUnLocked // (Final|Native|Protected|BlueprintCallable) // @ game+0x12354d0
	bool IsOwned(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VanityItem.IsOwned // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x12351f0
	bool IsEquipped(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VanityItem.IsEquipped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1235130
	void GiftItem(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VanityItem.GiftItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1235070
	enum class EVanitySlot GetVanitySlot(); // Function FSD.VanityItem.GetVanitySlot // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1234fb0
	struct TArray<struct FCraftingCost> GetResourceCost(); // Function FSD.VanityItem.GetResourceCost // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1234f00
	int32_t GetRequiredPlayerRank(); // Function FSD.VanityItem.GetRequiredPlayerRank // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1234ed0
	bool GetIsUnLockedFromStart(); // Function FSD.VanityItem.GetIsUnLockedFromStart // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1234da0
	struct UTexture* GetIcon(struct UObject* WorldContextObject); // Function FSD.VanityItem.GetIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1234d10
	int32_t GetCraftingCreditsCost(); // Function FSD.VanityItem.GetCraftingCreditsCost // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1234c20
	struct FText GetCraftableName(); // Function FSD.VanityItem.GetCraftableName // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1234be0
	struct UTexture2D* GetCraftableIcon(); // Function FSD.VanityItem.GetCraftableIcon // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1234ba0
	struct FText GetCraftableDescription(); // Function FSD.VanityItem.GetCraftableDescription // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1234b60
	void CraftItem(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VanityItem.CraftItem // (Native|Public|BlueprintCallable|Const) // @ game+0x1234940
	void ClearUnLockedMark(); // Function FSD.VanityItem.ClearUnLockedMark // (Final|Native|Protected|BlueprintCallable) // @ game+0x1234900
	bool CanCraft(struct UObject* WorldContextObject); // Function FSD.VanityItem.CanCraft // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1234860
	void ApplyItemPermanently(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VanityItem.ApplyItemPermanently // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x12347a0
	void ApplyItem(struct APlayerCharacter* Player, bool isPermanent); // Function FSD.VanityItem.ApplyItem // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x12346d0
};

// Class FSD.ItemMaterialVanityItem
// Size: 0x1a8 (Inherited: 0x1a0)
struct UItemMaterialVanityItem : UVanityItem {
	struct UMaterialInterface* Material; // 0x1a0(0x08)
};

// Class FSD.SkinColorVanityItem
// Size: 0x1a8 (Inherited: 0x1a8)
struct USkinColorVanityItem : UItemMaterialVanityItem {
};

// Class FSD.BeardColorVanityItem
// Size: 0x1c8 (Inherited: 0x1a0)
struct UBeardColorVanityItem : UVanityItem {
	struct UMaterialInterface* HairColor; // 0x1a0(0x08)
	struct UMaterialInterface* EyebrowColor; // 0x1a8(0x08)
	struct UMaterialInterface* MoustacheColor; // 0x1b0(0x08)
	struct UMaterialInterface* SideburnColor; // 0x1b8(0x08)
	struct UMaterialInterface* BeardColor; // 0x1c0(0x08)
};

// Class FSD.HeadVanityItem
// Size: 0x220 (Inherited: 0x1a0)
struct UHeadVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x1a0(0x28)
	SoftClassProperty AnimInstance; // 0x1c8(0x28)
	enum class EHeadVanityType HeadVanityType; // 0x1f0(0x01)
	bool HideEyebrows; // 0x1f1(0x01)
	bool HideSideburns; // 0x1f2(0x01)
	bool HideMoustache; // 0x1f3(0x01)
	bool HideBeard; // 0x1f4(0x01)
	bool HideAll; // 0x1f5(0x01)
	bool HideHead; // 0x1f6(0x01)
	enum class ECharacterHeadMesh HeadMesh; // 0x1f7(0x01)
	struct TSoftObjectPtr<struct UMaterialInterface> MaterialOverride; // 0x1f8(0x28)
};

// Class FSD.BeardVanityItem
// Size: 0x1f8 (Inherited: 0x1a0)
struct UBeardVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x1a0(0x28)
	float BeardThickness; // 0x1c8(0x04)
	bool RequiresSlimArmor; // 0x1cc(0x01)
	bool UseHairColor; // 0x1cd(0x01)
	bool UseArmorColor; // 0x1ce(0x01)
	char pad_1CF[0x1]; // 0x1cf(0x01)
	SoftClassProperty AnimInstance; // 0x1d0(0x28)
};

// Class FSD.ArmorVanityItem
// Size: 0x290 (Inherited: 0x1a0)
struct UArmorVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x1a0(0x28)
	struct TSoftObjectPtr<struct USkeletalMesh> BeardCompatibleMesh; // 0x1c8(0x28)
	struct TSoftObjectPtr<struct USkeletalMesh> FPMesh; // 0x1f0(0x28)
	SoftClassProperty AnimInstance; // 0x218(0x28)
	bool CropBeard; // 0x240(0x01)
	char pad_241[0x3]; // 0x241(0x03)
	float ArmorThickness; // 0x244(0x04)
	struct TSoftObjectPtr<struct UMaterialInterface> MaterialOverride; // 0x248(0x28)
	bool CanOnlyUseDefaultArmorMaterial; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)
	struct UArmorMaterialVanityItem* DefaultArmorMaterial; // 0x278(0x08)
	struct TArray<struct FTattooArmorItem> Tattoos; // 0x280(0x10)

	void PreviewArmor(struct AFSDPlayerState* PlayerState, bool Show, bool useDefaultArmorMaterial); // Function FSD.ArmorVanityItem.PreviewArmor // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1235510
};

// Class FSD.ArmorMaterialVanityItem
// Size: 0x208 (Inherited: 0x1a0)
struct UArmorMaterialVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct UMaterialInterface> Material; // 0x1a0(0x28)
	struct TSoftObjectPtr<struct UMaterialInterface> IconMaterial; // 0x1c8(0x28)
	struct UArmorVanityItem* LockedToArmor; // 0x1f0(0x08)
	struct TArray<struct UArmorVanityItem*> BannedArmors; // 0x1f8(0x10)
};

// Class FSD.EyeBrowsVanityItem
// Size: 0x1f0 (Inherited: 0x1a0)
struct UEyeBrowsVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x1a0(0x28)
	SoftClassProperty AnimInstance; // 0x1c8(0x28)
};

// Class FSD.MoustacheVanityItem
// Size: 0x1f8 (Inherited: 0x1a0)
struct UMoustacheVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x1a0(0x28)
	SoftClassProperty AnimInstance; // 0x1c8(0x28)
	bool RequiresSlimArmor; // 0x1f0(0x01)
	char pad_1F1[0x7]; // 0x1f1(0x07)
};

// Class FSD.SideburnsVanityItem
// Size: 0x1f8 (Inherited: 0x1a0)
struct USideburnsVanityItem : UVanityItem {
	struct TSoftObjectPtr<struct USkeletalMesh> Mesh; // 0x1a0(0x28)
	SoftClassProperty AnimInstance; // 0x1c8(0x28)
	bool RequiresSlimArmor; // 0x1f0(0x01)
	char pad_1F1[0x7]; // 0x1f1(0x07)
};

// Class FSD.VanityTattoo
// Size: 0x70 (Inherited: 0x30)
struct UVanityTattoo : UDataAsset {
	struct TSoftObjectPtr<struct UTexture2D> Texture; // 0x30(0x28)
	struct FVector2D Location; // 0x58(0x08)
	float RotationAngle; // 0x60(0x04)
	float ScaleBase; // 0x64(0x04)
	float ScaleStretch; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class FSD.VanitySchematicBank
// Size: 0x90 (Inherited: 0x38)
struct UVanitySchematicBank : USchematicBankBase {
	struct USchematicCategory* SchematicCategory; // 0x38(0x08)
	struct TMap<struct UVanityItem*, struct FSchematicBankItem> vanityItems; // 0x40(0x50)

	void AppendItems(struct TArray<struct UVanityItem*> toArray); // Function FSD.VanitySchematicBank.AppendItems // (Final|Native|Public|HasOutParms|Const) // @ game+0x1234620
};

// Class FSD.VeinResourceData
// Size: 0x108 (Inherited: 0xf0)
struct UVeinResourceData : UResourceData {
	struct UTerrainMaterial* TerrainMaterial; // 0xf0(0x08)
	float UnitsPerLenth; // 0xf8(0x04)
	bool ScaleToResourceDistribution; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	struct UVeinResourceCreator* ResourceCreator; // 0x100(0x08)

	struct UTerrainMaterial* GetTerrainMaterial(); // Function FSD.VeinResourceData.GetTerrainMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1234f80
};

// Class FSD.VictoryPoseFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UVictoryPoseFunctionLibrary : UBlueprintFunctionLibrary {

	bool IsRandomVictoryPose(struct UVictoryPose* VictoryPose); // Function FSD.VictoryPoseFunctionLibrary.IsRandomVictoryPose // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x12352b0
	struct TArray<struct UVictoryPose*> GetOwnedVictoryPoses(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VictoryPoseFunctionLibrary.GetOwnedVictoryPoses // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1234dd0
	struct UVictoryPose* GetEquippedVictoryPose(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VictoryPoseFunctionLibrary.GetEquippedVictoryPose // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1234c50
};

// Class FSD.VictoryPose
// Size: 0x170 (Inherited: 0x60)
struct UVictoryPose : USavablePrimaryDataAsset {
	struct FText Title; // 0x60(0x18)
	struct FText Description; // 0x78(0x18)
	bool UnlockedFromStart; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct TArray<struct TSoftObjectPtr<struct UAnimSequence>> Walks; // 0x98(0x10)
	struct TSoftObjectPtr<struct UAnimSequence> pose; // 0xa8(0x28)
	SoftClassProperty Prop_Actor; // 0xd0(0x28)
	struct TSoftObjectPtr<struct UAnimSequence> Prop_Walk; // 0xf8(0x28)
	struct TSoftObjectPtr<struct UAnimSequence> Prop_Pose; // 0x120(0x28)
	struct TSoftObjectPtr<struct UAnimSequence> Prop_Idle; // 0x148(0x28)

	void Unlock(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VictoryPose.Unlock // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1236030
	void ResetUnlock(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VictoryPose.ResetUnlock // (Final|Native|Public|BlueprintCallable) // @ game+0x1235780
	bool IsUnlockedNotFromStart(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VictoryPose.IsUnlockedNotFromStart // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x12353f0
	bool IsUnlocked(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VictoryPose.IsUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1235330
	void Equip(struct UObject* WorldContextObject, struct UPlayerCharacterID* characterID); // Function FSD.VictoryPose.Equip // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1234aa0
};

// Class FSD.VictoryPoseSchematicBank
// Size: 0x90 (Inherited: 0x38)
struct UVictoryPoseSchematicBank : USchematicBankBase {
	struct USchematicCategory* SchematicCategory; // 0x38(0x08)
	struct TMap<struct UVictoryPose*, struct FSchematicBankItem> VictoryPoses; // 0x40(0x50)
};

// Class FSD.VictoryPoseSettings
// Size: 0x70 (Inherited: 0x30)
struct UVictoryPoseSettings : UDataAsset {
	struct UTexture2D* GenericVictoryPoseIcon; // 0x30(0x08)
	struct TArray<struct UVictoryPose*> LoadedVictoryPoses; // 0x38(0x10)
	struct UVictoryPose* RandomVictoryPose; // 0x48(0x08)
	struct TArray<struct UActorComponent*> ModReferencesHack; // 0x50(0x10)
	struct TArray<struct AActor*> ModProxyHack; // 0x60(0x10)

	struct TArray<struct UVictoryPose*> GetVictoryPoses(); // Function FSD.VictoryPoseSettings.GetVictoryPoses // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1234fe0
};

// Class FSD.WalkingStateComponent
// Size: 0x160 (Inherited: 0x100)
struct UWalkingStateComponent : UCharacterStateComponent {
	bool SlidingEnabled; // 0x100(0x01)
	bool ShowDebug; // 0x101(0x01)
	char pad_102[0x2]; // 0x102(0x02)
	float SlideAngle; // 0x104(0x04)
	float SlideAcceleration; // 0x108(0x04)
	float MaxSlideSpeed; // 0x10c(0x04)
	float MaxClimbDistance; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct USoundBase* AudioSliding; // 0x118(0x08)
	struct USoundBase* IceSliding; // 0x120(0x08)
	struct UAudioComponent* AudioComponentSliding; // 0x128(0x08)
	struct UAudioComponent* AudioComponentIceSliding; // 0x130(0x08)
	char pad_138[0x28]; // 0x138(0x28)

	void TrackGrindCallback(struct APlayerCharacter* User, enum class EInputKeys Key); // Function FSD.WalkingStateComponent.TrackGrindCallback // (Final|Native|Protected) // @ game+0x1235f70
	void Server_StartTrackMovement(struct UTrackBuilderMovement* InMovement); // Function FSD.WalkingStateComponent.Server_StartTrackMovement // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1235900
	void Server_SetIsSliding(bool isSliding); // Function FSD.WalkingStateComponent.Server_SetIsSliding // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1235840
	void JumpPress(); // Function FSD.WalkingStateComponent.JumpPress // (Final|Native|Public) // @ game+0x12354b0
};

// Class FSD.WeakpointGlowComponent
// Size: 0x168 (Inherited: 0xb0)
struct UWeakpointGlowComponent : UActorComponent {
	struct FName EmissiveParam; // 0xb0(0x08)
	struct TArray<struct FWeakpointChannel> Channels; // 0xb8(0x10)
	char pad_C8[0x8]; // 0xc8(0x08)
	struct FRuntimeFloatCurve WeakpointHitCurve; // 0xd0(0x88)
	struct UFSDPhysicalMaterial* WeakPointMaterial; // 0x158(0x08)
	bool AddFirstChannelAutomatically; // 0x160(0x01)
	char pad_161[0x3]; // 0x161(0x03)
	int32_t ReplaceMatIndex; // 0x164(0x04)

	bool StopLoopingGlow(int32_t aGlowID, bool aFade); // Function FSD.WeakpointGlowComponent.StopLoopingGlow // (Final|Native|Public|BlueprintCallable) // @ game+0x1235eb0
	void ShowBodypartHit(float Amount, float BaseAmount, struct UPrimitiveComponent* Component, struct UFSDPhysicalMaterial* PhysMat, struct FName BoneName); // Function FSD.WeakpointGlowComponent.ShowBodypartHit // (Final|Native|Protected|HasOutParms) // @ game+0x1235d10
	void SetUpWeakPointGlowOnMeshByBone(struct UMeshComponent* Mesh, int32_t MaterialIndex, struct FName Bone, struct UHealthComponentBase* HealthComponent); // Function FSD.WeakpointGlowComponent.SetUpWeakPointGlowOnMeshByBone // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1235bc0
	int32_t SetUpWeakPointGlowOnMesh(struct UMeshComponent* Mesh, int32_t MaterialIndex, struct UFSDPhysicalMaterial* PhysicalMaterial, struct UHealthComponentBase* HealthComponent); // Function FSD.WeakpointGlowComponent.SetUpWeakPointGlowOnMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1235a80
	void SetChannelEnabled(bool Enabled, int32_t Channel); // Function FSD.WeakpointGlowComponent.SetChannelEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x12359c0
	void EnableWeakpointRegistration(bool Enabled); // Function FSD.WeakpointGlowComponent.EnableWeakpointRegistration // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1234a10
	void All_ShowWeakPointHit(char Channel); // Function FSD.WeakpointGlowComponent.All_ShowWeakPointHit // (Net|Native|Event|NetMulticast|Protected) // @ game+0x12345a0
	void AddWeakpointGlow(bool loopIndefinitely, float loopTime, struct UCurveFloat* GrowCurve, struct UCurveFloat* FadeCurve, int32_t UniqueId, int32_t Channel); // Function FSD.WeakpointGlowComponent.AddWeakpointGlow // (Final|Native|Public|BlueprintCallable) // @ game+0x12343d0
};

// Class FSD.WeaponFireOwner
// Size: 0x28 (Inherited: 0x28)
struct UWeaponFireOwner : UInterface {

	struct APlayerCharacter* GetPlayerCharacter(); // Function FSD.WeaponFireOwner.GetPlayerCharacter // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x11624a0
	struct FQuat GetMuzzleQuat(); // Function FSD.WeaponFireOwner.GetMuzzleQuat // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x123a0c0
	struct FVector GetMuzzleLocation(); // Function FSD.WeaponFireOwner.GetMuzzleLocation // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x123a080
	bool GetIsLocallyControlled(); // Function FSD.WeaponFireOwner.GetIsLocallyControlled // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x11624d0
	bool GetIsFirstPerson(); // Function FSD.WeaponFireOwner.GetIsFirstPerson // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x123a020
};

// Class FSD.AssaultRifle
// Size: 0x700 (Inherited: 0x6e0)
struct AAssaultRifle : AAmmoDrivenWeapon {
	float KillsResetAccuracyDuration; // 0x6e0(0x04)
	bool KillsTriggersStatusEffect; // 0x6e4(0x01)
	char pad_6E5[0x13]; // 0x6e5(0x13)
	struct UStatusEffect* KillTriggeredStatusEffect; // 0x6f8(0x08)

	void OnTimerElapsed(); // Function FSD.AssaultRifle.OnTimerElapsed // (Final|Native|Protected) // @ game+0x123afe0
	void OnEnemyKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.AssaultRifle.OnEnemyKilled // (Final|Native|Protected) // @ game+0x123a4c0
	void Client_ResetAccuracy(); // Function FSD.AssaultRifle.Client_ResetAccuracy // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x1092350
};

// Class FSD.FlareGun
// Size: 0x6e0 (Inherited: 0x6e0)
struct AFlareGun : AAmmoDrivenWeapon {
};

// Class FSD.SawedOffShotgun
// Size: 0x730 (Inherited: 0x6e0)
struct ASawedOffShotgun : AAmmoDrivenWeapon {
	struct UDamageComponent* DamageComponent; // 0x6e0(0x08)
	struct UDamageComponent* ShockWaveDamageComponent; // 0x6e8(0x08)
	float FearFactorOnFire; // 0x6f0(0x04)
	float FearFactorOnFireRadius; // 0x6f4(0x04)
	bool ShotgunJumpEnabled; // 0x6f8(0x01)
	char pad_6F9[0x3]; // 0x6f9(0x03)
	float ShotgunJumpForce; // 0x6fc(0x04)
	bool ShockwaveEnabled; // 0x700(0x01)
	char pad_701[0x3]; // 0x701(0x03)
	float ShockWaveDistance; // 0x704(0x04)
	float ShockWaveRadius; // 0x708(0x04)
	float ShockWaveLength; // 0x70c(0x04)
	char pad_710[0x20]; // 0x710(0x20)

	void SetShockWaveDamageComponent(struct UDamageComponent* Component); // Function FSD.SawedOffShotgun.SetShockWaveDamageComponent // (Final|Native|Protected|BlueprintCallable) // @ game+0x123b780
};

// Class FSD.BurstWeapon
// Size: 0x718 (Inherited: 0x6e0)
struct ABurstWeapon : AAmmoDrivenWeapon {
	struct UDamageComponent* Damage; // 0x6e0(0x08)
	struct UDamageComponent* BurstFireBonusDamage; // 0x6e8(0x08)
	char pad_6F0[0x28]; // 0x6f0(0x28)

	void OnTargetDamaged(struct UHealthComponentBase* Health, float Amount, struct UPrimitiveComponent* HitComponent, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.BurstWeapon.OnTargetDamaged // (Final|Native|Protected) // @ game+0x123aa70
	void OnReadyToFire(); // Function FSD.BurstWeapon.OnReadyToFire // (Event|Public|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.Revoler
// Size: 0x6f8 (Inherited: 0x6e0)
struct ARevoler : AAmmoDrivenWeapon {
	float OnKillFearFactor; // 0x6e0(0x04)
	float OnKillFearRange; // 0x6e4(0x04)
	char pad_6E8[0x10]; // 0x6e8(0x10)

	void OnTargetKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysMat); // Function FSD.Revoler.OnTargetKilled // (Final|Native|Protected) // @ game+0x123af20
};

// Class FSD.BasicPistol
// Size: 0x6f8 (Inherited: 0x6e0)
struct ABasicPistol : AAmmoDrivenWeapon {
	float ConsecutiveHitsDamageBonus; // 0x6e0(0x04)
	char pad_6E4[0xc]; // 0x6e4(0x0c)
	float ConsecutiveHitsMaxBonus; // 0x6f0(0x04)
	char pad_6F4[0x4]; // 0x6f4(0x04)

	void OnTargetDamaged(struct UHealthComponentBase* Health, float Amount, struct UPrimitiveComponent* HitComponent, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.BasicPistol.OnTargetDamaged // (Final|Native|Protected) // @ game+0x123a920
};

// Class FSD.ElectricalSMG
// Size: 0x720 (Inherited: 0x6e0)
struct AElectricalSMG : AAmmoDrivenWeapon {
	struct UStatusEffect* AoEStatusEffect; // 0x6e0(0x08)
	struct UParticleSystem* AoEParticle; // 0x6e8(0x08)
	struct USoundCue* AoESound; // 0x6f0(0x08)
	float AoEStatusEffectChance; // 0x6f8(0x04)
	float AoEStatusEffectRange; // 0x6fc(0x04)
	char pad_700[0x20]; // 0x700(0x20)

	void OnTargetDamaged(struct UHealthComponentBase* Health, float Amount, struct UPrimitiveComponent* HitComponent, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.ElectricalSMG.OnTargetDamaged // (Final|Native|Protected) // @ game+0x123abc0
	void OnStatusEffectPushed(struct UHealthComponentBase* Health); // Function FSD.ElectricalSMG.OnStatusEffectPushed // (Final|Native|Protected) // @ game+0x123a750
	void All_OnAoETriggered(struct FVector_NetQuantize Location, struct FVector_NetQuantizeNormal Normal); // Function FSD.ElectricalSMG.All_OnAoETriggered // (Net|Native|Event|NetMulticast|Protected|Const) // @ game+0x1239c60
};

// Class FSD.AutoShotgun
// Size: 0x6f0 (Inherited: 0x6e0)
struct AAutoShotgun : AAmmoDrivenWeapon {
	char pad_6E0[0x8]; // 0x6e0(0x08)
	struct UStatusEffect* CQCKillBuff; // 0x6e8(0x08)

	void OnTargetKilled(struct AActor* Target, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.AutoShotgun.OnTargetKilled // (Final|Native|Protected) // @ game+0x123ae60
	void OnTargetDamaged(struct UHealthComponentBase* Health, float Amount, struct UPrimitiveComponent* HitComponent, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.AutoShotgun.OnTargetDamaged // (Final|Native|Protected) // @ game+0x123a7d0
};

// Class FSD.LineCutter
// Size: 0x708 (Inherited: 0x6e0)
struct ALineCutter : AAmmoDrivenWeapon {
	bool StopUsingReversesProjectile; // 0x6e0(0x01)
	bool RotateProjectileUntillStop; // 0x6e1(0x01)
	bool ExplodeLastProjectileOnNextFireAttempt; // 0x6e2(0x01)
	char pad_6E3[0x5]; // 0x6e3(0x05)
	struct TArray<struct UItemUpgrade*> upgrades; // 0x6e8(0x10)
	struct TWeakObjectPtr<struct ALineCutterProjectile> LastProjectile; // 0x6f8(0x08)
	float MinExplosiveGoodbyeActivationTimme; // 0x700(0x04)
	char pad_704[0x4]; // 0x704(0x04)

	void Server_StopRotatingProjectile(); // Function FSD.LineCutter.Server_StopRotatingProjectile // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x123b630
	void Server_ReverseLastProjectile(); // Function FSD.LineCutter.Server_ReverseLastProjectile // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x123b470
	void Server_DestroyOldProjectile(); // Function FSD.LineCutter.Server_DestroyOldProjectile // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x123b450
	void OnRep_LastProjectile(); // Function FSD.LineCutter.OnRep_LastProjectile // (Final|Native|Protected|Const) // @ game+0x8dc380
	void OnProjectileLaunched(struct AProjectileBase* Projectile); // Function FSD.LineCutter.OnProjectileLaunched // (Final|Native|Protected) // @ game+0x123a6b0
	void OnFireWhileLastProjectileAlive(struct ALineCutterProjectile* Projectile); // Function FSD.LineCutter.OnFireWhileLastProjectileAlive // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.Magazine
// Size: 0x238 (Inherited: 0x220)
struct AMagazine : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct USoundCue* ImpactGroundSound; // 0x228(0x08)
	char pad_230[0x8]; // 0x230(0x08)

	void OnItemSkinned(struct USkinEffect* Skin); // Function FSD.Magazine.OnItemSkinned // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ActorWasHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult Hit); // Function FSD.Magazine.ActorWasHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1239ad0
};

// Class FSD.WeaponHitCountEffect
// Size: 0x30 (Inherited: 0x28)
struct UWeaponHitCountEffect : UObject {
	bool UsesDamageEffects; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class FSD.WeaponHitCounterComponent
// Size: 0xd0 (Inherited: 0xb0)
struct UWeaponHitCounterComponent : UActorComponent {
	struct UWeaponHitCountEffect* HitEffect; // 0xb0(0x08)
	bool RequiresWeakpointHit; // 0xb8(0x01)
	char pad_B9[0x17]; // 0xb9(0x17)

	void Server_OnReloading(); // Function FSD.WeaponHitCounterComponent.Server_OnReloading // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x116d120
	void OnTargetDamaged(struct UHealthComponentBase* Health, float Amount, struct UPrimitiveComponent* HitComponent, struct UFSDPhysicalMaterial* PhysicalMaterial); // Function FSD.WeaponHitCounterComponent.OnTargetDamaged // (Final|Native|Protected) // @ game+0x123ad10
	void OnStoppedUsing(); // Function FSD.WeaponHitCounterComponent.OnStoppedUsing // (Final|Native|Protected) // @ game+0x8dc380
	void OnReloading(); // Function FSD.WeaponHitCounterComponent.OnReloading // (Final|Native|Protected) // @ game+0x123a730
	void All_ShowDamageEffects(struct TArray<struct TWeakObjectPtr<struct AActor>> Targets); // Function FSD.WeaponHitCounterComponent.All_ShowDamageEffects // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1239d10
};

// Class FSD.DamageHitCountEffect
// Size: 0x60 (Inherited: 0x30)
struct UDamageHitCountEffect : UWeaponHitCountEffect {
	float DamagePerHit; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct UDamageClass* DamageClass; // 0x38(0x08)
	struct UParticleSystem* DamageParticle; // 0x40(0x08)
	struct USoundCue* DamageSound; // 0x48(0x08)
	bool DeadBugWalkingTargetMarking; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct UStatusEffect* DeadBugWalkingSTE; // 0x58(0x08)
};

// Class FSD.StatusHitCountEffect
// Size: 0x40 (Inherited: 0x30)
struct UStatusHitCountEffect : UWeaponHitCountEffect {
	struct UStatusEffect* StatusEffect; // 0x30(0x08)
	float ChancePerHit; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class FSD.RicochetHitCountEffect
// Size: 0x30 (Inherited: 0x30)
struct URicochetHitCountEffect : UWeaponHitCountEffect {
};

// Class FSD.ChargedHitCountEffect
// Size: 0x50 (Inherited: 0x30)
struct UChargedHitCountEffect : UWeaponHitCountEffect {
	char pad_30[0x4]; // 0x30(0x04)
	float DamagePerHit; // 0x34(0x04)
	struct UDamageClass* DamageClass; // 0x38(0x08)
	struct UParticleSystem* DamageParticle; // 0x40(0x08)
	struct USoundCue* DamageSound; // 0x48(0x08)
};

// Class FSD.WeaponHitEffectComponent
// Size: 0xc0 (Inherited: 0xb0)
struct UWeaponHitEffectComponent : UActorComponent {
	float EffectChance; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct AActor* ActorToSpawn; // 0xb8(0x08)

	void Server_SpawnEffect(struct FVector_NetQuantize Location, struct FRotator Rotation); // Function FSD.WeaponHitEffectComponent.Server_SpawnEffect // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x123b540
	void OnHit(struct FHitResult HitResult, bool isAlwaysPenetrated); // Function FSD.WeaponHitEffectComponent.OnHit // (Final|Native|Protected|HasOutParms) // @ game+0x123a580
};

// Class FSD.WeightRoomSelectorLibrary
// Size: 0x28 (Inherited: 0x28)
struct UWeightRoomSelectorLibrary : UBlueprintFunctionLibrary {

	void SetupWeightedRoomSelector(struct FWeightedRoomSelector Target, struct TArray<struct URoomGenerator*> Rooms); // Function FSD.WeightRoomSelectorLibrary.SetupWeightedRoomSelector // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x123b950
	struct URoomGenerator* SelectRandomRoom(struct FWeightedRoomSelector Target, struct FRandomStream RandomStream); // Function FSD.WeightRoomSelectorLibrary.SelectRandomRoom // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x123b350
	struct URoomGenerator* GetRandomRoom(struct TArray<struct URoomGenerator*> Rooms, bool removeChosenRoom, struct FRandomStream RandomStream); // Function FSD.WeightRoomSelectorLibrary.GetRandomRoom // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x123a200
};

// Class FSD.WidgetToRenderTargetComponent
// Size: 0x190 (Inherited: 0xb0)
struct UWidgetToRenderTargetComponent : UActorComponent {
	struct UUserWidget* WidgetClass; // 0xb0(0x08)
	struct FIntPoint DrawSize; // 0xb8(0x08)
	bool bManuallyRedraw; // 0xc0(0x01)
	bool bRedrawRequested; // 0xc1(0x01)
	char pad_C2[0x2]; // 0xc2(0x02)
	float RedrawTime; // 0xc4(0x04)
	float LastWidgetRenderTime; // 0xc8(0x04)
	bool bWindowFocusable; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
	struct FIntPoint CurrentDrawSize; // 0xd0(0x08)
	bool bDrawAtDesiredSize; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	struct FVector2D Pivot; // 0xdc(0x08)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct UMaterialInterface* BaseMaterial; // 0xe8(0x08)
	struct ULocalPlayer* OwnerPlayer; // 0xf0(0x08)
	struct FLinearColor BackgroundColor; // 0xf8(0x10)
	struct FLinearColor TintColorAndOpacity; // 0x108(0x10)
	float OpacityFromTexture; // 0x118(0x04)
	bool bIsTwoSided; // 0x11c(0x01)
	bool TickWhenOffscreen; // 0x11d(0x01)
	char pad_11E[0x2]; // 0x11e(0x02)
	struct UUserWidget* Widget; // 0x120(0x08)
	char pad_128[0x20]; // 0x128(0x20)
	struct UTextureRenderTarget2D* RenderTarget; // 0x148(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x150(0x08)
	bool bEditTimeUsable; // 0x158(0x01)
	char pad_159[0x37]; // 0x159(0x37)

	void SetWidget(struct UUserWidget* Widget); // Function FSD.WidgetToRenderTargetComponent.SetWidget // (Native|Public|BlueprintCallable) // @ game+0x123b8c0
	void SetOwnerPlayer(struct ULocalPlayer* LocalPlayer); // Function FSD.WidgetToRenderTargetComponent.SetOwnerPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x123b700
	void SetBackgroundColor(struct FLinearColor NewBackgroundColor); // Function FSD.WidgetToRenderTargetComponent.SetBackgroundColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x123b680
	void RequestRedraw(); // Function FSD.WidgetToRenderTargetComponent.RequestRedraw // (Native|Public|BlueprintCallable) // @ game+0x11cf220
	struct UUserWidget* GetUserWidgetObject(); // Function FSD.WidgetToRenderTargetComponent.GetUserWidgetObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x123a370
	struct UTextureRenderTarget2D* GetRenderTarget(); // Function FSD.WidgetToRenderTargetComponent.GetRenderTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x123a340
	struct ULocalPlayer* GetOwnerPlayer(); // Function FSD.WidgetToRenderTargetComponent.GetOwnerPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x123a1d0
	struct UMaterialInstanceDynamic* GetMaterialInstance(); // Function FSD.WidgetToRenderTargetComponent.GetMaterialInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x123a050
};

// Class FSD.WindowManager
// Size: 0x190 (Inherited: 0xb0)
struct UWindowManager : UActorComponent {
	struct FMulticastInlineDelegate OnFirstWindowOpened; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnLastWindowClosed; // 0xc0(0x10)
	struct USoundCue* AudioWindowOpen; // 0xd0(0x08)
	struct TArray<struct UWindowWidget*> WindowStack; // 0xd8(0x10)
	struct TMap<struct UWindowWidget*, struct UWindowWidget*> WindowList; // 0xe8(0x50)
	struct TMap<struct UUserWidget*, struct TWeakObjectPtr<struct UUserWidget>> WidgetSingletonCache; // 0x138(0x50)
	bool ResolutionDownscaleActive; // 0x188(0x01)
	char pad_189[0x7]; // 0x189(0x07)

	void SetSingletonWidgetVisibility(struct UUserWidget* WidgetClass, enum class ESlateVisibility Visibility); // Function FSD.WindowManager.SetSingletonWidgetVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x123b800
	void ReplaceWindow(struct UWindowWidget* Window); // Function FSD.WindowManager.ReplaceWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x123b2d0
	struct UWindowWidget* OpenWindowFromClass(struct UWindowWidget* windowClass, int32_t ZOrder, bool ShowCursor); // Function FSD.WindowManager.OpenWindowFromClass // (Final|Native|Public|BlueprintCallable) // @ game+0x123b1d0
	void OpenWindow(struct UWindowWidget* Window, bool PlayAudio, bool ShowCursor); // Function FSD.WindowManager.OpenWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x123b0c0
	struct UWindowWidget* OpenSingleUseWindow(struct UWindowWidget* windowClass, int32_t ZOrder); // Function FSD.WindowManager.OpenSingleUseWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x123b000
	bool IsWindowOpen(struct UWindowWidget* Window); // Function FSD.WindowManager.IsWindowOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x123a430
	bool IsTopWindow(struct UWindowWidget* Window); // Function FSD.WindowManager.IsTopWindow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x123a3a0
	struct UUserWidget* GetOrCreateSingletonWidget(struct UUserWidget* WidgetClass, bool WidgetCreated); // Function FSD.WindowManager.GetOrCreateSingletonWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x123a100
	struct UWindowWidget* GetCurrentWindow(); // Function FSD.WindowManager.GetCurrentWindow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1239ff0
	void CloseWindow(struct UWindowWidget* Window); // Function FSD.WindowManager.CloseWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x1239e40
	void CloseTopWindow(); // Function FSD.WindowManager.CloseTopWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x1239e20
	void CloseAllWindows(); // Function FSD.WindowManager.CloseAllWindows // (Final|Native|Public|BlueprintCallable) // @ game+0x1239e00
	void CenterCursor(); // Function FSD.WindowManager.CenterCursor // (Final|Native|Protected|BlueprintCallable) // @ game+0x1239de0
	bool AnyWindowsOpen(); // Function FSD.WindowManager.AnyWindowsOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1239db0
};

// Class FSD.WoodLouse
// Size: 0x588 (Inherited: 0x3a0)
struct AWoodLouse : AEnemyDeepPathfinderCharacter {
	struct USceneComponent* RollingCenter; // 0x3a0(0x08)
	struct UPawnSensingComponent* PawnSensing; // 0x3a8(0x08)
	char pad_3B0[0x1]; // 0x3b0(0x01)
	enum class EWoodLouseState forceState; // 0x3b1(0x01)
	char pad_3B2[0x2]; // 0x3b2(0x02)
	float RollingCenterOffsetOnStanding; // 0x3b4(0x04)
	float RollingCenterOffsetOnFold; // 0x3b8(0x04)
	char pad_3BC[0x4]; // 0x3bc(0x04)
	float ChanceToWalk; // 0x3c0(0x04)
	bool DebugAngle; // 0x3c4(0x01)
	char pad_3C5[0x23]; // 0x3c5(0x23)
	struct UFakeMoverSettings* FakeMoverSettings; // 0x3e8(0x08)
	struct AProjectile* BurstProjectileClass; // 0x3f0(0x08)
	float BurstTime; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)
	struct TArray<struct UStatusEffect*> StatusEffectsOnRoll; // 0x400(0x10)
	struct FBumpPlayerHit LastHit; // 0x410(0x18)
	float TiltModifier; // 0x428(0x04)
	float BurstXOffset; // 0x42c(0x04)
	float BurstYOffset; // 0x430(0x04)
	float BurstZOffset; // 0x434(0x04)
	float HighDifficultyCustomProjectileGravity; // 0x438(0x04)
	int32_t BurstCount; // 0x43c(0x04)
	char pad_440[0x4]; // 0x440(0x04)
	bool InvounerableOnRoll; // 0x444(0x01)
	bool LockToRollMode; // 0x445(0x01)
	bool LockToWalkMode; // 0x446(0x01)
	char pad_447[0x1]; // 0x447(0x01)
	float ForgetRange; // 0x448(0x04)
	float ForgetTime; // 0x44c(0x04)
	char pad_450[0x4]; // 0x450(0x04)
	float RefreshTimeMax; // 0x454(0x04)
	float RefreshTimeMin; // 0x458(0x04)
	float BumpPower; // 0x45c(0x04)
	float DirectionalBumpPower; // 0x460(0x04)
	enum class EWoodLouseState CurrentState; // 0x464(0x01)
	char pad_465[0x23]; // 0x465(0x23)
	struct AActor* CurrentTarget; // 0x488(0x08)
	float FoldedStateMaxTime; // 0x490(0x04)
	float FoldedStateMinTime; // 0x494(0x04)
	float UnfoldedStateMaxTime; // 0x498(0x04)
	float UnflodedStateMinTime; // 0x49c(0x04)
	char pad_4A0[0x8]; // 0x4a0(0x08)
	struct USoundBase* BumpSound; // 0x4a8(0x08)
	float TimeBetweenBumpingSamePlayer; // 0x4b0(0x04)
	float MinBumpDamage; // 0x4b4(0x04)
	float MaxBumpDamage; // 0x4b8(0x04)
	float BumpDamage; // 0x4bc(0x04)
	struct UDamageClass* BumpDamageType; // 0x4c0(0x08)
	float MaxBumpPower; // 0x4c8(0x04)
	float BumpRange; // 0x4cc(0x04)
	char pad_4D0[0x4]; // 0x4d0(0x04)
	float AcceptableAngles; // 0x4d4(0x04)
	float RollSpeedModifier; // 0x4d8(0x04)
	float RollAlpha; // 0x4dc(0x04)
	float TiltAlpha; // 0x4e0(0x04)
	char pad_4E4[0x4]; // 0x4e4(0x04)
	struct USoundBase* RollingSound; // 0x4e8(0x08)
	struct FName RollingSpeedParamName; // 0x4f0(0x08)
	struct TWeakObjectPtr<struct UAudioComponent> RollingSoundComponent; // 0x4f8(0x08)
	struct UFakeMoverSettings* RollMoveSettings; // 0x500(0x08)
	struct UFakeMoverSettings* StopRollMoveSettings; // 0x508(0x08)
	struct FGameplayTagQuery TargetQuery; // 0x510(0x48)
	char pad_558[0x18]; // 0x558(0x18)
	bool RotateTowardsTarget; // 0x570(0x01)
	char pad_571[0x3]; // 0x571(0x03)
	float SeeTargetSafetyTime; // 0x574(0x04)
	char pad_578[0x4]; // 0x578(0x04)
	bool WantsToStandUp; // 0x57c(0x01)
	bool IsShooting; // 0x57d(0x01)
	bool CanStandOnAnySurface; // 0x57e(0x01)
	char pad_57F[0x9]; // 0x57f(0x09)

	void SwitchedState(enum class EWoodLouseState CurrentState); // Function FSD.WoodLouse.SwitchedState // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void StopSpecial(); // Function FSD.WoodLouse.StopSpecial // (Final|Native|Protected|BlueprintCallable) // @ game+0x123fb70
	void StartSpecial(); // Function FSD.WoodLouse.StartSpecial // (Final|Native|Protected|BlueprintCallable) // @ game+0x123fb50
	void SetWantsToStandUp(bool aWantsToStandUp); // Function FSD.WoodLouse.SetWantsToStandUp // (Final|Native|Public|BlueprintCallable) // @ game+0x123f8e0
	void SetState(enum class EWoodLouseState aState); // Function FSD.WoodLouse.SetState // (Final|Native|Protected|BlueprintCallable) // @ game+0x123f860
	void SetRotateToTarget(bool aRotateToTarget); // Function FSD.WoodLouse.SetRotateToTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x123f7d0
	void SeePawn(struct APawn* aSenPawn); // Function FSD.WoodLouse.SeePawn // (Final|Native|Protected) // @ game+0x123f3f0
	void OnRep_State(); // Function FSD.WoodLouse.OnRep_State // (Native|Protected) // @ game+0x10926c0
	void OnRep_LastHit(); // Function FSD.WoodLouse.OnRep_LastHit // (Final|Native|Protected) // @ game+0x123ee00
	enum class EWoodLouseState GetRollerState(); // Function FSD.WoodLouse.GetRollerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x123ec50
	void BumpedTarget(); // Function FSD.WoodLouse.BumpedTarget // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.WoodLouseAnimInstance
// Size: 0x430 (Inherited: 0x410)
struct UWoodLouseAnimInstance : USpiderAnimInstance {
	struct FVector2D AngleToTarget; // 0x40c(0x08)
	float InterpSpeed; // 0x414(0x04)
	float BreakRollingWhenTimeLeft; // 0x418(0x04)
	enum class EWoodLouseState RollerState; // 0x41c(0x01)
	bool IsWalking; // 0x41d(0x01)
	bool IsUpRight; // 0x41e(0x01)
	bool IsDoingSpecialAttack; // 0x41f(0x01)
	bool IsUnFolded; // 0x420(0x01)
	bool IsGroundValid; // 0x421(0x01)
	bool IsInRollState; // 0x422(0x01)
	bool IdleToDownTurnLeftLock; // 0x423(0x01)
	bool DownTurnLeftToIdleLock; // 0x424(0x01)
	bool DownWalkToDownTurnLeftLock; // 0x425(0x01)
	bool WoodlouseWalk; // 0x426(0x01)
	bool IdleToDownWalkLock; // 0x427(0x01)
	bool DownWalkToDownTurnRightLock; // 0x428(0x01)
	bool IdleToDownTurnRightLock; // 0x429(0x01)
	char pad_42E[0x2]; // 0x42e(0x02)
};

// Class FSD.YesNoPromptWidget
// Size: 0x288 (Inherited: 0x270)
struct UYesNoPromptWidget : UWindowWidget {
	bool bDestroyOnClick; // 0x270(0x01)
	bool bCloseAllWindows; // 0x271(0x01)
	char pad_272[0x2]; // 0x272(0x02)
	struct FDelegate OnClickedCallback; // 0x274(0x10)
	char pad_284[0x4]; // 0x284(0x04)

	void Show(struct FText Title, struct FText Message, struct FDelegate OnYesNoClicked); // Function FSD.YesNoPromptWidget.Show // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x123f960
	void SetMappedResources(struct TMap<struct UResourceData*, int32_t> Resources); // Function FSD.YesNoPromptWidget.SetMappedResources // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x158ca90
	void OnYesNoClickedDelegate__DelegateSignature(bool Yes); // DelegateFunction FSD.YesNoPromptWidget.OnYesNoClickedDelegate__DelegateSignature // (Public|Delegate) // @ game+0x158ca90
	void OnShow(struct FText Title, struct FText Message); // Function FSD.YesNoPromptWidget.OnShow // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x158ca90
	void OnClicked(bool Yes); // Function FSD.YesNoPromptWidget.OnClicked // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void Clicked(bool YesClicked); // Function FSD.YesNoPromptWidget.Clicked // (Final|Native|Protected|BlueprintCallable) // @ game+0x123ea80
};

// Class FSD.YesNoPromptAction
// Size: 0x68 (Inherited: 0x30)
struct UYesNoPromptAction : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Yes; // 0x30(0x10)
	struct FMulticastInlineDelegate No; // 0x40(0x10)
	struct FDelegate YesNoDelegate; // 0x50(0x10)
	struct TWeakObjectPtr<struct UYesNoPromptWidget> ActivePrompt; // 0x60(0x08)

	void YesNoOutputPin__DelegateSignature(); // DelegateFunction FSD.YesNoPromptAction.YesNoOutputPin__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x158ca90
	struct UYesNoPromptAction* PromptYesNo(struct UObject* WorldContext, struct FYesNoPromptSettings Prompt); // Function FSD.YesNoPromptAction.PromptYesNo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x123f250
	struct UYesNoPromptAction* PromptPurchase(struct UObject* WorldContext, struct FYesNoPromptSettings Prompt, struct TMap<struct UResourceData*, int32_t> Resources); // Function FSD.YesNoPromptAction.PromptPurchase // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x123ef50
	void PromptCallback(bool YesClicked); // Function FSD.YesNoPromptAction.PromptCallback // (Final|Native|Protected) // @ game+0x123eec0
};

// Class FSD.ZipLineProjectile
// Size: 0x278 (Inherited: 0x220)
struct AZipLineProjectile : AActor {
	struct UTimelineComponent* Timeline; // 0x220(0x08)
	float LightIntensity; // 0x228(0x04)
	float MaterialGlow; // 0x22c(0x04)
	struct FDelegate Callback; // 0x230(0x10)
	struct UCurveFloat* LightCurve; // 0x240(0x08)
	struct TArray<struct UPointLightComponent*> PointLights; // 0x248(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> MaterialInstances; // 0x258(0x10)
	struct UStatusEffect* OnUseStatusEffect; // 0x268(0x08)
	struct UStatusEffect* OnReleaseStatusEffect; // 0x270(0x08)

	void OnTimelineTick(float NewValue); // Function FSD.ZipLineProjectile.OnTimelineTick // (Final|Native|Protected) // @ game+0x123ee40
	void OnShoot(struct FVector Origin, struct FVector EndLocation); // Function FSD.ZipLineProjectile.OnShoot // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ZiplineLauncherComponent
// Size: 0x120 (Inherited: 0x110)
struct UZiplineLauncherComponent : UWeaponFireComponent {
	enum class ECollisionChannel HitCollisionChannel; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	float ProjectileLocationOffset; // 0x114(0x04)
	struct AZipLineProjectile* projectileClass; // 0x118(0x08)

	void Server_Fire(struct FVector_NetQuantize Origin, struct FVector_NetQuantize Destination); // Function FSD.ZiplineLauncherComponent.Server_Fire // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x123f6f0
	void All_ShowHit(); // Function FSD.ZiplineLauncherComponent.All_ShowHit // (Net|Native|Event|NetMulticast|Protected) // @ game+0x108ba50
};

// Class FSD.ZipLineItem
// Size: 0x738 (Inherited: 0x6e0)
struct AZipLineItem : AAmmoDrivenWeapon {
	float MaxDistance; // 0x6e0(0x04)
	float MinDistance; // 0x6e4(0x04)
	float MinAngle; // 0x6e8(0x04)
	float MaxAngle; // 0x6ec(0x04)
	struct FGameplayTagQuery ExcludeSurfaceTags; // 0x6f0(0x48)

	bool CanFireWeapon(struct FText FailMsg, struct UDialogDataAsset* FailShout); // Function FSD.ZipLineItem.CanFireWeapon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.AngleIndicatorWidget
// Size: 0x260 (Inherited: 0x250)
struct UAngleIndicatorWidget : UFSDUserWidget {
	float pixelsPerAngle; // 0x250(0x04)
	float AlphaFade; // 0x254(0x04)
	float MinAngle; // 0x258(0x04)
	float MaxAngle; // 0x25c(0x04)
};

// Class FSD.ZipLineConnector
// Size: 0x250 (Inherited: 0x220)
struct AZipLineConnector : AActor {
	struct TWeakObjectPtr<struct APlayerCharacter> Character; // 0x220(0x08)
	struct FVector ZipLineLocation; // 0x228(0x0c)
	struct FVector ZipLineDirection; // 0x234(0x0c)
	struct FRotator RotationOffset; // 0x240(0x0c)
	bool bSpeeding; // 0x24c(0x01)
	char pad_24D[0x3]; // 0x24d(0x03)

	void ReceiveUpdateZipLinePoint(struct FVector WorldLocation, struct FVector Directioy, bool Speeding); // Function FSD.ZipLineConnector.ReceiveUpdateZipLinePoint // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x158ca90
	void ReceiveDisconnected(); // Function FSD.ZipLineConnector.ReceiveDisconnected // (Event|Public|BlueprintEvent) // @ game+0x158ca90
	void ReceiveConnected(struct FVector WorldLocation, struct FVector Direction); // Function FSD.ZipLineConnector.ReceiveConnected // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x158ca90
};

// Class FSD.ZipLineStateComponent
// Size: 0x230 (Inherited: 0x100)
struct UZipLineStateComponent : UCharacterStateComponent {
	struct FZipLineConnectorHandler ZipLineConnector; // 0x100(0x30)
	float VerticalOffset; // 0x130(0x04)
	float HorizontalOffset; // 0x134(0x04)
	float TravelSpeed; // 0x138(0x04)
	float AccelAndDecelAlpha; // 0x13c(0x04)
	float JumpForce; // 0x140(0x04)
	float SpeedBoostActivationDuration; // 0x144(0x04)
	float SpeedBoostActivionMinAngle; // 0x148(0x04)
	float BaseSpeedBoost; // 0x14c(0x04)
	float AdditionalSpeedBoostPerAngle; // 0x150(0x04)
	float SpeedBoostCoolDownDuration; // 0x154(0x04)
	float AccelerationAlpha; // 0x158(0x04)
	float DecelerationAlpha; // 0x15c(0x04)
	float MinStartDistanceToEnd; // 0x160(0x04)
	float ReleaseDistance; // 0x164(0x04)
	bool bCanActivateSpeedBoost; // 0x168(0x01)
	bool bShowSpeedBoostActivator; // 0x169(0x01)
	char pad_16A[0x2]; // 0x16a(0x02)
	float SpeedBoostActivationProgress; // 0x16c(0x04)
	char pad_170[0x8]; // 0x170(0x08)
	struct USoundBase* AudioOnStart; // 0x178(0x08)
	struct USoundBase* AudioOnDuring; // 0x180(0x08)
	struct USoundBase* AudioOnChangingDirection; // 0x188(0x08)
	struct USoundBase* AudioOnStop; // 0x190(0x08)
	struct USoundBase* AudioOnSpeedBoostActivated; // 0x198(0x08)
	struct UDialogDataAsset* ShoutStartUsing; // 0x1a0(0x08)
	struct UDialogDataAsset* ShoutSpeedBoostActivated; // 0x1a8(0x08)
	struct TWeakObjectPtr<struct AZipLineProjectile> ZipLineProjectile; // 0x1b0(0x08)
	struct FZipLine ZipLine; // 0x1b8(0x38)
	char pad_1F0[0x14]; // 0x1f0(0x14)
	float DamageBeforeFalling; // 0x204(0x04)
	float friendlyFireModifier; // 0x208(0x04)
	float DamageResetTime; // 0x20c(0x04)
	struct UAudioComponent* AudioComponent; // 0x210(0x08)
	char pad_218[0x18]; // 0x218(0x18)

	void ServerSetSpeedBoostActivated(bool InBoostActivated); // Function FSD.ZipLineStateComponent.ServerSetSpeedBoostActivated // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x123f630
	void ServerJumpPressed(bool JumpForward); // Function FSD.ZipLineStateComponent.ServerJumpPressed // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x123f570
	void ServerForwardInputChanged(float Input); // Function FSD.ZipLineStateComponent.ServerForwardInputChanged // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x123f4c0
	void ServerChangeDirection(); // Function FSD.ZipLineStateComponent.ServerChangeDirection // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x123f470
	void ReceiveSpeedBoostDeactivated(); // Function FSD.ZipLineStateComponent.ReceiveSpeedBoostDeactivated // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void ReceiveSpeedBoostActivated(); // Function FSD.ZipLineStateComponent.ReceiveSpeedBoostActivated // (Event|Protected|BlueprintEvent) // @ game+0x158ca90
	void OnRep_ZipLine(); // Function FSD.ZipLineStateComponent.OnRep_ZipLine // (Final|Native|Protected) // @ game+0x123ee20
	void OnPlayerHit(float Damage, struct UDamageClass* DamageClass, struct AActor* DamageCauser, bool anyHealthLost); // Function FSD.ZipLineStateComponent.OnPlayerHit // (Final|Native|Protected) // @ game+0x123ecb0
	bool GetSpeedBoostActivated(); // Function FSD.ZipLineStateComponent.GetSpeedBoostActivated // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x123ec70
	struct FVector GetJumpVector(struct FVector LookVector, struct FVector CurrentVelocity); // Function FSD.ZipLineStateComponent.GetJumpVector // (Native|Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x123eb50
	void All_SpeedBoostChanged(bool bActive); // Function FSD.ZipLineStateComponent.All_SpeedBoostChanged // (Net|Native|Event|NetMulticast|Protected|NetValidate) // @ game+0x123e9c0
};

